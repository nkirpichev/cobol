 MEMBER NAME  A03P1
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03P1.
        PROCEDURE DIVISION.
            DISPLAY 'A03P1 SAYS HELLO'
            STOP RUN.
 MEMBER NAME  A03P2
 231121 IDENTIFICATION DIVISION.
 231121 PROGRAM-ID. A03P2.
 231121 AUTHOR. MAXIME.
 231121 DATE-WRITTEN. 2023/11/21.
 231121*DATE-COMPILED. 2023/11/21.
 231122*DATE-COMPILED. 2023/11/22.
 231123 DATE-COMPILED. 2023/11/23.
 231121******************************************************************
 231121* LECTURE DU FICHIER CLIENT                                      *
 231121* 231121 : MAXIME : CREATION DU FICHIER DU PROGRAMME
 231122* 231122 : MAXIME : AJOUT DES PICTURE D'EDITION ET DE LA LECTURE
 231122*                   DE FICHIER
 231123* 231123 : MAXIME : AJOUT DES BOUCLES (PERFORM...)
 231123*                   STRUCTURATION DU CODE AVEC PARAGRAPHES
 231121******************************************************************
 231121*
 231121 ENVIRONMENT DIVISION.
 231121*------
 231121 CONFIGURATION SECTION.
 231121* ON UTILISE ',' COMME SEPARATEUR DES DECIMALS
 231121 SPECIAL-NAMES.
 231121     DECIMAL-POINT IS COMMA.
 231121 INPUT-OUTPUT SECTION.
 231121 FILE-CONTROL.
 231123* ASSOCIATION DE LA CARTE DD DDCLIENT AU FICHIER FCLIENT
 231121     SELECT FCLIENT ASSIGN TO DDCLIENT
 231121                    ORGANIZATION SEQUENTIAL
 231121                    FILE STATUS IS FS.
 231121******************************************************************
 231121 DATA DIVISION.
 231121*------
 231121 FILE SECTION.
 231121* DEFINITION DU FICHIER FCLIENT AVEC DES BLOCS DE LONGU. FIXE (F)
 231121* DE 80 OCTETS DE LONG
 231121 FD FCLIENT
 231121     RECORDING MODE IS F
 231121     RECORD 80 CHARACTERS
 231121* ON NOMME CHAQUE ENREGISTREMENT "ENR-CLIENT"
 231121     DATA RECORD IS ENR-CLIENT.
 231121* PUIS ON DECRIT SA STRUCTURE
 231122* LE 01 SOUS LA FD EST LE BUFFER ||
 231121 01  ENR-CLIENT.
 231121     05 ENR-NUMCLI     PIC 9(2) .
 231121     05 ENR-NOM        PIC X(15).
 231121     05 ENR-PRENOM     PIC X(15).
 231121     05 ENR-DATE-ENT   PIC 9(8) .
 231121     05                PIC X(40).
 231123* POSSIBILITE DE FAIRE UN AUTRE MASQUE DE DESCRIPTION
 231123* MAIS A NE PAS FAIRE EN CONDITION REELLE SI ON N'A PAS
 231123* LE DROIT DE MODIFIER LA DESCRIPTION
 231123*
 231123* LE MASQUE CI-DESSOUS SERT A METTRE EN FORME LA DATE
 231121 01  ENR-CLIENT-DATE.
 231121     05 FILLER         PIC X(32).
 231123     05 ENR-DATE-DECOMP.
 231123          10 ANNEE PIC 9(4) .
 231123          10 MOIS  PIC 9(2) .
 231123          10 JOUR  PIC 9(2) .
 231121     05 FILLER         PIC X(40).
 231121*------
 231121 WORKING-STORAGE SECTION.
 231121* CETTE SECTION CONTIENT LES VARIABLES TEMPORAIRES
 231121* NECESSAIRES A L'EXECUTION DU PROGRAMME
 231121 01  FS                PIC X(2) VALUE '00'.
 231121*77  FS POSSIBLE AUSSI MAIS ANCIEN
 231123*
 231123* AJOUT D'UNE VARIABLE QUI CONTIENT LES NOMS DES MOIS SUR
 231123* TROIS CARACTERES
 231123 01  MOISNOM           PIC X(36) VALUE
 231123     'JANFEVMARAVRMAIJUNJUIAOUSEPOCTNOVDEC'.
 231123* CETTE VARIABLE EST ENSUITE REDECOUPER DANS UN TABLEAU
 231123* POUR RECUPERE LE NOM DU MOIS EN FONCTION DE SON NUMERO
 231123 01  MOISTAB REDEFINES MOISNOM.
 231123     05  MOISNOMCOURT  OCCURS 12   PIC X(3).
 231122* PICTURE D'EDITION
 231122 01  VAR-DATE-ED       PIC 9999/99/99.
 231122 01  VAR-NUM-ED        PIC ZZZ9,99.
 231122 01  VAR-SECRET-ED     PIC ***9,99.
 231122 01  VAR-BIZARRE-ED    PIC *.***,**+.
 231123* AJOUT D'UNE VARIABLE POUR SAVOIR S'IL FAUT TRAITER
 231123* L'ENREGISTREMENT
 231123 01  DO-TRAITEMENT     PIC 9(1)  VALUE 1.
 231123* AJOUT D'UNE VARIABLE DE COMPTEUR
 231123 01  COMPT-NB-ENR      PIC 9(18) VALUE 0.
 231123* AJOUT D'UNE VARIABLE D'EDITION POUR L'AFFICHAGE DU COMPTEUR
 231123 01  COMPT-NB-ENR-ED   PIC Z(17)9 .
 231123*  ON PEUT NOMMER UNE VALEUR
 231123     88  NOEL2024            VALUE '25/12/2024'
 231123*  ON PEUT AUSSI UTILISER UNE VARIABLE NON NOMMEE
 231123 01                    PIC X VALUE '0'.
 231123*  IL EST POSSIBLE DE NOMMER CETTE ZONE EGALEMENT
 231123*01 INDICATEUR-FIN-FICHIER ...
 231123*  POUR POSITIONNER LA VALEUR FIN-FICHIER IL FAUT FAIRE
 231123*  UN SET FIN-FICHIER TO TRUE
 231123*  IL NE SERA PAS POSSIBLE ENSUITE DE FAIRE SET .. TO FALSE
 231123*  POUR REMETTRE LA VARIABLE A UNE VALEUR INSIGNIFIANTE
 231123     88 FIN-FICHIER          VALUE 'F'.
 231121******************************************************************
 231122 PROCEDURE DIVISION.
 231123* LE PROGRAMME EST STRUCTURE EN TROIS PARTIES :
 231123     PERFORM DEBUT
 231123*    ON EXECUTE LE TRAITEMENT TANT QUE LA FIN DE FICHIER
 231123*    N'EST PAS ATTEINTE
 231123     PERFORM TRAITEMENT UNTIL FS = '10'
 231123     PERFORM FIN
 231123     STOP RUN.
 231123* LES LIGNES SOUS LE STOP RUN NE SERONT PAS EXECUTEES
 231123
 231123* CI-DESSOUS ON DEFINIT LES PARAGRAPHES DU PROGRAMME
 231123* -----------------------------------------------------
 231123 DEBUT.
 231122     OPEN INPUT FCLIENT.
 231122*****VERIFICATION DU FILE STATUS APRES OUVERTURE
 231122     IF FS NOT = ZEROES
 231122          DISPLAY 'ERREUR OPEN FCLIENT, FS = ' FS
 231122          STOP RUN
 231122     END-IF.
 231123     READ FCLIENT
 231123     IF FS = '10'
 231123          DISPLAY 'ATTENTION FICHIER VIDE'
 231123          MOVE 0 TO DO-TRAITEMENT
 231122     END-IF.
 231123* -----------------------------------------------------
 231123 TRAITEMENT.
 231122*****LECTURE DU FICHIER
 231122*****VERIFICATION DU FILE STATUS APRES LECTURE
 231122*    IF FS = ZEROES
 231122*         DISPLAY 'CONTENU DE L''ENREGISTREMENT : ' ENR-CLIENT
 231122*         DISPLAY 'LE NUMERO CLIENT EST ' ENR-NUMCLI
 231122*         MOVE ENR-DATE-ENT TO VAR-DATE-ED
 231122*         DISPLAY 'LE CLIENT EST ENTRE LE ' VAR-DATE-ED
 231122*    ELSE
 231122*         IF FS = '10'
 231122*              DISPLAY 'FIN DE FICHIER ATTEINTE, FS = ' FS
 231122*         ELSE
 231122*              DISPLAY 'ERREUR READ FCLIENT, FS = ' FS
 231122*              STOP RUN
 231122*         END-IF
 231122*    END-IF.
 231122*
 231123*    PERFORM UNTIL FS = '10'
 231123     IF DO-TRAITEMENT = 1
 231123           IF FS = ZEROES
 231123*          TRAITEMENT DE L'ENREGISTREMENT SI SUCCESS DE LECTURE
 231123                ADD  1            TO COMPT-NB-ENR
 231123*          FORMATAGE DE LA DATE AVEC LA VARIABLE D'EDITION
 231123                MOVE ENR-DATE-ENT TO VAR-DATE-ED
 231123*          AFFICHAGE DES INFOS DU CLIENT
 231123                DISPLAY '***** INFO CLIENT'
 231123                DISPLAY ENR-NUMCLI
 231123                DISPLAY ENR-PRENOM
 231123                DISPLAY ENR-NOM
 231123                DISPLAY VAR-DATE-ED
 231123*          AFFICHAGE DE LA DATE FORMATEE
 231123                DISPLAY JOUR '/' MOIS '/' ANNEE
 231123                DISPLAY '***** LISTING'
 231123                DISPLAY ENR-PRENOM ' ' ENR-NOM
 231123                        'NO CLIENT ' ENR-NUMCLI
 231123                        ' INSCRIT '
 231123                        'LE ' JOUR ' ' MOISNOMCOURT (MOIS) ' '
 231123                        ANNEE
 231123           ELSE
 231123                IF FS NOT = '10'
 231123                     DISPLAY 'ERREUR READ FCLIENT, FS = ' FS
 231123                     STOP RUN
 231123                ELSE
 231123                     DISPLAY 'FIN DE FICHIER ATTENTE'
 231123                END-IF
 231123           END-IF
 231122           READ FCLIENT
 231123*    END-PERFORM.
 231123     END-IF.
 231123 FIN.
 231123     DISPLAY 'FIN DE TRAITEMENT'
 231123     MOVE COMPT-NB-ENR TO COMPT-NB-ENR-ED
 231123     DISPLAY 'NOMBRE D''ENREGISTREMENTS TRAITES : '
 231123             COMPT-NB-ENR-ED
 231122*****FERMETURE DU FICHIER
 231122     CLOSE FCLIENT.
 231122*
 231122*    STOP RUN.
 MEMBER NAME  A03P3
       *
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03P3.
        AUTHOR. MAXIME.
        DATE-WRITTEN. 24/11/2023.
        DATE-COMPILED. 28/11/2023.

        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
             DECIMAL-POINT IS COMMA.

        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01  V1 PIC X(40) VALUE 'IL ETAIT UNE FOIS UN MARCHAND DE FOIES'.
       *  REPONSE A LA QUESTION D
        01  TAB-V1                  REDEFINES V1.
            05 TAB-V1-POSTE         PIC X(8)        OCCURS 5.
       *  ***********************
        01  IND-FIN-TAB-V1          PIC X(1).
            88 FIN-TAB-V1                           VALUE 'N'.
        01  TAB-TAMPON              PIC X(32).
        77  V1-NB-BLANC             PIC 9(18)       VALUE 0.
        77  NUM                     PIC 9(2).
        77  NUM-CHAR                PIC 9.
        77  COMPTE-POSTE-CHIFFRE    PIC 9(18)       VALUE 0.
        77  I                       PIC 9(18).
        77  COMPTEUR                PIC 9(18).
        77  NUM-ED-1                PIC ZZZ9.
        77  NUM-ED-2                PIC ZZZ9.
       * EXERCICES SUR LES CHAINES DE CARACTERES
        01  V2                      PIC X(10)       VALUE 'ARTHUR'.
        01  V3                      PIC X(10)       VALUE 'RIMBAUD'.
        01  V4                      PIC X(21).
        01  V5                      PIC X(24)       VALUE 'AAAAA;BBBB;CCC
       -                                                  'CC;DDD;'.
        01  V5-1                    PIC X(5).
        01  V5-2                    PIC X(5).
        01  V5-3                    PIC X(5).
        01  V5-4                    PIC X(5).
        01  V5-1-COUNT              PIC 9(2).
        01  V5-2-COUNT              PIC 9(2).
        01  V5-3-COUNT              PIC 9(2).
        01  V5-4-COUNT              PIC 9(2).
       * EXERCICES D'ARITHMETIQUE
        01  Z1                      PIC 99          VALUE 5.
        01  Z2                      PIC 9V9(3)      VALUE 3,4.
        01  Z3                      PIC S999V999    VALUE -11,68.
        01  Z4                      PIC S9(9)V9(3)  VALUE ZEROES.
       * PIC EDITION
        77  Z4-ED                   PIC ++(8)9,9(3) VALUE ZEROES.
       * AVEC ARRONDI
        01  Z1-AR                   PIC 99          VALUE 5.
        01  Z2-AR                   PIC 9V9(3)      VALUE 3,4.
        01  Z3-AR                   PIC S999V999    VALUE -11,68.
        01  Z4-AR                   PIC S9(9)V9(3)  VALUE ZEROES.
       * PIC EDITION
        77  Z4-ED-AR                PIC ++(8)9,9(3) VALUE ZEROES.
       * EXERCICES SUR LES INSTRUCTIONS CONDITIONNELLES
       *01 ZA                       PIC X           VALUE 'A'.
       *01 ZB                       PIC X           VALUE 'B'.
       *01 ZC                       PIC X           VALUE 'C'.
        01 ZACCEPT.
           05 ZA                    PIC X.
           05 ZB                    PIC X.
           05 ZC                    PIC X.
           05 FILLER                PIC X(77).
        01 ZACCEPT-EVAL-D.
           05 ZD                    PIC X.
           05 FILLER                PIC X(79).
        01 ZACCEPT-EVAL-EF.
           05 ZE                    PIC X.
           05 ZF                    PIC X.
           05 FILLER                PIC X(78).



        PROCEDURE DIVISION.
       ******************************************************************
       *    PROGRAMME                                                   *
       ******************************************************************
            PERFORM DEBUT.
            PERFORM TRAITEMENT.
            PERFORM FIN.

            STOP RUN.

       ******************************************************************
       *    ZONE DE DEFINITION DES PARAGRAPHES                          *
       ******************************************************************
        DEBUT.
            DISPLAY 'DEBUT DU PROGRAMME'
            DISPLAY ' '.

        TRAITEMENT.
       *  A COMPTER LE NOMBRE DE BLANCS DANS V1
       *  B REMPLACER 'FOI' PAR 'OIF'
       *  C REMPLACER LE PREMIER BLANC TROUVE PAR '*'
       *  D DECOMPOSER V1 EN 5 POSTES DE 8 CARACTERES
       *  E COMPTER LE NOMBRE DE BLANCS EN DEBUT DE CHAQUE POSTE
       *  F INVERSER LES CONTENUS DES POSTES 1 ET 3
       *  G DANS V1, CONVERTIR LES CARACTERES 'AEIOUY' PAR '123456'
       *  H LISTER LES POSTES CONTENANT AU MOINS UN CHIFFRE
            PERFORM TRAIT-A
            PERFORM PRINT-END-SECTION

            PERFORM TRAIT-B
            PERFORM PRINT-END-SECTION

            PERFORM TRAIT-C
            PERFORM PRINT-END-SECTION

            PERFORM TRAIT-D
            PERFORM PRINT-END-SECTION

            PERFORM TRAIT-E
            PERFORM PRINT-END-SECTION

            PERFORM TRAIT-F
            PERFORM PRINT-END-SECTION

            PERFORM TRAIT-G
            PERFORM PRINT-END-SECTION

            PERFORM TRAIT-H
            PERFORM PRINT-END-SECTION

            PERFORM TRAIT-I
            PERFORM PRINT-END-SECTION

            PERFORM TRAIT-J
            PERFORM PRINT-END-SECTION

            PERFORM TRAIT-K
            PERFORM PRINT-END-SECTION

            PERFORM TRAIT-L
            PERFORM PRINT-END-SECTION

            PERFORM TRAIT-M
            PERFORM PRINT-END-SECTION

            PERFORM TRAIT-N
            PERFORM PRINT-END-SECTION






            STOP RUN.

        TRAIT-A.
       ******************************************************************
       *       COMPTER LE NOMBRE DE BLANCS DANS V1                      *
       ******************************************************************
            MOVE 0 TO V1-NB-BLANC
            INSPECT V1 TALLYING V1-NB-BLANC FOR ALL ' '
            MOVE V1-NB-BLANC TO NUM-ED-1
            DISPLAY 'A : COMPTER LE NOMBRE DE BLANCS DANS V1'
            DISPLAY '    ' NUM-ED-1 ' BLANCS TROUVES DANS V1'.

        TRAIT-B.
       ******************************************************************
       *       REMPLACER 'FOI' PAR 'OIF'                              *
       ******************************************************************
            DISPLAY 'B : REMPLACEMENT DE ''FOI'' PAR ''OIF'' '
            INSPECT V1 REPLACING ALL 'FOI' BY 'OIF'
            PERFORM PRINT-V1.

        TRAIT-C.
       ******************************************************************
       *       REMPLACER LE PREMIER BLANC TROUVE PAR '*'                *
       ******************************************************************
            DISPLAY 'C : REMPLACEMENT DU PREMIER BLANC PAR ''*'''
            INSPECT V1 REPLACING FIRST ' ' BY '*'
            PERFORM PRINT-V1.

        TRAIT-D.
       ******************************************************************
       *       DECOMPOSER V1 EN 5 POSTES DE 8 CARACTERES                *
       ******************************************************************
       *    CETTE ETAPE EST FAITE DANS LA WORKING-STORAGE
            DISPLAY 'D : DECOMPOSITION OK'
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 5
                 MOVE I TO NUM-ED-1
                 DISPLAY '    POSTE ' NUM-ED-1 ' '
                          ''''  TAB-V1-POSTE(I) ''''
            END-PERFORM.

        TRAIT-E.
       ******************************************************************
       *       COMPTER LE NOMBRE DE BLANCS EN DEBUT DE CHAQUE POSTE
       ******************************************************************
            DISPLAY 'E : COMPTER LE NOMBRE DE BLANCS AU DEBUT'
            MOVE 0 TO I
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 5
       *         ATTENTION : IL FAUT REINITIALISER LE COMPTEUR |||
                 MOVE 0 TO V1-NB-BLANC
                 INSPECT TAB-V1-POSTE(I) TALLYING V1-NB-BLANC
                         FOR LEADING ' '
                 MOVE I TO NUM-ED-1
                 MOVE V1-NB-BLANC TO NUM-ED-2
                 DISPLAY '    POSTE ' NUM-ED-1 ' '
                          '''' TAB-V1-POSTE(I) ''''
                          ' IL Y A ' NUM-ED-2 ' BLANCS AU DEBUT'
            END-PERFORM.

        TRAIT-F.
       ******************************************************************
       *       INVERSER LES CONTENUS DES POSTES 1 ET 3
       ******************************************************************
            DISPLAY 'F : INVERSION DES POSTES 1 ET 3'
            DISPLAY '    POSTE 1 : ' '''' TAB-V1-POSTE(1) ''''
                       ' POSTE 3 : ' '''' TAB-V1-POSTE(3) ''''
            DISPLAY '         * * * INVERSION * * *'
            MOVE TAB-V1-POSTE(3) TO TAB-TAMPON
            MOVE TAB-V1-POSTE(1) TO TAB-V1-POSTE(3)
            MOVE TAB-TAMPON TO TAB-V1-POSTE(1).
            DISPLAY '    POSTE 1 : ' '''' TAB-V1-POSTE(1) ''''
                       ' POSTE 3 : ' '''' TAB-V1-POSTE(3) ''''.
            PERFORM PRINT-V1.

        TRAIT-G.
       ******************************************************************
       *       DANS V1, CONVERTIR LES CARACTERES 'AEIOUY' PAR '123456'
       ******************************************************************
            DISPLAY 'G : CONVERTIR LES CARACTERES ''AEIOUY'' PAR ''123456
       -            ''''
            INSPECT V1 CONVERTING 'AEIOUY' TO '123456'.
            PERFORM PRINT-V1.

        TRAIT-H.
       ******************************************************************
       *       LISTER LES POSTES CONTENANT AU MOINS TROIS CHIFFRE
       ******************************************************************
            DISPLAY 'H : LISTE DES POSTES AVEC AU MOINS TROIS CHIFFRES'
            MOVE 0 TO COMPTE-POSTE-CHIFFRE
            PERFORM TRAIT-H-POSTE VARYING I FROM 1 BY 1 UNTIL I > 8
            MOVE COMPTE-POSTE-CHIFFRE TO NUM-ED-1
            DISPLAY '    POSTES TROUVES ' NUM-ED-1 .

        TRAIT-H-POSTE.
            MOVE 0 TO COMPTEUR
       *    DISPLAY 'POSTE ' I ' ' '''' TAB-V1-POSTE (I) ''''
            PERFORM VARYING NUM FROM 0 BY 1 UNTIL NUM > 9
       *          ON COMPTE LE NOMBRE DE FOIS QUE LE CHIFFRE APPARAIT
       *          ATTENTION : NUM EST SUR 2 OCTETS ALORS QU'IL FAUT
       *                      RECHERCHER UN SEUL CHIFFRE (UN OCTET)
       *                      C'EST POURQUOI ON CONVERTIT AVEC
       *                      NUM-CHAR
                 MOVE NUM TO NUM-CHAR
                 INSPECT TAB-V1-POSTE (I)
                      TALLYING COMPTEUR FOR ALL NUM-CHAR
       *         SI ON A AU MOINS TROUVE TROIS CHIFFRES ON ARRETE
                 IF COMPTEUR >= 3
                      MOVE I TO NUM-ED-1
                      DISPLAY '    POSTE ' NUM-ED-1 ' '
                              '''' TAB-V1-POSTE (I) '''' ' '
       *              ON ARRETE DE TESTER LES CHIFFRES
                      MOVE 10 TO NUM
                      ADD 1 TO COMPTE-POSTE-CHIFFRE
                 END-IF
            END-PERFORM.

        TRAIT-I.
       ******************************************************************
       *    CONCATENATION DE DEUX CHAINE AVEC AJOUT D'UN ESPACE         *
       ******************************************************************
       * PAS PROPRE => ON AJOUTE 1 CARACTERE QUI PEUT ETRE DANS LA CHAINE
       *    STRING V2 '0' V3 DELIMITED BY SPACE INTO V4.
       *    INSPECT V4 REPLACING FIRST '0' BY ' '
       * * * * *
            STRING V2  DELIMITED BY SPACES
                   ' ' DELIMITED BY SIZE
                   V3  DELIMITED BY SPACES
                   INTO V4
            DISPLAY 'I : CONCATENATION DE V2 ET V3 DANS V4 AVEC UN ESPACE
       -                 'ENTRE LES DEUX'
            DISPLAY '    V2 ' ' ' '''' V2 ''''
            DISPLAY '    V3 ' ' ' '''' V3 ''''
            DISPLAY '    V4 ' ' ' '''' V4 ''''.

        TRAIT-J.
       ******************************************************************
       *    DECOMPOSITION DE V5 SELON LE ';'                            *
       ******************************************************************
            UNSTRING V5 DELIMITED BY ALL ';'
            INTO  V5-1 COUNT IN V5-1-COUNT
                  V5-2 COUNT IN V5-2-COUNT
                  V5-3 COUNT IN V5-3-COUNT
                  V5-4 COUNT IN V5-4-COUNT
            DISPLAY 'J : DECOMPOSITION DE V5 SELON LE DELIMITEUR '';'''
            DISPLAY '    V5   ' '''' V5 ''''
            DISPLAY '    V5-1 ' '''' V5-1 '''' ' NB. CAR. ' V5-1-COUNT
            DISPLAY '    V5-3 ' '''' V5-2 '''' ' NB. CAR. ' V5-2-COUNT
            DISPLAY '    V5-4 ' '''' V5-3 '''' ' NB. CAR. ' V5-3-COUNT
            DISPLAY '    V5-5 ' '''' V5-4 '''' ' NB. CAR. ' V5-4-COUNT.

        TRAIT-K.
       ******************************************************************
       *    EFFECTUER LES CALCULS AVEC ADD, SUBTRACT, MULTIPLY, DIVIDE  *
       ******************************************************************
            DISPLAY 'K : CALCUL AVEC INSTRUCTIONS DE BASE'
       *    Z4 = Z1 + Z2 + Z3 + 5
            ADD Z1 Z2 Z3 5 TO Z4
            PERFORM TRAIT-K-DISPLAYZ4

            ADD Z1-AR Z2-AR Z3-AR 5 TO Z4-AR ROUNDED
            PERFORM TRAIT-K-DISPLAYZ4-AR

       *    Z4 = Z4 - Z3
            SUBTRACT Z3 FROM Z4
            PERFORM TRAIT-K-DISPLAYZ4

            SUBTRACT Z3-AR FROM Z4-AR ROUNDED
            PERFORM TRAIT-K-DISPLAYZ4-AR

       *5+3.4+ = Z3 * Z2 * (-1)
            MOVE -1 TO Z4
            MULTIPLY Z3 BY Z4
            MULTIPLY Z2 BY Z4
            PERFORM TRAIT-K-DISPLAYZ4

            MOVE -1 TO Z4-AR
            MULTIPLY Z3-AR BY Z4-AR ROUNDED
            MULTIPLY Z2-AR BY Z4-AR  ROUNDED
            PERFORM TRAIT-K-DISPLAYZ4-AR

       *    Z4 = Z4 / Z2 + Z3
            DIVIDE Z2 INTO Z4
            ADD Z3 TO Z4
            PERFORM TRAIT-K-DISPLAYZ4.

            DIVIDE Z2-AR INTO Z4-AR ROUNDED
            ADD Z3-AR TO Z4-AR ROUNDED
            PERFORM TRAIT-K-DISPLAYZ4-AR.

        TRAIT-K-DISPLAYZ4.
            MOVE Z4 TO Z4-ED
            DISPLAY '    Z4    = ' Z4-ED.
        TRAIT-K-DISPLAYZ4-AR.
            MOVE Z4-AR TO Z4-ED-AR
            DISPLAY '    Z4(R) = ' Z4-ED-AR.

        TRAIT-L.
       ******************************************************************
       *    MEME CALCUL AVEC COMPUTE                                    *
       ******************************************************************
            MOVE 0 TO Z4
            MOVE 0 TO Z4-AR
            DISPLAY 'L : CALCUL AVEC INSTRUCTION COMPUTE'
       *    Z4 = Z1 + Z2 + Z3 + 5
            COMPUTE Z4 = Z1 + Z2 + Z3 + 5
            PERFORM TRAIT-L-DISPLAYZ4
            COMPUTE Z4-AR ROUNDED = Z1-AR + Z2-AR + Z3-AR + 5
            PERFORM TRAIT-L-DISPLAYZ4-AR
       *    Z4 = Z4 - Z3
            COMPUTE Z4 = Z4 - Z3
            PERFORM TRAIT-L-DISPLAYZ4
            COMPUTE Z4-AR ROUNDED = Z4-AR - Z3-AR
            PERFORM TRAIT-L-DISPLAYZ4-AR
       *    Z4 = Z3 * Z2 * (-1)
            COMPUTE Z4 = Z3 * Z2 * (-1)
            PERFORM TRAIT-L-DISPLAYZ4
            COMPUTE Z4-AR ROUNDED = Z3-AR * Z2-AR * (-1)
            PERFORM TRAIT-L-DISPLAYZ4-AR
       *    Z4 = Z4 / Z2 + Z3
            COMPUTE Z4 = Z4 / Z2 + Z3
            PERFORM TRAIT-L-DISPLAYZ4
            COMPUTE Z4-AR ROUNDED = Z4-AR / Z2-AR + Z3-AR
            PERFORM TRAIT-L-DISPLAYZ4-AR.

        TRAIT-L-DISPLAYZ4.
            MOVE Z4 TO Z4-ED
            DISPLAY '    Z4    = ' Z4-ED.

        TRAIT-L-DISPLAYZ4-AR.
            MOVE Z4-AR TO Z4-ED-AR
            DISPLAY '    Z4(R) = ' Z4-ED-AR.

        TRAIT-M.
       ******************************************************************
       * UTILISER DES IF
       ******************************************************************
            DISPLAY 'M : UTILISATION DE IF'
       *    LECTURE DE LA SYSIN POUR REMPLIR LES VARIABLES ZA ZB ET ZC
       *    FORMAT DE LA SYSIN :
       *          // SYSIN
       *          ABC
       *          BCD
       *          ...
       *          FIN
       *          //*
            ACCEPT ZACCEPT
            PERFORM UNTIL ZACCEPT = 'FIN'
                 PERFORM TRAIT-M-BLOCIF
                 ACCEPT ZACCEPT
            END-PERFORM.

       *    MOVE 'A' TO ZA
       *    MOVE 'B' TO ZB
       *    MOVE 'C' TO ZC
       *    PERFORM TRAIT-M-BLOCIF

       *    MOVE 'Z' TO ZA
       *    MOVE 'B' TO ZB
       *    MOVE 'C' TO ZC
       *    PERFORM TRAIT-M-BLOCIF

       *    MOVE 'A' TO ZA
       *    MOVE 'B' TO ZB
       *    MOVE 'C' TO ZC
       *    PERFORM TRAIT-M-BLOCIF

       *    MOVE 'A' TO ZA
       *    MOVE 'Z' TO ZB
       *    MOVE 'C' TO ZC
       *    PERFORM TRAIT-M-BLOCIF

       *    MOVE 'A' TO ZA
       *    MOVE 'B' TO ZB
       *    MOVE 'Z' TO ZC
       *    PERFORM TRAIT-M-BLOCIF

       *    MOVE 'Z' TO ZA
       *    MOVE 'B' TO ZB
       *    MOVE 'Z' TO ZC
       *    PERFORM TRAIT-M-BLOCIF

       *    MOVE 'A' TO ZA
       *    MOVE 'B' TO ZB
       *    MOVE 'Z' TO ZC
       *    PERFORM TRAIT-M-BLOCIF

       *    MOVE 'A' TO ZA
       *    MOVE 'Z' TO ZB
       *    MOVE 'Z' TO ZC
       *    PERFORM TRAIT-M-BLOCIF.

        TRAIT-M-BLOCIF.
            DISPLAY '    ZA=''' ZA ''' ZB=''' ZB ''' ZC=''' ZC ''''
            DISPLAY '    ------------------------------------'
            IF ZA = 'A' AND ZB = 'B' AND ZC = 'C'
                 DISPLAY '    ZA = A AND ZB = B AND ZC = C IS TRUE'
                 DISPLAY '    ===> TRAIT 1'
            ELSE
                 DISPLAY '    ZA = A AND ZB = B AND ZC = C IS FALSE'
            END-IF

            IF ZA NOT = 'A' OR ZB = 'B'
                 DISPLAY '    ZA <> A OR ZB = B IS TRUE'
                 DISPLAY '    ===> TRAIT 2'
            ELSE
                 DISPLAY '    ZA <> A OR ZB = B IS FALSE'
            END-IF

            IF NOT(ZA = 'A' AND ZB = 'B' AND ZC = 'C')
               OR NOT (ZA NOT = 'A' OR ZB = 'B')
                 DISPLAY '    ===> AUCUN TRAITEMENT'
            END-IF
            DISPLAY '    * * * * '
            DISPLAY ' '.

        TRAIT-N.
       ******************************************************************
       *    UTILISATION DE EVALUATE                                     *
       ******************************************************************
            DISPLAY 'N : UTILISATION DE EVALUATE'
            DISPLAY '    EVALUATE SUR ZD'
            ACCEPT ZACCEPT-EVAL-D
            PERFORM UNTIL ZACCEPT-EVAL-D  = 'FIN'
                 PERFORM TRAIT-N-BLOCEVAL-D
                 ACCEPT ZACCEPT-EVAL-D
            END-PERFORM.
            DISPLAY '    ---------------'

            DISPLAY '    EVALUATE SUR ZE ET ZF'
            ACCEPT ZACCEPT-EVAL-EF
            PERFORM UNTIL ZACCEPT-EVAL-EF  = 'FIN'
                 PERFORM TRAIT-N-BLOCEVAL-EF
                 ACCEPT ZACCEPT-EVAL-EF
            END-PERFORM
            DISPLAY '    ---------------'

            DISPLAY '    EVALUATE SUR ZE > ZF'
            ACCEPT ZACCEPT-EVAL-EF
            PERFORM UNTIL ZACCEPT-EVAL-EF  = 'FIN'
                 PERFORM TRAIT-N-BLOCEVAL-EF-VRAI
                 ACCEPT ZACCEPT-EVAL-EF
            END-PERFORM
            DISPLAY '    ---------------'.



        TRAIT-N-BLOCEVAL-D.
            DISPLAY '     ZD'
            DISPLAY '    ' '''' ZD ''''
       *    SI ZD VAUT D ALORS TRTD
       *    SI ZD VAUT E OU F ALORS TRTE
            EVALUATE ZD
                 WHEN 'D'
                      DISPLAY 'TRTD'
                 WHEN 'E'
                 WHEN 'F'
                      DISPLAY 'TRTE'
                 WHEN OTHER
                      DISPLAY 'AUCUN TRAITEMENT'
            END-EVALUATE.

        TRAIT-N-BLOCEVAL-EF.
            DISPLAY '     ZE  ZF'
            DISPLAY '    ' '''' ZE '''' ' ' '''' ZF ''''

            EVALUATE ZE
                 WHEN 'E'
                      EVALUATE ZF
                           WHEN 'F'
                                DISPLAY 'TRTF'
                           WHEN OTHER
                                DISPLAY 'AUCUN TRAITEMENT'
                      END-EVALUATE
                 WHEN 'F'
                      EVALUATE ZF
                           WHEN 'E'
                                DISPLAY 'TRTE'
                           WHEN OTHER
                                DISPLAY 'AUCUN TRAITEMENT'
                      END-EVALUATE
            END-EVALUATE.

        TRAIT-N-BLOCEVAL-EF-VRAI.
            DISPLAY '     ZE  ZF'
            DISPLAY '    ' '''' ZE '''' ' ' '''' ZF ''''
            EVALUATE TRUE
                 WHEN ZE > ZF DISPLAY 'TRTX'
                 WHEN ZE NOT = 'A' DISPLAY 'TRTY'
            END-EVALUATE.

        FIN.
            DISPLAY ' '
            DISPLAY 'C''EST FINI|'
            STOP RUN.

        PRINT-V1.
            DISPLAY '    RESULTAT : ' V1.

        PRINT-END-SECTION.
            DISPLAY '------------------------------------------------'.
 MEMBER NAME  A03P4
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03P4.
        AUTHOR. MAXIME.
        DATE-WRITTEN. 28/11/2023.
        DATE-COMPILED. 28/11/2023.
       ******************************************************************
       * CE PROGRAMME COPIE LES CLIENTS DU FICHIER CLIENT QUI ONT UNE   *
       * DATE DONT L'ANNEE EST POSTERIEURE A 2020.                      *
       * ON DIT QUE LE PROGRAMME "RECONDUIT" LES ENREGISTREMENTS        *
       * -------------------------------------------------------------- *
       * INPUT      DESCRIPTION                                         *
       * ---------- --------------------------------------------------- *
       * DDCLIENT   LE FICHIER CLIENT (SEQUENTIEL DE 80 DE LONG)        *
       * DDCOPIE    LE FICHIER DE SORTIE AVEC LES ENREGISTREMENTS       *
       *            RECONDUITS. LE FICHIER EST NOUVEAU.                 *
       ******************************************************************

        ENVIRONMENT DIVISION.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT FCLIENT ASSIGN TO DDCLIENT
                           ORGANIZATION IS SEQUENTIAL
                           ACCESS MODE  IS SEQUENTIAL
                           FILE STATUS  IS FS-CLIENT.
            SELECT FCOPIE  ASSIGN TO DDCOPIE
                           ORGANIZATION IS SEQUENTIAL
                           ACCESS MODE  IS SEQUENTIAL
                           FILE STATUS IS FS-COPIE .

        DATA DIVISION.
       * * * * * * * * * * * * * * * * * * *
        FILE SECTION.
        FD  FCLIENT RECORDING MODE IS F
                   DATA RECORD IS ENR-CLIENT
                   RECORD 80 CHARACTERS.
            COPY CLIENTS REPLACING ==:VAR:== BY ==ENR==.
        FD  FCOPIE  RECORDING MODE IS F
                   DATA RECORD IS COP-CLIENT
                   RECORD 80 CHARACTERS.
            COPY CLIENTS REPLACING ==:VAR:== BY ==COP==.
       * * * * * * * * * * * * * * * * * * *
        WORKING-STORAGE SECTION.
        01  FS-CLIENT                   PIC X(2)       VALUE '00'.
        01  FS-COPIE                    PIC X(2)       VALUE '00'.
        77  NB-CLIENTS-TRAITES          PIC 9(18)      VALUE 0.
        77  NB-CLIENTS-COPIES           PIC 9(18)      VALUE 0.
        77  NB-ED                       PIC Z(17)9.
        77                              PIC X          VALUE 'R'.
            88 FIN-FICHIER-CLIENT                      VALUE 'F'.
       * * * * * * * * * * * * * * * * * * *

        PROCEDURE DIVISION.
            PERFORM DEBUT.
            PERFORM TRAITEMENT.
            PERFORM FIN.

       ******************************************************************
       *    DEFINITION DES PARAGRAPHES                                  *
       ******************************************************************
        DEBUT.
       ******************************************************************
       *    OUVERTURE DES FICHIERS                                      *
       ******************************************************************
            OPEN INPUT FCLIENT
            IF FS-CLIENT NOT = '10' AND FS-CLIENT NOT = '00'
                DISPLAY 'ERREUR A L''OUVERTURE FCLIENT : ' FS-CLIENT
                PERFORM FIN-ERREUR
            END-IF

            OPEN OUTPUT FCOPIE
            IF FS-COPIE  NOT = '10' AND FS-COPIE  NOT = '00'
                DISPLAY 'ERREUR A L''OUVERTURE FCOPIE : ' FS-COPIE
                PERFORM FIN-ERREUR
            END-IF

            READ FCLIENT.
            IF FS-CLIENT = '10'
                DISPLAY 'ERREUR FICHIER CLIENT VIDE'
                PERFORM FIN-ERREUR
            END-IF.

        TRAITEMENT.
       ******************************************************************
       *    TRAITEMENT DU FICHIER CLIENT                                *
       ******************************************************************
            MOVE 0 TO NB-CLIENTS-TRAITES
            MOVE 0 TO NB-CLIENTS-COPIES
            PERFORM UNTIL FIN-FICHIER-CLIENT
                EVALUATE FS-CLIENT
                    WHEN '00'
                        ADD 1 TO NB-CLIENTS-TRAITES
                        PERFORM TRAIT-CLIENT
                        READ FCLIENT
                    WHEN '10'
                        SET FIN-FICHIER-CLIENT TO TRUE
                        DISPLAY 'FIN DU FICHIER CLIENT ATTEINTE'
                        MOVE NB-CLIENTS-TRAITES TO NB-ED
                        DISPLAY 'NOMBRE D''ENREGISTREMENTS TRAITES'
                                 NB-ED
                        MOVE NB-CLIENTS-COPIES  TO NB-ED
                        DISPLAY 'NOMBRE D''ENREGISTREMENTS COPIES '
                                 NB-ED
                    WHEN OTHER
                        DISPLAY 'ERREUR DE LECTURE SUR FCLIENT : '
                                FS-CLIENT
                END-EVALUATE
            END-PERFORM.

        TRAIT-CLIENT.
       ******************************************************************
       *    CONTROLE DE L'ENREGISTREMENT CLIENT
       * SI L'ANNEE DU CLIENT EST SUPERIEURE A 2020 ALORS ON COPIE LE   *
       * L'ENREGISTREMENT CLIENT DANS LE FICHIER DE SORTIE              *
       ******************************************************************
            IF ANNEE OF ENR-CLIENT > 2020
                MOVE ENR-CLIENT TO COP-CLIENT
                WRITE COP-CLIENT
                IF FS-CLIENT NOT = '00'
                    DISPLAY 'ERREUR D''ECRITURE DANS FCOPIE ' FS-COPIE
                    PERFORM FIN-ERREUR
                ELSE
                    ADD 1 TO NB-CLIENTS-COPIES
                END-IF
            END-IF.

        FIN.
       ******************************************************************
       *    FERMETURE DES FICHIERS ET MESSAGE DE FIN                    *
       ******************************************************************
            DISPLAY 'FERMETURE DES FICHIERS'
            CLOSE FCLIENT
            CLOSE FCOPIE
            DISPLAY 'FIN'.
            PERFORM FIN-STOP.

        FIN-ERREUR.
            MOVE 17 TO RETURN-CODE
            DISPLAY 'ERREUR FIN'
            PERFORM FIN-STOP.

        FIN-STOP.
            STOP RUN.
 MEMBER NAME  A03P5A
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03P5A.
        AUTHOR. MAXIME.
        DATE-WRITTEN. 29/11/2023.
        DATE-COMPILED. 30/11/2023.
       ******************************************************************
       *    PROGRAMME A03P5A                                            *
       * CE PROGRAMME CONTROLE LES MOUVEMENTS DE MISE A JOUR DES STOCKS *
       * ET PRODUIT UN FICHIER DANS LEQUEL LES ENREGISTREMENTS SONT     *
       * TRIES SUR LE CHAMP S-CODE-MVT ET RESPECTENT LES CONDITIONS     *
       * SUIVANTES :                                                    *
       *   1. LE CODE PRODUIT N'EST PAS BLANC                           *
       *   2. LE TYPE DE MOUVEMENT EST PAS DIFFERENT DE E OU S          *
       *   3. LA QUANTITE EST NUMERIQUE                                 *
       *   4. LA QUANTITE EST SUPERIEURE STRICTEMENT A ZERO             *
       *                                                                *
       * LES ENREGISTREMENTS NE RESPECTANT PAS CES CONDITIONS NE SONT   *
       * PAS RECONDUITS DANS LE FICHIER DE SORTIE.                      *
       *
       * LE PROGRAMME CALCULE EN PLUS LE PRIX TOTAL EN FONCTION DES     *
       * CODE PRODUIT ET DE LA QUANTITE                                 *
       *                                                                *
       * LES MESSAGES D'ERREUR SONT LES SUIVANTS                        *
       *   'CODE PRODUIT ERRONE' SUIVI DU CODE DE PRODUIT               *
       *   'TYPE MOUVEMENT ERRONE' SUIVI DU TYPE DE MOUVEMENT           *
       *   'LA QUANTITE EST EGALE A ZERO' SUIVI DE LA QUANTITE          *
       *   'LA QUANTITE N''EST PAS NUMERIQUE' SUIVI DE LA QUANTITE      *
       *   'CODE PRODUIT INEXISTANT EN TABLE' SUIVI DU CODE PRODUIT     *
       *                                                                *
       * LE PROGRAMME AFFICHE EN SORTIE UN BILAN AVEC :                 *
       *   LE NOMBRE D'ENREGISTREMENTS LUS                              *
       *   LE NOMBRE D'ENREGISTREMENTS ECRITS                           *
       *   LE NOMBRE D'ENREGISTREMENTS ERRONES                          *
       *                                                                *
       * INPUT DU PROGRAMME :                                           *
       *   DDFICENT  LE FICHIER AVEC LES MOUVEMENTS A CONTROLER         *
       *   DDFICSOR  LE FICHIER DE SORTIE AVEC LES MOUVEMENTS VALIDES   *
       ******************************************************************

       * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER.
       * COMMENTER LA LIGNE SUIVANTE POUR CACHER LES TRACES DE DEBUG
            WITH DEBUGGING MODE.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
       *    CURRENCY SIGN IS "E".
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT FIC-ENT ASSIGN TO DDFICENT FILE STATUS IS FS-ENT.
            SELECT FIC-SOR ASSIGN TO DDFICSOR FILE STATUS IS FS-SOR.

       * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        DATA DIVISION.
        FILE SECTION.
       * FICHIER D'ENTREE AVEC LES ENREGISTREMENTS A CONTROLER
        FD FIC-ENT
            RECORD 80 CHARACTERS
            DATA RECORD IS E-MOUVEMENT
            RECORDING MODE IS F.
        COPY FMVT    REPLACING ==:VAR:== BY ==E==.
       * FICHIER DE SORTIE AVEC LES ENREGISTREMENTS VALIDES
        FD FIC-SOR
            RECORD 80 CHARACTERS
            DATA RECORD IS S-MOUVEMENT
            RECORDING MODE IS F.
        COPY FMVTPX  REPLACING ==:VAR:== BY ==S==.

        WORKING-STORAGE SECTION.
        77  FS-ENT                        PIC XX      VALUE '00'.
        77  FS-SOR                        PIC XX      VALUE '00'.
        77  ERR-MSG                       PIC X(20)   VALUE SPACES.
        77  ERR-CODE                      PIC XXX     VALUE SPACES.
        77  ERR-CPT                       PIC 9(2)    VALUE ZEROS.
       * COMPTEURS POUR LES BILANS
        01  CPT-BILAN.
            05 CPT-ENR-LU                 PIC 9(18)   VALUE ZEROS.
            05 CPT-ENR-ECRIT              PIC 9(18)   VALUE ZEROS.
            05 CPT-ENR-ERRONE             PIC 9(18)   VALUE ZEROS.
        01  PRIXTOTAL                     PIC 9(9)V99 VALUE ZEROS.
        77                                PIC X       VALUE 'A'.
            88 FIN-FICHIER                            VALUE 'F'.
        77  I                             PIC 9(18)   VALUE ZEROS.
       * LES VARIABLES SUIVANTES SONT UTILISEES POUR FORMATER L'AFFICHAGE
       * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
       *    AFFICHAGE DES MESSAGE DE NON RESPECT DES CONDITIONS
        01  WARNING-ENREGISTREMENT.
            05 FILLER                     PIC XXX     VALUE 'E- '.
            05 WE-MSG                     PIC X(35)   VALUE SPACES.
               88 WE-RESET      VALUES SPACES.
               88 WE-1          VALUE 'CODE PRODUIT ERRONE'.
               88 WE-2          VALUE 'TYPE MOUVEMENT ERRONE'.
               88 WE-3          VALUE 'LA QUANTITE N''EST PAS NUMERIQUE'.
               88 WE-4          VALUE 'LA QUANTITE EST EGALE A ZERO'.
               88 WE-5          VALUE 'CODE PRODUIT INEXISTANT EN TABLE'.
            05 FILLER                     PIC XXX     VALUE ' : '.
            05 WE-VALUE                   PIC X(5)    VALUE SPACES.
       *    MISE EN FORME DU BILAN AVEC LES COMPTEURS A LA FIN
        01  BILAN-LU.
            05 MSG                        PIC X(31)
                           VALUE 'NOMBRE ENREGISTREMENTS LUS'.
            05 FILLER                     PIC X.
            05 CPT-ENR-LU                 PIC Z(8)9.
        01  BILAN-ECRIT.
            05 MSG                        PIC X(31)
                           VALUE 'NOMBRE ENREGISTREMENTS ECRITS'.
            05 FILLER                     PIC X.
            05 CPT-ENR-ECRIT              PIC Z(8)9.
        01  BILAN-ERRONE.
            05 MSG                        PIC X(31)
                           VALUE 'NOMBRE ENREGISTREMENTS ERRONES'.
            05 FILLER                     PIC X.
            05 CPT-ENR-ERRONE             PIC Z(8)9.
        01  BILAN-PRIXTOTAL.
            05 MSG                        PIC X(31)
                           VALUE 'PRIX TOTAL DU STOCK'.
            05 FILLER                     PIC X.
            05 CPT-PRIXTOTAL              PIC $(8)9,99.

       * AJOUT DES PRIX UNITAIRES EN FONCTION DU CODE PRODUIT
        01  TAB.
            05 PIC X(4)       VALUE 'Z001'.
            05 PIC 9(3)V99    VALUE  51,69.
            05 PIC X(4)       VALUE 'A001'.
            05 PIC 9(3)V99    VALUE   4,05.
            05 PIC X(4)       VALUE 'A006'.
            05 PIC 9(3)V99    VALUE 100,00.
            05 PIC X(4)       VALUE 'D110'.
            05 PIC 9(3)V99    VALUE 581,55.
            05 PIC X(4)       VALUE 'R001'.
            05 PIC 9(3)V99    VALUE  78,00.
        01  REDEFINES TAB.
            05 POSTE  OCCURS 6.
               10 P-CODE-PRD  PIC X(4).
               10 P-PRIX-UNI  PIC 9(3)V99.
       * NOMBRE DE PRIX CORRESPONDANT AU CODE PRODUIT
        77  PRIX-CODPRDT-NOMBRE           PIC 9(3)    VALUE 6.
       * BUFFER DE PRIX UNITAIRE POUR LES CALCULS
        77  E-PRX-UNIT                    PIC 9(9)V99 VALUE 0.
        77  E-PRX-TOTAL                   PIC 9(9)V99 VALUE 0.
       * INDICATEUR DE PRESENCE DU PRIX DANS LE TABLEAU DE PRIX
        77  IND-EXISTANCE-PRIX            PIC X.
            88 PRIX-CODPRDT-CPRDNOTEXISTE             VALUE 'A'.
            88 PRIX-CODPRDT-CPRDEXISTE                VALUE 'B'.
       * EDITION D'UN PRODUIT (POUR LE DEBUG)
        01  S-MOUVEMENT-EDITION.
            05   PIC X(13) VALUE 'CODE PRODUIT '.
            05 S-CODE-PRDT                PIC X(4).
            05   PIC X VALUE SPACE.
            05   PIC X(4)     VALUE 'QTE='.
            05 S-QTE-MVT                  PIC 9(2).
            05   PIC X VALUE SPACE.
            05   PIC X(7)    VALUE 'PRX U.='.
            05 S-PRX-UNIT                 PIC $(3)9,99.
            05   PIC X VALUE SPACE.
            05   PIC X(10)    VALUE 'PRX TOT. ='.
            05 S-PRX-TOTAL                PIC $(9)9,99.

       * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        PROCEDURE DIVISION.
            PERFORM DEBUT.
            PERFORM TRAITEMENT.
            PERFORM FIN-OK.
            STOP RUN.

       *******
        DEBUT.
       ******************************************************************
       * OUVERTURE DES FICHIERS ET AFFICHAGE D'UN MESSAGE DE DEBUT      *
       ******************************************************************
            DISPLAY 'DEBUT'.
            PERFORM DEBUT-OUVRIR-FICENT
            PERFORM DEBUT-OUVRIR-FICSOR.

        DEBUT-OUVRIR-FICENT.
       ******************************************************************
       * OUVERTURE DU FICHIER CLIENT AVEC CONTROLE SI LE FICHIER EST    *
       * VIDE                                                           *
       ******************************************************************
            OPEN INPUT FIC-ENT
            EVALUATE FS-ENT
                WHEN '10'
                WHEN '00'
                    CONTINUE
                WHEN OTHER
                    MOVE 'OPEN FIC-ENT' TO ERR-MSG
                    MOVE FS-ENT TO ERR-CODE
                    PERFORM FIN-ERREURFICHIER
            END-EVALUATE

       *    TRAITEMENT DU FICHIER SANS ENREGISTREMENT
            READ FIC-ENT
            IF FS-ENT = '10'
                    MOVE 'FICHIER VIDE' TO ERR-MSG
                    MOVE FS-ENT TO ERR-CODE
                    PERFORM FIN-ERREURFICHIER
            END-IF.

        DEBUT-OUVRIR-FICSOR.
       ******************************************************************
       * OUVERTURE DU FICHIER DE SORTIE                                 *
       ******************************************************************
            OPEN OUTPUT FIC-SOR
            EVALUATE FS-SOR
                WHEN '00'
                    CONTINUE
                WHEN OTHER
                    MOVE 'OPEN FIC-SOR ' TO ERR-MSG
                    MOVE FS-ENT TO ERR-CODE
                    PERFORM FIN-ERREURFICHIER
            END-EVALUATE.

       *******
        TRAITEMENT.
       ******************************************************************
       * TRAITEMENT DES ENREGISTREMENTS DU FICHIER D'ENTREE             *
       * PUIS AFFICHAGE DES BILANS A LA FIN                             *
       ******************************************************************
            PERFORM TRAITEMENT-ENR UNTIL FIN-FICHIER

       *    AFFICHAGE DES BILANS
            MOVE CORRESPONDING CPT-BILAN TO BILAN-LU
            MOVE CORRESPONDING CPT-BILAN TO BILAN-ECRIT
            MOVE CORRESPONDING CPT-BILAN TO BILAN-ERRONE
            MOVE PRIXTOTAL TO CPT-PRIXTOTAL OF BILAN-PRIXTOTAL
            DISPLAY BILAN-LU
            DISPLAY BILAN-ECRIT
            DISPLAY BILAN-ERRONE
            DISPLAY BILAN-PRIXTOTAL.

        TRAITEMENT-ENR.
       ******************************************************************
       * TRAITEMENT D'UN ENREGISTREMENT                                 *
       ******************************************************************
       * ALGORITHME : ON VERIFIE QUE LA LECTURE PRECEDENTE A REUSSI
       *              SI C'EST LE CAS ON INCREMENTE LE NOMBRE
       *              D'ENREGISTREMENT LUS PUIS ON TRAITE L'ENREGISTREMEN
       *              EN CAS D'ERREUR DE LECTURE LE PROGRAMME S'ARRETE
       *              AVEC LE CODE 17
       ******************************************************************
       D    DISPLAY '*** NEW PRODUIT ***'
            EVALUATE FS-ENT
                WHEN '00'
                    ADD 1 TO CPT-ENR-LU OF CPT-BILAN
                    PERFORM TRAITEMENT-VERIFCONDITION
                    READ FIC-ENT
                WHEN '10'
                    SET FIN-FICHIER TO TRUE
                WHEN OTHER
                    MOVE 'LECTURE ENREGISTREMENT' TO ERR-MSG
                    MOVE FS-ENT TO ERR-CODE
                    PERFORM FIN-ERREURTRAITEMENT
            END-EVALUATE.

        TRAITEMENT-VERIFCONDITION.
       ******************************************************************
       * VERIFICATION DES CONDITIONS POUR UN ENREGISTREMENT             *
       ******************************************************************
       * ALGORITHME : ON COMPTE LE NOMBRE DE CONDITIONS NON VERIFIEES   *
       *              SI CE NOMBRE EST >0 ALORS ON CONSIDERE            *
       *              L'ENREGISTREMENT COMME ERRONE                     *
       ******************************************************************
            MOVE 0 TO ERR-CPT
       *    VERIFICATION DES QUATRE CONDITIONS
            IF E-CODE-PRDT = SPACES
       *        DISPLAY 'CODE PRODUIT VIDE                :' E-CODE-PRDT
                SET WE-1 TO TRUE
                MOVE E-CODE-PRDT         TO WE-VALUE
                DISPLAY WARNING-ENREGISTREMENT
                ADD 1 TO ERR-CPT
            END-IF
            IF E-TYPE-MVT NOT = 'E' AND E-TYPE-MVT NOT = 'S'
       *        DISPLAY 'TYPE MOUVEMENT ERRONE            :' E-TYPE-MVT
                SET WE-2 TO TRUE
                MOVE E-TYPE-MVT          TO WE-VALUE
                DISPLAY WARNING-ENREGISTREMENT
                ADD 1 TO ERR-CPT
            END-IF
            IF E-QTE-MVT IS NOT NUMERIC
       *        DISPLAY 'LA QUANTITE N''EST PAS NUMERIQUE  :' E-QTE-MVT
                SET WE-3 TO TRUE
                MOVE E-QTE-MVT           TO WE-VALUE
                DISPLAY WARNING-ENREGISTREMENT
                ADD 1 TO ERR-CPT
            ELSE
                IF E-QTE-MVT NOT > 0
       *            DISPLAY 'LA QUANTITE EST EGALE A ZERO    :'
       *                     E-QTE-MVT
                    SET WE-4 TO TRUE
                    MOVE E-QTE-MVT           TO WE-VALUE
                    DISPLAY WARNING-ENREGISTREMENT
                    ADD 1 TO ERR-CPT
                END-IF
            END-IF
            SET WE-RESET TO TRUE

       *    ACTION EN FONCTION DES ERREURS
            IF ERR-CPT = 0
       *        CALCUL DU PRIX UNITAIRE DU PRODUIT
                PERFORM TRAITEMENT-CALCULPRIXU

       *        CALCUL DU PRIX TOTAL DU PRODUIT
                PERFORM TRAITEMENT-CALCULPRIXTOT

       *        ECRITURE DE L'ENREGISTREMENT SI AUCUNE ERREUR
                PERFORM TRAITEMENT-ECRIRESOR
            ELSE
       *        EN CAS D'ERREUR ON AUGMENTE LE COMPTEUR D'ENREGISTREMENTS
       *        ERRONES
                ADD 1 TO CPT-ENR-ERRONE OF CPT-BILAN
            END-IF.

        TRAITEMENT-CALCULPRIXU.
       ******************************************************************
       * CALCUL DU PRIX UNITAIRE EN FONCTION DU CODE PRODUIT            *
       * LE PRIX UNITAIRE VAUT 0 SI LE CODE N'EST PAS RECONNU           *
       ******************************************************************
       * ALGORITHME : ON RECHERCHE DANS LE TABLEAU DE PRIX              *
       *              LE CODE PRODUIT, SI ON LE TROUVE ON UTILISE LE    *
       *              MEME INDICE POUR RECUPERER LE PRIX CORRESPONDANT  *
       *              SI ON NE LE TROUVE PAS, LE PRIX EST 0.0           *
       ******************************************************************
            MOVE 0 TO E-PRX-UNIT
            SET PRIX-CODPRDT-CPRDNOTEXISTE TO TRUE
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > PRIX-CODPRDT-NOMBRE
                IF P-CODE-PRD(I) = E-CODE-PRDT
                    MOVE P-PRIX-UNI(I) TO E-PRX-UNIT
                    MOVE PRIX-CODPRDT-NOMBRE TO I
                    SET PRIX-CODPRDT-CPRDEXISTE TO TRUE
                END-IF
            END-PERFORM.
       *    VERIFICATION SI LE CODE PRODUIT A ETE TROUVE
            IF PRIX-CODPRDT-CPRDNOTEXISTE
       *        DISPLAY 'CODE PRODUIT INEXISTANT EN TABLE ' E-CODE-PRDT
                MOVE 'CODE PRODUIT INEXISTANT EN TABLE ' TO WE-MSG
                MOVE E-CODE-PRDT                         TO WE-VALUE
                DISPLAY WARNING-ENREGISTREMENT
                MOVE 0 TO E-PRX-UNIT
            END-IF.

        TRAITEMENT-CALCULPRIXTOT.
       ******************************************************************
       * CALCUL DU PRIX TOTAL DU PRODUIT EN FONCTION DE LA QUANTITE     *
       * LE PRIX TOTAL DU PRODUIT EST AJOUTE AU PRIX TOTAL DU STOCK     *
       ******************************************************************
       *    CALCUL DU PRIX TOTAL
            COMPUTE E-PRX-TOTAL = E-PRX-UNIT * E-QTE-MVT
       *    AJOUT DU PRIX DU PRODUIT AU PRIX TOTAL
            ADD E-PRX-TOTAL TO PRIXTOTAL
       D    DISPLAY 'NOUVEAU PRIXTOTAL = ' PRIXTOTAL

            .
        TRAITEMENT-ECRIRESOR.
       ******************************************************************
       * ECRITURE DANS LE FICHIER DE SORTIE                             *
       ******************************************************************
       *    L'ENREGISTREMENT EST RECONDUIT DANS LE BUFFER DE SORTIE
            MOVE E-MOUVEMENT TO S-MOUVEMENT

       *    AJOUT DU PRIX UNITAIRE APRES SINON IL EST ECRASE
            MOVE E-PRX-UNIT TO S-PRX-UNIT OF S-MOUVEMENT

       *    AFFICHAGE DU PRODUIT (UNIQUEMENT EN MODE DEBUG)
       D    MOVE CORRESPONDING S-MOUVEMENT TO S-MOUVEMENT-EDITION
       D    MOVE E-PRX-TOTAL TO S-PRX-TOTAL OF S-MOUVEMENT-EDITION
       D    DISPLAY S-MOUVEMENT-EDITION

       *    ECRITURE DANS LE FICHIER OUVERT EN OUTPUT ET VERIFICATION
            WRITE S-MOUVEMENT
            IF FS-SOR NOT = '00'
                MOVE 'ECRITURE DANS FICSOR' TO ERR-MSG
                MOVE FS-SOR TO ERR-CODE
                PERFORM FIN-ERREURFICHIER
            END-IF

       *    INCREMENT DU COMPTEUR D'ECRITURE
            ADD 1 TO CPT-ENR-ECRIT OF CPT-BILAN.

       *******
        FIN.
            DISPLAY 'FIN'
            STOP RUN.

        FIN-OK.
            CLOSE FIC-ENT FIC-SOR
            PERFORM FIN.

        FIN-ERREURFICHIER.
            DISPLAY 'ERREUR FICHIER   ' ERR-MSG ' ' ERR-CODE
            MOVE 17 TO RETURN-CODE
            PERFORM FIN.

        FIN-ERREURTRAITEMENT.
            DISPLAY 'ERREUR TRAITEMENT' ERR-MSG ' ' ERR-CODE
            MOVE 15 TO RETURN-CODE
            PERFORM FIN.
 MEMBER NAME  A03P5
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03P5.
        AUTHOR. MAXIME.
        DATE-WRITTEN. 29/11/2023.
        DATE-COMPILED. 29/11/2023.
       ******************************************************************
       *    PROGRAMME A03P5                                             *
       * CE PROGRAMME CONTROLE LES MOUVEMENTS DE MISE A JOUR DES STOCKS *
       * ET PRODUIT UN FICHIER DANS LEQUEL LES ENREGISTREMENTS SONT     *
       * TRIES SUR LE CHAMP S-CODE-MVT ET RESPECTENT LES CONDITIONS     *
       * SUIVANTES :                                                    *
       *   1. LE CODE PRODUIT N'EST PAS BLANC                           *
       *   2. LE TYPE DE MOUVEMENT EST PAS DIFFERENT DE E OU S          *
       *   3. LA QUANTITE EST NUMERIQUE                                 *
       *   4. LA QUANTITE EST SUPERIEURE STRICTEMENT A ZERO             *
       *                                                                *
       * LES ENREGISTREMENTS NE RESPECTANT PAS CES CONDITIONS NE SONT   *
       * PAS RECONDUITS DANS LE FICHIER DE SORTIE.                      *
       *                                                                *
       * LES MESSAGES D'ERREUR SONT LES SUIVANTS                        *
       *   'CODE PRODUIT ERRONE' SUIVI DU CODE DE PRODUIT               *
       *   'TYPE MOUVEMENT ERRONE' SUIVI DU TYPE DE MOUVEMENT           *
       *   'LA QUANTITE EST EGALE A ZERO' SUIVI DE LA QUANTITE          *
       *   'LA QUANTITE N''EST PAS NUMERIQUE' SUIVI DE LA QUANTITE      *
       *                                                                *
       * LE PROGRAMME AFFICHE EN SORTIE UN BILAN AVEC :                 *
       *   LE NOMBRE D'ENREGISTREMENTS LUS                              *
       *   LE NOMBRE D'ENREGISTREMENTS ECRITS                           *
       *   LE NOMBRE D'ENREGISTREMENTS ERRONES                          *
       *                                                                *
       * INPUT DU PROGRAMME :                                           *
       *   DDFICENT  LE FICHIER AVEC LES MOUVEMENTS A CONTROLER         *
       *   DDFICSOR  LE FICHIER DE SORTIE AVEC LES MOUVEMENTS VALIDES   *
       ******************************************************************

       * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
       *    CURRENCY SIGN IS 'E'.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT FIC-ENT ASSIGN TO DDFICENT FILE STATUS IS FS-ENT.
            SELECT FIC-SOR ASSIGN TO DDFICSOR FILE STATUS IS FS-SOR.

       * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        DATA DIVISION.
        FILE SECTION.
        FD FIC-ENT
            RECORD 80 CHARACTERS
            DATA RECORD IS E-MOUVEMENT
            RECORDING MODE IS F.
        COPY FMVT REPLACING ==:VAR:== BY ==E==.
        FD FIC-SOR
            RECORD 80 CHARACTERS
            DATA RECORD IS S-MOUVEMENT
            RECORDING MODE IS F.
        COPY FMVT REPLACING ==:VAR:== BY ==S==.

        WORKING-STORAGE SECTION.
        77  FS-ENT                        PIC XX      VALUE '00'.
        77  FS-SOR                        PIC XX      VALUE '00'.
        77  ERR-MSG                       PIC X(20)   VALUE SPACES.
        77  ERR-CODE                      PIC XXX     VALUE SPACES.
        77  ERR-CPT                       PIC 9(2)    VALUE ZEROS.
       * COMPTEURS POUR LES BILANS
        01  CPT-BILAN.
            05 CPT-ENR-LU                 PIC 9(18)   VALUE ZEROS.
            05 CPT-ENR-ECRIT              PIC 9(18)   VALUE ZEROS.
            05 CPT-ENR-ERRONE             PIC 9(18)   VALUE ZEROS.
        77                                PIC X       VALUE 'A'.
            88 FIN-FICHIER                            VALUE 'F'.
       * LES VARIABLES SUIVANTES SONT UTILISEES POUR FORMATER L'AFFICHAGE
        01  BILAN-LU.
            05 MSG                        PIC X(31)
                           VALUE 'NOMBRE ENREGISTREMENTS LUS'.
            05 FILLER                     PIC X.
            05 CPT-ENR-LU                 PIC Z(6)9.
        01  BILAN-ECRIT.
            05 MSG                        PIC X(31)
                           VALUE 'NOMBRE ENREGISTREMENTS ECRITS'.
            05 FILLER                     PIC X.
            05 CPT-ENR-ECRIT              PIC Z(6)9.
        01  BILAN-ERRONE.
            05 MSG                        PIC X(31)
                           VALUE 'NOMBRE ENREGISTREMENTS ERRONES'.
            05 FILLER                     PIC X.
            05 CPT-ENR-ERRONE             PIC Z(6)9.

       * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        PROCEDURE DIVISION.
            PERFORM DEBUT.
            PERFORM TRAITEMENT.
            PERFORM FIN.
            STOP RUN.

       *******
        DEBUT.
       ******************************************************************
       * OUVERTURE DES FICHIERS ET AFFICHAGE D'UN MESSAGE DE DEBUT      *
       ******************************************************************
            DISPLAY 'DEBUT'.
            PERFORM DEBUT-OUVRIR-FICENT
            PERFORM DEBUT-OUVRIR-FICSOR.

        DEBUT-OUVRIR-FICENT.
       ******************************************************************
       * OUVERTURE DU FICHIER CLIENT AVEC CONTROLE SI LE FICHIER EST    *
       * VIDE                                                           *
       ******************************************************************
            OPEN INPUT FIC-ENT
            EVALUATE FS-ENT
                WHEN '10'
                WHEN '00'
                    CONTINUE
                WHEN OTHER
                    MOVE 'OPEN FIC-ENT' TO ERR-MSG
                    MOVE FS-ENT TO ERR-CODE
                    PERFORM FIN-ERREURFICHIER
            END-EVALUATE

       *    TRAITEMENT DU FICHIER SANS ENREGISTREMENT
            READ FIC-ENT
            IF FS-ENT = '10'
                    MOVE 'FICHIER VIDE' TO ERR-MSG
                    MOVE FS-ENT TO ERR-CODE
                    PERFORM FIN-ERREURFICHIER
            END-IF.

        DEBUT-OUVRIR-FICSOR.
       ******************************************************************
       * OUVERTURE DU FICHIER DE SORTIE                                 *
       ******************************************************************
            OPEN OUTPUT FIC-SOR
            EVALUATE FS-SOR
                WHEN '00'
                    CONTINUE
                WHEN OTHER
                    MOVE 'OPEN FIC-SOR ' TO ERR-MSG
                    MOVE FS-ENT TO ERR-CODE
                    PERFORM FIN-ERREURFICHIER
            END-EVALUATE.

       *******
        TRAITEMENT.
       ******************************************************************
       * TRAITEMENT DES ENREGISTREMENTS DU FICHIER D'ENTREE             *
       * PUIS AFFICHAGE DES BILANS A LA FIN                             *
       ******************************************************************
            PERFORM TRAITEMENT-ENR UNTIL FIN-FICHIER

       *    AFFICHAGE DES BILANS
            MOVE CORRESPONDING CPT-BILAN TO BILAN-LU
            MOVE CORRESPONDING CPT-BILAN TO BILAN-ECRIT
            MOVE CORRESPONDING CPT-BILAN TO BILAN-ERRONE
            DISPLAY BILAN-LU
            DISPLAY BILAN-ECRIT
            DISPLAY BILAN-ERRONE.

        TRAITEMENT-ENR.
       ******************************************************************
       * TRAITEMENT D'UN ENREGISTREMENT                                 *
       ******************************************************************
       * ALGORITHME : ON VERIFIE QUE LA LECTURE PRECEDENTE A REUSSI
       *              SI C'EST LE CAS ON INCREMENTE LE NOMBRE
       *              D'ENREGISTREMENT LUS PUIS ON TRAITE L'ENREGISTREMEN
       *              EN CAS D'ERREUR DE LECTURE LE PROGRAMME S'ARRETE
       *              AVEC LE CODE 17
       ******************************************************************
            EVALUATE FS-ENT
                WHEN '00'
                    ADD 1 TO CPT-ENR-LU OF CPT-BILAN
                    PERFORM TRAITEMENT-VERIFCONDITION
                    READ FIC-ENT
                WHEN '10'
                    SET FIN-FICHIER TO TRUE
                WHEN OTHER
                    MOVE 'LECTURE ENREGISTREMENT' TO ERR-MSG
                    MOVE FS-ENT TO ERR-CODE
                    PERFORM FIN-ERREURTRAITEMENT
            END-EVALUATE.

        TRAITEMENT-VERIFCONDITION.
       ******************************************************************
       * VERIFICATION DES CONDITIONS POUR UN ENREGISTREMENT             *
       ******************************************************************
       * ALGORITHME : ON COMPTE LE NOMBRE DE CONDITIONS NON VERIFIEES   *
       *              SI CE NOMBRE EST >0 ALORS ON CONSIDERE            *
       *              L'ENREGISTREMENT COMME ERRONE                     *
       ******************************************************************
            MOVE 0 TO ERR-CPT
       *    VERIFICATION DES QUATRE CONDITIONS
            IF E-CODE-PRDT = SPACES
                DISPLAY 'CODE PRODUIT VIDE                :' E-CODE-PRDT
                ADD 1 TO ERR-CPT
            END-IF
            IF E-TYPE-MVT NOT = 'E' AND E-TYPE-MVT NOT = 'S'
                DISPLAY 'TYPE MOUVEMENT ERRONE            :' E-TYPE-MVT
                ADD 1 TO ERR-CPT
            END-IF
            IF E-QTE-MVT IS NOT NUMERIC
                DISPLAY 'LA QUANTITE N''EST PAS NUMERIQUE  :' E-QTE-MVT
                ADD 1 TO ERR-CPT
            ELSE
                IF E-QTE-MVT NOT > 0
                    DISPLAY 'LA QUANTITE EST EGALE A ZERO    :'
                             E-QTE-MVT
                    ADD 1 TO ERR-CPT
                END-IF
            END-IF
       *    ECRITURE DE L'ENREGISTREMENT SI AUCUNE ERREUR
            IF ERR-CPT = 0
                PERFORM TRAITEMENT-ECRIRESOR
            ELSE
       *    EN CAS D'ERREUR ON AUGMENTE LE COMPTEUR D'ENREGISTREMENT ERR
                ADD 1 TO CPT-ENR-ERRONE OF CPT-BILAN
            END-IF.

        TRAITEMENT-ECRIRESOR.
       ******************************************************************
       * ECRITURE DANS LE FICHIER DE SORTIE                             *
       ******************************************************************
            MOVE E-MOUVEMENT TO S-MOUVEMENT
            WRITE S-MOUVEMENT
            ADD 1 TO CPT-ENR-ECRIT OF CPT-BILAN
            IF FS-SOR NOT = '00'
                MOVE 'ECRITURE DANS FICSOR' TO ERR-MSG
                MOVE FS-SOR TO ERR-CODE
                PERFORM FIN-ERREURFICHIER
            END-IF.

       *******
        FIN.
            DISPLAY 'FIN'
            STOP RUN.
        FIN-ERREURFICHIER.
            DISPLAY 'ERREUR FICHIER   ' ERR-MSG ' ' ERR-CODE
            MOVE 17 TO RETURN-CODE
            PERFORM FIN.
        FIN-ERREURTRAITEMENT.
            DISPLAY 'ERREUR TRAITEMENT' ERR-MSG ' ' ERR-CODE
            MOVE 15 TO RETURN-CODE
            PERFORM FIN.
 MEMBER NAME  A03P6
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03P6.
        AUTHOR. MAXIME.
        DATE-WRITTEN. 01/12/2023.
        DATE-COMPILED. 01/12/2023.
       ******************************************************************
       *    PROGRAMME A03P6                                             *
       *                                                                *
       *                                                                *
       * INPUT DU PROGRAMME :                                           *
       *   DDFICENT  LE FICHIER AVEC LES MOUVEMENTS                     *
       *   DDFICSOR  LE FICHIER DE SORTIE AVEC LE TOTAL DU STOCK        *
       ******************************************************************

       * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER.
            IBM-3090
       * COMMENTER LA LIGNE SUIVANTE POUR CACHER LES TRACES DE DEBUG
       *    WITH DEBUGGING MODE
            .
        OBJECT-COMPUTER. IBM-3090.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
       *    CURRENCY SIGN IS "E".
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT FIC-ENT ASSIGN TO DDFICENT FILE STATUS IS FS-ENT.
            SELECT FIC-SOR ASSIGN TO DDFICSOR FILE STATUS IS FS-SOR.

       * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        DATA DIVISION.
        FILE SECTION.
       * FICHIER D'ENTREE AVEC LES ENREGISTREMENTS A CONTROLER
        FD FIC-ENT
            RECORD 80 CHARACTERS
            DATA RECORD IS E-MOUVEMENT
            RECORDING MODE IS F.
        01  E-MOUVEMENT                   PIC X(80).

       * FICHIER DE SORTIE AVEC LES ENREGISTREMENTS VALIDES
        FD FIC-SOR
            RECORD 80 CHARACTERS
            DATA RECORD IS S-MOUVEMENT
            RECORDING MODE IS F.
        01  S-MOUVEMENT                   PIC X(80).

        WORKING-STORAGE SECTION.
       * STRUCTURE DES ENREGISTREMENTS
        COPY FMVT    REPLACING ==:VAR:== BY ==WSE==.
        COPY FMVT    REPLACING ==:VAR:== BY ==WSS==.

       * LES FILE STATUS
        77  FS-ENT                        PIC XX      VALUE '00'.
        77  FS-SOR                        PIC XX      VALUE '00'.
       * MESSAGE D'ERREUR EN CAS DE ABANDON DU TRAITEMENT
        77  ERR-MSG                       PIC X(35)   VALUE SPACES.
        77  ERR-CODE                      PIC X(10)   VALUE SPACES.
        77  ERR-CPT                       PIC 9(2)    VALUE ZEROS.
       * COMPTEURS POUR LES BILANS
        01  CPT-BILAN.
            05 CPT-ENR-LU                 PIC 9(18)   VALUE ZEROS.
       *    05 CPT-ENR-ECRIT              PIC 9(18)   VALUE ZEROS.
       *    05 CPT-ENR-ERRONE             PIC 9(18)   VALUE ZEROS.
        77                                PIC X       VALUE 'A'.
            88 FIN-FICHIER                            VALUE 'F'.
       *    MISE EN FORME DU BILAN AVEC LES COMPTEURS A LA FIN
        01  BILAN-LU.
            05 MSG                        PIC X(31)
                           VALUE 'NOMBRE ENREGISTREMENTS LUS'.
            05 FILLER                     PIC X.
            05 CPT-ENR-LU                 PIC Z(8)9.
       *01  BILAN-ECRIT.
       *    05 MSG                        PIC X(31)
       *                   VALUE 'NOMBRE ENREGISTREMENTS ECRITS'.
       *    05 FILLER                     PIC X.
       *    05 CPT-ENR-ECRIT              PIC Z(8)9.
       * AJOUT DES PRIX UNITAIRES EN FONCTION DU CODE PRODUIT
        01  TAB-PRIX.
            05 PIC X(4)       VALUE 'Z001'.
            05 PIC 9(3)V99    VALUE  51,69.
            05 PIC X(4)       VALUE 'A001'.
            05 PIC 9(3)V99    VALUE   4,05.
            05 PIC X(4)       VALUE 'A006'.
            05 PIC 9(3)V99    VALUE 100,00.
            05 PIC X(4)       VALUE 'D110'.
            05 PIC 9(3)V99    VALUE 581,55.
            05 PIC X(4)       VALUE 'R001'.
            05 PIC 9(3)V99    VALUE  78,00.
        01  REDEFINES TAB-PRIX.
            05 POSTE-PRIX  OCCURS 5.
               10 P-CODE-PRD  PIC X(4).
               10 P-PRIX-UNI  PIC 9(3)V99.
        01  REDEFINES TAB-PRIX.
            05 POSTE-PRIX-X OCCURS 5.
               10 P-CODE-PRD-X PIC X.
               10 FILLER       PIC X(8).
        77  NB-CODE-PRIX       PIC 9(18)    VALUE 5.
       * COMPTEUR DES QUANTITE EN FONCTION DU CODE PRODUIT
        01  TAB-QUANTITE.
            05 PIC X(4)       VALUE 'A001'.
            05 PIC S9(8)      VALUE  ZEROS.
            05 PIC X(4)       VALUE 'A006'.
            05 PIC S9(8)      VALUE  ZEROS.
            05 PIC X(4)       VALUE 'A011'.
            05 PIC S9(8)      VALUE  ZEROS.
            05 PIC X(4)       VALUE 'A050'.
            05 PIC S9(8)      VALUE  ZEROS.
            05 PIC X(4)       VALUE 'D110'.
            05 PIC S9(8)      VALUE  ZEROS.
            05 PIC X(4)       VALUE 'R001'.
            05 PIC S9(8)      VALUE  ZEROS.
            05 PIC X(4)       VALUE 'Z001'.
            05 PIC S9(8)      VALUE  ZEROS.
        01  REDEFINES TAB-QUANTITE.
            05 POSTE-QTE  OCCURS 7.
               10 P-CODE-PRD  PIC X(4).
               10 P-QTE-MVT   PIC S9(8).
        77  NB-CODEPRDT-QTE   PIC 9(3)      VALUE 7.
       * VARIABLES DE TRAVAIL SPECIFIQUES A L'EXERCICE
        77  COMPTEUR          PIC 9(18)     VALUE ZERO.
        77  COMPTEUR-ED       PIC Z(4)9     VALUE ZERO.
        77  ANCIEN-CODE-PRDT  PIC X(4)      VALUE ZERO.
       *     INDICE
        77  I                             PIC 9(18)   VALUE ZEROS.
        77  I-CODEPRDT-QTE                PIC 9(18)   VALUE ZEROS.
        77  INDICATEUR-RUPTURE-CODEPRDT   PIC X       VALUE SPACE.
            88 RUPTURE-CODEPRDT-RESET                 VALUE SPACE.
            88 RUPTURE-CODEPRDT                       VALUE 'R'.
        01  STOCK-ED.
            05 STOCK-CODE-PRDT                PIC X(4).
            05                            PIC X.
            05 STOCK-TYPE-MVT                 PIC X.
                88 MOUVEMENT-ENTREE               VALUE 'E'.
                88 MOUVEMENT-SORTIE               VALUE 'S'.
            05                            PIC X.
            05 STOCK-QTE-MVT                  PIC Z(4)9.
        77  STOCK-QTE-MVT-ED-SIGN         PIC +(5)9.
        01  POSTE-PRX-ED.
            05 P-CODE-PRD-ED              PIC X(4).
            05 FILLER                     PIC XX       VALUE SPACES.
            05 P-PRIX-UNI-ED              PIC $(4)9,99 VALUE ZEROS.

       * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        PROCEDURE DIVISION.
            PERFORM DEBUT.
            PERFORM TRAITEMENT.
            PERFORM FIN-OK.
            STOP RUN.

       *******
        DEBUT.
       ******************************************************************
       * OUVERTURE DES FICHIERS ET AFFICHAGE D'UN MESSAGE DE DEBUT      *
       ******************************************************************
            DISPLAY 'DEBUT'.
            PERFORM DEBUT-OUVRIR-FICENT
            PERFORM DEBUT-OUVRIR-FICSOR

            .
        DEBUT-OUVRIR-FICENT.
       ******************************************************************
       * OUVERTURE DU FICHIER CLIENT AVEC CONTROLE SI LE FICHIER EST    *
       * VIDE                                                           *
       ******************************************************************
            OPEN INPUT FIC-ENT
            EVALUATE FS-ENT
                WHEN '10'
                WHEN '00'
                    CONTINUE
                WHEN OTHER
                    MOVE 'OPEN FIC-ENT' TO ERR-MSG
                    MOVE FS-ENT TO ERR-CODE
                    PERFORM FIN-ERREURFICHIER
            END-EVALUATE

       *    TRAITEMENT DU FICHIER SANS ENREGISTREMENT
            PERFORM TRAITEMENT-READNEXT
            IF FS-ENT = '10'
                    MOVE 'FICHIER VIDE' TO ERR-MSG
                    MOVE FS-ENT TO ERR-CODE
                    PERFORM FIN-ERREURFICHIER
            END-IF.

        DEBUT-OUVRIR-FICSOR.
       ******************************************************************
       * OUVERTURE DU FICHIER DE SORTIE                                 *
       ******************************************************************
            OPEN OUTPUT FIC-SOR
            EVALUATE FS-SOR
                WHEN '00'
                    CONTINUE
                WHEN OTHER
                    MOVE 'OPEN FIC-SOR ' TO ERR-MSG
                    MOVE FS-ENT TO ERR-CODE
                    PERFORM FIN-ERREURFICHIER
            END-EVALUATE.

       *******
        TRAITEMENT.
       ******************************************************************
       * TRAITEMENT DES ENREGISTREMENTS DU FICHIER D'ENTREE             *
       * PUIS AFFICHAGE DES BILANS A LA FIN                             *
       ******************************************************************
       *    TRAITEMENT DU PREMIER ENREGISTREMENT
            EVALUATE FS-ENT
                WHEN '00'
                    ADD 1 TO CPT-ENR-LU OF CPT-BILAN
                    PERFORM TRAITEMENT-INIT
                    PERFORM TRAITEMENT-COMPTEQTE
                    PERFORM TRAITEMENT-READNEXT
                WHEN OTHER
                    PERFORM TRAITEMENT-ERREURLECTURE
            END-EVALUATE

       *    TRAITEMENT DES ENREGISTREMENTS SUIVANTS
            PERFORM TRAITEMENT-ENR UNTIL FIN-FICHIER


       *    AFFICHAGE DES BILANS
            MOVE CORRESPONDING CPT-BILAN TO BILAN-LU
       *    MOVE CORRESPONDING CPT-BILAN TO BILAN-ECRIT
       *    MOVE CORRESPONDING CPT-BILAN TO BILAN-ERRONE
            DISPLAY BILAN-LU
       *    DISPLAY BILAN-ECRIT
       *    DISPLAY BILAN-ERRONE

       *    AFFICHAGE DU STOCK
            PERFORM TRAITEMENT-AFFICHERQUANTITE


       *    AFFICHAGE DES NOUVEAU PRIX
            PERFORM TRAITEMENT-AFFICHEPRIX
            DISPLAY 'MODIFICATION DES PRIX.........'
       *    MODIFICATION DES PRIX
            PERFORM TRAITEMENT-TABLEPRIX
       *    AFFICHAGE DES NOUVEAU PRIX
            PERFORM TRAITEMENT-AFFICHEPRIX

            .
        TRAITEMENT-INIT.
            SET RUPTURE-CODEPRDT TO TRUE
            MOVE 1 TO COMPTEUR
            MOVE WSE-CODE-PRDT TO ANCIEN-CODE-PRDT
       D    DISPLAY 'D- SET 1 TO ' ANCIEN-CODE-PRDT

            .
        TRAITEMENT-READNEXT.
            READ FIC-ENT INTO WSE-MOUVEMENT

            .
        TRAITEMENT-ENR.
       ******************************************************************
       * TRAITEMENT D'UN ENREGISTREMENT                                 *
       ******************************************************************
       * ALGORITHME :                                                   *
       *                                                                *
       ******************************************************************
            EVALUATE FS-ENT
                WHEN '00'
       *            REINITIALISATION DU COMPTEUR DE RUPTURE
                    SET RUPTURE-CODEPRDT-RESET TO TRUE
       D            DISPLAY 'D- *** NEW PRODUIT ***'
                    ADD 1 TO CPT-ENR-LU OF CPT-BILAN
                    IF WSE-CODE-PRDT = ANCIEN-CODE-PRDT
       D                DISPLAY 'D- +1 TO ' ANCIEN-CODE-PRDT
                        ADD  1 TO COMPTEUR
                    ELSE
       D                DISPLAY 'D- RUPTURE'

       *                SI ON DETECTE LA RUPTURE ON CHANGE L'INDICATEUR
                        SET RUPTURE-CODEPRDT TO TRUE

       *                AFFICHAGE DU COMPTE
                        MOVE COMPTEUR TO COMPTEUR-ED
                        PERFORM TRAITEMENT-AFFICHERCOMPTEUR

       *                REINITIALISATION DU COMPTEUR ET CHANGEMENT DE REF
                        PERFORM TRAITEMENT-INIT
                    END-IF
       *            CALCUL DES QUANTITES
                    PERFORM TRAITEMENT-COMPTEQTE
       *            PASSAGE AU SUIVANT
                    PERFORM TRAITEMENT-READNEXT

                WHEN '10'
                    SET FIN-FICHIER TO TRUE
       *        NE PAS OUBLIER D'AFFICHER LE DERNIER RESULTAT
                    PERFORM TRAITEMENT-AFFICHERCOMPTEUR

                WHEN OTHER
                    PERFORM TRAITEMENT-ERREURLECTURE
            END-EVALUATE

            .
        TRAITEMENT-ERREURLECTURE.
            MOVE 'LECTURE ENREGISTREMENT' TO ERR-MSG
            MOVE FS-ENT TO ERR-CODE
            PERFORM FIN-ERREURTRAITEMENT

            .
        TRAITEMENT-AFFICHERCOMPTEUR.
            MOVE COMPTEUR TO COMPTEUR-ED
            DISPLAY 'CODE PRODUIT ' ANCIEN-CODE-PRDT ' '
                    'NB ENR. = ' COMPTEUR-ED

            .
        TRAITEMENT-AFFICHERQUANTITE.
            DISPLAY 'CONTENU DU STOCK'
            PERFORM VARYING I FROM 1 BY 1 UNTIL
                                 I > NB-CODEPRDT-QTE
                 IF P-QTE-MVT OF POSTE-QTE(I) NOT = 0
       *         CONTROLE DU SIGNE DU STOCK
                     IF P-QTE-MVT OF POSTE-QTE(I) > 0
       *             SURPLUS DANS LE STOCK
                         SET MOUVEMENT-ENTREE TO TRUE
                     ELSE
       *             DEFICIT DANS LE STOCK
                         SET MOUVEMENT-SORTIE TO TRUE
                     END-IF

                     MOVE P-CODE-PRD OF POSTE-QTE (I)
                          TO STOCK-CODE-PRDT
                     MOVE P-QTE-MVT OF POSTE-QTE (I)
                          TO STOCK-QTE-MVT
                     DISPLAY STOCK-ED

       *             ECRITURE DANS LE FICHIER
                     MOVE SPACES TO WSS-MOUVEMENT
                     MOVE STOCK-CODE-PRDT TO WSS-CODE-PRDT
                     MOVE STOCK-TYPE-MVT  TO WSS-TYPE-MVT
                     MOVE STOCK-QTE-MVT   TO WSS-QTE-MVT
                     WRITE S-MOUVEMENT FROM WSS-MOUVEMENT
                 END-IF
            END-PERFORM
            DISPLAY 'FIN CONTENU DU STOCK'

            .
        TRAITEMENT-AFFICHEPRIX.
            DISPLAY 'TABLE DES PRIX'
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > NB-CODE-PRIX
                MOVE P-CODE-PRD OF POSTE-PRIX (I) TO P-CODE-PRD-ED
                MOVE P-PRIX-UNI OF POSTE-PRIX (I)  TO P-PRIX-UNI-ED
                DISPLAY POSTE-PRX-ED
                MOVE SPACES TO POSTE-PRX-ED
            END-PERFORM
            DISPLAY 'FIN TABLE DES PRIX'

            .
        TRAITEMENT-TABLEPRIX.
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > NB-CODE-PRIX
       D        DISPLAY 'D- P-CODE-PRD ' P-CODE-PRD-X (I)
                EVALUATE P-CODE-PRD-X (I)
                    WHEN 'A'
       D                DISPLAY 'D- *1,1'
                        COMPUTE P-PRIX-UNI OF POSTE-PRIX(I) =
                            P-PRIX-UNI OF POSTE-PRIX(I) * 1,1
                    WHEN 'D'
       D                DISPLAY 'D- -50'
                        COMPUTE P-PRIX-UNI OF POSTE-PRIX(I) =
                            P-PRIX-UNI OF POSTE-PRIX(I) - 50
                END-EVALUATE
            END-PERFORM


            .
        TRAITEMENT-COMPTEQTE.
       ******************************************************************
       * CALCUL DE LA QUANTITE DU PRODUIT                               *
       ******************************************************************
       * ALGORITHME : ON INCREMENTE LA QUANTITE DEJA ENREGISTRE         *
       *              LE TABLEAU DES QUANTITE ETANT INDICE IL FAUT      *
       *              D'ABORD RECHERCHER LE POSTE                       *
       *              ON OPTIMISE EN CONTROLANT S'IL Y A EU RUPTURE OU  *
       *              NON
       ******************************************************************
       *    RECHERCHE DE L'INDICE DU CODE PRODUIT SI RUPTURE
            IF RUPTURE-CODEPRDT
                 MOVE 0 TO I-CODEPRDT-QTE
       D         DISPLAY 'D- RUPTURE DETECTEE : RECHERCHE CODE PRODUIT'
                 PERFORM VARYING I FROM 1 BY 1 UNTIL
                                 I > NB-CODEPRDT-QTE
       D              DISPLAY 'D- I= ' I ' POSTE='
       D                      P-CODE-PRD OF POSTE-QTE (I)
                      IF P-CODE-PRD OF POSTE-QTE (I) =
       -                 WSE-CODE-PRDT
                          MOVE I TO I-CODEPRDT-QTE
                          MOVE NB-CODEPRDT-QTE TO I
                      END-IF
                 END-PERFORM
       *         SI L'INDICE N'A PAS ETE MODIFIE C'EST QUE LE CODE
       *         PRODUIT N'EST PAS DANS LA TABLE
                 IF I-CODEPRDT-QTE = 0
                      MOVE 'ERREUR CODE PRODUIT INTROUVABLE'
       -                   TO ERR-MSG
                      MOVE WSE-CODE-PRDT TO ERR-CODE
                      PERFORM FIN-ERREURTRAITEMENT
                 END-IF
            END-IF

       *    ON INCREMENTE LA QUANTITE SI MOUVEMENT ENTREE (E)
       *    SINON ON DECREMENTE (SORTIE (S))
            EVALUATE WSE-TYPE-MVT
                WHEN 'E'
       *            DEBUG
       D            MOVE P-QTE-MVT OF POSTE-QTE (I-CODEPRDT-QTE)
       D                           TO STOCK-QTE-MVT-ED-SIGN
       D            DISPLAY 'D- PRODUIT ' WSE-CODE-PRDT ' + '
       D                    WSE-QTE-MVT
       D                    ' TO ' STOCK-QTE-MVT-ED-SIGN

       *            AJOUT
                    ADD WSE-QTE-MVT TO P-QTE-MVT
                                    OF POSTE-QTE (I-CODEPRDT-QTE)
                WHEN 'S'
       *            DEBUG
       D            MOVE P-QTE-MVT OF POSTE-QTE (I-CODEPRDT-QTE)
       D                           TO STOCK-QTE-MVT-ED-SIGN
       D            DISPLAY 'D- PRODUIT ' WSE-CODE-PRDT ' - '
       D                    WSE-QTE-MVT
       D                    ' TO ' STOCK-QTE-MVT-ED-SIGN

       *            SOUSTRACTION
                    SUBTRACT WSE-QTE-MVT FROM P-QTE-MVT
                                         OF POSTE-QTE (I-CODEPRDT-QTE)
                WHEN OTHER
                    MOVE 'TYPE MOUVEMENT INCONNU' TO ERR-MSG
                    MOVE WSE-TYPE-MVT TO ERR-CODE
                    PERFORM FIN-ERREURTRAITEMENT
            END-EVALUATE

            .
       *TRAITEMENT-ECRIRESOR.
       ******************************************************************
       * ECRITURE DANS LE FICHIER DE SORTIE                             *
       ******************************************************************
       *
       *    L'ENREGISTREMENT EST RECONDUIT DANS LE BUFFER DE SORTIE
       *    MOVE E-MOUVEMENT TO S-MOUVEMENT
       *
       *    AJOUT DU PRIX UNITAIRE APRES SINON IL EST ECRASE
       *    MOVE E-PRX-UNIT TO S-PRX-UNIT OF S-MOUVEMENT
       *
       *    AFFICHAGE DU PRODUIT (UNIQUEMENT EN MODE DEBUG)
       *    MOVE CORRESPONDING S-MOUVEMENT TO S-MOUVEMENT-EDITION
       *    MOVE E-PRX-TOTAL TO S-PRX-TOTAL OF S-MOUVEMENT-EDITION
       *    DISPLAY S-MOUVEMENT-EDITION
       *
       *    ECRITURE DANS LE FICHIER OUVERT EN OUTPUT ET VERIFICATION
       *    WRITE S-MOUVEMENT
       *    IF FS-SOR NOT = '00'
       *        MOVE 'ECRITURE DANS FICSOR' TO ERR-MSG
       *        MOVE FS-SOR TO ERR-CODE
       *        PERFORM FIN-ERREURFICHIER
       *    END-IF
       *
       *    INCREMENT DU COMPTEUR D'ECRITURE
       *    ADD 1 TO CPT-ENR-ECRIT OF CPT-BILAN.

       *******
        FIN.
            DISPLAY 'FIN'
            STOP RUN.

        FIN-OK.
       *    CLOSE FIC-ENT FIC-SOR
            CLOSE FIC-ENT
            PERFORM FIN.

        FIN-ERREURFICHIER.
            DISPLAY 'ERREUR FICHIER   ' ' ' ERR-MSG ' ' ERR-CODE
            MOVE 17 TO RETURN-CODE
            PERFORM FIN.

        FIN-ERREURTRAITEMENT.
            DISPLAY 'ERREUR TRAITEMENT' ' ' ERR-MSG ' ' ERR-CODE
            MOVE 15 TO RETURN-CODE
            PERFORM FIN.
 MEMBER NAME  A03P7
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03P7.
        AUTHOR. MAXIME.
        DATE-WRITTEN. 04/12/2023.
        DATE-COMPILED. 04/12/2023.
       ******************************************************************
       *    PROGRAMME A03P7                                             *
       * APARIEMENT DE DEUX FICHIERS ET ECRITURE DU RESULTAT DANS UN    *
       * TROISIEME FICHIER A CREER.                                     *
       *                                                                *
       * INPUT DU PROGRAMME :                                           *
       *   DDFICENT1 LE FICHIER AVEC LES MOUVEMENTS DES PRODUITS        *
       *   DDFICENT2 LE FICHIER AVEC LES PRIX DES PRODUITS              *
       *   DDFICSOR  LE FICHIER DE SORTIE LES MOUVEMENTS ET LES PRIX    *
       ******************************************************************

       * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER.
            IBM-3090
       * COMMENTER LA LIGNE SUIVANTE POUR CACHER LES TRACES DE DEBUG
       *    WITH DEBUGGING MODE
            .
        OBJECT-COMPUTER. IBM-3090.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
       *    CURRENCY SIGN IS "E".
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT FIC-ENT-MVT  ASSIGN TO DDFICMVT
                FILE STATUS IS FS-ENT-MVT.
            SELECT FIC-ENT-PRX  ASSIGN TO DDFICPRX
                FILE STATUS IS FS-ENT-PRX.
            SELECT FIC-SOR ASSIGN TO DDFICSOR FILE STATUS IS FS-SOR.

       * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        DATA DIVISION.
        FILE SECTION.
       * FICHIER D'ENTREE AVEC LES MOUVEMENTS
        FD FIC-ENT-MVT
            RECORD 80 CHARACTERS
            DATA RECORD IS E-MOUVEMENT
            RECORDING MODE IS F.
        01  E-MOUVEMENT                   PIC X(80).
        FD FIC-ENT-PRX
            RECORD 80 CHARACTERS
            DATA RECORD IS E-PRIX
            RECORDING MODE IS F.
        01  E-PRIX                        PIC X(80).

       * FICHIER DE SORTIE AVEC LA FUSION DES INFORMATIONS
        FD FIC-SOR
            RECORD 80 CHARACTERS
            DATA RECORD IS S-MOUVEMENT
            RECORDING MODE IS F.
        01  S-MOUVEMENT                   PIC X(80).

        WORKING-STORAGE SECTION.
       * STRUCTURE DES ENREGISTREMENTS
        COPY FMVT    REPLACING ==:VAR:== BY ==WSE==.
        COPY FPX     REPLACING ==:VAR:== BY ==WSE==.
        COPY FMVTPX  REPLACING ==:VAR:== BY ==WSE==.

       * LES FILE STATUS
        77  FS-ENT-MVT                    PIC XX      VALUE '00'.
        77  FS-ENT-PRX                    PIC XX      VALUE '00'.
        77  FS-SOR                        PIC XX      VALUE '00'.
       * MESSAGE D'ERREUR EN CAS D'ABANDON DU TRAITEMENT
        77  ERR-MSG                       PIC X(35)   VALUE SPACES.
        77  ERR-CODE                      PIC X(10)   VALUE SPACES.
        77  ERR-CPT                       PIC 9(2)    VALUE ZEROS.
       * COMPTEURS POUR LES BILANS
        01  CPT-BILAN.
            05 CPT-ENR-LU                 PIC 9(18)   VALUE ZEROS.
       *    05 CPT-ENR-ECRIT              PIC 9(18)   VALUE ZEROS.
       *    05 CPT-ENR-ERRONE             PIC 9(18)   VALUE ZEROS.
        77                                PIC X       VALUE 'A'.
            88 FIN-FICHIER                            VALUE 'F'.
       *    MISE EN FORME DU BILAN AVEC LES COMPTEURS A LA FIN
        01  BILAN-LU.
            05 MSG                        PIC X(31)
                           VALUE 'NOMBRE ENREGISTREMENTS LUS'.
            05 FILLER                     PIC X.
            05 CPT-ENR-LU                 PIC Z(8)9.
        01  BILAN-ECRIT.
            05 MSG                        PIC X(31)
                           VALUE 'NOMBRE ENREGISTREMENTS ECRITS'.
            05 FILLER                     PIC X.
            05 CPT-ENR-ECRIT              PIC Z(8)9.
       * VARIABLES DE TRAVAIL SPECIFIQUES A L'EXERCICE
        77  COMPTEUR          PIC 9(18)     VALUE ZERO.
        77  COMPTEUR-ED       PIC Z(4)9     VALUE ZERO.
        77  ANCIEN-CODE-PRDT  PIC X(4)      VALUE ZERO.
       *     INDICE
        77  I                             PIC 9(18)   VALUE ZEROS.
        77  I-CODEPRDT-QTE                PIC 9(18)   VALUE ZEROS.
        77  INDICATEUR-RUPTURE-CODEPRDT   PIC X       VALUE SPACE.
            88 RUPTURE-CODEPRDT-RESET                 VALUE SPACE.
            88 RUPTURE-CODEPRDT                       VALUE 'R'.
        01  STOCK-ED.
            05 STOCK-CODE-PRDT                PIC X(4).
            05                            PIC X.
            05 STOCK-TYPE-MVT                 PIC X.
                88 MOUVEMENT-ENTREE               VALUE 'E'.
                88 MOUVEMENT-SORTIE               VALUE 'S'.
            05                            PIC X.
            05 STOCK-QTE-MVT                  PIC Z(4)9.
        77  STOCK-QTE-MVT-ED-SIGN         PIC +(5)9.
        01  POSTE-PRX-ED.
            05 P-CODE-PRD-ED              PIC X(4).
            05 FILLER                     PIC XX       VALUE SPACES.
            05 P-PRIX-UNI-ED              PIC $(4)9,99 VALUE ZEROS.

       * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        PROCEDURE DIVISION.
            PERFORM DEBUT.
            PERFORM TRAITEMENT.
            PERFORM FIN-OK.
            STOP RUN.

       *******
        DEBUT.
       ******************************************************************
       * OUVERTURE DES FICHIERS ET AFFICHAGE D'UN MESSAGE DE DEBUT      *
       ******************************************************************
            DISPLAY 'DEBUT'.
            PERFORM DEBUT-OUVRIR-FICENT-MVT
            PERFORM DEBUT-OUVRIR-FICENT-PRX
            PERFORM DEBUT-CONTROLE-FICENT-VIDE
            PERFORM DEBUT-OUVRIR-FICSOR

            .
        DEBUT-OUVRIR-FICENT-MVT.
       ******************************************************************
       * OUVERTURE DU FICHIER DES MOUVEMENTS                            *
       ******************************************************************
            OPEN INPUT FIC-ENT-MVT
            EVALUATE FS-ENT-MVT
                WHEN '10'
                WHEN '00'
                    CONTINUE
                WHEN OTHER
                    MOVE 'OPEN FIC-ENT-MVT' TO ERR-MSG
                    MOVE FS-ENT-MVT TO ERR-CODE
                    PERFORM FIN-ERREURFICHIER
            END-EVALUATE

       *    TRAITEMENT DU FICHIER SANS ENREGISTREMENT
            PERFORM TRAIT-LECT-MVT
            IF FS-ENT-MVT = '10'
                DISPLAY 'WARNING: FICHIER FIC-ENT-MVT VIDE'
                SET FIC-MVT-VIDE TO TRUE
            END-IF.

            .
        DEBUT-OUVRIR-FICENT-PRX.
       ******************************************************************
       * OUVERTURE DU FICHIER DES MOUVEMENTS                            *
       ******************************************************************
            OPEN INPUT FIC-ENT-PRX
            EVALUATE FS-ENT-PRX
                WHEN '10'
                WHEN '00'
                    CONTINUE
                WHEN OTHER
                    MOVE 'OPEN FIC-ENT-PRX' TO ERR-MSG
                    MOVE FS-ENT-PRX TO ERR-CODE
                    PERFORM FIN-ERREURFICHIER
            END-EVALUATE

       *    TRAITEMENT DU FICHIER SANS ENREGISTREMENT
            PERFORM TRAIT-LECT-PRX
            IF FS-ENT-PRX = '10'
                DISPLAY 'WARNING: FICHIER FIC-ENT-PRX VIDE'
                SET FIC-PRX-VIDE TO TRUE
            END-IF

            .
        DEBUT-CONTROLE-FICENT-VIDE.
       ******************************************************************
       * CONTROLE DES FICHIERS, SI LES DEUX SONT VIDES ARRET            *
       ******************************************************************
            IF FIC-PRX-VIDE AND FIC-MVT-PRX
                MOVE 'LES DEUX FICHIERS SONT VIDES' TO ERR-MSG
                MOVE SPACES TO ERR-CODE
                PERFORM FIN-ERREURFICHIER
            END-IF

            .
        DEBUT-OUVRIR-FICSOR.
       ******************************************************************
       * OUVERTURE DU FICHIER DE SORTIE                                 *
       ******************************************************************
            OPEN OUTPUT FIC-SOR
            EVALUATE FS-SOR
                WHEN '00'
                    CONTINUE
                WHEN OTHER
                    MOVE 'OPEN FIC-SOR' TO ERR-MSG
                    MOVE FS-SOR TO ERR-CODE
                    PERFORM FIN-ERREURFICHIER
            END-EVALUATE.

       *******
        TRAITEMENT.
       ******************************************************************
       * TRAITEMENT DES ENREGISTREMENTS ET FUSION AVANT ECRITURE        *
       ******************************************************************
       * ALGORITHME : LECTURE DU FICHIER DES MOUVEMENTS PUIS            *
       *              DU FICHIER DES PRIX                               *
       *              COMPARAISON ENSUITE DES CLES POUR DETERMINER LES  *
       *              DONNEES A ECRIRE                                  *
       *                                                                *
       *                                                                *
       *                                                                *
       ******************************************************************
            PERFORM UNTIL FIN-FIC-MVT AND FIN-FIC-PRX
       *        LECTURE DU FICHIER DE MOUVEMENT SI POSSIBLE
                IF LECT-MVT-AUTORISEE AND NOT FIN-FIC-MVT
                                      AND NOT FIC-MVT-VIDE
                    PERFORM TRAIT-MVT-INITBOUCLE
                    PERFORM TRAIT-MVT UNTIL RUPTURE-MVT OR FIN-FIC-MVT
                    PERFORM TRAIT-MVT-FINIBOUCLE
                END-IF

       *        LECTURE DU FICHIER DE PRIX SI POSSIBLE
       *        IF LECT-PRX-AUTORISEE AND NOT FIN-FIC-PRX
       *                              AND NOT FIC-PRX-VIDE
       *            PERFORM TRAIT-PRX-INITBOUCLE
       *            PERFORM TRAIT-PRX UNTIL RUPTURE-PRX OR FIN-FIC-PRX
       *            PERFORM TRAIT-PRX-FINIBOUCLE
       *        END-IF

       *    COMPARAISON DES CLES DANS LES DEUX ENSEMBLES DE DONNEES
                EVALUATE TRUE
                    WHEN CLE-PRX < CLE-MVT
                        SET LECT-MVT-INTERDITE TO TRUE
                        INITIALIZE WSS-MVT
                        MOVE CORRESPONDING DATA-PRX TO WSS-PRX OF WSS-ENR
                    WHEN CLE-PRX = CLE-MVT
                        MOVE CORRESPONDING DATA-MVT TO WSS-MVT
                        MOVE CORRESPONDING DATA-PRX TO WSS-PRX OF WSS-ENR
                    WHEN CLE-PRX > CLE-MVT
                        SET LECT-PRX-INTERDITE TO TRUE
                        MOVE CORRESPONDING DATA-MVT TO WSS-MVT
                        INITIALIZE WSS-PRX
                END-EVALUATE

       *    ECRITURE DES DONNEES
                PERFORM TRAITEMENT-ECRIRESOR
                WRITE FIC-SOR-BUFFER FROM WSS-ENR
            END-PERFORM

            .
        TRAIT-MVT-INITBOUCLE.
       ******************************************************************
       * INITIALISATION AVANT LA BOUCLE DES MOUVEMENTS                  *
       ******************************************************************


            .
        TRAIT-MVT.
       ******************************************************************
       * TRAITEMENT DES ENREGISTREMENTS DE MOUVEMENTS                   *
       ******************************************************************
            EVALUATE FS-ENT-MVT
                WHEN '00'
                    PERFORM TRAIT-ENR-MVT
                    PERFORM TRAIT-LECT-MVT
                WHEN '10'
                    DISPLAY 'FIN DU FICHIER MVT'
                    SET FIN-FIC-MVT TO TRUE
                WHEN OTHER
                    MOVE 'LECTURE DU FICHIER MVT' TO ERR-MSG
                    MOVE FS-ENT-MVT TO ERR-CODE
                    PERFORM FIN-ERREURFICHIER
            END-EVALUATE

            .
        TRAIT-ENR-MVT.
       ******************************************************************
       * TRAITEMENT D'UN ENREGISTREMENT DE MOUVEMENT                    *
       ******************************************************************
            IF WSE-CODE-PRDT NOT = RES-CODE-PRDT
                SET RUPTURE-MVT TO TRUE
                MOVE WSE-CODE-PRDT TO RES-PVT-CODE-PRDT
            ELSE
                DISPLAY 'W- MULTIPLE DONNEES MVT POUR LE MEME CODE PRDT'
            END-IF
            MOVE WSE-CODE-PRDT TO CLE-MVT
            MOVE WSE-TYPE-MVT  TO WSS-TYPE-MVT OF DATA-MVT
            MOVE WSE-QTE-MVT   TO WSS-QTE-MVT OF DATA-MVT

            .
        TRAIT-LECT-MVT.
       ******************************************************************
       * LECTURE D'UN ENREGISTREMENT MOUVEMENT                          *
       ******************************************************************
            READ FIC-ENT-MVT

            .
        TRAIT-MVT-FINIBOUCLE.
       ******************************************************************
       * TRAITEMENT A LA FIN DE LA BOUCLE DES MOUVEMENTS                *
       ******************************************************************

            .
        TRAIT-PRX.
       ******************************************************************
       * TRAITEMENT DES ENREGISTREMENTS DE PRIX                         *
       ******************************************************************
            EVALUATE FS-ENT-PRX
                WHEN '00'
                    PERFORM TRAIT-ENR-PRX
                    PERFORM TRAIT-LECT-PRX
                WHEN '10'
                    DISPLAY 'FIN DU FICHIER PRX'
                    SET FIN-FIC-PRX TO TRUE
                WHEN OTHER
                    MOVE 'LECTURE DU FICHIER PRX' TO ERR-MSG
                    MOVE FS-ENT-PRX TO ERR-CODE
                    PERFORM FIN-ERREURFICHIER
            END-EVALUATE


            .
        TRAITEMENT-ERREURLECTURE.
            MOVE 'LECTURE ENREGISTREMENT' TO ERR-MSG
            MOVE FS-ENT TO ERR-CODE
            PERFORM FIN-ERREURTRAITEMENT

            .
        TRAITEMENT-ECRIRESOR.
       ******************************************************************
       * ECRITURE DANS LE FICHIER DE SORTIE                             *
       ******************************************************************
       *    ECRITURE DANS LE FICHIER OUVERT EN OUTPUT ET VERIFICATION
            WRITE FIC-SOR-BUFFER FROM WSS-ENR
            IF FS-SOR NOT = '00'
                MOVE 'ECRITURE DANS FICSOR' TO ERR-MSG
                MOVE FS-SOR TO ERR-CODE
                PERFORM FIN-ERREURFICHIER
            END-IF

       *    INCREMENT DU COMPTEUR D'ECRITURE
            ADD 1 TO CPT-ENR-ECRIT OF CPT-BILAN.

       *******
        FIN.
            DISPLAY 'FIN'
            STOP RUN.

        FIN-OK.
            CLOSE FIC-ENT-MVT FIC-ENT-PRX FIC-SOR
            PERFORM FIN.

        FIN-ERREURFICHIER.
            DISPLAY 'ERREUR FICHIER   ' ' ' ERR-MSG ' ' ERR-CODE
            MOVE 17 TO RETURN-CODE
            PERFORM FIN.

        FIN-ERREURTRAITEMENT.
            DISPLAY 'ERREUR TRAITEMENT' ' ' ERR-MSG ' ' ERR-CODE
            MOVE 15 TO RETURN-CODE
            PERFORM FIN.
 MEMBER NAME  A03P7PIE
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00P7.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 04/12/2023.
       ******************************************************************
       * APPARIEMENT DE FICHIERS                                        *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
       * FICHIER MOUVEMENTS 1
            SELECT FENT1      ASSIGN DDENT1
                   FILE STATUS IS FS1.
       * FICHIER MOUVEMENTS 2
            SELECT FENT2      ASSIGN DDENT2
                   FILE STATUS IS FS2.
       * FICHIER MOUVEMENTS 3
            SELECT FSOR       ASSIGN DDSOR
                   FILE STATUS IS FS3.

        DATA DIVISION.
        FILE SECTION.
        FD  FENT1.
        01  ENR1               PIC X(80).

        FD  FENT2.
        01  ENR2               PIC X(80).

        FD  FSOR.
        01  ENR3               PIC X(80).

        WORKING-STORAGE SECTION.
       * DESCRIPTION DES ENREGISTREMENTS FIC1
        01  WSENT-ENR1.
            05 ENR1-CODE-PRDT PIC X(4).
            05                PIC X.
            05 ENR1-TYPE-MVT  PIC X.
            05                PIC X.
            05 ENR1-QTE-MVT   PIC 99.
            05                PIC X(71).

       * DESCRIPTION DES ENREGISTREMENTS FIC2
        01  WSENT-ENR2.
            05 ENR2-CODE-PRDT PIC X(4).
            05                PIC X.
            05 ENR2-PRIX      PIC 9(3)V99.
            05                PIC X(70).

       * DESCRIPTION DES ENREGISTREMENTS FIC3
        01  WSENT-ENR3.
            05 ENR3-CODE-PRDT PIC X(4).
            05                PIC X.
            05 ENR3-TYPE-MVT  PIC X.
            05                PIC X.
            05 ENR3-QTE-MVT   PIC 99.
            05                PIC X.
            05 ENR3-PRIX      PIC 9(3)V99.
            05                PIC X(65).

       * FILE STATUS
        77  FS1                PIC XX         VALUE ZEROES.
        77  FS2                PIC XX         VALUE ZEROES.
        77  FS3                PIC XX         VALUE ZEROES.

        PROCEDURE DIVISION.
            PERFORM DEBUT
            PERFORM TRAITEMENT
            PERFORM FIN
            STOP RUN
            .

        DEBUT.
            OPEN INPUT FENT1
            IF FS1    NOT = ZEROES
               DISPLAY 'ERREUR OPEN FIC1, FS : ' FS1
               PERFORM FIN-ERREUR
            END-IF

            OPEN INPUT FENT2
            IF FS2    NOT = ZEROES
               DISPLAY 'ERREUR OPEN FIC2, FS : ' FS2
               PERFORM FIN-ERREUR
            END-IF

            OPEN OUTPUT FSOR
            IF FS3    NOT = ZEROES
               DISPLAY 'ERREUR OPEN FIC3, FS : ' FS3
               PERFORM FIN-ERREUR
            END-IF

            PERFORM LIRE-FENT1
            IF ENR1-CODE-PRDT = HIGH-VALUE
               DISPLAY 'ERREUR FIC1 VIDE'
               PERFORM FIN-ERREUR
            END-IF

            PERFORM LIRE-FENT2
            IF ENR2-CODE-PRDT = HIGH-VALUE
               DISPLAY 'ERREUR FIC2 VIDE'
               PERFORM FIN-ERREUR
            END-IF
            .

        TRAITEMENT.
            PERFORM UNTIL ENR1-CODE-PRDT = HIGH-VALUE
                      AND ENR2-CODE-PRDT = HIGH-VALUE
               PERFORM INIT-ENR3
               EVALUATE TRUE
                WHEN ENR1-CODE-PRDT < ENR2-CODE-PRDT
                 PERFORM ALIM-ENR3-ENR1
                 PERFORM ECRIRE-ENR3
                 PERFORM LIRE-FENT1
                WHEN ENR2-CODE-PRDT < ENR1-CODE-PRDT
                 PERFORM ALIM-ENR3-ENR2
                 PERFORM ECRIRE-ENR3
                 PERFORM LIRE-FENT2
                WHEN OTHER
                 PERFORM ALIM-ENR3-ENR1
                 PERFORM ALIM-ENR3-ENR2
                 PERFORM ECRIRE-ENR3
                 PERFORM LIRE-FENT1
                 PERFORM LIRE-FENT2
               END-EVALUATE
            END-PERFORM
            .

        INIT-ENR3.
            MOVE SPACES TO WSENT-ENR3
            INITIALIZE WSENT-ENR3
            MOVE 'E' TO ENR3-TYPE-MVT
            .

        ALIM-ENR3-ENR1.
            MOVE ENR1-CODE-PRDT TO ENR3-CODE-PRDT
            MOVE ENR1-TYPE-MVT  TO ENR3-TYPE-MVT
            MOVE ENR1-QTE-MVT   TO ENR3-QTE-MVT
            .

        ALIM-ENR3-ENR2.
            MOVE ENR2-CODE-PRDT TO ENR3-CODE-PRDT
            MOVE ENR2-PRIX      TO ENR3-PRIX
            .

        LIRE-FENT1.
            READ FENT1  INTO WSENT-ENR1

            EVALUATE FS1
             WHEN ZEROES
              CONTINUE
             WHEN '10'
              MOVE HIGH-VALUE TO ENR1-CODE-PRDT
             WHEN OTHER
              DISPLAY 'ERREUR LECTURE FIC1, FS : ' FS1
              PERFORM FIN-ERREUR
            END-EVALUATE
            .

        LIRE-FENT2.
            READ FENT2  INTO WSENT-ENR2

            EVALUATE FS2
             WHEN ZEROES
              CONTINUE
             WHEN '10'
              MOVE HIGH-VALUE TO ENR2-CODE-PRDT
             WHEN OTHER
              DISPLAY 'ERREUR LECTURE FIC2, FS : ' FS2
              PERFORM FIN-ERREUR
            END-EVALUATE
            .

        ECRIRE-ENR3.
            WRITE ENR3  FROM WSENT-ENR3

            IF FS3 NOT = ZEROES
              DISPLAY 'ERREUR ECRITURE ENR3, FS : ' FS3
              PERFORM FIN-ERREUR
            END-IF
            .

        FIN-ERREUR.
            MOVE 17 TO RETURN-CODE
            STOP RUN
            .

        FIN.
            CLOSE FENT1 FENT2 FSOR
            .
 MEMBER NAME  A03P8
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03P8.
        AUTHOR. MAXIME.
        DATE-WRITTEN. 04/12/2023.
       ******************************************************************
       * FICHIER AVEC DEUX TYPE D'ENREGISTREMENT                        *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
       * FICHIER MOUVEMENTS 1
            SELECT FENT1      ASSIGN DDENT1
                   FILE STATUS IS FS1.

        DATA DIVISION.
        FILE SECTION.
        FD  FENT1 RECORDING MODE IS F.
        01  ENR1               PIC X(80).


        WORKING-STORAGE SECTION.
       * DESCRIPTION DES ENREGISTREMENTS FIC1
        01  WSENT-ENR1.
            05 ENR1-TYPE-ENR  PIC 9(1).
               88 TYPE-1                 VALUE 1.
               88 TYPE-2                 VALUE 2.
            05                PIC X.
            05 ENR1-CODE-PRDT PIC X(4).
            05                PIC X.
            05 PARTIE-VARIABLE.
                10 ENR1-TYPE-MVT  PIC X.
                10                PIC X.
                10 ENR1-QTE-MVT   PIC 99.
                10                PIC X(69).
            05 REDEFINES PARTIE-VARIABLE.
                10 ENR1-PRIX       PIC 9(3)V99.
                10                PIC X(68).


       * DESCRIPTION DES ENREGISTREMENTS FIC3
        01  WSSOR-ENR.
            05 ENR-CODE-PRDT PIC X(4).
            05                PIC X.
            05 ENR-TYPE-MVT   PIC X.
            05                PIC X.
            05 ENR-QTE-MVT    PIC 99.
            05                PIC X.
            05 ENR-PRIX       PIC 9(3)V99.
            05                PIC X(65).

       * FILE STATUS
        77  FS1                PIC XX         VALUE ZEROES.

        PROCEDURE DIVISION.
            PERFORM DEBUT
            PERFORM TRAITEMENT
            PERFORM FIN
            STOP RUN

            .

        DEBUT.
            OPEN INPUT FENT1
            IF FS1    NOT = ZEROES
               DISPLAY 'ERREUR OPEN FIC1, FS : ' FS1
               PERFORM FIN-ERREUR
            END-IF

            PERFORM LIRE-FENT1
            IF ENR1-CODE-PRDT = HIGH-VALUE
               DISPLAY 'ERREUR FIC1 VIDE'
               PERFORM FIN-ERREUR
            END-IF

            .

        TRAITEMENT.
            PERFORM UNTIL ENR1-CODE-PRDT = HIGH-VALUE

               IF TYPE-1
                   MOVE SPACE TO WSSOR-ENR
                   INITIALIZE WSSOR-ENR

                   MOVE ENR1-CODE-PRDT TO ENR-CODE-PRDT OF WSSOR-ENR
                   MOVE ENR1-TYPE-MVT  TO ENR-TYPE-MVT  OF WSSOR-ENR
                   MOVE ENR1-QTE-MVT   TO ENR-QTE-MVT   OF WSSOR-ENR

               ELSE
                   MOVE ENR1-PRIX      TO ENR-PRIX OF WSSOR-ENR
                   DISPLAY WSSOR-ENR
               END-IF
               PERFORM LIRE-FENT1

            END-PERFORM

            .

        LIRE-FENT1.
            READ FENT1  INTO WSENT-ENR1

            EVALUATE FS1
             WHEN ZEROES
              CONTINUE
             WHEN '10'
              MOVE HIGH-VALUE TO ENR1-CODE-PRDT
             WHEN OTHER
              DISPLAY 'ERREUR LECTURE FIC1, FS : ' FS1
              PERFORM FIN-ERREUR
            END-EVALUATE

            .

        FIN-ERREUR.
            MOVE 17 TO RETURN-CODE
            STOP RUN
            .

        FIN.
            CLOSE FENT1
            .
 MEMBER NAME  A03P9
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03P9.
        AUTHOR. MAXIME.
        DATE-WRITTEN. 05/12/2023.
       ******************************************************************
       * APPEL D'UN SOUS-PROGRAMME                                      *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.

        DATA DIVISION.
        WORKING-STORAGE SECTION.
       * ZONE DE COMMMUNICATION
        01  Z-SP1.
            05 Z-CHOIX     PIC 9.
                88 ASKDATEJOUR    VALUE 1.
                88 ASKOTHER       VALUE 2.
                88 ASKOTHER0      VALUE 0.
            05 Z-CODRET    PIC 9.
            05 Z-DATEJOUR  PIC X(8).

        PROCEDURE DIVISION.
       * APPEL STATIQUE
            SET ASKDATEJOUR TO TRUE
            DISPLAY 'APPEL DE A99SP1 AVEC Z-CHOIX = ' Z-CHOIX
            CALL 'A99SP1' USING Z-SP1
            DISPLAY 'Z-CODRET  ' '='  Z-CODRET
            DISPLAY 'Z-DATEJOUR' '='  Z-DATEJOUR
            DISPLAY '* * * * * * * * * * * * * * * * * * * * * * * * * *'

            SET ASKOTHER    TO TRUE
            DISPLAY 'APPEL DE A99SP1 AVEC Z-CHOIX = ' Z-CHOIX
            CALL 'A99SP1' USING Z-SP1
            DISPLAY 'Z-CODRET  ' '='  Z-CODRET
            DISPLAY 'Z-DATEJOUR' '='  Z-DATEJOUR
            DISPLAY '* * * * * * * * * * * * * * * * * * * * * * * * * *'

            SET ASKOTHER0   TO TRUE
            DISPLAY 'APPEL DE A99SP1 AVEC Z-CHOIX = ' Z-CHOIX
            CALL 'A99SP1' USING Z-SP1
            DISPLAY 'Z-CODRET  ' '='  Z-CODRET
            DISPLAY 'Z-DATEJOUR' '='  Z-DATEJOUR
            DISPLAY '* * * * * * * * * * * * * * * * * * * * * * * * * *'



            STOP RUN

            .
 MEMBER NAME  A03SP2
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03SP2.
        AUTHOR. MAXIME.
        DATE-WRITTEN. 05/12/2023.
       ******************************************************************
       * SOUS-PROGRAMME                                                 *
       * CALCULE LA DIFFERENCE ENTRE DEUX DATES                         *
       *                                                                *
       * SI LES DATES SONT NUMERIQUES, IL RETOURNE LA DIFFERENCE EN     *
       * NOMBRE DE JOURS DANS Z2-NBJOURS                                *
       *                                                                *
       * Z2-CODRET = 1 EN CAS D'ERREUR SUR LES ENTREES                  *
       *                                                                *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.

        DATA DIVISION.
        LINKAGE SECTION.
       * ZONE DE COMMMUNICATION
            COPY A99SP2.

        PROCEDURE DIVISION USING Z2-SP2.
       *    INITIALISATION DES VARIABLES
            MOVE 0 TO Z2-CODRET
            MOVE 0 TO Z2-NBJOURS

       *    VERIFICATION DES ENTREES
            IF Z2-DATE1 IS NOT NUMERIC
                MOVE 1 TO Z2-CODRET
            END-IF

            IF Z2-DATE2 IS NOT NUMERIC
                MOVE 1 TO Z2-CODRET
            END-IF

       *    CALCUL DE LA DATE
            IF Z2-CODRET = 0
                COMPUTE Z2-NBJOURS  =
                FUNCTION INTEGER-OF-DATE (Z2-DATE2) -
                FUNCTION INTEGER-OF-DATE (Z2-DATE1)
            END-IF

            GOBACK

            .
 MEMBER NAME  A03P9BIS
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03P9BIS
        AUTHOR. MAXIME.
        DATE-WRITTEN. 05/12/2023.
       ******************************************************************
       * APPEL D'UN SOUS-PROGRAMME                                      *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.

        DATA DIVISION.
        WORKING-STORAGE SECTION.
       * ZONE DE COMMMUNICATION
           COPY A99SP2.
       * EDITION
        77  NBJOURS-ED        PIC Z(4)9.
       *77  PRENOM            PIC X(9) VALUE 'BENOIT'.
       *77  DATENAISSANCE     PIC 9(8) VALUE 19880727.
       *77  PRENOM            PIC X(9) VALUE 'MAXIME'.
       *77  DATENAISSANCE     PIC 9(8) VALUE  19910831.
        77  PRENOM            PIC X(9) VALUE 'JULIEN'.
        01  DATENAISSANCE.
            05 ANNEE          PIC 9(4).
            05                PIC 9(4).
        01 DATENOEL.
            05 ANNEE          PIC 9(4).
            05                PIC 9(4) VALUE 1225.

        PROCEDURE DIVISION.

            PERFORM READ-SYSIN

            PERFORM UNTIL PRENOM = 'FIN'
       *        PREPARATION DE LA DATE DE NAISSANCE DE JESUS
                MOVE ANNEE OF DATENAISSANCE TO ANNEE OF DATENOEL

       *        PREPARATION DES PARAMETRES POUR LE SS PROGRAMME
                MOVE DATENAISSANCE TO Z2-DATE1
                MOVE DATENOEL      TO Z2-DATE2
                CALL 'A03SP2' USING Z2-SP2

       *        CONTROLE DU CODE DE RETOUR
                IF Z2-CODRET = 0
                    PERFORM CHECK-JESUS
                ELSE
                    DISPLAY 'ERREUR: PARAMETRES INVALIDES'
                END-IF

                DISPLAY 'Z2-CODRET  ' '='  Z2-CODRET
                DISPLAY '* * * * * * * * * * * *'
                PERFORM READ-SYSIN
            END-PERFORM

            STOP RUN

            .
        CHECK-JESUS.
            MOVE Z2-NBJOURS TO NBJOURS-ED
       *        DISPLAY 'IL RESTE ' NBJOURS-ED ' JOURS AVANT NOEL |'
            DISPLAY PRENOM ' EST NE ' NBJOURS-ED ' JOURS AVANT NOEL |'

                IF Z2-NBJOURS = 0
                    DISPLAY PRENOM ' EST JESUS |'
                ELSE
                    DISPLAY PRENOM ' N''EST PAS JESUS'
                END-IF

            .
        READ-SYSIN.
            DISPLAY 'READ SYSIN'
            ACCEPT PRENOM
            ACCEPT DATENAISSANCE

            .
 MEMBER NAME  A03P10
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03P10.
        AUTHOR. MAXIME.
        DATE-WRITTEN. 05/12/2023.
       ******************************************************************
       * LECTURE D'UN VSAM KSDS                                         *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT FICKSDS ORGANIZATION IS INDEXED
                           ACCESS MODE IS RANDOM
                           RECORD KEY IS ENR-CODE-PRDT
                           ASSIGN TO DDKSDS
                           FILE STATUS FS.

        DATA DIVISION.
        FILE SECTION.
        FD  FICKSDS RECORD CONTAINS 80 CHARACTERS
                    DATA RECORD IS ENR-PRDT.
        01 ENR-PRDT.
           05 ENR-CODE-PRDT    PIC X(4).
           05 FILLER           PIC X(76).

        WORKING-STORAGE SECTION.
        77  FS                 PIC XX.
        01 WS-ENR.
           05 WS-CODE-PRDT    PIC X(4).
           05                 PIC X.
           05 WS-TYPE-MVT     PIC X.
           05                 PIC X.
           05 WS-QTE-MVT      PIC X(2).
           05                 PIC X.
           05 WS-PRX          PIC 9(3)V99.
           05                 PIC X(65).

        PROCEDURE DIVISION.
            OPEN INPUT  FICKSDS
            EVALUATE FS
                WHEN '00'
                WHEN '10'
                    CONTINUE
                WHEN OTHER
                    DISPLAY 'ERREUR A L''OUVERTURE ' FS
                    MOVE 17 TO RETURN-CODE
                    STOP RUN
            END-EVALUATE

       *    RECHERCHE DES DONNEES POUR UNE CLE
            MOVE 'A006' TO ENR-CODE-PRDT
            PERFORM TRAIT-SEARCHKEY

       *    RECHERCHE DES DONNEES POUR UNE CLE
            MOVE 'MAXI' TO ENR-CODE-PRDT
            PERFORM TRAIT-SEARCHKEY

       *    RECHERCHE DES DONNEES POUR UNE CLE
            MOVE 'R001' TO ENR-CODE-PRDT
            PERFORM TRAIT-SEARCHKEY

            CLOSE FICKSDS

            STOP RUN

            .
        TRAIT-SEARCHKEY.
            DISPLAY 'SEARCH DATA FOR KEY' ' ' ENR-CODE-PRDT
            READ FICKSDS INTO WS-ENR
                         KEY ENR-CODE-PRDT
                         INVALID KEY     PERFORM TRAIT-INVALIDKEY
                         NOT INVALID KEY PERFORM TRAIT-VALIDKEY

            .
        TRAIT-VALIDKEY.
            DISPLAY 'KEY FOUND    ' ' ' ENR-CODE-PRDT
            DISPLAY WS-ENR

            .
        TRAIT-INVALIDKEY.
            DISPLAY 'KEY NOT FOUND' ' ' ENR-CODE-PRDT


            .
 MEMBER NAME  A03SP3
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03SP3.
        AUTHOR. MAXIME.
        DATE-WRITTEN. 06/12/2023.
        DATE-COMPILED. 06/12/2023.
       ******************************************************************
       * SOUS-PROGRAMME                                                 *
       * ACCESSEUR DU FICHIER PRODUIT KSDS                              *
       *                                                                *
       * Z2-CODRET = 1 SI AUCUN ENREGISTREMENT TROUVE                   *
       *                                                                *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT FICPRDT   ORGANIZATION    IS INDEXED
                             ACCESS MODE     IS RANDOM
                             RECORD KEY      IS ENR-CODE-PRDT
                             FILE STATUS     IS FS-PRDT
                             ASSIGN          TO DDPRDT
                             .


        DATA DIVISION.
        FILE SECTION.
        FD  FICPRDT
                             RECORD CONTAINS 80 CHARACTERS
                             DATA RECORD IS ENR.
        01  ENR.
            05 ENR-CODE-PRDT  PIC X(4).
            05 FILLER         PIC X(76).

        WORKING-STORAGE SECTION.
        77  FS-PRDT           PIC XX.

        LINKAGE SECTION.
       * ZONE DE COMMMUNICATION
        01  Z3-SP3.
            05 Z3-CODE-PRDT   PIC X(4).
            05 Z3-CODRET      PIC X.
            05 Z3-ENR         PIC X(80).

        PROCEDURE DIVISION USING Z3-SP3.
       *    INITIALISATION DES VARIABLES
            MOVE '0' TO Z3-CODRET

       *    OUVERTURE DU FICHIER
            OPEN INPUT FICPRDT
            IF FS-PRDT NOT = '00'
                MOVE '9' TO Z3-CODRET
                GOBACK
            END-IF

       *    RECHERCHE DE L'ENREGISTREMENT
            MOVE Z3-CODE-PRDT TO ENR-CODE-PRDT
       D    DISPLAY 'D- ENR-CODE-PRDT IN SP3 ' ENR-CODE-PRDT
            READ FICPRDT INTO Z3-ENR
                         KEY IS ENR-CODE-PRDT
                         INVALID KEY
                             MOVE '1' TO Z3-CODRET
                         NOT INVALID KEY
                             MOVE '0' TO Z3-CODRET
            END-READ

            CLOSE FICPRDT
            GOBACK

            .
 MEMBER NAME  A03SP4
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03SP4.
        AUTHOR. MAXIME.
        DATE-WRITTEN. 06/12/2023.
        DATE-COMPILED. 06/12/2023.
       ******************************************************************
       * SOUS-PROGRAMME                                                 *
       * ACCESSEUR DU FICHIER PRODUIT KSDS                              *
       * EN ECRITURE                                                    *
       *                                                                *
       * Z2-CODRET = 1 SI AUCUN ENREGISTREMENT TROUVE                   *
       *                                                                *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER.
            IBM3090
       *    WITH DEBUGGING MODE
            .
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT FICPRDT   ORGANIZATION    IS INDEXED
                             ACCESS MODE     IS RANDOM
                             RECORD KEY      IS ENR-CODE-PRDT
                             FILE STATUS     IS FS-PRDT
                             ASSIGN          TO DDPRDT
                             .


        DATA DIVISION.
        FILE SECTION.
        FD  FICPRDT
                             RECORD CONTAINS 80 CHARACTERS
                             DATA RECORD IS ENR.
        01  ENR.
            05 ENR-CODE-PRDT  PIC X(4).
            05 FILLER         PIC X(76).

        WORKING-STORAGE SECTION.
        77  FS-PRDT           PIC XX.

        LINKAGE SECTION.
       * ZONE DE COMMMUNICATION
        01  Z3-SP4.
            05 Z3-CODRET          PIC X.
            05 Z3-ENR.
                10 Z3-CODE-PRDT   PIC X(4).
                10                PIC X(76).

        PROCEDURE DIVISION USING Z3-SP4.
       *    INITIALISATION DES VARIABLES
            MOVE '0' TO Z3-CODRET

       *    VERIFICATION DES ENTREES
            IF Z3-CODE-PRDT = SPACES
                MOVE '1' TO Z3-CODRET
                GOBACK
            END-IF

       *    OUVERTURE DU FICHIER
            OPEN I-O    FICPRDT
            IF FS-PRDT NOT = '00'
                MOVE '9' TO Z3-CODRET
                DISPLAY 'ERREUR IN SP4 : OUVERTURE FICPRDT ' FS-PRDT
                GOBACK
            END-IF

       *    ECRITURE DE L'ENREGISTREMENT
       D    DISPLAY 'D- ENR-CODE-PRDT IN SP4 ' Z3-CODE-PRDT
            WRITE ENR    FROM Z3-ENR
                         INVALID KEY
       *                     EN CAS DE DOUBLON DE CLE
       D                     DISPLAY 'D- DOUBLON CLE IN SP4'
                             MOVE '2' TO Z3-CODRET
                         NOT INVALID KEY
       D                     DISPLAY 'D- ECRITURE SUCCES IN SP4'
                             MOVE '0' TO Z3-CODRET
            END-WRITE


            CLOSE FICPRDT
            GOBACK

            .
 MEMBER NAME  A03SP5
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03SP5.
        AUTHOR. MAXIME.
        DATE-WRITTEN. 06/12/2023.
        DATE-COMPILED. 06/12/2023.
       ******************************************************************
       * SOUS-PROGRAMME                                                 *
       * ACCESSEUR DU FICHIER PRODUIT KSDS                              *
       * EN LECTURE ET ECRITURE                                         *
       *                                                                *
       * Z2-CODRET = 1 SI AUCUN ENREGISTREMENT TROUVE                   *
       *                                                                *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER.
            IBM3090
       *    WITH DEBUGGING MODE
            .
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT FICPRDT   ORGANIZATION    IS INDEXED
                             ACCESS MODE     IS RANDOM
                             RECORD KEY      IS ENR-CODE-PRDT
                             FILE STATUS     IS FS-PRDT
                             ASSIGN          TO DDPRDT
                             .


        DATA DIVISION.
        FILE SECTION.
        FD  FICPRDT
                             RECORD CONTAINS 80 CHARACTERS
                             DATA RECORD IS ENR.
        01  ENR.
            05 ENR-CODE-PRDT  PIC X(4).
            05 FILLER         PIC X(76).

        WORKING-STORAGE SECTION.
        77  FS-PRDT           PIC XX.

        LINKAGE SECTION.
       * ZONE DE COMMMUNICATION
        COPY SP5SPEC.

        PROCEDURE DIVISION USING Z5-SP5.
       *    INITIALISATION DES VARIABLES
            SET CORRECT TO TRUE

       *    OUVERTURE DU FICHIER
            OPEN I-O    FICPRDT
            IF FS-PRDT NOT = '00'
                SET ERREUR TO TRUE
                DISPLAY 'E- SP4- OUVERTURE FICPRDT ' FS-PRDT
                GOBACK
            END-IF

       *    EXECUTION DE LA COMMANDE DEMANDEE
            EVALUATE TRUE
                WHEN LECTURE
                    PERFORM TRAIT-LECTURE
                WHEN CREATION
                    PERFORM TRAIT-CREATION
                WHEN MODIFICATION
                    PERFORM TRAIT-MODIFICATION
                WHEN SUPPRESSION
                    PERFORM TRAIT-SUPPRESSION
                WHEN OTHER
                    DISPLAY 'E- SP4- COMMANDE INCONNU '
                            Z5-CODE-FONCTION
                    CLOSE FICPRDT
                    SET ERREUR TO TRUE
                    GOBACK
            END-EVALUATE

       *    FIN DU TRAITEMENT
            CLOSE FICPRDT
            GOBACK

            .
        TRAIT-LECTURE.
       *    RECHERCHE D'UN ENREGISTREMENT
       D    DISPLAY 'D- SP4- RECHERCHE ENR-CODE-PRDT' Z5-CODE-PRDT
            IF Z5-CODE-PRDT = SPACES
                DISPLAY 'E- SP4- CODE PRODUIT NON RENSEIGNE'
                SET ERREUR TO TRUE
            ELSE
                MOVE Z5-CODE-PRDT TO ENR-CODE-PRDT
                READ FICPRDT     INTO Z5-ENR
                                 KEY  ENR-CODE-PRDT
                    INVALID KEY
                        SET NON-TROUVE TO TRUE
                    NOT INVALID KEY
                        SET CORRECT    TO TRUE
                END-READ
            END-IF

            .
        TRAIT-CREATION.
       *    ECRITURE DE L'ENREGISTREMENT
       D    DISPLAY 'D- SP4- CREATION ENR-CODE-PRDT ' Z5-CODE-PRDT
            WRITE ENR    FROM Z5-ENR
                         INVALID KEY
       *                     EN CAS DE DOUBLON DE CLE
       D                     DISPLAY 'D- SP5- DOUBLON CLE'
                             SET EN-DOUBLE TO TRUE
                         NOT INVALID KEY
       D                     DISPLAY 'D- SP5- ECRITURE SUCCES'
                             SET CORRECT   TO TRUE
            END-WRITE

            .
        TRAIT-MODIFICATION.
       *    MODIFICATION D'UN ENREGISTREMENT
       D    DISPLAY 'D- SP4- MODIF ENR-CODE-PRDT ' Z5-CODE-PRDT
            REWRITE ENR  FROM Z5-ENR
                         INVALID KEY
       D                     DISPLAY 'D- SP5- CLE INVALIDE'
                             SET NON-TROUVE TO TRUE
                         NOT INVALID KEY
       D                     DISPLAY 'D- SP5- CLE VALIDE'
                             SET CORRECT    TO TRUE
            END-REWRITE

            .
        TRAIT-SUPPRESSION.
       *    SUPPRESSION  D'UN ENREGISTREMENT
       D    DISPLAY 'D- SP4- SUPPR ENR-CODE-PRDT ' Z5-CODE-PRDT
            PERFORM TRAIT-LECTURE
            DELETE  FICPRDT
                         INVALID KEY
       D                     DISPLAY 'D- SP5- CLE INVALIDE'
                             SET NON-TROUVE TO TRUE
                         NOT INVALID KEY
       D                     DISPLAY 'D- SP5- CLE VALIDE'
                             SET CORRECT    TO TRUE
            END-DELETE

            .
 MEMBER NAME  A03P12
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03P12.
        AUTHOR. MAXIME.
        DATE-WRITTEN. 06/12/2023.
        DATE-COMPILED. 06/12/2023.
       ******************************************************************
       * APPEL D'UN ACCESSEUR                                           *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER.
            IBM3090
       *    WITH DEBUGGING MODE
            .
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.

        DATA DIVISION.
        WORKING-STORAGE SECTION.
       * RECUPERATION DE LA DEFINITION DU SOUS-PROGRAMME
        COPY SP5SPEC.

       * FORMAT DE LA SYSIN
        01 ZA-ENR.
            05 ZA-CODE-FONCTION PIC X.
            05                  PIC X.
            05 ZA-CODE-PRDT     PIC X(4).
            05                  PIC X.
       *   CAS LECTURE OU SUPPRESSION
            05 ZONE-VARIABLE.
               10               PIC X(73).
       *   CAS CREATION OU ECRITURE
            05 REDEFINES ZONE-VARIABLE.
               10 ZA-TYPE-MVT     PIC X.
               10                 PIC X.
               10 ZA-QTE-MVT      PIC 9(2).
               10                 PIC X.
               10 ZA-PRX          PIC 9(3)V99.
               10                 PIC X(63).

        PROCEDURE DIVISION.
            PERFORM DEBUT
            PERFORM TRAITEMENT
            PERFORM FIN

            STOP RUN
            .

        DEBUT.
            DISPLAY 'A03P12 START'
            .

        TRAITEMENT.
       *    LE PROGRAMME LIT LES INSTRUCTIONS DEPUIS LA SYSIN
            PERFORM TRAIT-LIRE-SYSIN

       *    BOUCLE DE LECTURE DE LA SYSIN
            PERFORM UNTIL ZA-ENR = 'FIN'
                MOVE ZA-CODE-FONCTION TO Z5-CODE-FONCTION
                MOVE ZA-CODE-PRDT TO Z5-CODE-PRDT
                EVALUATE TRUE
                    WHEN CREATION
                    WHEN MODIFICATION
                        MOVE ZA-QTE-MVT  TO Z5-QTE-MVT
                        MOVE ZA-TYPE-MVT TO Z5-TYPE-MVT
                        MOVE ZA-PRX      TO Z5-PRX
                END-EVALUATE
       *    APPEL DE L'ACCESSEUR EN STATIQUE
                CALL 'A03SP5' USING Z5-SP5
       *    TRAITEMENT DU CODE DE RETOUR
                PERFORM TRAIT-CODE-RETOUR

                PERFORM TRAIT-LIRE-SYSIN
            END-PERFORM

            STOP RUN

            .
        TRAIT-CODE-RETOUR.
            EVALUATE TRUE
                WHEN CORRECT
       D            DISPLAY 'I- P12- ACTION MENEE AVEC SUCCES'
                    EVALUATE TRUE
                        WHEN LECTURE
                            DISPLAY 'ENREGISTREMENT ' Z5-ENR
                        WHEN CREATION
                            DISPLAY 'CREATION DE L''ENREGISTREMENT '
                            Z5-CODE-PRDT ' OK'
                        WHEN MODIFICATION
                            DISPLAY 'MODIFICATION DE L''ENREGISTREMENT '
                                    Z5-CODE-PRDT ' OK'
                        WHEN SUPPRESSION
                            DISPLAY 'SUPPRESSION DE L''ENREGISTREMENT '
                                    Z5-CODE-PRDT ' OK'
                    END-EVALUATE
                WHEN EN-DOUBLE
                    DISPLAY 'E- P12- CLE DEJA PRESENTE DANS LE FICHIER '
                            Z5-CODE-PRDT
                WHEN NON-TROUVE
                    DISPLAY 'E- P12- CLE ABSENTE DU FICHIER '
                            Z5-CODE-PRDT
                WHEN ERREUR
                    DISPLAY 'E- P12- UNE ERREUR EST SURVENUE '
            END-EVALUATE

            .
        TRAIT-LIRE-SYSIN.
            ACCEPT ZA-ENR
       D    DISPLAY 'D- P12- LECTURE SYSIN : ' ZA-ENR


            .
        FIN.
            DISPLAY 'FIN'
            STOP RUN

            .
 MEMBER NAME  A03P11
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03P11.
        AUTHOR. MAXIME.
        DATE-WRITTEN. 06/12/2023.
        DATE-COMPILED. 06/12/2023.
       ******************************************************************
       * APPEL D'UN ACCESSEUR                                           *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER.
            IBM3090
            WITH DEBUGGING MODE
            .
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.

        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01 WS-ENR.
           05 WS-CODE-PRDT    PIC X(4).
           05                 PIC X.
           05 WS-TYPE-MVT     PIC X.
           05                 PIC X.
           05 WS-QTE-MVT      PIC X(2).
           05                 PIC X.
           05 WS-PRX          PIC 9(3)V99.
           05                 PIC X(65).
       *01 RD-ENR.
       *   88 FIN-SYSIN       VALUE 'FIN'  SPACES.
       *   05 RD-CODE-PRDT    PIC X(4).
       *   05                 PIC X.
       *   05 RD-TYPE-MVT     PIC X.
       *   05                 PIC X.
       *   05 RD-QTE-MVT      PIC X(2).
       *   05                 PIC X.
       *   05 RD-PRX          PIC 9(3),99.
       *   05                 PIC X(64).
        01  Z3-SP3.
           05 Z3-CODE-PRDT    PIC X(4).
           05 Z3-CODRET       PIC X(1).
           05 Z3-ENR          PIC X(80).
        01  Z4-SP4.
           05 Z4-CODRET       PIC X(1).
           05 Z4-ENR          PIC X(80).
        77  WS-PRX-ED         PIC $(3)9(1),99.

        PROCEDURE DIVISION.
       *    LECTURE DE LA COMMANDE
            PERFORM TRAIT-LIRE-SYSIN
            EVALUATE RD-ENR
                WHEN 'ECRITURE'
                    DISPLAY 'ECRITURE DETECTEE'
                    PERFORM TRAIT-ECRIRE-DEPUIS-SYSIN
                WHEN 'RECHERCHE'
                    PERFORM TRAIT-RECHERCHE-CLE
                WHEN OTHER
                    DISPLAY 'PAS DE COMMANDE TROUVEE'
            END-EVALUATE

       *    PERFORM TRAIT-ECRITURE-MANUELLE

            STOP RUN

            .
        TRAIT-ECRIRE-DEPUIS-SYSIN.
       *    ECRITURE AVEC LE CONTENU LU DESPUIS LA SYSIN
            PERFORM TRAIT-LIRE-SYSIN

            PERFORM UNTIL FIN-SYSIN
       *        IL FAUT FAIRE CHAMP PAR CHAMP SINON PAS DE CONVERSION
                MOVE RD-CODE-PRDT TO WS-CODE-PRDT
                MOVE RD-TYPE-MVT  TO WS-TYPE-MVT
                MOVE RD-QTE-MVT   TO WS-QTE-MVT
                MOVE RD-PRX       TO WS-PRX
                PERFORM TRAIT-WRITE-Z4SP4
                PERFORM TRAIT-LIRE-SYSIN
            END-PERFORM

            .
        TRAIT-ECRITURE-MANUELLE.
       *    ECRITURE D'UN ENREGISTREMENT
            INITIALIZE  WS-ENR
            MOVE 'MAXI' TO WS-CODE-PRDT
            MOVE 'S'    TO WS-TYPE-MVT
            MOVE 24     TO WS-QTE-MVT
            MOVE 12,35  TO WS-PRX
            MOVE WS-ENR TO Z4-ENR
       *    CALL 'A03SP4' USING Z4-SP4
            PERFORM TRAIT-WRITE-Z4SP4

       *    TEST CLE EN DOUBLON
            MOVE 'MAXI' TO WS-CODE-PRDT
            MOVE 'E'    TO WS-TYPE-MVT
            MOVE 221    TO WS-QTE-MVT
            MOVE 12,35  TO WS-PRX
            MOVE WS-ENR TO Z4-ENR
       *    CALL 'A03SP4' USING Z4-SP4
            PERFORM TRAIT-WRITE-Z4SP4

            .
        TRAIT-LIRE-SYSIN.
       *    LECTURE DE LA SYSIN
            INITIALIZE RD-ENR
            MOVE SPACE TO RD-ENR
            ACCEPT RD-ENR
       D    DISPLAY 'READ SYSIN ' RD-ENR ' FIN SYSIN'

            .
        TRAIT-WRITE-Z4SP4.
       *    ECRITURE VIA L'ACCESSEUR
            CALL 'A03SP4' USING Z4-SP4
            PERFORM TRAIT-CONTROLE-CODRET

            .
        TRAIT-CONTROLE-CODRET.
       *    CONTROLE DU CODE RETOUR
            EVALUATE Z4-CODRET
                WHEN '0'
                    DISPLAY 'ECRITURE DES DONNEES FAIT AVEC SUCCES'
                            ' ' WS-ENR
                WHEN '1'
                    DISPLAY 'ERREUR D''ECRITURE ' '*PARAMETRE INVALIDE*'
                WHEN '2'
                    DISPLAY 'ERREUR D''ECRITURE ' '*CLE EN DOUBLE*'
                            ' ' 'CLE=' WS-CODE-PRDT
                WHEN OTHER
                    DISPLAY 'ERREUR D''ACCES AU DONNEES'
                    STOP RUN
            END-EVALUATE

            .
        TRAIT-RECHERCHE-CLE.
       *    RECHERCHE DANS LE FICHIER D'UNE CLE
       *    LECTURE DE LA SYSIN
            ACCEPT WS-CODE-PRDT

       *    JUSQU'A LA FIN DE LA SYSIN ET SI LES DONNEES SONT ACCESSIBLES
            PERFORM UNTIL WS-CODE-PRDT  = 'FIN' OR Z3-CODRET = '9'
                DISPLAY 'RECHERCHE CLE ' WS-CODE-PRDT

       *    APPEL STATIQUE DE L'ACCESSEUR
                MOVE WS-CODE-PRDT TO Z3-CODE-PRDT
                CALL 'A03SP3' USING Z3-SP3

       *    ANALYSE DU CODE RETOUR DE L'ACCESSEUR
                EVALUATE Z3-CODRET
                    WHEN '0'
       *                LA CLE EST TROUVEE
                        MOVE Z3-ENR TO WS-ENR
       D                DISPLAY 'WS-ENR ' WS-ENR
       D                DISPLAY 'Z3-ENR ' Z3-ENR
                        MOVE WS-PRX TO WS-PRX-ED
                        DISPLAY WS-TYPE-MVT ' ' WS-QTE-MVT ' ' WS-PRX-ED

                    WHEN '1'
       *                LA CLE N'EST PAS TROUVEE
                        DISPLAY 'ENREGISTREMENT NON TROUVE ' WS-CODE-PRDT

                    WHEN OTHER
       *                ERREUR A L'OUVERTURE DU FICHIER
                        DISPLAY 'ERREUR D''ACCES AU DONNEES'
                END-EVALUATE

       *    LECTURE DE LA LIGNE SUIVANT SUR LA SYSIN
                ACCEPT WS-CODE-PRDT

            END-PERFORM

            .
 MEMBER NAME  CHATGPT
        IDENTIFICATION DIVISION.
        PROGRAM-ID. CHATGPT.
        DATA DIVISION.
        LINKAGE SECTION.
        01  FIRSTNAME PIC X(20).
        FILE SECTION.
        FD JOKEFILE.
        01 JOKERECORD.
           05 JOKETEXT    PIC X(100).
        WORKING-STORAGE SECTION.
        01 JOKELINE       PIC X(100).
        PROCEDURE DIVISION USING FIRSTNAME.
            OPEN OUTPUT JOKEFILE.
            PERFORM UNTIL FIRSTNAME = "END"
                MOVE "WHY DID " FIRSTNAME " BRING A LADDER TO THE BAR?" T
        O JOKELINE.
                MOVE "BECAUSE HE HEARD THE DRINKS WERE ON THE HOUSE|" TO
        JOKETEXT.
                WRITE JOKERECORD.
                ACCEPT FIRSTNAME.
            END-PERFORM.
            CLOSE JOKEFILE.
            STOP RUN.
 MEMBER NAME  A03BPGMT
       *======================================================*
       *   MENU DE GESTION DES PRODUITS                       *
       *======================================================*

       *======================================================*
       *   I D E N T I F I C A T I O N     D I V I S I O N    *
       *======================================================*
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03BPGMT.

       *======================================================*
       *   E N V I R O N M E N T       D I V I S I O N        *
       *======================================================*
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER. IBM-390.
        OBJECT-COMPUTER. IBM-390.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.

       *======================================================*
       *           D A T A         D I V I S I O N            *
       *======================================================*
        DATA DIVISION.
        WORKING-STORAGE SECTION.

       * ZONE POUR LA DATE DU JOUR
        77  WS-DATE-JOUR           PIC X(8).

       *------------------------------------------------------*
       *   DESCRIPTION DE L'ENREGISTREMENT                    *
       *------------------------------------------------------*
        COPY FMVTPXB REPLACING ==:VAR:== BY ==ENR==.

       * PICTURE D'EDITION POUR LE PRIX
        01  WS-PRIX-X.
            05 WS-PRIX-ED          PIC ZZ9,99.

       *------------------------------------------------------*
       *   DESCRIPTION DETAILLEE DE LA ZONE DE COMMUNICATION  *
       *------------------------------------------------------*
        01  WS-COMMAREA.
            05 PROG-PRECEDENT      PIC X(8).
            05 PROG-COURANT        PIC X(8).
            05 PROG-SUIVANT        PIC X(8).
            05                     PIC X(26).

        01 C-R                     PIC S9(8) COMP.

        01 MON-PROG                PIC X(8) VALUE 'A03BPGMT'.
        01 MA-MAP                  PIC X(8) VALUE 'A03BMAP '.
        01 MA-TRX                  PIC X(4) VALUE 'A03B'.
       *------------------------------------------------------*
       *   DESCRIPTION   DE   LA   MAP                        *
       *------------------------------------------------------*
        COPY A03BMAP.

       *------------------------------------------------------*
       *   ZONE DE MESSAGE TAMPON POUR LE SEND FROM           *
       *------------------------------------------------------*
        01  MESSAGE-TXT            PIC X(79).

       *------------------------------------------------------*
       *   DESCRIPTION   DES  TOUCHES   FONCTIONS             *
       *------------------------------------------------------*
        COPY DFHAID.

       *------------------------------------------------------*
       *   DESCRIPTION   DES  ATTRIBUTS                       *
       *------------------------------------------------------*
        COPY DFHBMSCA.

       *======================================================*
       *          L I N K A G E     S E C T I O N             *
       *======================================================*
        LINKAGE SECTION.
        01  DFHCOMMAREA.
            05 LK-COMMAREA            PIC X(50).

       *======================================================*
       *     P R O C E D U R E     D I V I S I O N            *
       *======================================================*

        PROCEDURE DIVISION.
        00000-INIT-PROGRAMME.
       *---------------------*
             PERFORM  10000-DEBUT-PROGRAMME
             PERFORM  20000-TRAIT-PROGRAMME
             GOBACK
             .

        10000-DEBUT-PROGRAMME.
       *---------------------*
       *   TEST DE PREMIERE ENTREE DANS LE PROGRAMME
       *   SI NON PROGRAMME  MENU --->  ARRET  (ACCES INTERDIT)
            IF EIBCALEN = 0
               INITIALIZE      WS-COMMAREA
            ELSE
               MOVE LK-COMMAREA    TO  WS-COMMAREA
            END-IF

            MOVE  PROG-COURANT     TO  PROG-PRECEDENT
            MOVE  MON-PROG         TO  PROG-COURANT
            .

        20000-TRAIT-PROGRAMME.
       *---------------------*
            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               PERFORM  21000-TRAIT-CHARGEMENT
               PERFORM  22000-TRAIT-ENVOI
            ELSE
               PERFORM  23000-TRAIT-RECEPTION
            END-IF
            .

        21000-TRAIT-CHARGEMENT.
       *----------------------*
       *  CHARGEMENT DE LA MAP AVANT AFFICHAGE
            MOVE LOW-VALUE TO A03BMAPO

       *  SI TRAITEMENT PARTICULIER AVANT AFFICHAGE
       *    PERFORM  21100-TRAIT-SPECIFIQUE
            .

       *21100-TRAIT-SPECIFIQUE.
       *----------------------*
       *    ..............................
       *    ..............................
       *    ..............................
       *    ..............................
       *    .

        22000-TRAIT-ENVOI.
       *-----------------*
       *    AJOUT DU CALCUL DE LA DATE DU JOUR
            MOVE FUNCTION CURRENT-DATE TO WS-DATE-JOUR

       *    MISE EN FORME DE LA DATE
            STRING    WS-DATE-JOUR (7 : 2)  DELIMITED BY SIZE
                      '/'                   DELIMITED BY SIZE
                      WS-DATE-JOUR (5 : 2)  DELIMITED BY SIZE
                      '/'                   DELIMITED BY SIZE
                      WS-DATE-JOUR (1 : 4)  DELIMITED BY SIZE
                  INTO DATEJO
            END-STRING

            EXEC CICS SEND MAP    ('A03BMAP')
                           ERASE
            END-EXEC

            MOVE PROG-COURANT TO PROG-SUIVANT

            EXEC CICS RETURN TRANSID  (MA-TRX)
                             COMMAREA (WS-COMMAREA)
                             LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23000-TRAIT-RECEPTION.
       *---------------------*
            EVALUATE EIBAID
               WHEN DFHENTER
                    PERFORM  23100-TRAIT-ENTER
               WHEN DFHPF3
                    PERFORM  23105-RETOUR-MENU
               WHEN DFHCLEAR
                    PERFORM  23200-TRAIT-FIN
               WHEN OTHER
                    PERFORM  90000-ERR-TOUCHE
            END-EVALUATE
            .

        23105-RETOUR-MENU.
            MOVE 'A03APGMT'  TO PROG-SUIVANT
            PERFORM 23110-PROG-SUIVANT
            .

        23110-PROG-SUIVANT.
       *------------------*
       *    IF  ......................
       *       MOVE '?????'   TO  PROG-SUIVANT
       *    END-IF

            EXEC CICS XCTL  PROGRAM  (PROG-SUIVANT)
                            COMMAREA (WS-COMMAREA)
                            LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23100-TRAIT-ENTER.
       *------------------*
       *    ..........................
            EXEC CICS RECEIVE MAP  ('A03BMAP')
                              RESP (C-R)
            END-EXEC

            EVALUATE C-R
               WHEN DFHRESP(NORMAL)
                    CONTINUE
       *       WHEN DFHRESP(MAPFAIL)
       *            .............
               WHEN OTHER
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE

       *    ............................
       *    ...  ANALYSE DES CHAMPS  ...
       *    ............................

       *    CODE PRODUIT OBLIGATOIRE
            IF CDPRDTI = SPACES
                MOVE 'CODE PRODUIT NON RENSEIGNE' TO MSGO
                PERFORM 22000-TRAIT-ENVOI
            ELSE
       *        LE CODE PRODUIT A ETE SAISIE, CONTROLE DANS LE FICHIER
                MOVE CDPRDTI TO ENR-CODE-PRDT
                EXEC CICS READ
                          FILE   ('FORA03F1')
                          INTO   (ENR-MOUVEMENT)
                          RIDFLD (ENR-CODE-PRDT)
                          RESP   (C-R)
                END-EXEC

                EVALUATE C-R
                    WHEN DFHRESP(NORMAL)
                        MOVE ENR-TYPE-MVT   TO TYPMVTO
                        MOVE ENR-QTE-MVT    TO QTEMVTO
                        MOVE ENR-PRX-UNIT   TO WS-PRIX-ED
                        MOVE WS-PRIX-ED     TO PRIXO

                        PERFORM 22000-TRAIT-ENVOI

                    WHEN DFHRESP(NOTOPEN)
                        MOVE 'FICHIER NON OUVERT' TO MSGO
                        PERFORM 22000-TRAIT-ENVOI

                    WHEN DFHRESP(NOTFND)
                        MOVE 'CODE PRODUIT INEXISTANT' TO MSGO
                        PERFORM 22000-TRAIT-ENVOI

                    WHEN OTHER
                        PERFORM 91000-ERREUR-CICS
                END-EVALUATE

            END-IF

            .

        23200-TRAIT-FIN.
       *---------------*
            MOVE 'FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        90000-ERR-TOUCHE.
       *----------------*
            MOVE 'TOUCHE DE FONCTION INVALIDE' TO MSGO
            PERFORM  22000-TRAIT-ENVOI
            .

        91000-ERREUR-CICS.
       *-------------------*
            MOVE 'ERREUR CICS !!!  FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        99000-FIN-CICS.
       *--------------*
            EXEC CICS SEND FROM   (MESSAGE-TXT)
                           LENGTH (LENGTH OF MESSAGE-TXT)
                           ERASE
            END-EXEC

            EXEC CICS RETURN END-EXEC
            .
 MEMBER NAME  A03CPGMT
       *======================================================*
       *   MENU DE GESTION DES PRODUITS                       *
       *======================================================*

       *======================================================*
       *   I D E N T I F I C A T I O N     D I V I S I O N    *
       *======================================================*
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03CPGMT.

       *======================================================*
       *   E N V I R O N M E N T       D I V I S I O N        *
       *======================================================*
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER. IBM-390.
        OBJECT-COMPUTER. IBM-390.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.

       *======================================================*
       *           D A T A         D I V I S I O N            *
       *======================================================*
        DATA DIVISION.
        WORKING-STORAGE SECTION.

       * ZONE POUR LA DATE DU JOUR
        77  WS-DATE-JOUR           PIC X(8).

       *------------------------------------------------------*
       *   DESCRIPTION DE L'ENREGISTREMENT                    *
       *------------------------------------------------------*
        COPY FMVTPXB REPLACING ==:VAR:== BY ==ENR==.

       * PICTURE D'EDITION POUR LE PRIX
        01  WS-PRIX-X.
            05 WS-PRIX-ED          PIC ZZ9,99.
       * INDICATEUR D'ERREUR SUR LA SAISIE
        77                         PIC X    VALUE ' '.
            88 INPUT-ERROR                  VALUE 'A'.
            88 NO-INPUT-ERROR               VALUE ' '.

       *------------------------------------------------------*
       *   DESCRIPTION DETAILLEE DE LA ZONE DE COMMUNICATION  *
       *------------------------------------------------------*
        01  WS-COMMAREA.
            05 PROG-PRECEDENT      PIC X(8).
            05 PROG-COURANT        PIC X(8).
            05 PROG-SUIVANT        PIC X(8).
            05                     PIC X(26).

        01 C-R                     PIC S9(8) COMP.

        01 MON-PROG                PIC X(8) VALUE 'A03CPGMT'.
        01 MA-MAP                  PIC X(8) VALUE 'A03CMAP '.
        01 MA-TRX                  PIC X(4) VALUE 'A03C'.
       *------------------------------------------------------*
       *   DESCRIPTION   DE   LA   MAP                        *
       *------------------------------------------------------*
        COPY A03CMAP.

       *------------------------------------------------------*
       *   ZONE DE MESSAGE TAMPON POUR LE SEND FROM           *
       *------------------------------------------------------*
        01  MESSAGE-TXT            PIC X(79).

       *------------------------------------------------------*
       *   DESCRIPTION   DES  TOUCHES   FONCTIONS             *
       *------------------------------------------------------*
        COPY DFHAID.

       *------------------------------------------------------*
       *   DESCRIPTION   DES  ATTRIBUTS                       *
       *------------------------------------------------------*
        COPY DFHBMSCA.

       *======================================================*
       *          L I N K A G E     S E C T I O N             *
       *======================================================*
        LINKAGE SECTION.
        01  DFHCOMMAREA.
            05 LK-COMMAREA            PIC X(50).

       *======================================================*
       *     P R O C E D U R E     D I V I S I O N            *
       *======================================================*

        PROCEDURE DIVISION.
        00000-INIT-PROGRAMME.
       *---------------------*
             PERFORM  10000-DEBUT-PROGRAMME
             PERFORM  20000-TRAIT-PROGRAMME
             GOBACK
             .

        10000-DEBUT-PROGRAMME.
       *---------------------*
       *   TEST DE PREMIERE ENTREE DANS LE PROGRAMME
       *   SI NON PROGRAMME  MENU --->  ARRET  (ACCES INTERDIT)
            IF EIBCALEN = 0
               INITIALIZE      WS-COMMAREA
            ELSE
               MOVE LK-COMMAREA    TO  WS-COMMAREA
            END-IF

            MOVE  PROG-COURANT     TO  PROG-PRECEDENT
            MOVE  MON-PROG         TO  PROG-COURANT
            .

        20000-TRAIT-PROGRAMME.
       *---------------------*
            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               PERFORM  21000-TRAIT-CHARGEMENT
               PERFORM  22000-TRAIT-ENVOI
            ELSE
               PERFORM  23000-TRAIT-RECEPTION
            END-IF
            .

        21000-TRAIT-CHARGEMENT.
       *----------------------*
       *  CHARGEMENT DE LA MAP AVANT AFFICHAGE
            MOVE LOW-VALUE TO A03CMAPO

       *  SI TRAITEMENT PARTICULIER AVANT AFFICHAGE
       *    PERFORM  21100-TRAIT-SPECIFIQUE
            .

       *21100-TRAIT-SPECIFIQUE.
       *----------------------*
       *    ..............................
       *    ..............................
       *    ..............................
       *    ..............................
       *    .

        22000-TRAIT-ENVOI.
       *-----------------*
       *    AJOUT DU CALCUL DE LA DATE DU JOUR
            MOVE FUNCTION CURRENT-DATE TO WS-DATE-JOUR

       *    MISE EN FORME DE LA DATE
            STRING    WS-DATE-JOUR (7 : 2)  DELIMITED BY SIZE
                      '/'                   DELIMITED BY SIZE
                      WS-DATE-JOUR (5 : 2)  DELIMITED BY SIZE
                      '/'                   DELIMITED BY SIZE
                      WS-DATE-JOUR (1 : 4)  DELIMITED BY SIZE
                  INTO DATEJO
            END-STRING

            EXEC CICS SEND MAP    ('A03CMAP')
                           ERASE
            END-EXEC

            MOVE PROG-COURANT TO PROG-SUIVANT

            EXEC CICS RETURN TRANSID  (MA-TRX)
                             COMMAREA (WS-COMMAREA)
                             LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23000-TRAIT-RECEPTION.
       *---------------------*
            EVALUATE EIBAID
               WHEN DFHENTER
                    PERFORM  23100-TRAIT-ENTER
               WHEN DFHPF3
                    PERFORM  23105-RETOUR-MENU
               WHEN DFHCLEAR
                    PERFORM  23200-TRAIT-FIN
               WHEN OTHER
                    PERFORM  90000-ERR-TOUCHE
            END-EVALUATE
            .

        23105-RETOUR-MENU.
            MOVE 'A03APGMT'  TO PROG-SUIVANT
            PERFORM 23110-PROG-SUIVANT
            .

        23110-PROG-SUIVANT.
       *------------------*
       *    IF  ......................
       *       MOVE '?????'   TO  PROG-SUIVANT
       *    END-IF

            EXEC CICS XCTL  PROGRAM  (PROG-SUIVANT)
                            COMMAREA (WS-COMMAREA)
                            LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23100-TRAIT-ENTER.
       *------------------*
       *    ..........................
            EXEC CICS RECEIVE MAP  ('A03CMAP')
                              RESP (C-R)
            END-EXEC

            EVALUATE C-R
               WHEN DFHRESP(NORMAL)
                   CONTINUE
       *       WHEN DFHRESP(MAPFAIL)
       *            .............
               WHEN OTHER
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE

       *    ............................
       *    ...  ANALYSE DES CHAMPS  ...
       *    ............................
       *    VERIFICATION DES SAISIES
            PERFORM TRAIT-CHECK-INPUT

       *    RECHERCHER LE CODE PRODUIT
            PERFORM TRAIT-CHECK-CODE-PRDT

       *    SI LA CLE A ETE TROUVEE ON ECRIT LE PRODUIT
            PERFORM TRAIT-WRITE-INPUT
            .

        TRAIT-CHECK-INPUT.
       *---------------*
            SET NO-INPUT-ERROR TO TRUE

       *    TOUS LES CHAMPS SONT OBLIGATOIRES
                IF   ( CDPRDTL = ZEROS AND CDPRDTI = SPACES )
                  OR ( TYPMVTL = ZEROS AND TYPMVTI = SPACES )
                  OR ( QTEMVTL = ZEROS AND QTEMVTI = SPACES )
                  OR ( PRIXEL  = ZEROS AND PRIXEI  = SPACES )
                  OR ( PRIXDL  = ZEROS AND PRIXDI  = SPACES )
                    MOVE 'ECHEC- SAISIE INVALIDE' TO MSGO
                    SET INPUT-ERROR TO TRUE
                END-IF

       *    VERIFICATION DU TYPE DE MOUVEMENT
            IF NOT INPUT-ERROR
                IF  TYPMVTI NOT = 'E' AND TYPMVTI NOT = 'S'
                    MOVE 'ECHEC- TYPE MOUVEMENT INVALIDE, SAISIR E OU S'
                        TO MSGO
                    SET INPUT-ERROR TO TRUE
                END-IF
            END-IF

       *    VERIFICATION DES CHAMPS NUMERIQUES
            IF NOT INPUT-ERROR
                IF QTEMVTI IS NOT NUMERIC
                    MOVE 'ECHEC- QUANTITE NON NUMERIQUE' TO MSGO
                    SET INPUT-ERROR TO TRUE
                END-IF
            END-IF
            IF NOT INPUT-ERROR
                IF PRIXEI IS NOT NUMERIC OR PRIXDI IS NOT NUMERIC
                    MOVE 'ECHEC- PRIX NON NUMERIQUE' TO MSGO
                    SET INPUT-ERROR TO TRUE
                END-IF
            END-IF

       *    FIN EN CAS D'ERREUR
            IF INPUT-ERROR
               PERFORM 22000-TRAIT-ENVOI
            END-IF

            .
        TRAIT-CHECK-CODE-PRDT.
       *---------------*
       *    LE CODE PRODUIT A ETE SAISIE, CONTROLE DANS LE FICHIER
            MOVE CDPRDTI TO ENR-CODE-PRDT
            EXEC CICS READ
                      FILE   ('FORA03F1')
                      INTO   (ENR-MOUVEMENT)
                      RIDFLD (ENR-CODE-PRDT)
                      RESP   (C-R)
            END-EXEC
            EVALUATE C-R
                WHEN DFHRESP(NOTFND)
       *            SI LA CLE N'A PAS ETE TROUVEE DANS LE FICHIER
                    CONTINUE
                WHEN DFHRESP(NORMAL)
       *            SI LA CLE A ETE TROUVEE
                    MOVE 'ECHEC- CODE PRODUIT EXISTANT' TO MSGO
                    PERFORM 22000-TRAIT-ENVOI
                WHEN DFHRESP(FILENOTFOUND)
                    MOVE 'ECHEC- FICHIER NON TROUVE' TO MSGO
                WHEN DFHRESP(NOTOPEN)
                    MOVE 'ECHEC- FICHIER NON OUVERT' TO MSGO
                WHEN OTHER
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE
            .

        TRAIT-WRITE-INPUT.
       *---------------*
            INITIALIZE      ENR-MOUVEMENT
            MOVE SPACES  TO ENR-MOUVEMENT
            MOVE CDPRDTI TO ENR-CODE-PRDT
            MOVE TYPMVTI TO ENR-TYPE-MVT
            MOVE QTEMVTI TO ENR-QTE-MVT
            MOVE PRIXEI  TO ENR-PRX-UNIT-ENT
            MOVE PRIXDI  TO ENR-PRX-UNIT-DEC

            EXEC CICS WRITE
                      FILE   ('FORA03F1')
                      FROM   (ENR-MOUVEMENT)
                      RIDFLD (ENR-CODE-PRDT)
                      RESP   (C-R)
            END-EXEC

            EVALUATE C-R
                WHEN DFHRESP(NORMAL)
                    MOVE 'CREATION OK' TO MSGO
                WHEN DFHRESP(FILENOTFOUND)
                    MOVE 'ECHEC- FICHIER NON TROUVE' TO MSGO
                WHEN DFHRESP(NOTOPEN)
                    MOVE 'ECHEC- FICHIER NON OUVERT' TO MSGO
                WHEN DFHRESP(NOSPACE)
                    MOVE 'ECHEC- PLUS DE PLACE SUR LE FICHIER' TO MSGO
                WHEN OTHER
                    MOVE 'ECHEC- ERREUR GRAVE' TO MSGO
            END-EVALUATE
            PERFORM 22000-TRAIT-ENVOI
            .

        23200-TRAIT-FIN.
       *---------------*
            MOVE 'FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        90000-ERR-TOUCHE.
       *----------------*
            MOVE 'TOUCHE DE FONCTION INVALIDE' TO MSGO
            PERFORM  22000-TRAIT-ENVOI
            .

        91000-ERREUR-CICS.
       *-------------------*
            MOVE 'ERREUR CICS !!!  FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        99000-FIN-CICS.
       *--------------*
            EXEC CICS SEND FROM   (MESSAGE-TXT)
                           LENGTH (LENGTH OF MESSAGE-TXT)
                           ERASE
            END-EXEC

            EXEC CICS RETURN END-EXEC
            .
 MEMBER NAME  A03BMAP
 A03BMAP DFHMSD TYPE=&SYSPARM,MODE=INOUT,LANG=COBOL,EXTATT=YES,         X
                CTRL=(FREEKB,FRSET),STORAGE=AUTO,TIOAPFX=YES
 A03BMAP DFHMDI COLUMN=1,LINE=1,SIZE=(24,80)
         DFHMDF POS=(1,1),ATTRB=ASKIP,LENGTH=04,INITIAL='A03B'
         DFHMDF POS=(1,26),ATTRB=ASKIP,LENGTH=26,                       X
                INITIAL='INTERROGATION D''UN PRODUIT'
         DFHMDF POS=(1,73),ATTRB=ASKIP,LENGTH=07,INITIAL='A03BMAP'
         DFHMDF POS=(2,64),ATTRB=ASKIP,LENGTH=05,                       X
                INITIAL='DATE:'
 DATEJ   DFHMDF POS=(2,70),ATTRB=(ASKIP,FSET,BRT),LENGTH=10

         DFHMDF POS=(8,15),ATTRB=ASKIP,LENGTH=25,                       X
                INITIAL='CODE PRODUIT           :'
 CDPRDT  DFHMDF POS=(8,41),ATTRB=(UNPROT,FSET,IC),LENGTH=04
         DFHMDF POS=(8,46)

         DFHMDF POS=(10,15),ATTRB=ASKIP,LENGTH=25,                      X
                INITIAL='TYPE MOUVEMENT         :'
 TYPMVT  DFHMDF POS=(10,41),ATTRB=(ASKIP,PROT),LENGTH=01

         DFHMDF POS=(12,15),ATTRB=ASKIP,LENGTH=25,                      X
                INITIAL='QUANTITE               :'
 QTEMVT  DFHMDF POS=(12,41),ATTRB=(ASKIP,PROT),LENGTH=02

         DFHMDF POS=(14,15),ATTRB=ASKIP,LENGTH=25,                      X
                INITIAL='PRIX UNITAIRE          :'
 PRIX    DFHMDF POS=(14,41),ATTRB=(ASKIP,PROT),LENGTH=06

         DFHMDF POS=(23,1),ATTRB=ASKIP,LENGTH=20,                       X
                INITIAL='CLEAR - FIN'
         DFHMDF POS=(23,22),ATTRB=ASKIP,LENGTH=20,                      X
                INITIAL='PF3 - RETOUR'
 MSG     DFHMDF POS=(24,1),ATTRB=(ASKIP,BRT),LENGTH=79
         DFHMSD TYPE=FINAL
         END
 MEMBER NAME  A03CMAP
 A03CMAP DFHMSD TYPE=&SYSPARM,MODE=INOUT,LANG=COBOL,EXTATT=YES,         X
                CTRL=(FREEKB,FRSET),STORAGE=AUTO,TIOAPFX=YES
 A03CMAP DFHMDI COLUMN=1,LINE=1,SIZE=(24,80)
         DFHMDF POS=(1,1),ATTRB=ASKIP,LENGTH=04,INITIAL='A03C'
         DFHMDF POS=(1,26),ATTRB=ASKIP,LENGTH=26,                       X
                INITIAL='CREATION D''UN PRODUIT'
         DFHMDF POS=(1,73),ATTRB=ASKIP,LENGTH=07,INITIAL='A03CMAP'
         DFHMDF POS=(2,64),ATTRB=ASKIP,LENGTH=05,                       X
                INITIAL='DATE:'
 DATEJ   DFHMDF POS=(2,70),ATTRB=(ASKIP,BRT),LENGTH=10

         DFHMDF POS=(8,15),ATTRB=ASKIP,LENGTH=25,                       X
                INITIAL='CODE PRODUIT           :'
 CDPRDT  DFHMDF POS=(8,41),ATTRB=(UNPROT,FSET,IC),LENGTH=04
         DFHMDF POS=(8,46)

         DFHMDF POS=(10,15),ATTRB=ASKIP,LENGTH=25,                      X
                INITIAL='TYPE MOUVEMENT         :'
 TYPMVT  DFHMDF POS=(10,41),ATTRB=(UNPROT,FSET),LENGTH=01
         DFHMDF POS=(10,43)

         DFHMDF POS=(12,15),ATTRB=ASKIP,LENGTH=25,                      X
                INITIAL='QUANTITE               :'
 QTEMVT  DFHMDF POS=(12,41),ATTRB=(UNPROT,FSET),LENGTH=02
         DFHMDF POS=(12,44)

         DFHMDF POS=(14,15),ATTRB=ASKIP,LENGTH=25,                      X
                INITIAL='PRIX UNITAIRE          :'
 PRIXE   DFHMDF POS=(14,41),ATTRB=(UNPROT,FSET),LENGTH=03
         DFHMDF POS=(14,45),ATTRB=(ASKIP,PROT),LENGTH=01,               X
                INITIAL=','
 PRIXD   DFHMDF POS=(14,47),ATTRB=(UNPROT,FSET),LENGTH=02
         DFHMDF POS=(14,50)

         DFHMDF POS=(23,1),ATTRB=ASKIP,LENGTH=20,                       X
                INITIAL='CLEAR - FIN'
         DFHMDF POS=(23,22),ATTRB=ASKIP,LENGTH=20,                      X
                INITIAL='PF3 - RETOUR'
 MSG     DFHMDF POS=(24,1),ATTRB=(ASKIP,BRT),LENGTH=79
         DFHMSD TYPE=FINAL
         END
 MEMBER NAME  A03DPGMT
       *======================================================*
       *   MENU DE GESTION DES PRODUITS                       *
       *======================================================*

       *======================================================*
       *   I D E N T I F I C A T I O N     D I V I S I O N    *
       *======================================================*
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03DPGMT.

       *======================================================*
       *   E N V I R O N M E N T       D I V I S I O N        *
       *======================================================*
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER. IBM-390.
        OBJECT-COMPUTER. IBM-390.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.

       *======================================================*
       *           D A T A         D I V I S I O N            *
       *======================================================*
        DATA DIVISION.
        WORKING-STORAGE SECTION.

       * ZONE POUR LA DATE DU JOUR
        77  WS-DATE-JOUR           PIC X(8).

       *------------------------------------------------------*
       *   DESCRIPTION DE L'ENREGISTREMENT                    *
       *------------------------------------------------------*
        COPY FMVTPXB REPLACING ==:VAR:== BY ==ENR==.

       *------------------------------------------------------*
       *   DESCRIPTION DES ATTRIBUTS                          *
       *------------------------------------------------------*
        COPY ATTRIBUT.

       * PICTURE D'EDITION POUR LE PRIX
        01  WS-PRIX-X.
            05 WS-PRIX-ED          PIC ZZ9,99.
       * INDICATEUR D'ERREUR SUR LA SAISIE
        77                         PIC X    VALUE ' '.
            88 INPUT-ERROR                  VALUE 'A'.
            88 NO-INPUT-ERROR               VALUE ' '.

       *------------------------------------------------------*
       *   DESCRIPTION DETAILLEE DE LA ZONE DE COMMUNICATION  *
       *------------------------------------------------------*
        01  WS-COMMAREA.
            05 PROG-PRECEDENT      PIC X(8).
            05 PROG-COURANT        PIC X(8).
            05 PROG-SUIVANT        PIC X(8).
            05                     PIC X(26).

        01 C-R                     PIC S9(8) COMP.

        01 MON-PROG                PIC X(8) VALUE 'A03DPGMT'.
        01 MA-MAP                  PIC X(8) VALUE 'A03DMAP '.
        01 MA-TRX                  PIC X(4) VALUE 'A03D'.
       *------------------------------------------------------*
       *   DESCRIPTION   DE   LA   MAP                        *
       *------------------------------------------------------*
        COPY A03DMAP.

       *------------------------------------------------------*
       *   ZONE DE MESSAGE TAMPON POUR LE SEND FROM           *
       *------------------------------------------------------*
        01  MESSAGE-TXT            PIC X(79).

       *------------------------------------------------------*
       *   DESCRIPTION   DES  TOUCHES   FONCTIONS             *
       *------------------------------------------------------*
        COPY DFHAID.

       *------------------------------------------------------*
       *   DESCRIPTION   DES  ATTRIBUTS                       *
       *------------------------------------------------------*
        COPY DFHBMSCA.

       *======================================================*
       *          L I N K A G E     S E C T I O N             *
       *======================================================*
        LINKAGE SECTION.
        01  DFHCOMMAREA.
            05 LK-COMMAREA            PIC X(50).

       *======================================================*
       *     P R O C E D U R E     D I V I S I O N            *
       *======================================================*

        PROCEDURE DIVISION.
        00000-INIT-PROGRAMME.
       *---------------------*
             PERFORM  10000-DEBUT-PROGRAMME
             PERFORM  20000-TRAIT-PROGRAMME
             GOBACK
             .

        10000-DEBUT-PROGRAMME.
       *---------------------*
       *   TEST DE PREMIERE ENTREE DANS LE PROGRAMME
       *   SI NON PROGRAMME  MENU --->  ARRET  (ACCES INTERDIT)
            IF EIBCALEN = 0
               INITIALIZE      WS-COMMAREA
            ELSE
               MOVE LK-COMMAREA    TO  WS-COMMAREA
            END-IF

            MOVE  PROG-COURANT     TO  PROG-PRECEDENT
            MOVE  MON-PROG         TO  PROG-COURANT
            .

        20000-TRAIT-PROGRAMME.
       *---------------------*
            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               PERFORM  21000-TRAIT-CHARGEMENT
               PERFORM  22000-TRAIT-ENVOI
            ELSE
               PERFORM  23000-TRAIT-RECEPTION
            END-IF
            .

        21000-TRAIT-CHARGEMENT.
       *----------------------*
       *  CHARGEMENT DE LA MAP AVANT AFFICHAGE
            MOVE LOW-VALUE TO A03DMAPO

       *  SI TRAITEMENT PARTICULIER AVANT AFFICHAGE
       *    PERFORM  21100-TRAIT-SPECIFIQUE
            .

       *21100-TRAIT-SPECIFIQUE.
       *----------------------*
       *    ..............................
       *    ..............................
       *    ..............................
       *    ..............................
       *    .

        22000-TRAIT-ENVOI.
       *-----------------*
       *    AJOUT DU CALCUL DE LA DATE DU JOUR
            MOVE FUNCTION CURRENT-DATE TO WS-DATE-JOUR

       *    MISE EN FORME DE LA DATE
            STRING    WS-DATE-JOUR (7 : 2)  DELIMITED BY SIZE
                      '/'                   DELIMITED BY SIZE
                      WS-DATE-JOUR (5 : 2)  DELIMITED BY SIZE
                      '/'                   DELIMITED BY SIZE
                      WS-DATE-JOUR (1 : 4)  DELIMITED BY SIZE
                  INTO DATEJO
            END-STRING
            IF NOT INPUT-ERROR
                EXEC CICS SEND MAP    ('A03DMAP')
                               ERASE
                END-EXEC
            ELSE
                EXEC CICS SEND MAP    ('A03DMAP')
                               ERASE
                               CURSOR
                END-EXEC
            END-IF
            MOVE PROG-COURANT TO PROG-SUIVANT

            EXEC CICS RETURN TRANSID  (MA-TRX)
                             COMMAREA (WS-COMMAREA)
                             LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23000-TRAIT-RECEPTION.
       *---------------------*
            EVALUATE EIBAID
               WHEN DFHENTER
                    PERFORM  23100-TRAIT-ENTER
               WHEN DFHPF3
                    PERFORM  23103-TRAIT-PF3
               WHEN DFHPF10
                    PERFORM  23110-TRAIT-PF10
               WHEN DFHCLEAR
                    PERFORM  23200-TRAIT-FIN
               WHEN OTHER
                    PERFORM  90000-ERR-TOUCHE
            END-EVALUATE
            .

        23103-TRAIT-PF3.
       *------------------*
            PERFORM 23050-RETOUR-MENU
            .

        23110-TRAIT-PF10.
       *------------------*
            PERFORM 23200-TRAIT-RECEIVEMAP
            PERFORM TRAIT-VALIDATION
            PERFORM TRAIT-PROT-INPUT
            PERFORM 22000-TRAIT-ENVOI
            .

        23050-RETOUR-MENU.
       *------------------*
            MOVE 'A03APGMT'  TO PROG-SUIVANT
            PERFORM 23110-PROG-SUIVANT
            .

        23110-PROG-SUIVANT.
       *------------------*
       *    IF  ......................
       *       MOVE '?????'   TO  PROG-SUIVANT
       *    END-IF

            EXEC CICS XCTL  PROGRAM  (PROG-SUIVANT)
                            COMMAREA (WS-COMMAREA)
                            LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23200-TRAIT-RECEIVEMAP.
       *------------------*
       * CHARGE LA MAP ET ANALYSE LE CODE D'ERREUR
            PERFORM TRAIT-UNPROT-INPUT
            EXEC CICS RECEIVE MAP  ('A03DMAP')
                              RESP (C-R)
            END-EXEC

            EVALUATE C-R
               WHEN DFHRESP(NORMAL)
                   CONTINUE
       *       WHEN DFHRESP(MAPFAIL)
       *            .............
               WHEN OTHER
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE
            .

        23100-TRAIT-ENTER.
       *------------------*
       *    ..........................
            PERFORM 23200-TRAIT-RECEIVEMAP

       *    ............................
       *    ...  ANALYSE DES CHAMPS  ...
       *    ............................
       *    RECHERCHER LE CODE PRODUIT
            PERFORM TRAIT-CHECK-CODE-PRDT

       *    DEPROTEGER LES CHAMPS DE SAISIE
            PERFORM TRAIT-UNPROT-INPUT

       *    SI LA CLE A ETE TROUVEE ON ECRIT LE PRODUIT
            PERFORM TRAIT-AFFICHER-PRDT
            .


        TRAIT-UNPROT-INPUT.
       *---------------*
       *    SUPPRIME LA PROTECTION SUR LES CHAMPS DE SAISIES
            MOVE ATTR-UNPROT-FSET TO TYPMVTA
            MOVE ATTR-UNPROT-FSET TO QTEMVTA
            MOVE ATTR-UNPROT-FSET TO PRIXEA
            MOVE ATTR-UNPROT-FSET TO PRIXDA
            .


        TRAIT-PROT-INPUT.
       *---------------*
       *    AJOUTE   LA PROTECTION SUR LES CHAMPS DE SAISIES
            MOVE ATTR-PROT-FSET TO TYPMVTA
            MOVE ATTR-PROT-FSET TO QTEMVTA
            MOVE ATTR-PROT-FSET TO PRIXEA
            MOVE ATTR-PROT-FSET TO PRIXDA
            .


        TRAIT-VALIDATION.
       *---------------*
       * VERIFICATION DU CODE PRODUIT
            PERFORM TRAIT-CHECK-CODE-PRDT
       * VERIFICATION DES INPUTS
            PERFORM TRAIT-CHECK-INPUT
       * SI LES INPUT SONT BONNES
            PERFORM TRAIT-WRITE-INPUT
            .

        TRAIT-AFFICHER-PRDT.
       *---------------*
            MOVE ENR-TYPE-MVT      TO TYPMVTO
            MOVE ENR-QTE-MVT       TO QTEMVTO
            MOVE ENR-PRX-UNIT-ENT  TO PRIXEO
            MOVE ENR-PRX-UNIT-DEC  TO PRIXDO
            PERFORM 22000-TRAIT-ENVOI
            .

        TRAIT-CHECK-INPUT.
       *---------------*
            SET NO-INPUT-ERROR TO TRUE

       *    TOUS LES CHAMPS SONT OBLIGATOIRES
                IF   ( CDPRDTL = ZEROS AND CDPRDTI = SPACES )
                  OR ( TYPMVTL = ZEROS AND TYPMVTI = SPACES )
                  OR ( QTEMVTL = ZEROS AND QTEMVTI = SPACES )
                  OR ( PRIXEL  = ZEROS AND PRIXEI  = SPACES )
                  OR ( PRIXDL  = ZEROS AND PRIXDI  = SPACES )
                    MOVE 'ECHEC- SAISIE INVALIDE' TO MSGO
                    SET INPUT-ERROR TO TRUE
                    MOVE CURSEUR TO CDPRDTL
                END-IF

       *    VERIFICATION DU TYPE DE MOUVEMENT
            IF NOT INPUT-ERROR
                IF  TYPMVTI NOT = 'E' AND TYPMVTI NOT = 'S'
                    MOVE 'ECHEC- TYPE MOUVEMENT INVALIDE, SAISIR E OU S'
                        TO MSGO
                    SET INPUT-ERROR TO TRUE
                    MOVE CURSEUR TO TYPMVTL
                END-IF
            END-IF

       *    VERIFICATION DES CHAMPS NUMERIQUES
            IF NOT INPUT-ERROR
                IF QTEMVTI IS NOT NUMERIC
                    MOVE 'ECHEC- QUANTITE NON NUMERIQUE' TO MSGO
                    SET INPUT-ERROR TO TRUE
                    MOVE CURSEUR TO QTEMVTL
                END-IF
            END-IF
            IF NOT INPUT-ERROR
                IF PRIXEI IS NOT NUMERIC OR PRIXDI IS NOT NUMERIC
                    MOVE 'ECHEC- PRIX NON NUMERIQUE' TO MSGO
                    SET INPUT-ERROR TO TRUE
                    MOVE CURSEUR TO PRIXEL
                END-IF
            END-IF

       *    FIN EN CAS D'ERREUR
            IF INPUT-ERROR
               PERFORM 22000-TRAIT-ENVOI
            END-IF

            .
        TRAIT-CHECK-CODE-PRDT.
       *---------------*
       *    LE CODE PRODUIT A ETE SAISIE, CONTROLE DANS LE FICHIER
            IF CDPRDTL = ZEROES
                MOVE 'ECHEC- CODE PRODUIT MANQUANT' TO MSGO
                PERFORM 22000-TRAIT-ENVOI
            END-IF

            MOVE CDPRDTI TO ENR-CODE-PRDT
            EXEC CICS READ
                      FILE   ('FORA03F1')
                      INTO   (ENR-MOUVEMENT)
                      RIDFLD (ENR-CODE-PRDT)
                      RESP   (C-R)
            END-EXEC
            EVALUATE C-R
                WHEN DFHRESP(NORMAL)
       *            SI LA CLE A ETE TROUVEE
                    CONTINUE
                WHEN DFHRESP(NOTFND)
       *            SI LA CLE N'A PAS ETE TROUVEE DANS LE FICHIER
                    MOVE 'ECHEC- CODE PRODUIT INEXISTANT' TO MSGO
                    PERFORM 22000-TRAIT-ENVOI
                WHEN DFHRESP(FILENOTFOUND)
                    MOVE 'ECHEC- FICHIER NON TROUVE' TO MSGO
                    PERFORM 22000-TRAIT-ENVOI
                WHEN DFHRESP(NOTOPEN)
                    MOVE 'ECHEC- FICHIER NON OUVERT' TO MSGO
                    PERFORM 22000-TRAIT-ENVOI
                WHEN OTHER
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE
            .

        TRAIT-WRITE-INPUT.
       *---------------*
       * READ UPDATE OBLIGATOIRE AVANT UN REWRITE
            EXEC CICS READ UPDATE
                      FILE   ('FORA03F1')
                      INTO   (ENR-MOUVEMENT)
                      RIDFLD (ENR-CODE-PRDT)
                      RESP   (C-R)
            END-EXEC
            EVALUATE C-R
                WHEN DFHRESP(NORMAL)
                    CONTINUE
                WHEN DFHRESP(NOTFND)
                    MOVE 'ECHEC- CODE PRODUIT INEXISTANT' TO MSGO
                    PERFORM 22000-TRAIT-ENVOI
                WHEN DFHRESP(FILENOTFOUND)
                    MOVE 'ECHEC- FICHIER NON TROUVE' TO MSGO
                    PERFORM 22000-TRAIT-ENVOI
                WHEN DFHRESP(NOTOPEN)
                    MOVE 'ECHEC- FICHIER NON OUVERT' TO MSGO
                    PERFORM 22000-TRAIT-ENVOI
                WHEN OTHER
                    MOVE 'ECHEC- ERREUR GRAVE' TO MSGO
                    PERFORM 22000-TRAIT-ENVOI
            END-EVALUATE
       * ECRITURE
            INITIALIZE      ENR-MOUVEMENT
            MOVE SPACES  TO ENR-MOUVEMENT
            MOVE CDPRDTI TO ENR-CODE-PRDT
            MOVE TYPMVTI TO ENR-TYPE-MVT
            MOVE QTEMVTI TO ENR-QTE-MVT
            MOVE PRIXEI  TO ENR-PRX-UNIT-ENT
            MOVE PRIXDI  TO ENR-PRX-UNIT-DEC

            EXEC CICS REWRITE
                      FILE   ('FORA03F1')
                      FROM   (ENR-MOUVEMENT)
                      RESP   (C-R)
            END-EXEC

            EVALUATE C-R
                WHEN DFHRESP(NORMAL)
                    MOVE 'MODIFICATION BIEN EFFECTUEE' TO MSGO
                WHEN DFHRESP(FILENOTFOUND)
                    MOVE 'ECHEC- FICHIER NON TROUVE' TO MSGO
                WHEN DFHRESP(NOTOPEN)
                    MOVE 'ECHEC- FICHIER NON OUVERT' TO MSGO
                WHEN DFHRESP(NOSPACE)
                    MOVE 'ECHEC- PLUS DE PLACE SUR LE FICHIER' TO MSGO
                WHEN OTHER
                    MOVE 'ECHEC- ERREUR GRAVE' TO MSGO
            END-EVALUATE
            PERFORM 22000-TRAIT-ENVOI
            .

        23200-TRAIT-FIN.
       *---------------*
            MOVE 'FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        90000-ERR-TOUCHE.
       *----------------*
            MOVE 'TOUCHE DE FONCTION INVALIDE' TO MSGO
            PERFORM  22000-TRAIT-ENVOI
            .

        91000-ERREUR-CICS.
       *-------------------*
            MOVE 'ERREUR CICS !!!  FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        99000-FIN-CICS.
       *--------------*
            EXEC CICS SEND FROM   (MESSAGE-TXT)
                           LENGTH (LENGTH OF MESSAGE-TXT)
                           ERASE
            END-EXEC

            EXEC CICS RETURN END-EXEC
            .
 MEMBER NAME  A03JPGMD
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03JPGMD.
        AUTHOR. MAXIME.
        DATE-WRITTEN. 15/12/2023.
       ******************************************************************
       * UTILISATION DE LA BDD DB2                                      *
       ******************************************************************

        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.

       *----------------------------------------------------------------*
       *                   D A T A   D I V I S I O N                    *
       *----------------------------------------------------------------*
        DATA DIVISION.
        WORKING-STORAGE SECTION.
       * PARTIE OBLIGATOIRE POUR UTILISER SQL
            EXEC SQL  INCLUDE SQLCA     END-EXEC.
       * DEFINITION DES TABLES DE LA BDD SACEM
            EXEC SQL  INCLUDE ALBUM     END-EXEC.
            EXEC SQL  INCLUDE CONTRAT   END-EXEC.
            EXEC SQL  INCLUDE PERSONNE  END-EXEC.
            EXEC SQL  INCLUDE MAISDIST  END-EXEC.
            EXEC SQL  INCLUDE CHANSON   END-EXEC.
       * AFFICHAGE DES COLONNES
        01  COLONNES.
            05                          PIC X(5)  VALUE 'CODEP'.
            05                          PIC X     VALUE ' '.
            05                          PIC X(25) VALUE 'IDENTITE'.
            05                          PIC X     VALUE ' '.
            05                          PIC X(5)  VALUE 'CODEA'.
            05                          PIC X(2)  VALUE ' '.
            05                          PIC X(5)  VALUE 'SIREN'.
        01  LIGNE.
            05 CODEP-ED                 PIC X(4).
            05                          PIC X(2)  VALUE '  '.
            05 IDENTITE-ED              PIC X(25).
            05                          PIC X     VALUE ' '.
            05 CODEA-ED                 PIC X(4).
            05                          PIC X(2)  VALUE ' '.
            05 SIREN-ED                 PIC X(5).

       *----------------------------------------------------------------*
       *         P R O C E D U R E   D I V I S I O N                    *
       *----------------------------------------------------------------*
        PROCEDURE DIVISION.
            PERFORM DEBUT
            PERFORM TRAITEMENT
            PERFORM FIN
            .

        DEBUT.
       *--------------*
            DISPLAY 'INTERROGATION DE LA BDD DE LA SACEM'
            .
        TRAITEMENT.
       *--------------*
            DISPLAY 'LISTE DES CONTRATS ORDONNES SUR LA PERSONNE, LE CODE
       -            ' ALBUM ET LA MAISON DE'
            DISPLAY 'DISTRIBUTION'
            DISPLAY '----------------------------------------------------
       -            '---------------------------'
       ******************************************************************
       * DECLARATION DE LA REQUETE SQL AVEC UN CURSEUR CAR IL Y AURA    *
       * PLUSIEURS LIGNES                                               *
       ******************************************************************
            EXEC SQL    DECLARE CUR CURSOR FOR
                SELECT
                --     CONTRAT
                       CODEA,
                --     C.SIREN,
                --     C.CODEP,
                --     DROITS,
                --     DATESIGN,
                --     FONCTION,

                --     PERSONNE
                       P.CODEP,
                       IDENTITE,
                --     TYPE,

                --     MAISON DE DISTRIBUTION
                       M.SIREN
                --     RAISON_SOCIALE
                --     ADRESSE,
                --     CODERES

                FROM
                       CONTRAT          AS C
                       JOIN MAISON_DIST AS M  ON M.SIREN = C.SIREN
                       JOIN PERSONNE    AS P  ON P.CODEP = C.CODEP

                ORDER BY
                       IDENTITE,
                       CODEA,
                       RAISON_SOCIALE
            END-EXEC
            EVALUATE SQLCODE
                WHEN 0
                    CONTINUE
                WHEN OTHER
                    PERFORM FIN-ERRSQL
            END-EVALUATE

       ******************************************************************
       * OUVERTURE DU CURSEUR POUR POUVOIR ENSUITE RECUPERER LES DONNEES*
       ******************************************************************
            EXEC SQL
                OPEN CUR
            END-EXEC
            IF SQLCODE NOT = ZERO
                PERFORM FIN-ERRSQL
            END-IF

       ******************************************************************
       * PARCOURS DES DONNEES AVEC LE CURSEUR                           *
       ******************************************************************
            DISPLAY COLONNES
            PERFORM TRAIT-READCONTRAT
            PERFORM UNTIL SQLCODE = 100
       * AFFICHAGE D'UNE LIGNE DE RESULTAT
                MOVE PER-CODEP    TO CODEP-ED
                MOVE PER-IDENTITE TO IDENTITE-ED
                MOVE COT-CODEA    TO CODEA-ED
                MOVE MAD-SIREN    TO SIREN-ED
                DISPLAY LIGNE
       * LECTURE DE L'ENREGISTREMENT SUIVANT
                PERFORM TRAIT-READCONTRAT
            END-PERFORM

       ******************************************************************
       * FERMETURE DU CURSEUR                                           *
       ******************************************************************
            EXEC SQL
                CLOSE CUR
            END-EXEC
            .
        TRAIT-READCONTRAT.
            INITIALIZE PER-IDENTITE
            EXEC SQL
                FETCH CUR
                INTO :COT-CODEA , :PER-CODEP , :PER-IDENTITE , :MAD-SIREN
            END-EXEC
                EVALUATE SQLCODE
                    WHEN 0
                        CONTINUE
                    WHEN 100
                        DISPLAY 'W- FIN DES CONTRATS'
                    WHEN OTHER
                        PERFORM FIN-ERRSQL
                END-EVALUATE
            .
        FIN.
       *--------------*
            DISPLAY 'FIN'
            STOP RUN
            .
        FIN-ERRSQL.
       *--------------*
            DISPLAY 'E- SQLCODE:' SQLCODE
            PERFORM FIN
            .
 MEMBER NAME  A03KPGMD
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03KPGMD.
        AUTHOR. MAXIME.
        DATE-WRITTEN. 15/12/2023.

       ******************************************************************
       *     SELECTION D'UNE LIGNE DE LA TABLE CHANSON                  *
       ******************************************************************

       *----------------------------------------------------------------*
       *  E N V I R O N M E N T      D I V I S I O N                    *
       *----------------------------------------------------------------*
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA
            CURRENCY SIGN IS "F".
        INPUT-OUTPUT SECTION.

       *----------------------------------------------------------------*
       *                   D A T A   D I V I S I O N                    *
       *----------------------------------------------------------------*
        DATA DIVISION.
        WORKING-STORAGE SECTION.
       * PARTIE OBLIGATOIRE POUR UTILISER SQL
            EXEC SQL  INCLUDE SQLCA     END-EXEC.
        77  SQLCODE-ED                  PIC +(9)9.

       * DEFINITION DES TABLES DE LA BDD SACEM
            EXEC SQL  INCLUDE CHANSON   END-EXEC.
            EXEC SQL  INCLUDE VENTES    END-EXEC.
       * AFFICHAGE DES COLONNES POUR LES CHANSONS
        01  COLONNES.
            05                          PIC X(5)     VALUE 'CODEC'.
            05                          PIC X(1)     VALUE SPACE.
            05                          PIC X(40)    VALUE 'TITREC'.
            05                          PIC X(1)     VALUE SPACE.
            05                          PIC X(5)     VALUE 'CODEA'.
        01  LIGNE.
            05 CODEC-ED                 PIC X(4).
            05                          PIC X(2)     VALUE SPACE.
            05 TITREC-ED                PIC X(40).
            05                          PIC X(1)     VALUE SPACE.
            05 CODEA-ED                 PIC X(4).
       * AFFICHAGE DES COLONNES POUR LES VENTES
        01  COLONNE-VENTES.
            05                          PIC X(5)     VALUE 'CODEA'.
            05                          PIC X(1)     VALUE SPACE.
            05                          PIC X(10)    VALUE 'DATE VENTE'.
            05                          PIC X(1)     VALUE SPACE.
            05                          PIC X(5)     VALUE 'SIREN'.
            05                          PIC X(1)     VALUE SPACE.
            05                          PIC X(8)     VALUE 'QUANTITE'.
            05                          PIC X(1)     VALUE SPACE.
            05                          PIC X(11)    VALUE 'PRIX'.
        01  LIGNE-VENTES.
            05 VEN-CODEA-ED             PIC X(4).
            05                          PIC X(2)     VALUE SPACE.
            05 VEN-DATEVENTE-ED         PIC X(10).
            05                          PIC X(1)     VALUE SPACE.
            05 VEN-SIREN-ED             PIC X(5).
            05                          PIC X(1)     VALUE SPACE.
            05 VEN-QTE-ED               PIC Z(4)9.
            05                          PIC X(5)     VALUE SPACE.
            05 VEN-PRIX-ED              PIC +F(5)9,99.
       * CODE CHANSON A RECHERCHE
        77  CDC                         PIC X(4)     VALUE '0571'.

       *----------------------------------------------------------------*
       *         P R O C E D U R E   D I V I S I O N                    *
       *----------------------------------------------------------------*
        PROCEDURE DIVISION.
            PERFORM DEBUT
            PERFORM TRAITEMENT
            PERFORM FIN
            .

        DEBUT.
       *--------------*
            DISPLAY 'INTERROGATION DE LA BDD DE LA SACEM'
            .
        TRAITEMENT.
       *--------------*
            DISPLAY 'AFFICHAGE DES INFOS SUR LA CHANSON 0571'
            DISPLAY '----------------------------------------------------
       -            '---------------------------'
       ******************************************************************
       * DECLARATION DE LA REQUETE SQL                                  *
       ******************************************************************
            EXEC SQL
                SELECT
                       CODEC ,
                       TITREC,
                       COALESCE(CODEA, '****')
                INTO
                       :CHA-CODEC ,
                       :CHA-TITREC,
                       :CHA-CODEA
                FROM
                       CHANSON
                WHERE
                       CODEC = :CDC
            END-EXEC
            EVALUATE SQLCODE
                WHEN 0
                    CONTINUE
                WHEN 100
                    DISPLAY 'W- AUCUNE CHANSON TROUVE POUR LE CODEC ' CDC
                WHEN OTHER
                    PERFORM FIN-ERRSQL
            END-EVALUATE
       ******************************************************************
       * AFFICHAGE DU RESULTAT                                          *
       ******************************************************************
            DISPLAY COLONNES

            MOVE CHA-CODEC          TO CODEC-ED
            MOVE CHA-TITREC-TEXT    TO TITREC-ED
            MOVE CHA-CODEA          TO CODEA-ED
            DISPLAY LIGNE

       ******************************************************************
       * CREATION DE LA VENTE DE 200 ALBUM T702 POUR LA MAISON DE DIST  *
       * 463CQ (CODE SIREN) EN DATE DU JOUR. LE PRIX EST AUGMENTE DE    *
       * 10% PAR RAPPORT A LA VENTE DU 20.12.1997 POUR LE MEME ALBUM    *
       * ET LA MEME MAISON                                              *
       ******************************************************************
            DISPLAY 'CREATION D''UNE VENTE'
            DISPLAY '----------------------------------------------------
       -            '---------------------------'

            EXEC SQL
                INSERT INTO VENTES
                    SELECT
                           'T702'       AS CODEA,
                           CURRENT DATE AS DATEVENTE,
                           SIREN        AS SIREN,
                           200          AS QTE,
                           PRIX * 1.1   AS PRIX
                    FROM
                           VENTES
                    WHERE
                           DATEVENTE = '1997-12-20'
                       AND SIREN     = '463CQ'
            END-EXEC

            EVALUATE SQLCODE
                WHEN 0
                    DISPLAY 'INSERT OK'
                    CONTINUE
                WHEN OTHER
                    DISPLAY 'E- INSERT KO'
                    PERFORM FIN-ERRSQL
            END-EVALUATE

            EXEC SQL
                SELECT
                       CODEA,
                       DATEVENTE,
                       SIREN,
                       QTE,
                       PRIX
                INTO
                       :VEN-CODEA,
                       :VEN-DATEVENTE,
                       :VEN-SIREN,
                       :VEN-QTE,
                       :VEN-PRIX
                FROM
                       VENTES
                WHERE
                       DATEVENTE = CURRENT DATE
                   AND SIREN     = '463CQ'
                   AND CODEA     = 'T702'
            END-EXEC
            EVALUATE SQLCODE
                WHEN 0
                    PERFORM TRAIT-AFFICHVENTE

                    EXEC SQL ROLLBACK END-EXEC
                    DISPLAY 'ROLLBACK'
                    CONTINUE
                WHEN OTHER
                    DISPLAY 'E- VENTE NON TROUVEE'
                    PERFORM FIN-ERRSQL
            END-EVALUATE

            .
        TRAIT-AFFICHVENTE.
       * AFFICHAGE D'UNE VENTE RECUPERE PAR SQL
            DISPLAY COLONNE-VENTES

            MOVE VEN-CODEA      TO VEN-CODEA-ED
            MOVE VEN-DATEVENTE  TO VEN-DATEVENTE-ED
            MOVE VEN-SIREN      TO VEN-SIREN-ED
            MOVE VEN-QTE        TO VEN-QTE-ED
            MOVE VEN-PRIX       TO VEN-PRIX-ED
            DISPLAY LIGNE-VENTES
            .
        FIN.
       *--------------*
            DISPLAY 'FIN'
            STOP RUN
            .
        FIN-ERRSQL.
       *--------------*
            MOVE SQLCODE TO SQLCODE-ED
            DISPLAY 'E- SQLCODE:' SQLCODE-ED
            PERFORM FIN
            .
 MEMBER NAME  A03MPGMD
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03MPGMD.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 17/12/2023.
       ******************************************************************
       * PROGRAMME DE TEST DE A00SP1                                    *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
       * SQLCA
            EXEC SQL INCLUDE SQLCA END-EXEC

       * COPY DE LA ZONE DE COMMUNICATION AVEC A00SP7
            COPY ZSP7.

       * SOUS-PROGRAMME EN DYNAMIQUE
        77  SSPGRM                      PIC X(8)     VALUE 'A03SP7'.
       * DIVERS
        01  WS-CAS                      PIC 99       VALUE ZEROES.
        01  WS-RESULTAT-ATTENDU         PIC X(58)    VALUE SPACES.

        PROCEDURE DIVISION.
            INITIALIZE SSPGRM
            ACCEPT SSPGRM
            IF SSPGRM = SPACES
                DISPLAY 'ERROR : MISSING SSPGRM NAME IN SYSIN'
            END-IF

       * CAS 1
       * CREATION BIEN EFFECTUEE
            INITIALIZE ZSP7
            MOVE 'C109'                    TO ZSP7-CODEA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'P190'                    TO ZSP7-CODEP
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'I'                       TO ZSP7-FONCTION
            MOVE 5                         TO ZSP7-DROITS
            MOVE '00 CREATION BIEN EFFECTUEE' TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

            EXEC SQL ROLLBACK END-EXEC

       * CAS 2
       * CREATION BIEN EFFECTUEE
            INITIALIZE ZSP7
            MOVE 'COMPILATION 90'          TO ZSP7-TITREA
            MOVE 'MUSIDISQUES'             TO ZSP7-RAISON-SOCIALE
            MOVE 'BRASSENS G.'             TO ZSP7-IDENTITE
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'C'                       TO ZSP7-FONCTION
            MOVE 22                        TO ZSP7-DROITS
            MOVE '00 CREATION BIEN EFFECTUEE' TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

            EXEC SQL ROLLBACK END-EXEC

       * CAS 3
       * ALBUM INEXISTANT
            INITIALIZE ZSP7
            MOVE 'AAAA'                    TO ZSP7-CODEA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'P190'                    TO ZSP7-CODEP
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'I'                       TO ZSP7-FONCTION
            MOVE 6                         TO ZSP7-DROITS
            MOVE '01 ALBUM INEXISTANT'        TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 4
       * ALBUM INEXISTANT
            INITIALIZE ZSP7
            MOVE 'AAAAAAAAAAAAAA'          TO ZSP7-TITREA
            MOVE 'MUSIDISQUES'             TO ZSP7-RAISON-SOCIALE
            MOVE 'BRASSENS G.'             TO ZSP7-IDENTITE
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'C'                       TO ZSP7-FONCTION
            MOVE 6                         TO ZSP7-DROITS
            MOVE '01 ALBUM INEXISTANT'        TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 5
       * CODE ALBUM ET TITRE RENSEIGNES
            INITIALIZE ZSP7
            MOVE 'C109'                    TO ZSP7-CODEA
            MOVE 'COMPILATION 90'          TO ZSP7-TITREA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'P190'                    TO ZSP7-CODEP
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'I'                       TO ZSP7-FONCTION
            MOVE 6                         TO ZSP7-DROITS
            MOVE '02 CODE ALBUM ET TITRE RENSEIGNES'
            TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 6
       * MAISON DE DISTRIBUTION INEXISTANTE
            INITIALIZE ZSP7
            MOVE 'C109'                    TO ZSP7-CODEA
            MOVE 'AAAAA'                   TO ZSP7-SIREN
            MOVE 'P190'                    TO ZSP7-CODEP
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'I'                       TO ZSP7-FONCTION
            MOVE 6                         TO ZSP7-DROITS
            MOVE '03 MAISON DIST INEXISTANTE'
            TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 7
       * MAISON DE DISTRIBUTION INEXISTANTE
            INITIALIZE ZSP7
            MOVE 'COMPILATION 90'          TO ZSP7-TITREA
            MOVE 'AAAAAAAAAAA'             TO ZSP7-RAISON-SOCIALE
            MOVE 'BRASSENS G.'             TO ZSP7-IDENTITE
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'C'                       TO ZSP7-FONCTION
            MOVE 6                         TO ZSP7-DROITS
            MOVE '03 MAISON DIST INEXISTANTE'
            TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 8
       * CODE MAISON ET RAISON SOCIALE RENSEIGNES
            INITIALIZE ZSP7
            MOVE 'COMPILATION 90'          TO ZSP7-TITREA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'MUSIDISQUES'             TO ZSP7-RAISON-SOCIALE
            MOVE 'BRASSENS G.'             TO ZSP7-IDENTITE
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'C'                       TO ZSP7-FONCTION
            MOVE 6                         TO ZSP7-DROITS
            MOVE '04 CODE MAISON ET RAISON SOCIALE RENSEIGNES'
            TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 9
       * PERSONNE INEXISTANTE
            INITIALIZE ZSP7
            MOVE 'C109'                    TO ZSP7-CODEA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'AAAA'                    TO ZSP7-CODEP
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'I'                       TO ZSP7-FONCTION
            MOVE 6                         TO ZSP7-DROITS
            MOVE '05 PERSONNE INEXISTANTE'    TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 10
       * PERSONNE INEXISTANTE
            INITIALIZE ZSP7
            MOVE 'COMPILATION 90'          TO ZSP7-TITREA
            MOVE 'MUSIDISQUES'             TO ZSP7-RAISON-SOCIALE
            MOVE 'AAAAAAAAAAA'             TO ZSP7-IDENTITE
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'C'                       TO ZSP7-FONCTION
            MOVE 6                         TO ZSP7-DROITS
            MOVE '05 PERSONNE INEXISTANTE'    TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 11
       * CODE PERSONNE ET IDENTITE RENSEIGNES
            INITIALIZE ZSP7
            MOVE 'C109'                    TO ZSP7-CODEA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'P190'                    TO ZSP7-CODEP
            MOVE 'BRASSENS G.'             TO ZSP7-IDENTITE
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'I'                       TO ZSP7-FONCTION
            MOVE 6                         TO ZSP7-DROITS
            MOVE '06 CODE PERSONNE ET IDENTITE RENSEIGNES'
                                           TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 12
       * CONTRAT DEJA EXISTANT
            INITIALIZE ZSP7
            MOVE 'A836'                    TO ZSP7-CODEA
            MOVE '200AJ'                   TO ZSP7-SIREN
            MOVE 'P150'                    TO ZSP7-CODEP
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'D'                       TO ZSP7-FONCTION
            MOVE 6                         TO ZSP7-DROITS
            MOVE '07 CONTRAT DEJA EXISTANT'   TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 13
       * DATE DE SIGNATURE INVALIDE
            INITIALIZE ZSP7
            MOVE 'C109'                    TO ZSP7-CODEA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'P190'                    TO ZSP7-CODEP
            MOVE 'AAAAAAAA'                TO ZSP7-DATESIGN
            MOVE 'I'                       TO ZSP7-FONCTION
            MOVE 6                         TO ZSP7-DROITS
            MOVE '08 DATE SIGNATURE INVALIDE' TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 14
       * DATE DE SIGNATURE INVALIDE
            INITIALIZE ZSP7
            MOVE 'C109'                    TO ZSP7-CODEA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'P190'                    TO ZSP7-CODEP
            MOVE '99999999'                TO ZSP7-DATESIGN
            MOVE 'I'                       TO ZSP7-FONCTION
            MOVE 6                         TO ZSP7-DROITS
            MOVE '08 DATE SIGNATURE INVALIDE' TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 15
       * FONCTION INVALIDE
            INITIALIZE ZSP7
            MOVE 'C109'                    TO ZSP7-CODEA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'P190'                    TO ZSP7-CODEP
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'A'                       TO ZSP7-FONCTION
            MOVE 6                         TO ZSP7-DROITS
            MOVE '09 FONCTION INVALIDE'       TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 16
       * DROITS INVALIDES
            INITIALIZE ZSP7
            MOVE 'C109'                    TO ZSP7-CODEA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'P190'                    TO ZSP7-CODEP
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'I'                       TO ZSP7-FONCTION
            MOVE ZEROES                    TO ZSP7-DROITS
            MOVE '10 DROITS INVALIDES'        TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 17
       * DROITS INVALIDES
            INITIALIZE ZSP7
            MOVE 'C109'                    TO ZSP7-CODEA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'P190'                    TO ZSP7-CODEP
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'I'                       TO ZSP7-FONCTION
            MOVE 7                         TO ZSP7-DROITS
            MOVE '10 DROITS INVALIDES'        TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

            STOP RUN
            .

        APPEL-SSPROG.
            DISPLAY SPACES
            ADD 1 TO WS-CAS
            DISPLAY ' CAS : ' WS-CAS
            DISPLAY '   ALBUM   : ' ZSP7-CODEA ', ' ZSP7-TITREA
            DISPLAY '   MAISON  : ' ZSP7-SIREN ', ' ZSP7-RAISON-SOCIALE
            DISPLAY '   PERSONNE: ' ZSP7-CODEP ', ' ZSP7-IDENTITE
            DISPLAY '   DROITS  : ' ZSP7-DROITS
            DISPLAY '   DATESIGN: ' ZSP7-DATESIGN
            DISPLAY '   FONCTION: ' ZSP7-FONCTION
            DISPLAY '   RESULTAT ATTENDU : ' WS-RESULTAT-ATTENDU

            CALL SSPGRM   USING ZSP7

            DISPLAY '   RESULTAT OBSERVE : ' ZSP7-CODRET ' ' ZSP7-LIBERR
            .
 MEMBER NAME  A03SP7
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03SP7.
        AUTHOR. MAXIME.
        DATE-WRITTEN. 18/12/2023.
        DATE-COMPILED. 19/12/2023.
       ******************************************************************
       * SOUS PROGRAMME DE CREATION DE CONTRAT DANS LA BDD SACEM        *
       *                                                                *
       * LE PROGRAMME APELANT RENSEIGNE LES DONNEES DU CONTRAT :        *
       *     CODEA                                                      *
       *     TITREA                                                     *
       *     SIREN                                                      *
       *     RAISON_SOCIALE                                             *
       *     CODEP                                                      *
       *     IDENTITE                                                   *
       *     DATESIGN                                                   *
       *     FONCTION         PARMI I, P, C OU D                        *
       *                                                                *
       * CONTRAINTES                                                    *
       *     CODEA OU TITREA SONT RENSEIGNES ET DOIVENT EXISTER ALBUM   *
       *     SIREN OU RAISON_SOCIALE SONTRENSEIGNES ET EXISTENT DANS MD *
       *     CODEP OU IDENTITE SONT RENSEIGNES ET EXISTENT DANS PERSONNE*
       *     LA CLE CODEA,SIREN, CODEP     EST UNIQUE DANS CONTRAT
       *                                                                *
       ******************************************************************

       *----------------------------------------------------------------*
       *  E N V I R O N M E N T      D I V I S I O N                    *
       *----------------------------------------------------------------*
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER.
            IBM3090
       *    WITH DEBUGGING MODE
            .
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.


       *----------------------------------------------------------------*
       *                   D A T A   D I V I S I O N                    *
       *----------------------------------------------------------------*
        DATA DIVISION.
        WORKING-STORAGE SECTION.
       * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
       * PARTIE OBLIGATOIRE POUR UTILISER SQL
            EXEC SQL  INCLUDE SQLCA     END-EXEC.
        77  SQLCODE-ED                  PIC +(9)9.

       * DEFINITION DES TABLES DE LA BDD SACEM
            EXEC SQL  INCLUDE CONTRAT   END-EXEC.
            EXEC SQL  INCLUDE PERSONNE  END-EXEC.
            EXEC SQL  INCLUDE ALBUM     END-EXEC.
            EXEC SQL  INCLUDE MAISDIST  END-EXEC.
       * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
            EXEC SQL  INCLUDE ZCOMDAT   END-EXEC.
       * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
        01  ERREUR.
            88 ERR-AUCUNE-ERREUR
               VALUE SPACES.
            88 ERR-00
               VALUE '00CREATION BIEN EFFECTUEE'.
            88 ERR-01
               VALUE '01ALBUM NON RENSEIGNE OU INEXISTANT'.
            88 ERR-02
               VALUE '02CODE ALBUM ET TITRE RENSEIGNES'.
            88 ERR-03
               VALUE '03MAISON DE DISTRIBUTION NON RENSEIGNEE OU INEXISTA
       -              'NTE'.
            88 ERR-04
               VALUE '04CODE MAISON DE DISTRIBUTION ET RAISON SOCIAL RENS
       -             'EIGNEE'.
            88 ERR-05
               VALUE '05CODE PERSONNE ET IDENTITE RENSEIGNES'.
            88 ERR-06
               VALUE '06CODE PERSONNE ET IDENTITE RENSEIGNES'.
            88 ERR-07
               VALUE '07CONTRAT DEJA EXISTANT'.
            88 ERR-08
               VALUE '08DATE DE SIGNATURE INVALIDE'.
            88 ERR-09
               VALUE '09FONCTION INVALIDE'.
            88 ERR-10
               VALUE '10DROITS INVALIDES'.
            88 ERR-99
               VALUE '99ERREUR TECHNIQUE'.
            05 ERR-CODERET         PIC 99.
            05 ERR-LIBERR          PIC X(55).
        77  FONCTIONS              PIC X.
            88 FONCTION-AUTORISEE VALUE 'I', 'P', 'C', 'D'.
       * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
       * VARIABLES DE TRAVAIL
       * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
        77  MOYENNE                PIC S9(3)V9(2) USAGE COMP-3.
        77  MOY_B                  PIC S9(3)V9(2) USAGE COMP-3.
        77  MOY_H                  PIC S9(3)V9(2) USAGE COMP-3.
        77  CURRENTDATE            PIC 9(8).
       * DATE AU FORMAT SQL
        01  DATECOMP.
            05 ZSP7-DATESIGN-AA    PIC X(4).
            05                     PIC X VALUE '-'.
            05 ZSP7-DATESIGN-MM    PIC X(2).
            05                     PIC X VALUE '-'.
            05 ZSP7-DATESIGN-JJ    PIC X(2).
        01  DATECOMP-SQL  REDEFINES DATECOMP PIC X(10).

        LINKAGE SECTION.
       * ZONE DE COMMMUNICATION
            EXEC SQL  INCLUDE ZSP7      END-EXEC.

       *----------------------------------------------------------------*
       *         P R O C E D U R E   D I V I S I O N                    *
       *----------------------------------------------------------------*
        PROCEDURE DIVISION USING ZSP7.
            PERFORM DEBUT
            PERFORM TRAITEMENT
            PERFORM FIN
            .
       *----------------------------------------------------------------*
       *                               DEBUT                            *
       *----------------------------------------------------------------*
        DEBUT.
       *------------*
       D    DISPLAY "D- DEBUT"
            PERFORM DEBUT-INITIALISATION
            PERFORM DEBUT-CHECKINPUT
            .
        DEBUT-INITIALISATION.
       *------------*
       D    DISPLAY "D- DEBUT-INITIALISATION"
            SET ERR-AUCUNE-ERREUR TO TRUE
            .
        DEBUT-CHECKINPUT.
       *------------*
       D    DISPLAY "D- DEBUT-CHECKINPUT"
       * CONTROLE DES ENTREES DE LA ZONE DE COMMUNICATION
            PERFORM DEBUT-CHECK-INFO-ALBUM
            PERFORM DEBUT-CHECK-INFO-MAISONDIST
            PERFORM DEBUT-CHECK-INFO-PERSONNE
            PERFORM SEND-ERREUR-SI-NECESSAIRE

            PERFORM DEBUT-CHECK-DATE
            PERFORM SEND-ERREUR-SI-NECESSAIRE

            PERFORM DEBUT-CHECK-CONTRAT-EXIST
            PERFORM SEND-ERREUR-SI-NECESSAIRE

            PERFORM DEBUT-CHECK-INFO-DROITS
            PERFORM SEND-ERREUR-SI-NECESSAIRE
            .
        SEND-ERREUR-SI-NECESSAIRE.
       *------------*
       * EN CAS D'ERREUR ARRET DU PROGRAMME AVEC LE CODE ET LE MESSAGE
            IF NOT ERR-AUCUNE-ERREUR
                PERFORM FIN-SETERROR
            END-IF
            .
        DEBUT-CHECK-INFO-ALBUM.
       *------------*
       D    DISPLAY 'D- DEBUT-CHECK-INFO-ALBUM'
            EVALUATE TRUE
       * LE CODEA DOIT ETRE RENSEIGNE OU LE TITREA
                WHEN ZSP7-CODEA = SPACES AND ZSP7-TITREA = SPACES
                    SET ERR-01 TO TRUE

       * MAIS PAS EN MEME TEMPS
                WHEN NOT (ZSP7-CODEA = SPACES OR ZSP7-TITREA = SPACES)
                    SET ERR-02 TO TRUE
            END-EVALUATE
       * SI PAS D'ERREUR DE SAISIE, ON VERIFIE L'EXISTENCE DANS LA BASE
            IF ERR-AUCUNE-ERREUR
                PERFORM DEBUT-CHECK-ALBUM-EXIST
            ELSE
                PERFORM SEND-ERREUR-SI-NECESSAIRE
            END-IF
            .
        DEBUT-CHECK-ALBUM-EXIST.
       *------------*
       D    DISPLAY 'D- DEBUT-CHECK-ALBUM-EXIST'
            EVALUATE TRUE
       *        SI C'EST LE CODEA QUI EST RENSEIGNE
       *        RECHERCHE DE L'ALBUM AVEC LE CODEA
                WHEN ZSP7-CODEA  NOT = SPACES
                    EXEC SQL
                        SELECT CODEA
                        INTO   :ALB-CODEA
                        FROM   ALBUM
                        WHERE  CODEA = :ZSP7-CODEA
                    END-EXEC
       *        SI C'EST LE TITREA QUI EST RENSEIGNE
       *        RECHERCHE DE L'ALBUM AVEC LE TITREA
                WHEN ZSP7-TITREA NOT = SPACES
                    EXEC SQL
                        SELECT CODEA
                        INTO   :ALB-CODEA
                        FROM   ALBUM
                        WHERE  TITREA = :ZSP7-TITREA
                    END-EXEC
            END-EVALUATE
            EVALUATE SQLCODE
                WHEN 100
       * AUCUNE LIGNE N'A ETE TROUVEE, L'ALBUM N'EXISTE PAS
                    SET ERR-01 TO TRUE
                WHEN -811
                WHEN 0
       * AU MOINS UNE LIGNE A ETE TROUVE, L'ALBUM EXISTE
                    CONTINUE
                WHEN OTHER
                    SET ERR-99 TO TRUE
                    PERFORM SEND-ERREUR-SI-NECESSAIRE
            END-EVALUATE
            .
        DEBUT-CHECK-INFO-MAISONDIST.
       *------------*
       D    DISPLAY 'D- DEBUT-CHECK-INFO-MAISONDIST'
       * LE SIREN DOIT ETRE RENSEIGNE OU LA RAISON SOCIALE
       * MAIS PAS EN MEME TEMPS
            EVALUATE TRUE
       * LE CODEP DOIT ETRE RENSEIGNE OU L'IDENTITE DE LA PERSONNE
                WHEN     ZSP7-SIREN          = SPACES
                     AND ZSP7-RAISON-SOCIALE = SPACES
                    SET ERR-03 TO TRUE
       * MAIS PAS EN MEME TEMPS
                WHEN NOT(ZSP7-SIREN          = SPACES
                      OR ZSP7-RAISON-SOCIALE = SPACES)
                    SET ERR-04 TO TRUE
            END-EVALUATE
       * SI PAS D'ERREUR DE SAISIE, ON VERIFIE L'EXISTENCE DANS LA BASE
            IF ERR-AUCUNE-ERREUR
                PERFORM DEBUT-CHECK-MAISDIST-EXIST
            ELSE
                PERFORM SEND-ERREUR-SI-NECESSAIRE
            END-IF
            .
        DEBUT-CHECK-MAISDIST-EXIST.
       *------------*
       D    DISPLAY 'D- DEBUT-CHECK-MAISDIST-EXIST'
            EVALUATE TRUE
       *        SI C'EST LE SIREN QUI EST RENSEIGNE
       *        RECHERCHE DE LA MAISON DE DIST AVEC LE SIREN
                WHEN ZSP7-SIREN NOT = SPACES
                    EXEC SQL
                        SELECT SIREN
                        INTO   :MAD-SIREN
                        FROM   MAISON_DIST
                        WHERE  SIREN = :ZSP7-SIREN
                    END-EXEC
       *        SI C'EST LA RAISON SOCIALE QUI EST RENSEIGNEE
       *        RECHERCHE DE LA MAISON DE DIST AVEC LA RAISON SOCIALE
                WHEN ZSP7-RAISON-SOCIALE NOT = SPACES
                    EXEC SQL
                        SELECT SIREN
                        INTO   :MAD-SIREN
                        FROM   MAISON_DIST
                        WHERE  RAISON_SOCIALE = :ZSP7-RAISON-SOCIALE
                    END-EXEC
            END-EVALUATE

            EVALUATE SQLCODE
                WHEN 100
       * AUCUNE LIGNE N'A ETE TROUVEE, LA MAISON DE DIST N'EXISTE PAS
                    SET ERR-03 TO TRUE
                WHEN -811
                WHEN 0
       * AU MOINS UNE LIGNE A ETE TROUVE, LA MAISON DE DIST EXISTE
                    CONTINUE
                WHEN OTHER
                    SET ERR-99 TO TRUE
                    PERFORM SEND-ERREUR-SI-NECESSAIRE
            END-EVALUATE
            .
        DEBUT-CHECK-INFO-PERSONNE.
       *------------*
       D    DISPLAY 'D- DEBUT-CHECK-INFO-PERSONNE'
            EVALUATE TRUE
       * LE CODEP DOIT ETRE RENSEIGNE OU L'IDENTITE DE LA PERSONNE
                WHEN ZSP7-CODEP = SPACES AND ZSP7-IDENTITE = SPACES
                    SET ERR-05 TO TRUE
       * MAIS PAS EN MEME TEMPS
                WHEN NOT(ZSP7-CODEP = SPACES OR ZSP7-IDENTITE = SPACES)
                    SET ERR-06 TO TRUE
                WHEN OTHER
       * ON VERIFIE ENSUITE LA FONCTION DE LA PERSONNE
                    MOVE ZSP7-FONCTION TO FONCTIONS
                    IF NOT FONCTION-AUTORISEE
                        SET ERR-09 TO TRUE
                    END-IF
            END-EVALUATE
       * SI PAS D'ERREUR DE SAISIE, ON VERIFIE L'EXISTENCE DANS LA BASE
            IF ERR-AUCUNE-ERREUR
                PERFORM DEBUT-CHECK-PERSONNE-EXIST
            ELSE
                PERFORM SEND-ERREUR-SI-NECESSAIRE
            END-IF
            .
        DEBUT-CHECK-PERSONNE-EXIST.
       *------------*
       D    DISPLAY 'D- DEBUT-CHECK-PERSONNE-EXIST'
            EVALUATE TRUE
       *        SI C'EST LE CODEP QUI EST RENSEIGNE
       *        RECHERCHE DE LA PERSONNE AVEC LE CODEP
                WHEN ZSP7-CODEP  NOT = SPACES
                    EXEC SQL
                        SELECT CODEP
                        INTO   :PER-CODEP
                        FROM   PERSONNE
                        WHERE  CODEP = :ZSP7-CODEP
                    END-EXEC
       *        SI C'EST L'IDENTITE QUI EST RENSEIGNEE
       *        RECHERCHE DE LA PERSONNE AVEC L'IDENTITE
                WHEN ZSP7-IDENTITE NOT = SPACES
                    EXEC SQL
                        SELECT CODEP
                        INTO   :PER-CODEP
                        FROM   PERSONNE
                        WHERE  IDENTITE = :ZSP7-IDENTITE
                    END-EXEC
            END-EVALUATE

            EVALUATE SQLCODE
                WHEN 100
       * AUCUNE LIGNE N'A ETE TROUVEE, LA PERSONNE N'EXISTE PAS
                    SET ERR-05 TO TRUE
                WHEN -811
                WHEN 0
       * AU MOINS UNE LIGNE A ETE TROUVE, LA PERSONNE EXISTE
                    CONTINUE
                WHEN OTHER
                    SET ERR-99 TO TRUE
                    PERFORM SEND-ERREUR-SI-NECESSAIRE
            END-EVALUATE
            .
        DEBUT-CHECK-INFO-DROITS.
       *------------*
       D    DISPLAY 'D- DEBUT-CHECK-INFO-DROITS'
       * LES DROITS DOIVENT ETRE NUMERIQUES ET NON NULS
            IF ZSP7-DROITS IS NOT NUMERIC OR ZSP7-DROITS = 0
                SET ERR-10 TO TRUE
            END-IF
       * PUIS ILS NE DOIVENT PAS ETRE S'ELOIGNE DE 10% DE LA MOYENNE
            PERFORM DEBUT-CHECK-MOY
            .
        DEBUT-CHECK-MOY.
       D    DISPLAY 'D- DEBUT-CHECK-MOY'
       * ALGO : ON RECUPERE LA MOYENNE DE LA PERSONNE ET FONCTION
       *        ON VERIFIE QUE LES DROIT  SONT ENTRE MOY - 10% ET
       *                                  MOY + 10%
       *        SI CE N'EST PAS LE CAS
       *        ALORS ON RECUPERE LA MOYENNE DES DROITS POUR LA MEME
       *        FONCTION
       *        ON VERIFIE QUE LES DROITS SONT ENTRE MOY-10% ET MOY+10%

       * VERIF DE LA MOYENNE DE LA PERSONNE AVEC LA MEME FONCTION
            MOVE ZSP7-CODEP    TO COT-CODEP
            MOVE ZSP7-FONCTION TO COT-FONCTION
            EXEC SQL
                SELECT
                       AVG(DROITS)
                INTO
                       :MOYENNE
                FROM
                       CONTRAT
                WHERE
                       CODEP    = :COT-CODEP
                   AND FONCTION = :COT-FONCTION
            END-EXEC

            EVALUATE SQLCODE
                WHEN 0
                    CONTINUE
                WHEN -305
       * RESULTA NULL
                WHEN 100
       * AUCUNE LIGNE TROUVE POUR LA MOYENNE
                    PERFORM DEBUT-CHECK-MOY-FONCTION
                WHEN OTHER
                    SET ERR-99 TO TRUE
                    PERFORM SEND-ERREUR-SI-NECESSAIRE
            END-EVALUATE

            PERFORM DEBUT-CHECK-MOYENNE
       D    IF ERR-10
       D        DISPLAY 'D- DROITS HORS MOYENNE CODEP ET FONCTION'
       D    END-IF
            .
        DEBUT-CHECK-MOY-FONCTION.
       D    DISPLAY 'D- DEBUT-CHECK-MOY-FONCTION'
       * VERIF DE LA MOYENNE DE LA FONCTION
            IF ERR-AUCUNE-ERREUR
                EXEC SQL
                    SELECT
                           AVG(DROITS)
                    INTO
                           :MOYENNE
                    FROM
                           CONTRAT
                    WHERE
                           FONCTION = :COT-FONCTION
                END-EXEC

                EVALUATE SQLCODE
                    WHEN -305
                    WHEN +100
       * DANS LE CAS OU LA FONCTION N'A PAS DE CONTRATS ON ACCEPTE
                        CONTINUE
                    WHEN 0
                        PERFORM DEBUT-CHECK-MOYENNE
       D                IF ERR-10
       D                    DISPLAY 'D- DROITS HORS MOYENNE FONCTION'
       D                END-IF
                    WHEN OTHER
                        SET ERR-99 TO TRUE
                        PERFORM SEND-ERREUR-SI-NECESSAIRE
                END-EVALUATE

            END-IF
            .
        DEBUT-CHECK-MOYENNE.
       *------------*
       D    DISPLAY 'D- DEBUT-CHECK-MOYENNE'
       D    DISPLAY 'MOYENNE ' MOYENNE ' DROITS ' ZSP7-DROITS
            COMPUTE MOY_B = 0,9 * MOYENNE
            COMPUTE MOY_H = 1,1 * MOYENNE
       D    DISPLAY 'MOY_B ' MOY_B ' DROITS ' ZSP7-DROITS ' MOY_H ' MOY_H
            IF NOT ( MOY_B <= ZSP7-DROITS AND ZSP7-DROITS <= MOY_H)
                 SET ERR-10 TO TRUE
            END-IF
            .
        DEBUT-CHECK-CONTRAT-EXIST.
       *------------*
       D    DISPLAY 'D- DEBUT-CONTRAT-EXIST'
       * LA CLE NE DOIT PAS DEJA EXISTE
       * ELLE EST COMPOSE DE CODEA, SIREN, CODEP ET FONCTION
            EXEC SQL
                SELECT
                       CODEA
                INTO
                       :COT-CODEA
                FROM
                       CONTRAT
                WHERE
                       CODEA    = :ALB-CODEA
                   AND SIREN    = :MAD-SIREN
                   AND CODEP    = :PER-CODEP
                   AND FONCTION = :ZSP7-FONCTION
            END-EXEC

            EVALUATE SQLCODE
                WHEN -305
                WHEN 100
       * AUCUN CONTRAT TROUVE
       D    MOVE SQLCODE TO SQLCODE-ED
       D    DISPLAY 'D- AUCUN CONTRAT TROUVE ' SQLCODE-ED
                    CONTINUE
                WHEN -811
                WHEN 0
       * SI UN CONTRAT EST TROUVE
                    SET ERR-07 TO TRUE
                    PERFORM SEND-ERREUR-SI-NECESSAIRE
                WHEN OTHER
                    SET ERR-99 TO TRUE
                    PERFORM SEND-ERREUR-SI-NECESSAIRE
            END-EVALUATE
            .
        DEBUT-CHECK-DATE.
       *------------*
       D    DISPLAY 'D- DEBUT-CHECK-DATE'
       * LA DATE DOIT EST COHERENTE ET ETRE SUPERIEURE A LA DATE DU JOUR
            IF ZSP7-DATESIGN = SPACES
                SET ERR-08 TO TRUE
                PERFORM SEND-ERREUR-SI-NECESSAIRE
            END-IF
       * CONTROLE DE LA COHERENCE
            MOVE ZSP7-DATESIGN TO ZDATE
            CALL 'A99CTDAT' USING ZCOM
            IF ZCDRET-KO
                SET ERR-08 TO TRUE
                PERFORM SEND-ERREUR-SI-NECESSAIRE
            END-IF

       * CONTROLE DATE SIGNATURE SUPERIEURE A DATE DU JOUR
            IF NOT (ZSP7-DATESIGN >= FUNCTION CURRENT-DATE)
                SET ERR-08 TO TRUE
                PERFORM SEND-ERREUR-SI-NECESSAIRE
            END-IF

            .
       *----------------------------------------------------------------*
       *                            TRAITEMENT                          *
       *----------------------------------------------------------------*
        TRAITEMENT.
       *------------*
       D    DISPLAY 'D- TRAITEMENT'
            PERFORM TRAITEMENT-CREER-CONTRAT
            .
        TRAITEMENT-CREER-CONTRAT.
       *------------*
       D    DISPLAY 'D- TRAITEMENT-CREER-CONTRAT'
            INITIALIZE COT-CONTRAT
            MOVE ALB-CODEA         TO COT-CODEA
            MOVE MAD-SIREN         TO COT-SIREN
            MOVE PER-CODEP         TO COT-CODEP

            MOVE ZSP7-DROITS       TO COT-DROITS
            MOVE ZSP7-FONCTION     TO COT-FONCTION

       * - - - - - - - - - - - - - - - - - - - - - - - - *
       * CONVERSION DE DATESIGN AU FORMAT SQL YYYY-MM-DD *
       * IL FAUDRA UTILISER ENSUITE DATECOMP-SQL         *
       * - - - - - - - - - - - - - - - - - - - - - - - - *
            MOVE CORR ZSP7-DATESIGN     TO DATECOMP
       D    DISPLAY 'D- DATECOMP-SQL ' DATECOMP-SQL

       *    MOVE ZSP7-DATESIGN-AA  TO COT-DATESIGN(1:4)
       *    MOVE '-'               TO COT-DATESIGN(5:1)
       *    MOVE ZSP7-DATESIGN-MM  TO COT-DATESIGN(6:2)
       *    MOVE '-'               TO COT-DATESIGN(7:1)
       *    MOVE ZSP7-DATESIGN-JJ  TO COT-DATESIGN(8:2)

       *    INSERTION EN BASE
            EXEC SQL
                INSERT INTO
                            CONTRAT
                          (
                            CODEA,
                            SIREN,
                            CODEP,
                            DROITS,
                            DATESIGN,
                            FONCTION
                          )
                VALUES
                          (
                            :COT-CODEA,
                            :COT-SIREN,
                            :COT-CODEP,
                            :COT-DROITS,
                            :DATECOMP-SQL,
                            :COT-FONCTION
                          )

            END-EXEC

            EVALUATE SQLCODE
                WHEN 0
                    SET ERR-00 TO TRUE
                WHEN OTHER
                    SET ERR-99 TO TRUE
            END-EVALUATE
            PERFORM FIN-SETERROR
            .
        TRAITEMENT-TEST-ERREUR.
       *------------*
       D    DISPLAY 'D- TRAITEMENT-TEST-ERREUR'
            SET ERR-00 TO TRUE
            PERFORM FIN-SETERROR
            .
       *----------------------------------------------------------------*
       *                               FIN                              *
       *----------------------------------------------------------------*
        FIN.
       D    DISPLAY 'D- ZSP7-CODRET ' ZSP7-CODRET
       D    DISPLAY 'D- ZSP7-LIBERR ' ZSP7-LIBERR
  é         GOBACK
            .
        FIN-SETERROR.
       D    MOVE SQLCODE TO SQLCODE-ED
       D    DISPLAY 'D- SQLCODE ' SQLCODE-ED
       D    DISPLAY 'D- ERREUR  '   ERREUR
            MOVE ERR-CODERET TO ZSP7-CODRET
            MOVE ERR-LIBERR  TO ZSP7-LIBERR
            PERFORM FIN
            .
 MEMBER NAME  A03FSELT
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03FSELT.
        AUTHOR. MAXIME.
        DATE-WRITTEN. 17/12/2023.
       ******************************************************************
       * PROGRAMME DE TEST DE A03FSELJ                                  *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
       * COPY DE LA ZONE DE COMMUNICATION AVEC A00SP7
            COPY ZCOMSELJ.

       * SOUS-PROGRAMME EN DYNAMIQUE
        77  SSPGRM                      PIC X(8)     VALUE 'A03FSELJ'.
       * DIVERS
        01  WS-CAS                      PIC 99       VALUE ZEROES.
        01  WS-RESULTAT-ATTENDU         PIC X(58)    VALUE SPACES.
        77  WS-LABEL                    PIC X(15).

        PROCEDURE DIVISION.
       * CAS 1
       * LE JEU EXISTE
            INITIALIZE ZCOM-SELJEU
            MOVE 'BTN01'                   TO ZCOM-CODEJEU
            MOVE 'FORA03'                  TO ZCOM-USERID
            MOVE '0 RET-TROUVE'            TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 2
       * LE JEU N'EXISTE PAS
            INITIALIZE ZCOM-SELJEU
            MOVE 'XXX01'                   TO ZCOM-CODEJEU
            MOVE 'FORA03'                  TO ZCOM-USERID
            MOVE '1 RET-NONTROUVE'         TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 3
       * LE JEU EST INACTIF
            INITIALIZE ZCOM-SELJEU
            MOVE 'BTN02'                   TO ZCOM-CODEJEU
            MOVE 'FORA03'                  TO ZCOM-USERID
            MOVE '1 RET-NONTROUVE'         TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 4
       * LE JEU EST TERMINE
            INITIALIZE ZCOM-SELJEU
            MOVE 'BTN04'                   TO ZCOM-CODEJEU
            MOVE 'FORA03'                  TO ZCOM-USERID
            MOVE '3 RET-TERMINE'           TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 5
       * LE JEU EST SOLO ET UNE PARTIE EST EN COURS POUR CE JOUEUR
            INITIALIZE ZCOM-SELJEU
            MOVE 'BTN04'                   TO ZCOM-CODEJEU
            MOVE 'FORA03'                  TO ZCOM-USERID
            MOVE '0 RET-TROUVE'            TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 6
       * LE JEU EST SOLO ET UNE PARTIE EST EN COURS POUR UN AUTRE JOUEUR
            INITIALIZE ZCOM-SELJEU
            MOVE 'BTN04'                   TO ZCOM-CODEJEU
            MOVE 'FORA04'                  TO ZCOM-USERID
            MOVE '2 RET-ENCOURS'           TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 7
       * LE JEU EST MULTI ET UNE PARTIE EST EN COURS
            INITIALIZE ZCOM-SELJEU
            MOVE 'BTN05'                   TO ZCOM-CODEJEU
            MOVE 'FORA03'                  TO ZCOM-USERID
            MOVE '0 RET-TROUVE'            TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

            STOP RUN
            .

        APPEL-SSPROG.
            DISPLAY SPACES
            ADD 1 TO WS-CAS
            DISPLAY ' CAS : ' WS-CAS
            DISPLAY '   RESULTAT ATTENDU : ' WS-RESULTAT-ATTENDU
            DISPLAY '   CODEJEU : ' ZCOM-CODEJEU
            DISPLAY '   USERID  : ' ZCOM-USERID

            CALL SSPGRM   USING ZCOM-SELJEU

            PERFORM SET-WS-LABEL

            DISPLAY '   RESULTAT OBSERVE : ' ZCOM-CODRET ' ' WS-LABEL
            DISPLAY '   CODEJ   : ' ZCOM-CODEJEU
            DISPLAY '   UCREA   : ' ZCOM-CREAUSERID ',' ZCOM-CREAUSERNAME
            DISPLAY '   NBREM   : ' ZCOM-NBREPMAX
            DISPLAY '   NPOIN   : ' ZCOM-NBPOINTS
            DISPLAY '   UGAGN   : ' ZCOM-GAGNUSERID ',' ZCOM-GAGNUSERNAME
            DISPLAY '   NOREP   : ' ZCOM-NOREP
            DISPLAY '   STATU   : ' ZCOM-STATUT
            .
        SET-WS-LABEL.
            EVALUATE TRUE
                WHEN RET-TROUVE
                    MOVE 'RET-TROUVE' TO WS-LABEL
                WHEN RET-NONTROUVE
                    MOVE 'RET-NONTROUVE' TO WS-LABEL
                WHEN RET-ENCOURS
                    MOVE 'RET-ENCOURS' TO WS-LABEL
                WHEN RET-TERMINE
                    MOVE 'RET-TERMINE' TO WS-LABEL
            END-EVALUATE
            .
 MEMBER NAME  A03FBASE
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03FBASE.
        AUTHOR. MAXIME.

        ENVIRONMENT DIVISION.

        DATA DIVISION.
        WORKING-STORAGE SECTION.
        77  MESSAGE-TXT           PIC X(10).
        PROCEDURE DIVISION.
            MOVE WELCOME TO MESSAGE-TXT

            EXEC CICS SEND FROM   (MESSAGE-TXT)
                           LENGTH (LENGTH OF MESSAGE-TXT)
                           ERASE
            END-EXEC

            EXEC CICS RETURN END-EXEC
            .
 MEMBER NAME  A03GSUB
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03GSUB.
        AUTHOR. MAXIME.

        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER.
            IBM3090
       *    WITH DEBUGGING MODE
            .

        DATA DIVISION.
        WORKING-STORAGE SECTION.

        LINKAGE SECTION.
       * ZONE DE COMMMUNICATION
        01  ZCOM-A03G.
            05 ZCOM-CODRET        PIC 9(1).

        PROCEDURE DIVISION USING ZCOM-A03G.
            MOVE 1 TO ZCOM-CODRET
            GOBACK
            .
 MEMBER NAME  A03FSELJ
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03FSELJ.
        AUTHOR. MAXIME.
        DATE-WRITTEN. 27/12/2023.
        DATE-COMPILED. 28/12/2023.
       ******************************************************************
       * SOUS-PROGRAMME
       *                      == A03FSELJ ==
       * CE PROGRAMME VERIFIE SI UN JEU EST DISPONIBLE                  *
       * DANS LA BDD DE JEUX                                            *
       ******************************************************************

       *----------------------------------------------------------------*
       *  E N V I R O N M E N T      D I V I S I O N                    *
       *----------------------------------------------------------------*
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER.
            IBM3090
            WITH DEBUGGING MODE
            .
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.


       *----------------------------------------------------------------*
       *                   D A T A   D I V I S I O N                    *
       *----------------------------------------------------------------*
        DATA DIVISION.
        WORKING-STORAGE SECTION.
       * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
       * PARTIE OBLIGATOIRE POUR UTILISER SQL
            EXEC SQL  INCLUDE SQLCA     END-EXEC.
        77  SQLCODE-ED                  PIC +(9)9.

       * DEFINITION DES TABLES DE LA BDD JEUX
            EXEC SQL  INCLUDE JEU       END-EXEC.
            EXEC SQL  INCLUDE JOUEUR    END-EXEC.
       * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
       * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
       * VARIABLES DE TRAVAIL
       * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
        77  JEUI-INDICATEUR             PIC 9.
            88 JEUI-TROUVE              VALUE 0.
            88 JEUI-NON-TROUVE          VALUE 1.
            88 JEUI-INACTIF             VALUE 2.
            88 JEUI-TERMINE             VALUE 3.
            88 JEUI-MULTI               VALUE 4.
            88 JEUI-ENCOURS             VALUE 5.
        77  SAI-INDICATEUR              PIC 9.
            88 SAISIE-OK                VALUE 0.
            88 SAISIE-KO                VALUE 1.
       *    NOM DU CREATEUR
        77  CRE-NJOUE                   PIC X(20).
       *    NOM DU GAGNANT
        77  GAG-NJOUE                   PIC X(20).
       * ZONE DE COMMMUNICATION
       *    EXEC SQL  INCLUDE ZCOMSELJ  END-EXEC.

        LINKAGE SECTION.
       *    COMMAREA DE DISCUSSION AVEC CICS
       *77  DFHCOMMAREA                 PIC X(78).
       * ZONE DE COMMMUNICATION
            EXEC SQL  INCLUDE ZCOMSELJ  END-EXEC.

       *----------------------------------------------------------------*
       *         P R O C E D U R E   D I V I S I O N                    *
       *----------------------------------------------------------------*
        PROCEDURE DIVISION USING ZCOM-SELJEU.
       * RECUPERE COMMAREA CICS
       *    MOVE DFHCOMMAREA TO ZCOM-SELJEU
       * ----------------------------------------------*
       D    DISPLAY 'D- CALL A03FSELJ'
       D    DISPLAY 'D- ZCOM-SELJEU'
       D    DISPLAY ZCOM-SELJEU
       * VERIFICATION DE LA SAISIE
            PERFORM VERIF-SAISIE

            IF SAISIE-OK
                PERFORM SELECTION-JEU
            ELSE
                SET RET-NONTROUVE TO TRUE
            END-IF

       D    DISPLAY 'D- END  A03FSELJ'
       D    DISPLAY 'D- ZCOM-SELJEU'
       D    DISPLAY ZCOM-SELJEU

       * ENVOI DE COMMAREA CICS
       *    MOVE ZCOM-SELJEU TO DFHCOMMAREA
       * ----------------------------------------------*

            GOBACK
       *    EXEC CICS  RETURN   END-EXEC
            .
        SELECTION-JEU.
       *------------*
       *    INITIALISATION DE LA BDD
       *    PERFORM INIT-BDD
       *    ON VERIFIE QUE LE JEU EST DISPONIBLE
            PERFORM VERIF-DISPONIBILITE
            EVALUATE TRUE
       *        CAS : JEU INEXISTANT OU INACTIVE PAR SON CREATEUR
                WHEN JEUI-NON-TROUVE
                WHEN JEUI-INACTIF
       D            DISPLAY 'D- NON TROUVE OU INACTIF'
                    SET RET-NONTROUVE TO TRUE
                    CONTINUE
       *        CAS : JEU TERMINE DEJA TERMINE
                WHEN JEUI-TERMINE
       D            DISPLAY 'D- JEU TERMINE'
                    SET RET-TERMINE   TO TRUE
                    CONTINUE
       *        CAS : JEU EXISTE ET ACTIVE
                WHEN JEUI-TROUVE
       D            DISPLAY 'D- JEU TROUVE'
                    SET RET-TROUVE    TO TRUE
                    PERFORM VERIF-MULTI
                    IF JEUI-MULTI
       D                DISPLAY 'D- JEU MULTI'
                        PERFORM VERIF-PARTIEENCOURS
                        IF JEUI-ENCOURS
                            SET RET-ENCOURS TO TRUE
                        END-IF
                    END-IF
                    CONTINUE
       *        EN CAS D'ERREUR ON RETOURNE QUAND MEME NON TROUVE
                WHEN OTHER
                    SET RET-NONTROUVE TO TRUE
            END-EVALUATE

            IF NOT RET-NONTROUVE
       *    SI LE JEU EST TROUVE ALORS ON REMPLI LES INFOS DANS LA ZCOM
                PERFORM RETURN-INFOJEU
       *    PUIS ON VA CHERCHER LES INFOS SUR LE CREATEUR ET LE GAGNANT
                PERFORM GET-INFO-JOUEUR
       *    ENFIN ON LES METS DANS LA ZCOM
                PERFORM RETURN-INFOJOUEUR
            END-IF
            .
        INIT-BDD.
       *------------*
            EXEC SQL
                SET SCHEMA FORA03
            END-EXEC
            EVALUATE SQLCODE
                WHEN 0
                    CONTINUE
                WHEN OTHER
                    PERFORM FIN-ERREUR
            END-EVALUATE
            .
        VERIF-SAISIE.
       *------------*
       D    DISPLAY "D- VERIF-SAISIE"
            SET SAISIE-OK TO TRUE
            IF ZCOM-CODEJEU = SPACE
                SET SAISIE-KO TO TRUE
            END-IF
            .
        VERIF-DISPONIBILITE.
       *------------*
       ******************************************************************
       * VERIFICATION SI LE JEU EXISTE                                  *
       *                        EST ACTIF                               *
       *                        N'EST PAS TERMINE                       *
       ******************************************************************
       D    DISPLAY "D- VERIF-DISPONIBILITE"
            EXEC SQL
                SELECT CODEJ,
                       UCREA,
                       NBREM,
                       NPOIN,
                       VALUE(UGAGN,' '),
                       VALUE(NOREP, 0),
                       STATU,
                       VALUE(MODEJ, ' ')
                INTO   :JEU-JEU
                FROM   JEU
                WHERE  CODEJ = :ZCOM-CODEJEU
            END-EXEC
       D    DISPLAY 'D- ZCOM-CODEJEU=' ZCOM-CODEJEU
       D    PERFORM DEBUG-SQLCODE
            EVALUATE SQLCODE
                WHEN +100
                    SET JEUI-NON-TROUVE TO TRUE
                    CONTINUE
                WHEN 0
                    SET JEUI-TROUVE TO TRUE
                    CONTINUE
                WHEN OTHER
                    PERFORM FIN-ERREUR
            END-EVALUATE
            .
        VERIF-MULTI.
       *------------*
       ******************************************************************
       * LE JEU EST MULTI OU SOLO DANS SES ATTRIBUTS                    *
       ******************************************************************
       D    DISPLAY 'D- VERIF-MULTI'
            IF JEU-MODEJ = 'C'
       D        DISPLAY 'D- JEU MULTI'
                SET JEUI-MULTI TO TRUE
            END-IF
            .
        VERIF-PARTIEENCOURS.
       *------------*
       ******************************************************************
       * SI LE JEU EST SOLO IL NE FAUT PAS QU'UNE PARTIE SOIT EN COURS  *
       * A MOINS QUE LE JOUEUR QUI VEUT JOUER SOIT LE MEME QUE CELUI    *
       * DE LA PARTIE                                                   *
       ******************************************************************
       D    DISPLAY 'D- VERIF-PARTIEENCOURS'
            IF JEU-NOREP > 0
                SET JEUI-ENCOURS TO TRUE
            END-IF
            .
        DEBUG-SQLCODE.
            DISPLAY 'D- DEBUG-SQLCODE'
            MOVE SQLCODE TO SQLCODE-ED
            DISPLAY 'D- SQLCODE=' SQLCODE-ED
            .
        GET-INFO-JOUEUR.
       *---------*
       ******************************************************************
       * RECUPERE LE NOM DU CREATEUR ET DU GAGNANT                      *
       ******************************************************************
       D    DISPLAY 'D- GET-INFO-JOUEUR'
            EXEC SQL
                SELECT C.NJOUE,
                       VALUE(G.NJOUE, ' ')
                INTO   :CRE-NJOUE,
                       :GAG-NJOUE
                FROM   JOUEUR AS C
                       LEFT OUTER JOIN JOUEUR AS G
                                  ON G.UJOUE = :JEU-UGAGN
                WHERE  C.UJOUE = :JEU-UCREA
            END-EXEC
       D    PERFORM DEBUG-SQLCODE
            EVALUATE SQLCODE
                WHEN 0
                    CONTINUE
                WHEN OTHER
                    PERFORM FIN-ERREUR
            END-EVALUATE
            .
        RETURN-INFOJOUEUR.
       *---------*
            MOVE CRE-NJOUE TO ZCOM-CREAUSERNAME
            MOVE GAG-NJOUE TO ZCOM-GAGNUSERNAME
            .
        RETURN-INFOJEU.
       *---------*
       D    DISPLAY 'D- RETURN-INFOJEU'
            MOVE JEU-CODEJ TO ZCOM-CODEJEU
            MOVE JEU-UCREA TO ZCOM-CREAUSERID
            MOVE JEU-NBREM TO ZCOM-NBREPMAX
            MOVE JEU-NPOIN TO ZCOM-NBPOINTS
            MOVE JEU-UGAGN TO ZCOM-GAGNUSERID
            MOVE JEU-NOREP TO ZCOM-NOREP
            MOVE JEU-STATU TO ZCOM-STATUT
            MOVE JEU-MODEJ TO ZCOM-MODEJEU
            .
        FIN-ERREUR.
       D    DISPLAY 'D- FIN-ERREUR'
            MOVE SQLCODE TO SQLCODE-ED
            DISPLAY '+---------------------------------------+'
            DISPLAY '+ ERROR IN A03FSELJ: SQLCODE=' SQLCODE-ED '+'
            DISPLAY '+---------------------------------------+'
            SET RET-NONTROUVE TO TRUE
            GOBACK
       *    EXEC CICS  RETURN   END-EXEC
            .
 MEMBER NAME  A03GMAP
 A03GMAP DFHMSD TYPE=&SYSPARM,MODE=INOUT,LANG=COBOL,EXTATT=YES,         X
                CTRL=(FREEKB,FRSET),STORAGE=AUTO,TIOAPFX=YES
 A03GMAP DFHMDI COLUMN=1,LINE=1,SIZE=(24,80)
         DFHMDF POS=(1,1),ATTRB=ASKIP,LENGTH=04,INITIAL='A03G'
         DFHMDF POS=(1,26),ATTRB=ASKIP,LENGTH=26,                       X
                INITIAL='APPEL DU SOUS-PROGRAMME   '
         DFHMDF POS=(1,73),ATTRB=ASKIP,LENGTH=07,INITIAL='A03GMAP'

         DFHMDF POS=(6,8),ATTRB=ASKIP,LENGTH=30,                        X
                INITIAL='APPELER LE SOUS-PROGRAMME    :'

 ANSWER  DFHMDF POS=(6,39),ATTRB=(UNPROT,IC),LENGTH=1
         DFHMDF POS=(6,41),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(6,43),ATTRB=ASKIP,LENGTH=5,INITIAL='Y/N'


         DFHMDF POS=(8,8),ATTRB=ASKIP,LENGTH=72,INITIAL='+--------------X
                ------------------------------------------------+'
         DFHMDF POS=(9,8),ATTRB=ASKIP,LENGTH=1,INITIAL='+'
         DFHMDF POS=(9,71),ATTRB=ASKIP,LENGTH=1,INITIAL='+'
         DFHMDF POS=(10,8),ATTRB=ASKIP,LENGTH=1,INITIAL='+'
         DFHMDF POS=(10,71),ATTRB=ASKIP,LENGTH=1,INITIAL='+'
         DFHMDF POS=(11,8),ATTRB=ASKIP,LENGTH=1,INITIAL='+'

 LINE1   DFHMDF POS=(11,10),ATTRB=ASKIP,LENGTH=60

         DFHMDF POS=(11,71),ATTRB=ASKIP,LENGTH=1,INITIAL='+'
         DFHMDF POS=(12,8),ATTRB=ASKIP,LENGTH=1,INITIAL='+'

 LINE2   DFHMDF POS=(12,10),ATTRB=ASKIP,LENGTH=60

         DFHMDF POS=(12,71),ATTRB=ASKIP,LENGTH=1,INITIAL='+'
         DFHMDF POS=(13,8),ATTRB=ASKIP,LENGTH=1,INITIAL='+'

 LINE3   DFHMDF POS=(13,10),ATTRB=ASKIP,LENGTH=60

         DFHMDF POS=(13,71),ATTRB=ASKIP,LENGTH=1,INITIAL='+'
         DFHMDF POS=(14,8),ATTRB=ASKIP,LENGTH=1,INITIAL='+'

 LINE4   DFHMDF POS=(14,10),ATTRB=ASKIP,LENGTH=60

         DFHMDF POS=(14,71),ATTRB=ASKIP,LENGTH=1,INITIAL='+'
         DFHMDF POS=(15,8),ATTRB=ASKIP,LENGTH=1,INITIAL='+'
         DFHMDF POS=(15,71),ATTRB=ASKIP,LENGTH=1,INITIAL='+'
         DFHMDF POS=(16,8),ATTRB=ASKIP,LENGTH=1,INITIAL='+'
         DFHMDF POS=(16,71),ATTRB=ASKIP,LENGTH=1,INITIAL='+'
         DFHMDF POS=(17,8),ATTRB=ASKIP,LENGTH=1,INITIAL='+'
         DFHMDF POS=(17,71),ATTRB=ASKIP,LENGTH=1,INITIAL='+'

         DFHMDF POS=(18,8),ATTRB=ASKIP,LENGTH=72,INITIAL='+-------------X
                -------------------------------------------------+'

         DFHMDF POS=(23,1),ATTRB=ASKIP,LENGTH=11,INITIAL='CLEAR - FIN'
 MSG     DFHMDF POS=(24,1),ATTRB=(ASKIP,BRT),LENGTH=79
         DFHMSD TYPE=FINAL
         END
 MEMBER NAME  A03GPGMT
       *======================================================*
       *   MENU DE GESTION DES PRODUITS                       *
       *======================================================*

       *======================================================*
       *   I D E N T I F I C A T I O N     D I V I S I O N    *
       *======================================================*
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03GPGMT.

       *======================================================*
       *   E N V I R O N M E N T       D I V I S I O N        *
       *======================================================*
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER. IBM-390.
        OBJECT-COMPUTER. IBM-390.

       *======================================================*
       *           D A T A         D I V I S I O N            *
       *======================================================*
        DATA DIVISION.
        WORKING-STORAGE SECTION.

       *------------------------------------------------------*
       *   VARIABLE DE TRAVAIL                                *
       *------------------------------------------------------*
        01  ZCOM-A03G.
            05 ZCOM-CODRET         PIC 9(1).
        77  WS-LABEL               PIC X(15).
        01  WSCOMMAREA.
            05 WSCOM-SELJEU        PIC X(78).
        COPY ZCOMSELJ.

       *------------------------------------------------------*
       *   DESCRIPTION DETAILLEE DE LA ZONE DE COMMUNICATION  *
       *------------------------------------------------------*
        01  WS-COMMAREA.
            05 PROG-PRECEDENT      PIC X(8).
            05 PROG-COURANT        PIC X(8).
            05 PROG-SUIVANT        PIC X(8).
            05                     PIC X(26).

        01 C-R                     PIC S9(8) COMP.

        01 MON-PROG                PIC X(8) VALUE 'A03GPGMT'.
        01 MA-MAP                  PIC X(8) VALUE 'A03GMAP '.
        01 MA-TRX                  PIC X(4) VALUE 'A03G'.
        01 CALLARG.
           05 HEIBLK              PIC X(50).
           05 COMARE              PIC X(50).
           05 SELJEU              PIC X(80).
       *------------------------------------------------------*
       *   DESCRIPTION   DE   LA   MAP                        *
       *------------------------------------------------------*
        COPY A03GMAP.

       *------------------------------------------------------*
       *   ZONE DE MESSAGE TAMPON POUR LE SEND FROM           *
       *------------------------------------------------------*
        01  MESSAGE-TXT            PIC X(79).

       *------------------------------------------------------*
       *   DESCRIPTION   DES  TOUCHES   FONCTIONS             *
       *------------------------------------------------------*
        COPY DFHAID.

       *------------------------------------------------------*
       *   DESCRIPTION   DES  ATTRIBUTS                       *
       *------------------------------------------------------*
        COPY DFHBMSCA.


       *======================================================*
       *          L I N K A G E     S E C T I O N             *
       *======================================================*
        LINKAGE SECTION.
        01  DFHCOMMAREA.
            05 LK-COMMAREA            PIC X(50).

       *======================================================*
       *     P R O C E D U R E     D I V I S I O N            *
       *======================================================*

        PROCEDURE DIVISION.
        00000-INIT-PROGRAMME.
       *---------------------*
             PERFORM  10000-DEBUT-PROGRAMME
             PERFORM  20000-TRAIT-PROGRAMME
             GOBACK
             .

        10000-DEBUT-PROGRAMME.
       *---------------------*
       *   TEST DE PREMIERE ENTREE DANS LE PROGRAMME
       *   SI NON PROGRAMME  MENU --->  ARRET  (ACCES INTERDIT)
            IF EIBCALEN = 0
               INITIALIZE      WS-COMMAREA
            ELSE
               MOVE LK-COMMAREA    TO  WS-COMMAREA
            END-IF

            MOVE  PROG-COURANT     TO  PROG-PRECEDENT
            MOVE  MON-PROG         TO  PROG-COURANT
            .

        20000-TRAIT-PROGRAMME.
       *---------------------*
            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               PERFORM  21000-TRAIT-CHARGEMENT
               PERFORM  22000-TRAIT-ENVOI
            ELSE
               PERFORM  23000-TRAIT-RECEPTION
            END-IF
            .

        21000-TRAIT-CHARGEMENT.
       *----------------------*
       *  CHARGEMENT DE LA MAP AVANT AFFICHAGE
            MOVE LOW-VALUE TO A03GMAPO

       *  SI TRAITEMENT PARTICULIER AVANT AFFICHAGE
       *    PERFORM  21100-TRAIT-SPECIFIQUE
            .

       *21100-TRAIT-SPECIFIQUE.
       *----------------------*
       *    ..............................
       *    ..............................
       *    ..............................
       *    ..............................
       *    .

        22000-TRAIT-ENVOI.
       *-----------------*
            EXEC CICS SEND MAP    ('A03GMAP')
                           ERASE
            END-EXEC

            MOVE PROG-COURANT TO PROG-SUIVANT

            EXEC CICS RETURN TRANSID  (MA-TRX)
                             COMMAREA (WS-COMMAREA)
                             LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23000-TRAIT-RECEPTION.
       *---------------------*
            EVALUATE EIBAID
               WHEN DFHENTER
                    PERFORM  23100-TRAIT-ENTER
               WHEN DFHCLEAR
                    PERFORM  23200-TRAIT-FIN
               WHEN OTHER
                    PERFORM  90000-ERR-TOUCHE
            END-EVALUATE
            .

        23110-PROG-SUIVANT.
       *------------------*
       *    IF  ......................
       *       MOVE '?????'   TO  PROG-SUIVANT
       *    END-IF

            EXEC CICS XCTL  PROGRAM  (PROG-SUIVANT)
                            COMMAREA (WS-COMMAREA)
                            LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23100-TRAIT-ENTER.
       *------------------*
       *    ..........................
            EXEC CICS RECEIVE MAP  ('A03GMAP')
                              RESP (C-R)
            END-EXEC

            EVALUATE C-R
               WHEN DFHRESP(NORMAL)
                    CONTINUE
       *       WHEN DFHRESP(MAPFAIL)
       *            .............
               WHEN OTHER
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE

       *    ............................
       *    ...  ANALYSE DES CHAMPS  ...
       *    ............................
            EVALUATE ANSWERI
                WHEN 'Y'
                    PERFORM TRAIT-ANSWERYES
                    PERFORM 22000-TRAIT-ENVOI
                WHEN 'N'
                    PERFORM TRAIT-ANSWERNO
                    PERFORM 22000-TRAIT-ENVOI
                WHEN OTHER
                    PERFORM TRAIT-ANSWERUNKNOWN
                    PERFORM 22000-TRAIT-ENVOI
            END-EVALUATE
            .

        TRAIT-ANSWERYES.
       *---------------*
       *    PERFORM CALL-A03GSUB
       *    PERFORM CALL-A03FSELJ
       *    PERFORM LINK-A03FSELJ
            PERFORM LINK-A03GSELJ
            .

        CALL-A03GSUB.
       *---------------*
            MOVE 'CALLING A03GSUB...' TO LINE1O
            EXEC CICS SEND MAP    ('A03GMAP')
                           ERASE
            END-EXEC

            EXEC CICS SEND MAP    ('A03GMAP')
                           ERASE
            END-EXEC

            CALL 'A03GSUB' USING ZCOM-A03G
            STRING 'ANSWER IS : ' DELIMITED BY SIZE
                   ZCOM-CODRET OF ZCOM-A03G DELIMITED  BY SIZE
                   INTO LINE3O

            STRING 'ANSWER IS : ' DELIMITED BY SIZE
                   WS-LABEL       DELIMITED BY SIZE
                   INTO LINE3O

            EXEC CICS SEND MAP    ('A03GMAP')
                           ERASE
            END-EXEC
            .

        CALL-A03FSELJ.
       *---------------*
            MOVE 'CALLING A03FSELJ..' TO LINE1O
            MOVE 'INCOMING ANSWER...' TO LINE2O
            INITIALIZE ZCOM-SELJEU
            MOVE 'BTN01'  TO ZCOM-CODEJEU
            MOVE 'FORA03' TO ZCOM-USERID
            MOVE ZCOM-SELJEU TO LINE3O
            CALL 'A03FSELJ' USING ZCOM-SELJEU
            MOVE ZCOM-SELJEU TO LINE4O
            .
        LINK-A03FSELJ.
       *---------------*
            MOVE 'LINKING A03FSELJ..' TO LINE1O
            MOVE 'INCOMING ANSWER...' TO LINE2O
            INITIALIZE ZCOM-SELJEU
            MOVE 'BTN01'  TO ZCOM-CODEJEU
            MOVE 'FORA03' TO ZCOM-USERID
            MOVE ZCOM-SELJEU TO LINE3O
            EXEC CICS
                LINK PROGRAM  ('A03FSELJ')
                     COMMAREA (ZCOM-SELJEU)
                     LENGTH   (LENGTH OF ZCOM-SELJEU)
            END-EXEC
            MOVE ZCOM-SELJEU TO LINE4O
            .
        LINK-A03GSELJ.
       *---------------*
            MOVE 'LINKING A03GSELJ..' TO LINE1O
            MOVE 'INCOMING ANSWER...' TO LINE2O
            INITIALIZE ZCOM-SELJEU
            MOVE 'BTN01'  TO ZCOM-CODEJEU
            MOVE 'FORA03' TO ZCOM-USERID
            MOVE ZCOM-SELJEU TO LINE3O

            MOVE ZCOM-SELJEU TO WSCOM-SELJEU
            EXEC CICS
                LINK PROGRAM  ('A03GSELJ')
                     COMMAREA (WSCOMMAREA)
                     LENGTH   (LENGTH OF WSCOMMAREA)
            END-EXEC
            MOVE WSCOM-SELJEU TO ZCOM-SELJEU
            MOVE ZCOM-SELJEU TO LINE4O
            .
        GETLABEL.
       *---------------*
            EVALUATE TRUE
                WHEN RET-TROUVE
                     MOVE 'RET-TROUVE'    TO WS-LABEL
                     CONTINUE
                WHEN RET-NONTROUVE
                     MOVE 'RET-NONTROUVE' TO WS-LABEL
                     CONTINUE
                WHEN RET-ENCOURS
                     MOVE 'RET-ENCOURS'   TO WS-LABEL
                     CONTINUE
                WHEN RET-TERMINE
                     MOVE 'RET-TERMINE'   TO WS-LABEL
                     CONTINUE
            END-EVALUATE
            .

        TRAIT-ANSWERNO.
       *---------------*
            MOVE 'NO' TO LINE1O
            .

        TRAIT-ANSWERUNKNOWN.
       *---------------*
            MOVE 'UNKNOWN' TO LINE1O
            .

        23200-TRAIT-FIN.
       *---------------*
            MOVE 'FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        90000-ERR-TOUCHE.
       *----------------*
            MOVE 'TOUCHE DE FONCTION INVALIDE' TO MSGO
            PERFORM  22000-TRAIT-ENVOI
            .

        91000-ERREUR-CICS.
       *-------------------*
            MOVE 'ERREUR CICS !!!  FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        99000-FIN-CICS.
       *--------------*
            EXEC CICS SEND FROM   (MESSAGE-TXT)
                           LENGTH (LENGTH OF MESSAGE-TXT)
                           ERASE
            END-EXEC

            EXEC CICS RETURN END-EXEC
            .
 MEMBER NAME  A03GSELJ
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03GSELJ.

        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01  WSCOMMAREA.
            05 WSCOM-SELJEU      PIC X(78).
        LINKAGE SECTION.
        01  DFHCOMMAREA.
            05 LKZONE            PIC X(78).

        PROCEDURE DIVISION.
            IF EIBCALEN NOT = ZERO
                MOVE DFHCOMMAREA TO WSCOMMAREA
                CALL 'A03FSELJ'  USING WSCOM-SELJEU
                MOVE WSCOMMAREA  TO DFHCOMMAREA
            END-IF
            EXEC CICS
                RETURN
                       TRANSID  ('A03G')
                       COMMAREA (WSCOMMAREA)
                       LENGTH   (LENGTH OF WSCOMMAREA)
            END-EXEC
            .
 MEMBER NAME  TESTPRIN
        IDENTIFICATION DIVISION.
        PROGRAM-ID. TESTPRIN.
        AUTHOR. MAXIME.
       * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        ENVIRONMENT DIVISION.
       * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        COPY ACCANOMA   REPLACING ==:ZCOM:== BY ==ZCOM==.
        77  I PIC 9(3).
       * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        PROCEDURE DIVISION.
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 15
                MOVE SPACE TO ZCOM-IN-KEY
                MOVE SPACE TO ZCOM-IN-USERNAME
                MOVE SPACE TO ZCOM-IN-DATE
                MOVE I     TO ZCOM-IN-MESSAGE
                CALL 'A03ACAN2' USING ZCOM-ACCANOMA
            END-PERFORM
            STOP RUN
            .
 MEMBER NAME  A03ACERR
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03ACERR.
        AUTHOR.     MAXIME.
        DATE-WRITTEN. 03/01/2024.
       ******************************************************************
       * SOUS PROGRAMME DE RECUPERATION DES LIBELLES D'ERREUR           *
       ******************************************************************

        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER.
            IBM3090
       *    WITH DEBUGGING MODE
            .
        DATA DIVISION.
       *----------------------------------------------------------------*
        WORKING-STORAGE SECTION.
       *----------------------------------------------------------------*
       * RECUPERATION DES COPY COMMUNES
       *----------------------------------------------------------------*
       * DEFINITION DE LA ZONE DE COMM DE L'ACCESSEUR ERREUR
        COPY ACCERROR  REPLACING ==:ZCOM:== BY  ==WS== .
       * CHARGEMENT DES DONNEES
        COPY WMESSAGE.
       *----------------------------------------------------------------*
       * VARIABLES DE TRAVAIL
       *----------------------------------------------------------------*
        01  REDEFINES TABLE-MESSAGE.
            05 ERR-LIBELLE OCCURS 17 TIMES        PIC X(60).
        77  CODEERROR-MIN                         PIC 9(2)  VALUE 1.
        77  CODEERROR-MAX                         PIC 9(2)  VALUE 17.
        77                                        PIC X.
            88 INVALID-CODERROR                             VALUE 'E'.
       *----------------------------------------------------------------*
        LINKAGE SECTION.
        01  LNK-ACERROR                           PIC X(64).

        PROCEDURE DIVISION USING LNK-ACERROR.
       ******************************************************************
       * SOUS-PROGRAMME                                                 *
       ******************************************************************
            PERFORM TRAIT-GETINPUT

            PERFORM TRAIT-CHECKINPUT
            IF NOT INVALID-CODERROR
                SET CODERET-FOUND TO TRUE
                MOVE ERR-LIBELLE (WS-IN-CODEERROR) TO WS-OUT-LIBELLE
            ELSE
                SET CODERET-UNKNOWN TO TRUE
            END-IF

            PERFORM TRAIT-SETOUTPUT

            GOBACK
            .
        TRAIT-GETINPUT.
       ******************************************************************
       * RECUPERE LES INPUT DU PROGRAMME APPELANT                       *
       ******************************************************************
            INITIALIZE WS-ACCERROR
            MOVE LNK-ACERROR TO WS-ACCERROR
            .
        TRAIT-SETOUTPUT.
       ******************************************************************
       * RENVOIT LES OUTPUT AU PROGRAMME APPELANT                       *
       ******************************************************************
            MOVE WS-ACCERROR TO LNK-ACERROR
            .
        TRAIT-CHECKINPUT.
       ******************************************************************
       * CONTROLE DES INPUT                                             *
       ******************************************************************
            IF NOT
            (
                    WS-IN-CODEERROR >= CODEERROR-MIN
                AND WS-IN-CODEERROR <= CODEERROR-MAX
            )
                SET INVALID-CODERROR TO TRUE
            END-IF
            .
 MEMBER NAME  A03ACANO
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03ACANO.
        AUTHOR.     MAXIME.
        DATE-WRITTEN. 05/01/2024.
       ******************************************************************
       * SOUS PROGRAMME D'ECRITURE DES ANOMALIES                        *
       ******************************************************************

        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER.
            IBM3090
       *    WITH DEBUGGING MODE
            .
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT FANOM     ORGANIZATION    IS SEQUENTIAL
                             ACCESS MODE     IS SEQUENTIAL
                             FILE STATUS     IS FANOM-FS
                             ASSIGN          TO FANOMOUT.

        DATA DIVISION.
       *----------------------------------------------------------------*
        FILE SECTION.
       *----------------------------------------------------------------*
        FD FANOM.
        01  FANOM-BUFFER                          PIC X(132).
       *----------------------------------------------------------------*
        WORKING-STORAGE SECTION.
       *----------------------------------------------------------------*
       * RECUPERATION DES COPY COMMUNES
       *----------------------------------------------------------------*
       * DEFINITION DE LA ZONE DE COMM DE L'ACCESSEUR ERREUR
        COPY ACCANOMA  REPLACING ==:ZCOM:== BY  ==WS== .
       * DEFINITION DU FICHIER DES ANOMALIES
        COPY WANOMALI.
       *----------------------------------------------------------------*
       * VARIABLES DE TRAVAIL
       *----------------------------------------------------------------*
        77  FANOM-FS                              PIC X(2).
        77                                        PIC 9.
            88 FANOM-ISOPEN                       VALUE 1.
            88 FANOM-ISCLOSED                     VALUE 2.
        77  ERR-MESSAGE                           PIC X(46).
       *----------------------------------------------------------------*
        LINKAGE SECTION.
        01  LNK-ACANOMA                           PIC X(84).

        PROCEDURE DIVISION USING LNK-ACANOMA.
       ******************************************************************
       * SOUS-PROGRAMME                                                 *
       ******************************************************************
       D    DISPLAY '***BEG-SUBPROGRAM***'
       D    DISPLAY 'D- CALLING A03ACANO'
            PERFORM TRAIT-GETINPUT

            PERFORM FANOM-OPEN

            PERFORM FANOM-WRITEMESSAGE

            PERFORM TRAIT-SETOUTPUT

       D    DISPLAY '***END-SUBPROGRAM***'
            GOBACK
            .
        FANOM-OPEN.
       ******************************************************************
       * OUVRE LE FICHIER DES ANOMALIES SI BESOIN                       *
       ******************************************************************
            OPEN OUTPUT FANOM
            EVALUATE FANOM-FS
                WHEN '12'
                WHEN '41'
       *            FICHIER DEJA OUVERT
                    CONTINUE
                WHEN '00'
       *            PREMIER FOIS QU'ON OUVRE LE FICHIER
       *            PERFORM FANOM-WRITEHEADER
                    CONTINUE
                WHEN OTHER
                    STRING 'IN OPEN FANOM-FS ' DELIMITED BY SIZE
                           FANOM-FS    DELIMITED BY SIZE
                           INTO ERR-MESSAGE
                    PERFORM FIN-FATALERROR
            END-EVALUATE
            .
        FANOM-WRITEHEADER.
       ******************************************************************
       * ECRIT LE HEADER DANS LE FICHIER DES ANOMALIES                  *
       ******************************************************************
       D    DISPLAY 'D- FANOM-WRITEHEADER'
       *    ----- TITRE
            PERFORM FANOM-INITBUFFER
            WRITE FANOM-BUFFER FROM ANO-TITRE
                  BEFORE ADVANCING 1
            END-WRITE
            PERFORM FANOM-EVALUATEBUFFER

       *    ----- DATE
            PERFORM FANOM-INITBUFFER
            MOVE WS-IN-DATE TO ANO-INFODATE-DATE
            WRITE FANOM-BUFFER FROM ANO-INFODATE
                  BEFORE ADVANCING 0
            END-WRITE
            PERFORM FANOM-EVALUATEBUFFER

       *    ----- USER
            PERFORM FANOM-INITBUFFER
            MOVE WS-IN-USERNAME TO ANO-INFOGROUPE-GROUPNAME
            WRITE FANOM-BUFFER FROM ANO-INFOGROUPE
                  BEFORE ADVANCING 1
            END-WRITE
            PERFORM FANOM-EVALUATEBUFFER

       *    ----- SEPARATEUR
            PERFORM FANOM-INITBUFFER
            WRITE FANOM-BUFFER FROM ANO-SEPARATEUR
                  BEFORE ADVANCING 0
            END-WRITE
            PERFORM FANOM-EVALUATEBUFFER
            .
        FANOM-INITBUFFER.
       ******************************************************************
       * REINITIALISATION DU BUFFER POUR EVITER LES LOW-VALUE           *
       ******************************************************************
       *    INITIALIZE FANOM-BUFFER
       D    DISPLAY 'D- FANOM-INITBUFFER'
            MOVE SPACES TO FANOM-BUFFER
       D    DISPLAY 'D-       FANOM-BUFFER ' FANOM-BUFFER
            .
        FANOM-EVALUATEBUFFER.
       ******************************************************************
       * ECRIT LE MESSAGE DANS LE FICHIER DES ANOMALIES                 *
       ******************************************************************
            EVALUATE FANOM-FS
                WHEN '00'
                    CONTINUE
                WHEN OTHER
                    STRING 'IN WRITE FANOM-FS ' DELIMITED BY SIZE
                           FANOM-FS    DELIMITED BY SIZE
                           INTO ERR-MESSAGE
                    PERFORM FIN-FATALERROR
            END-EVALUATE
            .
        FANOM-WRITEMESSAGE.
       ******************************************************************
       * ECRIT LE MESSAGE DANS LE FICHIER DES ANOMALIES                 *
       ******************************************************************
       D    DISPLAY 'D- FANOM-WRITEMESSAGE'
            PERFORM FANOM-INITBUFFER
            MOVE WS-IN-MESSAGE TO ANO-MESSAGE-TEXT
            MOVE WS-IN-KEY     TO ANO-MESSAGE-KEY
       D    DISPLAY 'D- ANO-MESSAGE        ' ANO-MESSAGE
            WRITE FANOM-BUFFER FROM ANO-MESSAGE
                BEFORE ADVANCING 0
                AT END-OF-PAGE
       D            DISPLAY 'D- NEW PAGE'
                    PERFORM FANOM-WRITEHEADER
            END-WRITE
            PERFORM FANOM-EVALUATEBUFFER
            .
        TRAIT-GETINPUT.
       ******************************************************************
       * RECUPERE LES INPUT DU PROGRAMME APPELANT                       *
       ******************************************************************
       D    DISPLAY 'D- TRAIT-GETINPUT'
            INITIALIZE WS-ACCANOMA
            MOVE LNK-ACANOMA TO WS-ACCANOMA
       D    DISPLAY 'D- LNK-ACANOMA   ' LNK-ACANOMA
       D    DISPLAY 'D- WS-ACCANOMA   ' WS-ACCANOMA
            .
        TRAIT-SETOUTPUT.
       ******************************************************************
       * RENVOIT LES OUTPUT AU PROGRAMME APPELANT                       *
       ******************************************************************
       D    DISPLAY 'D- TRAIT-SETOUTPUT'
            MOVE WS-ACCANOMA TO LNK-ACANOMA
       D    DISPLAY 'D- LNK-ACANOMA   ' LNK-ACANOMA
       D    DISPLAY 'D- WS-ACCANOMA   ' WS-ACCANOMA
            .
        TRAIT-CHECKINPUT.
       ******************************************************************
       * CONTROLE DES INPUT                                             *
       ******************************************************************
       *    AUCUN CONTROLE DANS LE CAS DE CE SOUS-PROGRAMME
            CONTINUE
            .
        FIN-FATALERROR.
       ******************************************************************
       * ERREUR INNATENDU : ARRET BRUTAL DU PROGRAMME                   *
       ******************************************************************
            IF FANOM-ISOPEN
                CLOSE FANOM
            END-IF
            DISPLAY '+------------------------------------------------+'
            DISPLAY '+             F A T A L  E R R O R               +'
            DISPLAY '+ IN A03ACANO                                    +'
            DISPLAY '+ ' ERR-MESSAGE ' +'
            DISPLAY '+------------------------------------------------+'
            GOBACK
            .
 MEMBER NAME  A03ACAN2
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03ACAN2.
        AUTHOR.     MAXIME.
        DATE-WRITTEN. 06/01/2024.
       ******************************************************************
       * SOUS PROGRAMME D'ECRITURE DES ANOMALIES                        *
       * EN UTILISANT LE FORMAT IMPRESSION                              *
       ******************************************************************

        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER.
            IBM3090
       *    WITH DEBUGGING MODE
            .
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT FANOM
                             FILE STATUS     IS FANOM-FS
       *                     ASSIGN          TO FORMATFILE-FANOMOUT.
                             ASSIGN          TO FANOMOUT.

        DATA DIVISION.
       *----------------------------------------------------------------*
        FILE SECTION.
       *----------------------------------------------------------------*
       *FD FANOM LABEL RECORD STANDARD
        FD FANOM
            LINAGE IS 16
       *    LINES WITH FOOTING AT 1
       *    LINES AT TOP 1
            LINES AT BOTTOM 1
            RECORDING MODE IS F.
        01  FANOM-BUFFER                          PIC X(132).
       *----------------------------------------------------------------*
        WORKING-STORAGE SECTION.
       *----------------------------------------------------------------*
       * RECUPERATION DES COPY COMMUNES
       *----------------------------------------------------------------*
       * DEFINITION DE LA ZONE DE COMM DE L'ACCESSEUR ERREUR
        COPY ACCANOMA  REPLACING ==:ZCOM:== BY  ==WS== .
       *----------------------------------------------------------------*
       * VARIABLES DE TRAVAIL
       *----------------------------------------------------------------*
        77  FANOM-FS                              PIC X(2).
        77                                        PIC 9.
            88 FANOM-ISOPEN                       VALUE 1.
            88 FANOM-ISCLOSED                     VALUE 2.
        77  ERR-MESSAGE                           PIC X(46).
       *----------------------------------------------------------------*
       * FORMAT D'IMPRESSION
       *----------------------------------------------------------------*
       *01 ANOMALIE.
       *COPY DDS-LIGNE-MESSAGE-O OF
        COPY WANOMALI.
       *----------------------------------------------------------------*
        LINKAGE SECTION.
        01  LNK-ACANOMA                           PIC X(84).

        PROCEDURE DIVISION USING LNK-ACANOMA.
       ******************************************************************
       * SOUS-PROGRAMME                                                 *
       ******************************************************************
       D    DISPLAY '***BEG-SUBPROGRAM***'
       D    DISPLAY 'D- CALLING A03ACANO'
            PERFORM TRAIT-GETINPUT

            PERFORM FANOM-OPEN

            PERFORM FANOM-WRITEMESSAGE

            PERFORM TRAIT-SETOUTPUT

       *    CLOSE FANOM
       D    DISPLAY '***END-SUBPROGRAM***'
            GOBACK
            .
        FANOM-OPEN.
       ******************************************************************
       * OUVRE LE FICHIER DES ANOMALIES SI BESOIN                       *
       ******************************************************************
            OPEN OUTPUT FANOM
       *    OPEN EXTEND FANOM
            EVALUATE FANOM-FS
                WHEN '12'
                WHEN '41'
       *            FICHIER DEJA OUVERT
                    CONTINUE
                WHEN '00'
       *            PREMIER FOIS QU'ON OUVRE LE FICHIER
                    PERFORM FANOM-WRITEHEADER
                    CONTINUE
                WHEN OTHER
                    STRING 'IN OPEN FANOM-FS ' DELIMITED BY SIZE
                           FANOM-FS    DELIMITED BY SIZE
                           INTO ERR-MESSAGE
                    PERFORM FIN-FATALERROR
            END-EVALUATE
            .
        FANOM-WRITEHEADER.
       ******************************************************************
       * ECRIT LE HEADER DANS LE FICHIER DES ANOMALIES                  *
       ******************************************************************
       D    DISPLAY 'D- FANOM-WRITEHEADER'
       *    ----- TITRE
            PERFORM FANOM-INITBUFFER
            WRITE FANOM-BUFFER FROM ANO-TITRE
       *          BEFORE ADVANCING 1 LINES
       *          AFTER  PAGE
            END-WRITE
            PERFORM FANOM-EVALUATEBUFFER

       *    ----- DATE
            PERFORM FANOM-INITBUFFER
            MOVE WS-IN-DATE TO ANO-INFODATE-DATE
            WRITE FANOM-BUFFER FROM ANO-INFODATE
                  AFTER  ADVANCING 2 LINES
            END-WRITE
            PERFORM FANOM-EVALUATEBUFFER

       *    ----- USER
            PERFORM FANOM-INITBUFFER
            MOVE WS-IN-USERNAME TO ANO-INFOGROUPE-GROUPNAME
            WRITE FANOM-BUFFER FROM ANO-INFOGROUPE
                  AFTER  ADVANCING 1 LINES
            END-WRITE
            PERFORM FANOM-EVALUATEBUFFER

       *    ----- SEPARATEUR
            PERFORM FANOM-INITBUFFER
            WRITE FANOM-BUFFER FROM ANO-SEPARATEUR
                  AFTER  ADVANCING 2 LINES
            END-WRITE
            PERFORM FANOM-EVALUATEBUFFER
            .
        FANOM-INITBUFFER.
       ******************************************************************
       * REINITIALISATION DU BUFFER POUR EVITER LES LOW-VALUE           *
       ******************************************************************
       *    INITIALIZE FANOM-BUFFER
       D    DISPLAY 'D- FANOM-INITBUFFER'
            MOVE SPACES TO FANOM-BUFFER
       D    DISPLAY 'D-       FANOM-BUFFER ' FANOM-BUFFER
            .
        FANOM-EVALUATEBUFFER.
       ******************************************************************
       * ECRIT LE MESSAGE DANS LE FICHIER DES ANOMALIES                 *
       ******************************************************************
            EVALUATE FANOM-FS
                WHEN '00'
                    CONTINUE
                WHEN OTHER
                    STRING 'IN WRITE FANOM-FS ' DELIMITED BY SIZE
                           FANOM-FS    DELIMITED BY SIZE
                           INTO ERR-MESSAGE
                    PERFORM FIN-FATALERROR
            END-EVALUATE
            .
        FANOM-WRITEMESSAGE.
       ******************************************************************
       * ECRIT LE MESSAGE DANS LE FICHIER DES ANOMALIES                 *
       ******************************************************************
       D    DISPLAY 'D- FANOM-WRITEMESSAGE'
            PERFORM FANOM-INITBUFFER
            MOVE WS-IN-MESSAGE TO ANO-MESSAGE-TEXT
            MOVE WS-IN-KEY     TO ANO-MESSAGE-KEY
       D    DISPLAY 'D- ANO-MESSAGE        ' ANO-MESSAGE
            WRITE FANOM-BUFFER FROM ANO-MESSAGE
                AFTER  ADVANCING 1 LINES
                AT END-OF-PAGE
       D            DISPLAY 'D- NEW PAGE'
                    PERFORM FANOM-WRITEHEADER
            END-WRITE
            PERFORM FANOM-EVALUATEBUFFER
            .
        TRAIT-GETINPUT.
       ******************************************************************
       * RECUPERE LES INPUT DU PROGRAMME APPELANT                       *
       ******************************************************************
       D    DISPLAY 'D- TRAIT-GETINPUT'
            INITIALIZE WS-ACCANOMA
            MOVE LNK-ACANOMA TO WS-ACCANOMA
       D    DISPLAY 'D- LNK-ACANOMA   ' LNK-ACANOMA
       D    DISPLAY 'D- WS-ACCANOMA   ' WS-ACCANOMA
            .
        TRAIT-SETOUTPUT.
       ******************************************************************
       * RENVOIT LES OUTPUT AU PROGRAMME APPELANT                       *
       ******************************************************************
       D    DISPLAY 'D- TRAIT-SETOUTPUT'
            MOVE WS-ACCANOMA TO LNK-ACANOMA
       D    DISPLAY 'D- LNK-ACANOMA   ' LNK-ACANOMA
       D    DISPLAY 'D- WS-ACCANOMA   ' WS-ACCANOMA
            .
        TRAIT-CHECKINPUT.
       ******************************************************************
       * CONTROLE DES INPUT                                             *
       ******************************************************************
       *    AUCUN CONTROLE DANS LE CAS DE CE SOUS-PROGRAMME
            CONTINUE
            .
        FIN-FATALERROR.
       ******************************************************************
       * ERREUR INNATENDU : ARRET BRUTAL DU PROGRAMME                   *
       ******************************************************************
            IF FANOM-ISOPEN
                CLOSE FANOM
            END-IF
            DISPLAY '+------------------------------------------------+'
            DISPLAY '+             F A T A L  E R R O R               +'
            DISPLAY '+ IN A03ACANO                                    +'
            DISPLAY '+ ' ERR-MESSAGE ' +'
            DISPLAY '+------------------------------------------------+'
            GOBACK
            .
 MEMBER NAME  A03MAJS
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03MAJS.
        AUTHOR.     MAXIME.
        DATE-WRITTEN. 02/01/2024.
       ******************************************************************
       * CE PROGRAMME MET A JOUR LES ASSURES EN FONCTION DU FICHIER     *
       * DES MOUVEMENTS ENREGISTRES DANS LA JOURNEE                     *
       ******************************************************************

        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER.
            IBM3090
            WITH DEBUGGING MODE
            .
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT FMVT      ORGANIZATION    IS SEQUENTIAL
                             ACCESS MODE     IS SEQUENTIAL
                             FILE STATUS     IS FMVT-FS
                             ASSIGN          TO AS-FMVTSIN.
       *                                        ¬¬¬
       *                                        METTRE AS- CAR VSAM SEQ

        DATA DIVISION.
       *----------------------------------------------------------------*
        FILE SECTION.
       *----------------------------------------------------------------*
       * FICHIER D'ENTREE AVEC LES MOUVEMENTS
        FD FMVT
            RECORD CONTAINS 80 CHARACTERS
            DATA RECORD IS FMVT-BUFFER.
       *    RECORDING MODE IS V.
       *    ¬
       *    NE PAS METTRE CAR C'EST UN VSAM
       * BUFFER DE LECTURE DU FICHIER MOUVEMENTS
        01 FMVT-BUFFER                            PIC X(80).
       *----------------------------------------------------------------*
        WORKING-STORAGE SECTION.
       *----------------------------------------------------------------*
       * RECUPERATION DES COPY COMMUNES
       *----------------------------------------------------------------*
       * DEFINITION DE LA ZONE DE COMM DE L'ACCESSEUR ASSURES
        COPY ACCASSUR  REPLACING ==:ZCOM:== BY  ==ZAS== .
       * DEFINITION DE LA ZONE DE COMM DE L'ACCESSEUR ERREUR
        COPY ACCERROR  REPLACING ==:ZCOM:== BY  ==ZER== .
       * DEFINITION DE LA ZONE DE COMM DE L'ACCESSEUR ANOMALIES
        COPY ACCANOMA  REPLACING ==:ZCOM:== BY  ==ZAN== .
       * STRUCTURES DES DONNEES ASSURES    : ASS-ASSURE
        COPY WASSURES  REPLACING ==:VAR:==  BY  ==ASS== .
       * STRUCTURES DES DONNEES MOUVEMENTS : WS-FMVTSE
        COPY WFMVTS    REPLACING ==:VAR:==  BY  ==WS== .
       *----------------------------------------------------------------*
       * SOUS-PROGRAMME DYNAMIQUE
       *----------------------------------------------------------------*
       * ACCESSEUR DES DONNEES SUR LES ERREURS
        77  PRGM-ACCESSEUR-ERROR                  PIC X(8)
                                                  VALUE 'A03ACERR'.
        77  PRGM-ACCESSEUR-ASSURE                 PIC X(8)
                                                  VALUE 'A03ACASS'.
        77  PRGM-ACCESSEUR-ANOMALIE               PIC X(8)
                                                  VALUE 'A03ACANO'.
       *----------------------------------------------------------------*
       * VARIABLES DE TRAVAIL
       *----------------------------------------------------------------*
       * VARIABLE GLOBALE
        77 USERNAME                               PIC X(8).
        77 CURRENT-DATE                           PIC X(10).
       * INDICATEUR D'OUVERTUR DU FICHIER
        77                                        PIC X.
            88 FMVT-ISOPEN                        VALUE 'O'.
            88 FMVT-ISCLOSE                       VALUE 'C'.
       * FILE STATUS DU FICHIER MOUVEMENTS
        01  FMVT-FS                               PIC X(2).
        77                                        PIC X.
            88 FMVT-FINFICHIER                    VALUE 'F'.
       * INDICATEUR DE VALIDITE DU CODE MOUVEMENT
        77                                        PIC X.
            88 INVALID-CODEMVT                    VALUE 'I'.
            88   VALID-CODEMVT                    VALUE 'V'.
       * INDICATEUR SUR LE CODE RETOUR ACCESSEUR ASSURE
        77                                        PIC X.
            88 VALID-ASS-CODERET                  VALUE 'V'.
            88 INVALID-ASS-CODERET                VALUE 'I'.
       * INDICATEUR SUR LE TYPE DE MOUVEMENT EN COURS DE TRAITEMENT
        77                                        PIC X.
            88 MVT-CREATION                       VALUE 'C'.
            88 MVT-SUPPRESSION                    VALUE 'S'.
            88 MVT-MODIFICATION                   VALUE 'M'.
       * GESTION DES DATES
        77  WS-CURRENT-DATE                       PIC X(21).
        01  WS-DATE.
            05 DATE-AAAA                          PIC 9(4).
            05 DATE-MM                            PIC 9(2).
            05 DATE-JJ                            PIC 9(2).
        01  WS-DATE-ED.
            05 DATE-ED-JJ                         PIC 99.
            05                                    PIC X    VALUE '/'.
            05 DATE-ED-MM                         PIC 99.
            05                                    PIC X    VALUE '/'.
            05 DATE-ED-AAAA                       PIC 9999.
       * COMPTEUR DU BILAN
        01  BILAN-CPT.
            05 NB-ASSURE                          PIC 9(3) VALUE 0.
            05 NB-MVT                             PIC 9(3) VALUE 0.
            05 NB-OK-CREATION                     PIC 9(3) VALUE 0.
            05 NB-OK-MODIFICATION                 PIC 9(3) VALUE 0.
            05 NB-OK-SUPPRESSION                  PIC 9(3) VALUE 0.
            05 NB-KO                              PIC 9(3) VALUE 0.
            05 NB-KO-CODEMVT                      PIC 9(3) VALUE 0.
            05 NB-KO-CREATION                     PIC 9(3) VALUE 0.
            05 NB-KO-MODIFICATION                 PIC 9(3) VALUE 0.
            05 NB-KO-SUPPRESSION                  PIC 9(3) VALUE 0.
       * REPRESENTATION SOUS FORME DE TABLEAU DES COMPTEURS
        01  REDEFINES BILAN-CPT.
            05 NB OCCURS 10 TIMES                 PIC 9(3).
       * INDICE POUR PARCOURIR LES COMPTEURS
        77  INDX-NB                               PIC 9(2).
        77  INDX-NB-MIN                           PIC 9(2) VALUE 1.
        77  INDX-NB-MAX                           PIC 9(2) VALUE 10.
       * ORDRE DES MESSAGES DANS LE BILAN
        01  BILAN-CPT-ORDRE                       PIC X(20)
                  VALUE '05060809100711121314'.
        01  REDEFINES BILAN-CPT-ORDRE.
            05 NB-MESSAGE OCCURS 10 TIMES         PIC X(2).
        01  BILAN-LIGNE-D.
       *    LIGNE INFO
            05 BILAN-LIGNE-INF.
               10                                 PIC X.
               10 INF-HEAD                        PIC X(7)
                  VALUE 'USER : '.
               10 INF-USERNAME                    PIC X(8).
               10                                 PIC X(34).
               10 INF-END                         PIC X(10)
                  VALUE 'DATE : LE '.
               10 INF-DATE                        PIC X(10).
               10                                 PIC X.
       *    LIGNE DE TITRE
            05 BILAN-LIGNE-TIT.
               10 TIT-HEAD                        PIC X     VALUE 'I'.
               10                                 PIC X(28).
               10 TIT-DATA                        PIC X(12)
                  VALUE 'STATISTIQUES'.
               10                                 PIC X(29).
               10 TIT-END                         PIC X     VALUE 'I'.
       *    LIGNE VIDE DANS LE BILAN
            05 BILAN-LIGNE-VID.
               10 VID-HEAD                        PIC X    VALUE 'I'.
               10 VID-DATA                        PIC X(69).
               10 VID-END                         PIC X    VALUE 'I'.
       *    LIGNE DE SEPARATION
            05 BILAN-LIGNE-SEP.
               10 SEP-HEAD                        PIC X    VALUE '+'.
               10 SEP-DATA                        PIC X(69)
                  VALUE ALL '-'.
               10 SEP-END                         PIC X    VALUE '+'.
       *    LIGNE AVEC DE LA DONNEE (MODELE)
            05 BILAN-LIGNE-MOD.
               10 MOD-HEAD                        PIC XX   VALUE 'I '.
               10 MOD-DATA.
                  15 MOD-LIBELLE                  PIC X(60).
                  15                              PIC X.
                  15 MOD-NB                       PIC X(6).
                  15 REDEFINES MOD-NB.
                      20 MOD-NB-ED                PIC Z(4)99.
               10 MOD-END                         PIC XX   VALUE ' I'.
       *    TABLEAU DES LIGNES DU BILAN
            05 BILAN-LIGNE-TABLE.
               10 BILAN-LIGNE OCCURS 20 TIMES     PIC X(71).
       * INDICE POUR PARCOURIR LES LIGNES DU BILAN
        77  INDX-LIGNE                            PIC 9(2).
        77  INDX-LIGNE-MIN                        PIC 9(2) VALUE 1.
        77  INDX-LIGNE-MAX                        PIC 9(2) VALUE 20.
       * INDICE
        77  I                                     PIC 9(04).
       *----------------------------------------------------------------*
        LINKAGE SECTION.
        01  LNK-PARAM.
            05 LNK-LENGTH                         PIC S9(4) COMP.
            05 LNK-DATA                           PIC X(256).
            05 REDEFINES LNK-DATA.
               10 LNK-PARAM-USERNAME                 PIC X(6).
               10                                    PIC X(1).
               10 LNK-PARAM-PRGMASSU                 PIC X(8).
               10                                    PIC X(1).
               10 LNK-PARAM-PRGMERRO                 PIC X(8).
               10                                    PIC X(1).
               10 LNK-PARAM-PRGMANOM                 PIC X(8).
               10                                    PIC X(223).

        PROCEDURE DIVISION USING LNK-PARAM.
       ******************************************************************
       * PROGRAMME PRINCIPAL                                            *
       ******************************************************************
       D    DISPLAY 'D- LNK-DATA  ' LNK-DATA
            IF LNK-PARAM-PRGMASSU NOT = SPACE
                 MOVE LNK-PARAM-PRGMASSU TO PRGM-ACCESSEUR-ASSURE
            END-IF
            IF LNK-PARAM-PRGMERRO NOT = SPACE
                 MOVE LNK-PARAM-PRGMERRO TO PRGM-ACCESSEUR-ERROR
            END-IF
            IF LNK-PARAM-PRGMANOM NOT = SPACE
                 MOVE LNK-PARAM-PRGMANOM TO PRGM-ACCESSEUR-ANOMALIE
            END-IF
       D    DISPLAY 'D- USERNAME = ' LNK-PARAM-USERNAME
       D    DISPLAY 'D- PRGMASSU = ' PRGM-ACCESSEUR-ASSURE
       D    DISPLAY 'D- PRGMERRO = ' PRGM-ACCESSEUR-ERROR
       D    DISPLAY 'D- PRGMANOM = ' PRGM-ACCESSEUR-ANOMALIE
       * OUVERTURE DU FICHIER DE MOUVEMENT ET TEST DU FILE STATUS
            OPEN INPUT FMVT
            IF FMVT-FS NOT = '00'
                PERFORM FIN-ERR-OPENFMVT
            END-IF

       * SI TOUT VA BIEN ON PEUT POURSUIVRE LE TRAITEMENT
            PERFORM TRAIT-DEBUT
            PERFORM TRAIT-MOUVEMENT UNTIL FMVT-FINFICHIER
            PERFORM TRAIT-FIN

       * ECRITURE DU BILAN
            PERFORM BILAN-WRITE

            STOP RUN
            .
        TRAIT-DEBUT.
       ******************************************************************
       * EFFECTUE LA PREMIERE LECTURE DU FICHIER DE MOUVEMENTS          *
       ******************************************************************
       *    LECTURE DU SUIVANT DANS FMVT
            PERFORM TRAIT-READNEXT
       *    SI LA FIN DU FICHIER EST DEJA ATTEINTE ALORS FICHIER VIDE
            IF FMVT-FINFICHIER
                PERFORM FIN-ERR-FMVTVIDE
            END-IF
       *    PREPARATION DE LA DATE DU USERNAME
            PERFORM SET-USERNAME
            PERFORM SET-CURRENTDATE
            .
        TRAIT-MOUVEMENT.
       ******************************************************************
       * TRAITE UN ENREGISTREMENT DE MOUVEMENTS                         *
       ******************************************************************
       D    DISPLAY 'D- TRAIT-MOUVEMENT'
            PERFORM TRAIT-CONTROLFMVTCODE
            IF NOT INVALID-CODEMVT
                PERFORM TRAIT-MODIFASSURE
            ELSE
                PERFORM TRAIT-RECORDERROR-CODEMVT
            END-IF
            PERFORM TRAIT-READNEXT
            .
        TRAIT-CONTROLFMVTCODE.
       ******************************************************************
       * CONTROLE DU CODE DE MOUVEMENT, UTILISE L'INDICATEUR ADEQUAT    *
       ******************************************************************
       D    DISPLAY 'D- TRAIT-CONTROLFMVTCODE'
            SET   VALID-CODEMVT TO TRUE
            EVALUATE F-CODE
                WHEN 'C'
                    SET MVT-CREATION TO TRUE
                WHEN 'M'
                    SET MVT-MODIFICATION TO TRUE
                WHEN 'S'
                    SET MVT-SUPPRESSION  TO TRUE
                WHEN OTHER
                    SET INVALID-CODEMVT TO TRUE
                    PERFORM INCR-KO-CODEMVT
       D            DISPLAY 'D- INVALID CODE DETECTED ' F-CODE
            END-EVALUATE
            .
        TRAIT-MODIFASSURE.
       ******************************************************************
       * MODIFICATION DU FICHIER ASSURES GERE PAR L'ACCESSEUR           *
       ******************************************************************
       D    DISPLAY 'D- TRAIT-MODIFASSURE'
       * RECUPERATION DE L'ORDRE DE MOUVEMENT
            EVALUATE TRUE
                WHEN MVT-CREATION
                    SET CODEMVT-CREATION     TO TRUE
                WHEN MVT-SUPPRESSION
                    SET CODEMVT-SUPPRESSION  TO TRUE
                WHEN MVT-MODIFICATION
                    SET CODEMVT-MODIFICATION TO TRUE
            END-EVALUATE
       * APPEL DU SS PROG
            PERFORM CALL-ACC-ASSURE
       * CONTROLE DU CODE RETOUR
            PERFORM TRAIT-ASS-CONTROLCODERET
            IF NOT INVALID-ASS-CODERET
                PERFORM TRAIT-ASS-VALIDCODERET
            ELSE
                PERFORM TRAIT-ASS-INVALIDCODERET
            END-IF
            .
        TRAIT-ASS-CONTROLCODERET.
       ******************************************************************
       * ANALYSE DU CODE RETOUR DE L'ACCESSEUR ASSURE                   *
       ******************************************************************
            IF NOT CODERET-SUCCESS
                SET INVALID-ASS-CODERET TO TRUE
            ELSE
                SET   VALID-ASS-CODERET TO TRUE
            END-IF
            .
        TRAIT-ASS-INVALIDCODERET.
       ******************************************************************
       * TRAITEMENT DANS LE CAS D'UN CODE RETOUR ASSURE INVALIDE        *
       ******************************************************************
            EVALUATE TRUE
                WHEN MVT-MODIFICATION
                    PERFORM INCR-KO-MODIFICATION
                    SET CODEMVT-MODIFICATION TO TRUE
                WHEN MVT-CREATION
                    PERFORM INCR-KO-CREATION
                    SET CODEMVT-CREATION     TO TRUE
                WHEN MVT-SUPPRESSION
                    PERFORM INCR-KO-SUPPRESSION
                    SET CODEMVT-SUPPRESSION  TO TRUE
                WHEN OTHER
                    PERFORM FIN-ERR-MVTINCONNU
            END-EVALUATE
            .
        ANOMALIE-WRITE.
            INITIALIZE ZAN-ACCANOMA
            PERFORM CALL-ACC-ERROR
            MOVE CURRENT-DATE    TO ZAN-IN-DATE
            MOVE USERNAME        TO ZAN-IN-USERNAME
            MOVE ZER-OUT-LIBELLE TO ZAN-IN-MESSAGE
            MOVE F-MAT           TO ZAN-IN-KEY
       D    DISPLAY 'D- ZER-OUT-LIBELLE  ' ZER-OUT-LIBELLE
       D    DISPLAY 'D- MAT-X3           ' MAT-X3
       D    DISPLAY 'D- ZAN-ACCANOMA     ' ZAN-ACCANOMA
            PERFORM CALL-ACC-ANOMALIE
            .
        COPY-FMVTASSURE.
       ******************************************************************
       *                                                                *
       ******************************************************************
            MOVE F-MAT      TO MAT-A3
            MOVE F-NOM-PRE  TO NOM-PRE-A3
            MOVE F-RUE      TO RUE-A3
            MOVE F-CP       TO CP-A3
            MOVE F-VILLE    TO VILLE-A3
            MOVE F-TYPE-V   TO TYPE-V-A3
            MOVE F-PRIME    TO PRIME-A3
            MOVE F-BM       TO BM-A3
            MOVE F-TAUX     TO TAUX-A3
            .
        CALL-ACC-ANOMALIE.
       ******************************************************************
       * APPEL DU SOUS-PROGRAMME D'ECRITURE DES ANOMALIES               *
       ******************************************************************
       D    DISPLAY 'D- ECRITURE ANOMALIE'
            CALL PRGM-ACCESSEUR-ANOMALIE USING ZAN-ACCANOMA
            .
        CALL-ACC-ASSURE.
       ******************************************************************
       * APPEL DU SOUS-PROGRAMME D'ACCES AUX DONNEES DES ASSURES        *
       ******************************************************************
       *    PREPARATION DE LA ZONE DE COMMUNICATION
            PERFORM COPY-FMVTASSURE
            MOVE ASS-ASSURE TO ZAS-IN-ASSURE
       *    APPEL DU SOUS-PROGRAMME
            CALL PRGM-ACCESSEUR-ASSURE USING ZAS-ACCASSUR
       *    CONTROLE DU CODE RETOUR
            EVALUATE TRUE
                WHEN CODERET-FATALERROR
                     PERFORM FIN-ERR-FATALE
                WHEN CODERET-FILEERROR
                     PERFORM FIN-ERR-ACCESDONNEES
                WHEN OTHER
                    CONTINUE
            END-EVALUATE
            .
        CALL-ACC-ERROR.
       ******************************************************************
       * APPEL DE L'ACCESSEUR DES MESSAGES D'ERREUR                     *
       * CONTROLE LE CODE DE RETOUR DU SOUS-PROGRAMME                   *
       ******************************************************************
            CALL PRGM-ACCESSEUR-ERROR USING ZER-ACCERROR
            EVALUATE TRUE
                WHEN CODERET-FOUND
       D            DISPLAY 'D- '
       D                    'CALL ' PRGM-ACCESSEUR-ERROR '-'
       D                    'CODE ERREUR TROUVE  ' ZER-IN-CODEERROR
                    CONTINUE
                WHEN CODERET-UNKNOWN
                    DISPLAY 'W- '
                            'CALL ' PRGM-ACCESSEUR-ERROR '-'
                            'CODE ERREUR INCONNU ' ZER-IN-CODEERROR
                WHEN OTHER
                    DISPLAY 'W-  '
                            'CALL ' PRGM-ACCESSEUR-ERROR '-'
                            'VALEUR DU CODE RETOUR INCONNUE '
                            ZER-OUT-CODERET
            END-EVALUATE
            .
        INCR-OK.
       ******************************************************************
       * INCREMENTATION DU NOMBRE D'ASSURE LUS CORRECTEMENT TRAITES     *
       ******************************************************************
       D    DISPLAY 'D- INCR-OK +1 ASSURE OK'
            ADD 1 TO NB-ASSURE
            .
        INCR-OK-MODIFICATION.
       ******************************************************************
       * INCREMENTATION DU NOMBRE D'ANOMALIES DE MODIFICATION           *
       ******************************************************************
       D    DISPLAY 'D- INCR-OK-MODIFICATION'
            PERFORM INCR-OK
            ADD 1 TO NB-OK-MODIFICATION
            .
        INCR-OK-CREATION.
       ******************************************************************
       * INCREMENTATION DU NOMBRE D'ANOMALIES DE CREATION               *
       ******************************************************************
       D    DISPLAY 'D- INCR-OK-CREATION'
            PERFORM INCR-OK
            ADD 1 TO NB-OK-CREATION
            .
        INCR-OK-SUPPRESSION.
       ******************************************************************
       * INCREMENTATION DU NOMBRE D'ANOMALIES DE SUPPRESSION            *
       ******************************************************************
       D    DISPLAY 'D- INCR-OK-SUPPRESSION'
            PERFORM INCR-OK
            ADD 1 TO NB-OK-SUPPRESSION
            .
        INCR-KO-ANOMALIE.
       ******************************************************************
       * INCREMENTATION DU NOMBRE D'ANOMALIE                            *
       ******************************************************************
       D    DISPLAY 'D- ANOMALIE DETECTE'
            ADD 1 TO NB-KO
            PERFORM ANOMALIE-WRITE
            .
        INCR-KO-CODEMVT.
       ******************************************************************
       * INCREMENTATION DU NOMBRE DE MOUVEMENTS LUS                     *
       ******************************************************************
       D    DISPLAY 'D- INCR-KO-CODEMVT'
            MOVE 1 TO ZER-IN-CODEERROR
            PERFORM INCR-KO-ANOMALIE
            ADD 1 TO NB-KO-CODEMVT
            .
        INCR-KO-MODIFICATION.
       ******************************************************************
       * INCREMENTATION DU NOMBRE D'ANOMALIES DE MODIFICATION           *
       ******************************************************************
       D    DISPLAY 'D- INCR-KO-MODIFICATION'
            MOVE 3 TO ZER-IN-CODEERROR
            PERFORM INCR-KO-ANOMALIE
            ADD 1 TO NB-KO-MODIFICATION
            .
        INCR-KO-CREATION.
       ******************************************************************
       * INCREMENTATION DU NOMBRE D'ANOMALIES DE CREATION               *
       ******************************************************************
       D    DISPLAY 'D- INCR-KO-CREATION'
            MOVE 2 TO ZER-IN-CODEERROR
            PERFORM INCR-KO-ANOMALIE
            ADD 1 TO NB-KO-CREATION
            .
        INCR-KO-SUPPRESSION.
       ******************************************************************
       * INCREMENTATION DU NOMBRE D'ANOMALIES DE SUPPRESSION            *
       ******************************************************************
       D    DISPLAY 'D- INCR-KO-SUPPRESSION'
            MOVE 4 TO ZER-IN-CODEERROR
            PERFORM INCR-KO-ANOMALIE
            ADD 1 TO NB-KO-SUPPRESSION
            .
        TRAIT-ASS-VALIDCODERET.
       ******************************************************************
       * TRAITEMENT DANS LE CAS D'UN CODE RETOUR ASSURE VALIDE          *
       ******************************************************************
            EVALUATE TRUE
                WHEN MVT-MODIFICATION
                    PERFORM INCR-OK-MODIFICATION
                WHEN MVT-CREATION
                    PERFORM INCR-OK-CREATION
                WHEN MVT-SUPPRESSION
                    PERFORM INCR-OK-SUPPRESSION
                WHEN OTHER
                    PERFORM FIN-ERR-MVTINCONNU
            END-EVALUATE
            .
        TRAIT-RECORDERROR-CODEMVT.
       ******************************************************************
       * ENREGISTRE L'ERREUR DE CODE MOUVEMENT                          *
       ******************************************************************
            CONTINUE
            .
        TRAIT-READNEXT.
       ******************************************************************
       * LECTURE DE L'ENREGISTREMENT DE MOUVEMENT SUIVANT               *
       ******************************************************************
       D    DISPLAY 'D- TRAIT-READNEXT'
            READ FMVT NEXT
                      INTO         WS-FMVTSE
                      AT END       SET FMVT-FINFICHIER TO TRUE
                      NOT AT END   ADD 1 TO NB-MVT
            END-READ

            IF NOT (FMVT-FS = '00' OR FMVT-FS = '10')
                PERFORM FIN-ERR-FMVTLECTURE
            END-IF

       D    DISPLAY 'D-      FMVT-BUFFER ' FMVT-BUFFER
       D    DISPLAY 'D-      WS-FMVTSE    ' WS-FMVTSE
            .
        TRAIT-FIN.
       ******************************************************************
       * FIN DU TRAITEMENT : FERMETURE DU FICHIER DE MOUVEMENTS         *
       ******************************************************************
            CLOSE FMVT
            .
        SET-USERNAME.
       ******************************************************************
       * RECUPERE LE NOM DE L'UTILISATEUR ET LE SET DANS LA VAR GLOB    *
       ******************************************************************
            MOVE LNK-PARAM-USERNAME TO USERNAME
            .
        SET-CURRENTDATE.
       ******************************************************************
       * RECUPERE LA DATE DU JOUR ET LA SET DANS LA VARIABLE GLOB       *
       ******************************************************************
            MOVE FUNCTION CURRENT-DATE TO WS-CURRENT-DATE
            MOVE WS-CURRENT-DATE       TO WS-DATE
            MOVE DATE-JJ               TO DATE-ED-JJ
            MOVE DATE-MM               TO DATE-ED-MM
            MOVE DATE-AAAA             TO DATE-ED-AAAA
            MOVE WS-DATE-ED            TO CURRENT-DATE
            .
        BILAN-WRITE.
       ******************************************************************
       * ECRITURE DU BILAN                                              *
       ******************************************************************
       D    DISPLAY 'D- GENERATION DU BILAN'
       D    DISPLAY BILAN-CPT
       * RECUPERATION DES DONNEES
            IF USERNAME = SPACES
                PERFORM SET-USERNAME
            END-IF
            MOVE USERNAME              TO INF-USERNAME
       * MISE EN FORME DE LA DATE DU JOUR
            IF CURRENT-DATE = SPACES
                PERFORM SET-CURRENTDATE
            END-IF
            MOVE CURRENT-DATE          TO INF-DATE
       * MISE EN PAGE
            PERFORM BILAN-MISEENPAGE
       * AFFICHAGE
            PERFORM VARYING INDX-LIGNE
                    FROM INDX-LIGNE-MIN
                    BY   1
                    UNTIL INDX-LIGNE > INDX-LIGNE-MAX
                DISPLAY BILAN-LIGNE(INDX-LIGNE)
            END-PERFORM
            .
        BILAN-MISEENPAGE.
       ******************************************************************
       * MISE EN PAGE DU BILAN                                          *
       ******************************************************************
       * MISE EN PAGE LIGNE D'INFO
            INITIALIZE BILAN-LIGNE-TABLE
       *    LIGNE 1-------------------------------------    *
            MOVE BILAN-LIGNE-INF       TO BILAN-LIGNE(1)
       * MISE EN PAGE AVEC LES DONNEES DE L'ACCESSEUR ERREUR
       *    LIGNE 2-------------------------------------    *
            MOVE BILAN-LIGNE-SEP       TO BILAN-LIGNE(2)
       *    LIGNE 3-------------------------------------    *
            MOVE BILAN-LIGNE-TIT       TO BILAN-LIGNE(3)
       *    LIGNE 4-------------------------------------    *
            MOVE BILAN-LIGNE-SEP       TO BILAN-LIGNE(4)
       *    LIGNE 5-------------------------------------    *
            MOVE BILAN-LIGNE-VID       TO BILAN-LIGNE(5)
       *    LIGNE 6 A 12--------------------------------    *
            PERFORM VARYING INDX-NB
                    FROM INDX-NB-MIN
                    BY   1
                    UNTIL INDX-NB > INDX-NB-MAX
       D        DISPLAY ' '
       D        DISPLAY 'D-                        NEW INDX ' INDX-NB
                INITIALIZE MOD-DATA
                INITIALIZE ZER-ACCERROR
       *            RECUPERATION DU CODE DU MESSAGE
                MOVE NB-MESSAGE(INDX-NB) TO ZER-IN-CODEERROR
       *            RECUPERATION DU COMPTEUR CORRESPONDANT
                MOVE NB(INDX-NB)      TO MOD-NB-ED
       *            RECUPERATION DU MESSAGE CORRESPONDANT
                PERFORM CALL-ACC-ERROR
                MOVE ZER-OUT-LIBELLE  TO MOD-LIBELLE
       *        CALCUL DU NUMERO DE LIGNE CORRESPONDANT AU MESSAGE
                EVALUATE ZER-IN-CODEERROR
                    WHEN 05  MOVE  1 TO INDX-LIGNE
                    WHEN 06  MOVE  2 TO INDX-LIGNE
                    WHEN 08  MOVE  3 TO INDX-LIGNE
                    WHEN 09  MOVE  4 TO INDX-LIGNE
                    WHEN 10  MOVE  5 TO INDX-LIGNE
       *        DETAILS DES ANOMALIES
                    WHEN 07  MOVE  7 TO INDX-LIGNE
                    WHEN 11  MOVE  8 TO INDX-LIGNE
                    WHEN 12  MOVE  9 TO INDX-LIGNE
                    WHEN 13  MOVE 10 TO INDX-LIGNE
                    WHEN 14  MOVE 11 TO INDX-LIGNE
       *        ON IGNORE LES AUTRES
                    WHEN OTHER CONTINUE
                END-EVALUATE
       *        DECALAGE DU NUMERO LIGNE
                ADD 5 TO INDX-LIGNE
       *        CHARGEMENT DE LA LIGNE DANS LE BILAN
                MOVE BILAN-LIGNE-MOD  TO BILAN-LIGNE(INDX-LIGNE)
            END-PERFORM
       *    LIGNE 11------------------------------------    *
            MOVE BILAN-LIGNE-VID       TO BILAN-LIGNE(11)
       *    LIGNE 17------------------------------------    *
            MOVE BILAN-LIGNE-VID       TO BILAN-LIGNE(17)
       *    LIGNE 18------------------------------------    *
            MOVE BILAN-LIGNE-SEP       TO BILAN-LIGNE(18)
            .
        FICHIER-FERMERTOUS.
       ******************************************************************
       * FERMETURE DE TOUS LES FICHIERS S'ILS SONT OUVERTS              *
       ******************************************************************
            IF FMVT-ISOPEN
                CLOSE FMVT
            END-IF
            .
        FIN-ERR-ACCESDONNEES.
       ******************************************************************
       * ERREUR LORS DE L'ACCES AUX DONNEES ASSURES INNATENDUE          *
       ******************************************************************
            DISPLAY 'ERREUR INNATENDUE D''ACCES AUX DONNEES ASSURES'
            PERFORM FICHIER-FERMERTOUS
            PERFORM FIN-ERR-FATALE
            .
        FIN-ERR-MVTINCONNU.
       ******************************************************************
       * TYPE DE MOUVEMENT INNATTENDU                                   *
       ******************************************************************
            DISPLAY 'ERREUR DE TYPE DE MOUVEMENT'
            PERFORM FICHIER-FERMERTOUS
            PERFORM FIN-ERR-FATALE
            .
        FIN-ERR-FMVTLECTURE.
       ******************************************************************
       * FIN DANS LE CAS OU LE FICHIER MOUVEMENT EST VIDE               *
       ******************************************************************
            DISPLAY 'ERREUR DE LECTURE : ' FMVT-FS
            PERFORM FICHIER-FERMERTOUS
            PERFORM FIN-ERR-FATALE
            .
        FIN-ERR-FMVTVIDE.
       ******************************************************************
       * FIN DANS LE CAS OU LE FICHIER MOUVEMENT EST VIDE               *
       ******************************************************************
       * TODO : AJOUTER L'ERREUR DANS LES ANOMALIES
       D    DISPLAY 'FICHIER FMVTS VIDE'
            PERFORM FICHIER-FERMERTOUS
            PERFORM BILAN-WRITE
            STOP RUN
            .
        FIN-ERR-OPENFMVT.
       ******************************************************************
       * FIN DANS LE CAS OU ERREUR OUVERTURE FICHIER MOUVEMENT          *
       ******************************************************************
       D    DISPLAY 'ERREUR OUVERTURE FICHIER MOUVEMENT'
            PERFORM FIN-ERR-FATALE
            .
        FIN-ERR-FATALE.
       ******************************************************************
       * FIN DANS LE CAS OU ERREUR FATALE                               *
       ******************************************************************
            DISPLAY '+-------------------------------------------------+'
            DISPLAY '+               F A T A L  E R R O R              +'
            DISPLAY '+ IN A03MAJS                                      +'
            DISPLAY '+-------------------------------------------------+'
            STOP RUN
            .
 MEMBER NAME  A03ACASS
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03ACASS.
        AUTHOR.     MAXIME.
        DATE-WRITTEN. 04/01/2024.
       ******************************************************************
       * SOUS PROGRAMME DE GESTION DU FICHIER D'ASSURES                 *
       ******************************************************************

        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER.
            IBM3090
            WITH DEBUGGING MODE
            .
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT FASSU     ORGANIZATION    IS INDEXED
                             ACCESS MODE     IS RANDOM
                             RECORD KEY      IS FASSU-MATRICULE
                             FILE STATUS     IS FASSU-FS
                             ASSIGN          TO FASSUIN.

        DATA DIVISION.
       *----------------------------------------------------------------*
        FILE SECTION.
       *----------------------------------------------------------------*
        FD FASSU.
        01 FASSU-BUFFER.
           05 FASSU-MATRICULE                     PIC X(06).
           05                                     PIC X(74).
       *----------------------------------------------------------------*
        WORKING-STORAGE SECTION.
       *----------------------------------------------------------------*
       * RECUPERATION DES COPY COMMUNES
       *----------------------------------------------------------------*
       * DEFINITION DE LA ZONE DE COMM DE L'ACCESSEUR ERREUR
        COPY ACCASSUR  REPLACING ==:ZCOM:== BY  ==WS== .
       * DEFINITION D'UN ENREGISTREMENT D'ASSURE
        COPY WASSURES  REPLACING ==:VAR:==  BY  ==WS== .
       *----------------------------------------------------------------*
       * VARIABLES DE TRAVAIL
       *----------------------------------------------------------------*
        77  FASSU-FS                              PIC X(2).
        77                                        PIC 9.
            88 FASSU-ISOPEN                       VALUE 1.
            88 FASSU-ISCLOSED                     VALUE 2.
            88 FASSU-ALREADYOPENOUTPUT            VALUE 3.
        77                                        PIC 9.
            88 INVALID-CODEMVT                    VALUE 1.
        77                                        PIC 9.
            88 KEY-NONEXIST                       VALUE 0.
            88 KEY-EXIST                          VALUE 1.
       *----------------------------------------------------------------*
        LINKAGE SECTION.
        01  LNK-ACASSUR                           PIC X(84).

        PROCEDURE DIVISION USING LNK-ACASSUR.
       ******************************************************************
       * SOUS-PROGRAMME                                                 *
       ******************************************************************
            PERFORM TRAIT-GETINPUT

            PERFORM TRAIT-CHECKINPUT
            IF NOT INVALID-CODEMVT
                PERFORM FILE-OPEN
                IF NOT CODERET-FILEERROR
                    PERFORM TRAIT-MOUVEMENT
                    PERFORM FILE-CLOSE
                END-IF
            ELSE
                SET CODERET-INVALIDMVT TO TRUE
            END-IF

            PERFORM TRAIT-SETOUTPUT

            GOBACK
            .
        TRAIT-GETINPUT.
       ******************************************************************
       * RECUPERE LES INPUT DU PROGRAMME APPELANT                       *
       ******************************************************************
       D    DISPLAY 'D-    IN A03ACASS  LNK-ACASSUR'
       D    DISPLAY 'D-                ' LNK-ACASSUR
            INITIALIZE WS-ACCASSUR
            MOVE LNK-ACASSUR TO WS-ACCASSUR
            MOVE WS-IN-ASSURE TO WS-ASSURE
       D    DISPLAY 'D-    IN A03ACASS  WS-ASSURE'
       D    DISPLAY 'D-                ' WS-ASSURE
            .
        TRAIT-SETOUTPUT.
       ******************************************************************
       * RENVOIT LES OUTPUT AU PROGRAMME APPELANT                       *
       ******************************************************************
            MOVE WS-ACCASSUR TO LNK-ACASSUR
            .
        TRAIT-CHECKINPUT.
       ******************************************************************
       * CONTROLE DES INPUT                                             *
       ******************************************************************
            IF NOT
            (
                    WS-IN-CODEMVT = 'C'
                OR  WS-IN-CODEMVT = 'M'
                OR  WS-IN-CODEMVT = 'S'
            )
                SET INVALID-CODEMVT TO TRUE
            END-IF
            .
        TRAIT-MOUVEMENT.
       ******************************************************************
       * TRAITEMENT DU CODE MOUVEMENT                                   *
       ******************************************************************
       * ALGORITHME :
       *    ON OUVRE LE FICHIER DE DONNEES
       *    SI CREATION
       *    ALORS ON VERIFIE QUE LA CLE EST ABSENTE
       *    SI MODIFICATION OU SUPPRESSION
       *    ALORS ON VERIFIE QUE LA CLE EST PRESENTE
       *
       *    SI LA CLE EST DANS LE BON ETAT
       *    ALORS TRAITEMENT ADEQUAT
       *    SINON ERREUR DE TRAITEMENT
       *
       *    ON FERME LE FICHIER DE DONNEES
       *
            EVALUATE WS-IN-CODEMVT
                WHEN 'C'
                    PERFORM TRAIT-CREATION
                WHEN 'M'
                    PERFORM TRAIT-MODIFICATION
                WHEN 'S'
                    PERFORM TRAIT-SUPPRESSION
                WHEN OTHER
                    SET CODERET-FAILED TO TRUE
                    DISPLAY 'E- IN A03ACASS - CODEMVT INNATTENDU'
                    PERFORM FILE-CLOSE
                    GOBACK
            END-EVALUATE
            .
        TRAIT-CREATION.
       ******************************************************************
       * TRAITEMENT DE CREATION D'UN ASSURE                             *
       ******************************************************************
       D    DISPLAY 'D- TRAIT-CREATION'
            PERFORM CHECK-KEYEXIST
            IF KEY-EXIST
                SET CODERET-FAILED TO TRUE
            ELSE
       D    DISPLAY 'D-               TENTATIVE ECRITURE'
                WRITE FASSU-BUFFER
                      FROM WS-ASSURE
                      INVALID KEY
                          PERFORM FIN-FATALERROR
                      NOT INVALID KEY
                          SET CODERET-SUCCESS TO TRUE
                END-WRITE
            END-IF
            .
        TRAIT-MODIFICATION.
       ******************************************************************
       * TRAITEMENT DE MODIFICATION D'UN ASSURE                         *
       ******************************************************************
       D    DISPLAY 'D- TRAIT-MODIFICATION'
            PERFORM CHECK-KEYEXIST
            IF NOT KEY-EXIST
                SET CODERET-FAILED TO TRUE
            ELSE
       D    DISPLAY 'D-               TENTATIVE REECRITURE'
                REWRITE FASSU-BUFFER
                        FROM WS-ASSURE
                        INVALID KEY
                             PERFORM FIN-FATALERROR
                        NOT INVALID KEY
                             SET CODERET-SUCCESS TO TRUE
                END-REWRITE
            END-IF
            .
        TRAIT-SUPPRESSION.
       ******************************************************************
       * TRAITEMENT DE SUPPRESSION D'UN ASSURE                          *
       ******************************************************************
       D    DISPLAY 'D- TRAIT-SUPPRESSION'
            PERFORM CHECK-KEYEXIST
            IF NOT KEY-EXIST
                SET CODERET-FAILED TO TRUE
            ELSE
       D    DISPLAY 'D-               TENTATIVE SUPPRESSION'
                DELETE FASSU
                       INVALID KEY
                           PERFORM FIN-FATALERROR
                       NOT INVALID KEY
                           SET CODERET-SUCCESS TO TRUE
                END-DELETE
            END-IF
            .
        FILE-OPEN.
       ******************************************************************
       * OUVERTURE DU FICHIER ET TRAITEMENT DU CODE RETOUR              *
       ******************************************************************
            OPEN I-O FASSU
            EVALUATE FASSU-FS ALSO TRUE
                WHEN '00' ALSO TRUE
                    SET FASSU-ISOPEN TO TRUE
                    CONTINUE
                WHEN '35' ALSO NOT FASSU-ALREADYOPENOUTPUT
       *        FICHIER VIDE OU ABSENT, FAIRE UN OUTPUT SUR LE VSAM
                    OPEN OUTPUT FASSU
                    CLOSE FASSU
                    SET FASSU-ALREADYOPENOUTPUT TO TRUE
                    PERFORM FILE-OPEN
                WHEN OTHER
                    DISPLAY 'E- IN A03ACASS - OPEN FASSU FAILED WITH'
                            ' CODE ' FASSU-FS
                    SET CODERET-FILEERROR TO TRUE
            END-EVALUATE
            .
        FILE-OPENCLOSE.
       ******************************************************************
       * OUVERTURE EN OUTPUT ET FERMETURE DU FICHIER                    *
       * PERMET DE GERER LE PROBLEME DU VSAM VIDE QUI REFUSE            *
       * D'ETRE OUVERT EN I-O S'IL EST VIDE                             *
       ******************************************************************
            OPEN OUTPUT FASSU
            EVALUATE FASSU-FS
                WHEN '00'
                    CLOSE FASSU
                    CONTINUE
                WHEN OTHER
                    DISPLAY 'E- IN A03ACASS - OPENCLOSE FASSU FAILED'
                            ' WITH CODE ' FASSU-FS
                    SET CODERET-FILEERROR TO TRUE
            END-EVALUATE
            .
        FILE-CLOSE.
       *****************************************************************
       * FERMETURE DU FICHIER                                           *
       ******************************************************************
            CLOSE FASSU
            SET FASSU-ISCLOSED TO TRUE
            .
        CHECK-KEYEXIST.
       ******************************************************************
       * VERIFIE QUE LA CLE DONNEES EST PRESENTE DANS LE FICHIER        *
       ******************************************************************
            MOVE MAT-X3 TO FASSU-MATRICULE
            READ FASSU   INTO WS-ASSURE
                         KEY  FASSU-MATRICULE
                         INVALID KEY
       D                     DISPLAY 'D-   IN A03ACASS KEY NOT FOUND '
       D                             FASSU-MATRICULE
                             SET KEY-NONEXIST TO TRUE
                         NOT INVALID KEY
       D                     DISPLAY 'D-   IN A03ACASS KEY FOUND     '
       D                             FASSU-MATRICULE
                             SET KEY-EXIST    TO TRUE
            END-READ
            .
        FIN-FATALERROR.
       ******************************************************************
       * ERREUR INNATENDU : ARRET BRUTAL DU PROGRAMME                   *
       ******************************************************************
            IF FASSU-ISOPEN
                CLOSE FASSU
            END-IF
            DISPLAY '+------------------------------------------------+'
            DISPLAY '+             F A T A L  E R R O R               +'
            DISPLAY '+ IN A03ACASS                                    +'
            DISPLAY '+------------------------------------------------+'
            SET CODERET-FATALERROR TO TRUE
            GOBACK
            .
 MEMBER NAME  A03ACAS2
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03ACAS2.
        AUTHOR.     MAXIME.
        DATE-WRITTEN. 08/01/2024.
       ******************************************************************
       * SOUS PROGRAMME DE GESTION DU FICHIER D'ASSURES                 *
       * ACCES AUX DONNEES DANS UNE BASE DB2                            *
       ******************************************************************

        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER.
            IBM3090
            WITH DEBUGGING MODE
            .
        INPUT-OUTPUT SECTION.

        DATA DIVISION.
       *----------------------------------------------------------------*
        WORKING-STORAGE SECTION.
       *----------------------------------------------------------------*
       * DEFINITION DES VARIABLES SQL
       *----------------------------------------------------------------*
            EXEC SQL INCLUDE SQLCA         END-EXEC.
        77  SQLCODE-ED                            PIC +(5)9.
       * DEFINITION D'UN ENREGISTREMENT D'ASSURE
            EXEC SQL INCLUDE XASSURES      END-EXEC.
       *----------------------------------------------------------------*
       * RECUPERATION DES COPY COMMUNES
       *----------------------------------------------------------------*
       * DEFINITION DE LA ZONE DE COMM DE L'ACCESSEUR ERREUR
            EXEC SQL INCLUDE ACCASSU2             END-EXEC.
       * DEFINITION D'UN ENREGISTREMENT ASSURE
            EXEC SQL INCLUDE WASSURE2             END-EXEC.
       *----------------------------------------------------------------*
       * VARIABLES DE TRAVAIL
       *----------------------------------------------------------------*
        77                                        PIC 9.
            88 INVALID-CODEMVT                    VALUE 1.
        77                                        PIC 9.
            88 INVALID-FORMAT-CP                  VALUE 1.
        77                                        PIC 9.
            88 INVALID-INPUT                      VALUE 1.
        77                                        PIC 9.
            88 KEY-NONEXIST                       VALUE 0.
            88 KEY-EXIST                          VALUE 1.
       * INDICATEUR S'IL FAUT FAIRE UN TEST DE REUSSITE APRES UNE ACTION
        77                                        PIC 9.
            88 AUTOTEST-ACTIV                     VALUE 0.
            88 AUTOTEST-INACTIV                   VALUE 1.
       * MESSAGE DESCRIPTIT DE L'ERREUR FATALE
        77  ERR-MESSAGE                           PIC X(47).
        77  ERR-SQLCOMMAND                        PIC X(08).
       * DEFINITION D'UNE VARIABLE STRING POUR LE CALCUL DE LA LONGUEUR
       *    -------------- LONGUEUR CALCULEE
        77  STRING-LEN                            PIC 9(02).
       *    -------------- CHAINE A MESURER
        77  STRING-CHAR                           PIC X(100).
       *    -------------- LONGUEUR MAX CORRESPOND A LA PIC X DE CHAR
        77  STRING-MAXLEN                         PIC 9(03) VALUE 100.
       * PICTURE D'EDITION
        77  DB2-CP-INT                            PIC  9(5).
        77  DB2-CP-ED                             PIC +(8)9.
       *----------------------------------------------------------------*
        LINKAGE SECTION.
        01  LNK-ACASSUR                           PIC X(84).

        PROCEDURE DIVISION USING LNK-ACASSUR.
       ******************************************************************
       * SOUS-PROGRAMME                                                 *
       ******************************************************************
            PERFORM TRAIT-GETINPUT

            PERFORM TRAIT-CHECKINPUT
            EVALUATE TRUE
                WHEN INVALID-CODEMVT
                    SET CODERET-INVALIDMVT TO TRUE
                WHEN INVALID-FORMAT-CP
                    DISPLAY '      IN A03ACAS2 INVALID FORMAT FOR CP-A3'
                    SET CODERET-FAILED     TO TRUE
                WHEN OTHER
                    PERFORM TRAIT-MOUVEMENT
       D            IF CODERET-SUCCESS
       D                DISPLAY 'D-    IN A03ACAS2   CODERET-SUCCESS'
       D            END-IF
            END-EVALUATE

            PERFORM TRAIT-SETOUTPUT

            GOBACK
            .
        TRAIT-GETINPUT.
       ******************************************************************
       * RECUPERE LES INPUT DU PROGRAMME APPELANT                       *
       ******************************************************************
       D    DISPLAY 'D-    IN A03ACAS2  LNK-ACASSUR'
       D    DISPLAY 'D-                ' LNK-ACASSUR
            INITIALIZE ZCOM-ACCASSUR
            MOVE LNK-ACASSUR TO ZCOM-ACCASSUR

            MOVE ZCOM-IN-ASSURE TO WS-ASSURE
       D    DISPLAY 'D-    IN A03ACAS2  WS-ASSURE'
       D    DISPLAY 'D-                ' WS-ASSURE
       * RECUPERATION DANS LA ZONE MEMOIRE DB2
            INITIALIZE DB2-ASSURES
            MOVE MAT-A3         TO DB2-NUMASS
            MOVE RUE-A3         TO DB2-ADRESSE
            MOVE TYPE-V-A3      TO DB2-TYPE
            MOVE PRIME-A3       TO DB2-PRIME
            MOVE BM-A3          TO DB2-BONUS
            MOVE TAUX-A3        TO DB2-TAUX
       *    CONVERSION DES DONNEES ALPHANUMERIQUE STOCKES EN INTEGER DB2
       D    DISPLAY 'D-    IN A03ACAS2  CP-A3 '
       D    DISPLAY 'D-                ' CP-A3
            MOVE CP-A3          TO DB2-CP-INT
            MOVE DB2-CP-INT     TO DB2-CP
       D    DISPLAY 'D-    IN A03ACAS2  DB2-CP '
       D    DISPLAY 'D-                ' DB2-CP
            MOVE DB2-CP         TO DB2-CP-ED
       D    DISPLAY 'D-    IN A03ACAS2  DB2-CP-ED '
       D    DISPLAY 'D-                ' DB2-CP-ED
       *    GESTION DES VARCHARS
       *    -------- NOM
            MOVE NOM-PRE-A3     TO DB2-NOM-TEXT
            MOVE DB2-NOM-TEXT   TO STRING-CHAR
            PERFORM STRING-GETLENGTH
            MOVE STRING-LEN     TO DB2-NOM-LEN
       *    -------- ADRESSE
            MOVE RUE-A3         TO DB2-ADRESSE-TEXT
            MOVE DB2-ADRESSE-TEXT TO STRING-CHAR
            PERFORM STRING-GETLENGTH
            MOVE STRING-LEN     TO DB2-ADRESSE-LEN
       *    -------- VILLE
            MOVE VILLE-A3       TO DB2-VILLE-TEXT
            MOVE DB2-VILLE-TEXT TO STRING-CHAR
            PERFORM STRING-GETLENGTH
            MOVE STRING-LEN     TO DB2-VILLE-LEN
            .
        STRING-GETLENGTH.
       ******************************************************************
       * MESURE LA TAILLE DE LA CHAINE STRING-CHAR                      *
       * PLACE LE RESULTAT DANS STRING-LEN
       ******************************************************************
            INITIALIZE STRING-LEN
            INSPECT FUNCTION REVERSE(STRING-CHAR)
                    TALLYING STRING-LEN
                    FOR LEADING SPACES
            COMPUTE STRING-LEN = STRING-MAXLEN - STRING-LEN
            .
        TRAIT-SETOUTPUT.
       ******************************************************************
       * RENVOIT LES OUTPUT AU PROGRAMME APPELANT                       *
       ******************************************************************
            MOVE ZCOM-ACCASSUR TO LNK-ACASSUR
            .
        TRAIT-CHECKINPUT.
       ******************************************************************
       * CONTROLE DES INPUT                                             *
       ******************************************************************
            IF NOT
            (
                    ZCOM-IN-CODEMVT = 'C'
                OR  ZCOM-IN-CODEMVT = 'M'
                OR  ZCOM-IN-CODEMVT = 'S'
            )
                SET INVALID-CODEMVT TO TRUE
            END-IF

            IF NOT
            (
                    CP-A3 IS NUMERIC
            )
                SET INVALID-FORMAT-CP TO TRUE
            END-IF

            IF INVALID-CODEMVT OR INVALID-FORMAT-CP
                SET INVALID-INPUT TO TRUE
            END-IF
            .
        TRAIT-MOUVEMENT.
       ******************************************************************
       * TRAITEMENT DU CODE MOUVEMENT                                   *
       ******************************************************************
            EVALUATE ZCOM-IN-CODEMVT
                WHEN 'C'
                    PERFORM TRAIT-CREATION
                WHEN 'M'
                    PERFORM TRAIT-MODIFICATION
                WHEN 'S'
                    PERFORM TRAIT-SUPPRESSION
                WHEN OTHER
                    SET CODERET-FAILED TO TRUE
                    DISPLAY 'E- IN A03ACAS2 - CODEMVT INNATTENDU'
            END-EVALUATE
            .
        TRAIT-CREATION.
       ******************************************************************
       * TRAITEMENT DE CREATION D'UN ASSURE                             *
       ******************************************************************
            PERFORM CHECK-KEYEXIST
            IF KEY-EXIST
                SET CODERET-FAILED TO TRUE
            ELSE
                EXEC SQL
                    INSERT INTO ASSURES
                    (
                        NUMASS           ,
                        NOM              ,
                        CP               ,
                        ADRESSE          ,
                        VILLE            ,
                        TYPE             ,
                        PRIME            ,
                        BONUS            ,
                        TAUX
                    )
                    VALUES
                    (
                        :DB2-NUMASS      ,
                        :DB2-NOM         ,
                        :DB2-CP          ,
                        :DB2-ADRESSE     ,
                        :DB2-VILLE       ,
                        :DB2-TYPE        ,
                        :DB2-PRIME       ,
                        :DB2-BONUS       ,
                        :DB2-TAUX
                    )

                END-EXEC
                EVALUATE SQLCODE
                    WHEN 0
                        SET CODERET-SUCCESS TO TRUE
                    WHEN OTHER
                        MOVE 'INSERT' TO ERR-SQLCOMMAND
                        PERFORM ERROR-WRITEERRORDB2
                        PERFORM FIN-FATALERROR
                END-EVALUATE
            END-IF
            .
        TRAIT-MODIFICATION.
       ******************************************************************
       * TRAITEMENT DE MODIFICATION D'UN ASSURE                         *
       ******************************************************************
            PERFORM CHECK-KEYEXIST
            IF NOT KEY-EXIST
                SET CODERET-FAILED TO TRUE
            ELSE
                EXEC SQL
                    UPDATE ASSURES
                    SET
                          NOM           = :DB2-NOM    ,
                          CP            = :DB2-CP     ,
                          ADRESSE       = :DB2-ADRESSE ,
                          TYPE          = :DB2-TYPE   ,
                          PRIME         = :DB2-PRIME  ,
                          BONUS         = :DB2-BONUS  ,
                          TAUX          = :DB2-TAUX
                    WHERE NUMASS = :DB2-NUMASS
                END-EXEC
                EVALUATE SQLCODE
                    WHEN 0
                        SET CODERET-SUCCESS TO TRUE
                    WHEN OTHER
                        MOVE 'UPDATE' TO ERR-SQLCOMMAND
                        PERFORM ERROR-WRITEERRORDB2
                        PERFORM FIN-FATALERROR
                END-EVALUATE
            END-IF
            .
        TRAIT-SUPPRESSION.
       ******************************************************************
       * TRAITEMENT DE SUPPRESSION D'UN ASSURE                          *
       ******************************************************************
            PERFORM CHECK-KEYEXIST
            IF NOT KEY-EXIST
                SET CODERET-FAILED TO TRUE
            ELSE
                EXEC SQL
                    DELETE FROM ASSURES
                    WHERE  NUMASS = :DB2-NUMASS
                END-EXEC
                EVALUATE SQLCODE
                    WHEN 0
                        SET CODERET-SUCCESS TO TRUE
                    WHEN OTHER
                        MOVE 'DELETE' TO ERR-SQLCOMMAND
                        PERFORM ERROR-WRITEERRORDB2
                        PERFORM FIN-FATALERROR
                END-EVALUATE
            END-IF
            .
        ERROR-WRITEERRORDB2.
            MOVE SQLCODE TO SQLCODE-ED
            STRING ERR-SQLCOMMAND       DELIMITED BY SPACE
                   ' FAILED WITH CODE ' DELIMITED BY SIZE
                   SQLCODE-ED           DELIMITED BY SIZE
                   INTO ERR-MESSAGE
            .
        CHECK-KEYEXIST.
       ******************************************************************
       * VERIFIE QUE LA CLE DONNEES EST PRESENTE DANS LE FICHIER        *
       ******************************************************************
            EXEC SQL
                SELECT NUMASS
                INTO   :DB2-NUMASS
                FROM   ASSURES
                WHERE  NUMASS = :DB2-NUMASS
            END-EXEC
            EVALUATE SQLCODE
                WHEN 0
       D            DISPLAY 'D-    IN A03ACAS2  KEY EXIST    ' DB2-NUMASS
                    SET KEY-EXIST TO TRUE
                WHEN OTHER
       D            DISPLAY 'D-    IN A03ACAS2  KEY NONEXIST ' DB2-NUMASS
                    SET KEY-NONEXIST TO TRUE
            END-EVALUATE
            .
        FIN-FATALERROR.
       ******************************************************************
       * ERREUR INNATENDU : ARRET BRUTAL DU PROGRAMME                   *
       ******************************************************************
            DISPLAY '+------------------------------------------------+'
            DISPLAY '+             F A T A L  E R R O R               +'
            DISPLAY '+ IN A03ACAS2                                    +'
            DISPLAY '+ ERROR                                          +'
            DISPLAY '+ ' ERR-MESSAGE                                ' +'
            DISPLAY '+------------------------------------------------+'
            SET CODERET-FATALERROR TO TRUE
            PERFORM TRAIT-SETOUTPUT
            GOBACK
            .
 MEMBER NAME  COMPIL
 //FORAXXA JOB ACCTFORA,'XXXX',CLASS=A,MSGCLASS=A,NOTIFY=&SYSUID
 //COBBTCH EXEC ACOBBTCH,PGMB=LISTLIB,GRPEHLQ='FORAXX'
 //SYSLINK DD DSN=FORAXX.LIB.LOAD,DISP=SHR
 //SYSLIB  DD DSN=FORAXX.LIB.COPY,DISP=SHR
 //LKED.SYSIN DD *
   ENTRY LISTLIB
   NAME  LISTLIB(R)
 //SYSPRINT DD SYSOUT=*
 //SYSOUT DD SYSOUT=*
 MEMBER NAME  LISTLIB
        IDENTIFICATION DIVISION.
        PROGRAM-ID. 'A03LIST'.
       *
       * LIST DES MEMBRES D'UNE LIBRAIRIE
       *
        ENVIRONMENT DIVISION.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT LIB ASSIGN UT-S-LIB
              FILE STATUS FS-LIB.
            SELECT JCL ASSIGN FJCL
              FILE STATUS FS-JCL.
        DATA DIVISION.
        FILE SECTION.
        FD LIB
              RECORD CONTAINS 256 CHARACTERS
               RECORDING MODE IS U.
        01 ELIB.
            05 ENR-LEN        PIC S9(4) COMP.
            05                PIC X(254).
        FD JCL RECORDING F.
        01 EJCL               PIC X(80).
        WORKING-STORAGE SECTION.
        77  FS-LIB            PIC XX.
        77  FS-JCL            PIC XX.
        77  IND               PIC S9(4) COMP.
        77  NBMEM             PIC S9(4) COMP VALUE 0.
        77  FIN               PIC X VALUE 'N'.
        01 TABLE-JCL.
            05  JCL1 PIC X(80) VALUE
                '//FORA03A JOB CLASS=A,MSGCLASS=A,NOTIFY=&SYSUID'.
            05  JCL2 PIC X(80) VALUE '//S1 EXEC PGM=IEBGENER'.
            05  JCL3 PIC X(80) VALUE '//SYSPRINT DD SYSOUT=A'.
            05  JCL4 PIC X(80) VALUE '//SYSIN    DD DUMMY'.
            05  JCL5 PIC X(80) VALUE
                '//SYSUT2   DD DSN=FORA03.EXPORT,DISP=SHR'.
            05  JCL6 PIC X(80) VALUE '//SYSUT1   DD *'.
            05  JCL7 PIC X(80) VALUE ALL '*'.
            05  JCL8.
              10     PIC X(11) VALUE '*   MEMBRE='.
              10 J8-MEM PIC X(8).
              10     PIC X(11) VALUE ' LIBRAIRIE='.
              10 J8-LIB PIC X(50).
            05  JCL9 PIC X(80) VALUE ALL '*'.
            05  JCLA.
              10     PIC X(27) VALUE '//         DD DISP=SHR,DSN='.
              10 JA-LIB PIC X(53) VALUE SPACE.
            05  JCLB PIC X(80) VALUE '//         DD *'.
        01 REDEFINES TABLE-JCL.
            05  JCLL PIC X(80) OCCURS 11.
        77  ITAB     PIC S9(4) COMP.
        LINKAGE SECTION.
        01  PARM.
            05 LEN            PIC S9(4) COMP.
            05 L-LIB          PIC X(80).
        PROCEDURE DIVISION USING PARM.
            IF LEN = 0
              DISPLAY 'LE NOM DE LA LIBRAIRIE N''A PAS ETE DONNE'
              MOVE 16 TO RETURN-CODE
              STOP RUN
            END-IF
            MOVE L-LIB TO J8-LIB
            OPEN OUTPUT JCL
            PERFORM TEST-STAT-JCL
            OPEN INPUT LIB
            PERFORM TEST-STAT-LIB
            PERFORM VARYING ITAB FROM 1 BY 1 UNTIL ITAB > 6
              MOVE JCLL(ITAB) TO EJCL
              WRITE EJCL
              PERFORM TEST-STAT-JCL
            END-PERFORM
            READ LIB
            PERFORM UNTIL FS-LIB = '10' OR FIN = 'O'
              PERFORM TEST-STAT-LIB
       *      DISPLAY ELIB
              MOVE 3          TO IND
              PERFORM  UNTIL IND > ENR-LEN OR FIN = 'O'
                IF ELIB(IND:8) = HIGH-VALUE
                  MOVE 'O'          TO FIN
                ELSE
                  ADD 1             TO NBMEM
                  MOVE  ELIB(IND:8) TO J8-MEM
                  MOVE SPACE        TO JA-LIB
                  STRING L-LIB       DELIMITED BY LOW-VALUE
                         '('         DELIMITED BY SIZE
                         ELIB(IND:8) DELIMITED BY SPACE
                         ')'         DELIMITED BY SIZE
                    INTO JA-LIB
                  PERFORM VARYING ITAB FROM 7 BY 1 UNTIL ITAB > 11
                    MOVE JCLL(ITAB) TO EJCL
                    WRITE EJCL
                    PERFORM TEST-STAT-JCL
                  END-PERFORM
                  IF ELIB(IND + 11:1) = X'00'
                    ADD 12          TO IND
                  ELSE
                    ADD 42          TO IND
                  END-IF
                END-IF
              END-PERFORM
              READ LIB
            END-PERFORM
            CLOSE LIB
            PERFORM TEST-STAT-LIB
            DISPLAY ' '
            DISPLAY 'NOMBRE DE MEMBRES = ' NBMEM
            STOP RUN
            .
        TEST-STAT-LIB.
            IF FS-LIB NOT = '00'
              DISPLAY 'ERREUR LIBRAIRIE ' FS-LIB
              MOVE 16 TO RETURN-CODE
              STOP RUN
            END-IF
            .
        TEST-STAT-JCL.
            IF FS-JCL NOT = '00'
              DISPLAY 'ERREUR SORTIE JCL ' FS-JCL
              MOVE 16 TO RETURN-CODE
              STOP RUN
            END-IF
            .
 MEMBER NAME  A03LIST
        IDENTIFICATION DIVISION.
        PROGRAM-ID. 'A03LIST'.
       *
       * LIST DES MEMBRES D'UNE LIBRAIRIE
       *
        ENVIRONMENT DIVISION.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT LIB ASSIGN UT-S-LIB
              FILE STATUS FS-LIB.
            SELECT JCL ASSIGN FJCL
              FILE STATUS FS-JCL.
        DATA DIVISION.
        FILE SECTION.
        FD LIB
              RECORD CONTAINS 256 CHARACTERS
               RECORDING MODE IS U.
        01 ELIB.
            05 ENR-LEN        PIC S9(4) COMP.
            05                PIC X(254).
        FD JCL RECORDING F.
        01 EJCL               PIC X(80).
        WORKING-STORAGE SECTION.
        77  FS-LIB            PIC XX.
        77  FS-JCL            PIC XX.
        77  IND               PIC S9(4) COMP.
        77  NBMEM             PIC S9(4) COMP VALUE 0.
        77  FIN               PIC X VALUE 'N'.
        01 TABLE-JCL.
            05  JCL1 PIC X(80) VALUE
                '//FORA03A JOB CLASS=A,MSGCLASS=A,NOTIFY=&SYSUID'.
            05  JCL2 PIC X(80) VALUE '//S1 EXEC PGM=IEBGENER'.
            05  JCL3 PIC X(80) VALUE '//SYSPRINT DD SYSOUT=A'.
            05  JCL4 PIC X(80) VALUE '//SYSIN    DD DUMMY'.
            05  JCL5 PIC X(80) VALUE
                '//SYSUT2   DD DSN=FORA03.EXPORT,DISP=SHR'.
            05  JCL6 PIC X(80) VALUE '//SYSUT1   DD *'.
            05  JCL7 PIC X(80) VALUE ALL '*'.
            05  JCL8.
              10     PIC X(11) VALUE '*   MEMBRE='.
              10 J8-MEM PIC X(8).
              10     PIC X(11) VALUE ' LIBRAIRIE='.
              10 J8-LIB PIC X(50).
            05  JCL9 PIC X(80) VALUE ALL '*'.
            05  JCLA.
              10     PIC X(27) VALUE '//         DD DISP=SHR,DSN='.
              10 JA-LIB PIC X(53) VALUE SPACE.
            05  JCLB PIC X(80) VALUE '//         DD *'.
        01 REDEFINES TABLE-JCL.
            05  JCLL PIC X(80) OCCURS 11.
        77  ITAB     PIC S9(4) COMP.
        LINKAGE SECTION.
        01  PARM.
            05 LEN            PIC S9(4) COMP.
            05 L-LIB          PIC X(80).
        PROCEDURE DIVISION USING PARM.
            IF LEN = 0
              DISPLAY 'LE NOM DE LA LIBRAIRIE N''A PAS ETE DONNE'
              MOVE 16 TO RETURN-CODE
              STOP RUN
            END-IF
            MOVE L-LIB TO J8-LIB
            OPEN OUTPUT JCL
            PERFORM TEST-STAT-JCL
            OPEN INPUT LIB
            PERFORM TEST-STAT-LIB
            PERFORM VARYING ITAB FROM 1 BY 1 UNTIL ITAB > 6
              MOVE JCLL(ITAB) TO EJCL
              WRITE EJCL
              PERFORM TEST-STAT-JCL
            END-PERFORM
            READ LIB
            PERFORM UNTIL FS-LIB = '10' OR FIN = 'O'
              PERFORM TEST-STAT-LIB
       *      DISPLAY ELIB
              MOVE 3          TO IND
              PERFORM  UNTIL IND > ENR-LEN OR FIN = 'O'
                IF ELIB(IND:8) = HIGH-VALUE
                  MOVE 'O'          TO FIN
                ELSE
                  ADD 1             TO NBMEM
                  MOVE  ELIB(IND:8) TO J8-MEM
                  MOVE SPACE        TO JA-LIB
                  STRING L-LIB       DELIMITED BY LOW-VALUE
                         '('         DELIMITED BY SIZE
                         ELIB(IND:8) DELIMITED BY SPACE
                         ')'         DELIMITED BY SIZE
                    INTO JA-LIB
                  PERFORM VARYING ITAB FROM 7 BY 1 UNTIL ITAB > 11
                    MOVE JCLL(ITAB) TO EJCL
                    WRITE EJCL
                    PERFORM TEST-STAT-JCL
                  END-PERFORM
                  IF ELIB(IND + 11:1) = X'00'
                    ADD 12          TO IND
                  ELSE
                    ADD 42          TO IND
                  END-IF
                END-IF
              END-PERFORM
              READ LIB
            END-PERFORM
            CLOSE LIB
            PERFORM TEST-STAT-LIB
            DISPLAY ' '
            DISPLAY 'NOMBRE DE MEMBRES = ' NBMEM
            STOP RUN
            .
        TEST-STAT-LIB.
            IF FS-LIB NOT = '00'
              DISPLAY 'ERREUR LIBRAIRIE ' FS-LIB
              MOVE 16 TO RETURN-CODE
              STOP RUN
            END-IF
            .
        TEST-STAT-JCL.
            IF FS-JCL NOT = '00'
              DISPLAY 'ERREUR SORTIE JCL ' FS-JCL
              MOVE 16 TO RETURN-CODE
              STOP RUN
            END-IF
            .
 MEMBER NAME  A03AMAP
 A03AMAP DFHMSD TYPE=&SYSPARM,MODE=INOUT,LANG=COBOL,EXTATT=YES,         X
                CTRL=(FREEKB,FRSET),STORAGE=AUTO,TIOAPFX=YES
 A03AMAP DFHMDI COLUMN=1,LINE=1,SIZE=(24,80)
         DFHMDF POS=(1,1),ATTRB=ASKIP,LENGTH=04,INITIAL='A03A'
         DFHMDF POS=(1,26),ATTRB=ASKIP,LENGTH=26,                       X
                INITIAL='GESTION DU FICHIER PRODUIT'
         DFHMDF POS=(1,73),ATTRB=ASKIP,LENGTH=07,INITIAL='A03AMAP'
         DFHMDF POS=(2,64),ATTRB=ASKIP,LENGTH=05,                       X
                INITIAL='DATE:'
 DATEJ   DFHMDF POS=(2,70),ATTRB=(ASKIP,FSET,BRT),LENGTH=10
         DFHMDF POS=(8,13),ATTRB=(ASKIP,BRT),LENGTH=01,INITIAL='1'
         DFHMDF POS=(8,15),ATTRB=ASKIP,LENGTH=40,                       X
                INITIAL='- CREATION D''UN PRODUIT'
         DFHMDF POS=(10,13),ATTRB=(ASKIP,BRT),LENGTH=01,INITIAL='2'
         DFHMDF POS=(10,15),ATTRB=ASKIP,LENGTH=40,                      X
                INITIAL='- INTERROGATION D''UN PRODUIT'
         DFHMDF POS=(12,13),ATTRB=(ASKIP,BRT),LENGTH=01,INITIAL='3'
         DFHMDF POS=(12,15),ATTRB=ASKIP,LENGTH=40,                      X
                INITIAL='- MODIFICATION D''UN PRODUIT'
         DFHMDF POS=(14,13),ATTRB=(ASKIP,BRT),LENGTH=01,INITIAL='4'
         DFHMDF POS=(14,15),ATTRB=ASKIP,LENGTH=40,                      X
                INITIAL='- SUPPRESSION D''UN PRODUIT'
         DFHMDF POS=(16,13),ATTRB=(ASKIP,BRT),LENGTH=01,INITIAL='5'
         DFHMDF POS=(16,15),ATTRB=ASKIP,LENGTH=40,                      X
                INITIAL='- LISTER LES PRODUITS      '
         DFHMDF POS=(19,25),ATTRB=ASKIP,LENGTH=13,                      X
                INITIAL='VOTRE CHOIX :'
 CHOIX   DFHMDF POS=(19,39),ATTRB=(UNPROT,NUM,IC,FSET),LENGTH=01,       X
                JUSTIFY=(RIGHT,ZERO)
         DFHMDF POS=(19,41),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(23,1),ATTRB=ASKIP,LENGTH=11,INITIAL='CLEAR - FIN'
 MSG     DFHMDF POS=(24,1),ATTRB=(ASKIP,BRT),LENGTH=79
         DFHMSD TYPE=FINAL
         END
 MEMBER NAME  A03DMAP
 A03DMAP DFHMSD TYPE=&SYSPARM,MODE=INOUT,LANG=COBOL,EXTATT=YES,         X
                CTRL=(FREEKB,FRSET),STORAGE=AUTO,TIOAPFX=YES
 A03DMAP DFHMDI COLUMN=1,LINE=1,SIZE=(24,80)
         DFHMDF POS=(1,1),ATTRB=ASKIP,LENGTH=04,INITIAL='A03D'
         DFHMDF POS=(1,26),ATTRB=ASKIP,LENGTH=26,                       X
                INITIAL='MODIFICATION D''UN PRODUIT'
         DFHMDF POS=(1,73),ATTRB=ASKIP,LENGTH=07,INITIAL='A03DMAP'
         DFHMDF POS=(2,64),ATTRB=ASKIP,LENGTH=05,                       X
                INITIAL='DATE:'
 DATEJ   DFHMDF POS=(2,70),ATTRB=(ASKIP,BRT),LENGTH=10

         DFHMDF POS=(8,15),ATTRB=ASKIP,LENGTH=25,                       X
                INITIAL='CODE PRODUIT           :'
 CDPRDT  DFHMDF POS=(8,41),ATTRB=(UNPROT,FSET,IC),LENGTH=04
         DFHMDF POS=(8,46)

         DFHMDF POS=(10,15),ATTRB=ASKIP,LENGTH=25,                      X
                INITIAL='TYPE MOUVEMENT         :'
 TYPMVT  DFHMDF POS=(10,41),ATTRB=(PROT,FSET),LENGTH=01
         DFHMDF POS=(10,43)

         DFHMDF POS=(12,15),ATTRB=ASKIP,LENGTH=25,                      X
                INITIAL='QUANTITE               :'
 QTEMVT  DFHMDF POS=(12,41),ATTRB=(PROT,FSET),LENGTH=02
         DFHMDF POS=(12,44)

         DFHMDF POS=(14,15),ATTRB=ASKIP,LENGTH=25,                      X
                INITIAL='PRIX UNITAIRE          :'
 PRIXE   DFHMDF POS=(14,41),ATTRB=(PROT,FSET),LENGTH=03
         DFHMDF POS=(14,45),ATTRB=(ASKIP,PROT),LENGTH=01,               X
                INITIAL=','
 PRIXD   DFHMDF POS=(14,47),ATTRB=(PROT,FSET),LENGTH=02
         DFHMDF POS=(14,50)

         DFHMDF POS=(22,1),ATTRB=ASKIP,LENGTH=18,                       X
                INITIAL='ENTER - CONTROLE'
         DFHMDF POS=(22,22),ATTRB=ASKIP,LENGTH=18,                      X
                INITIAL='PF10 - VALIDATION'

         DFHMDF POS=(23,1),ATTRB=ASKIP,LENGTH=18,                       X
                INITIAL='CLEAR - FIN'
         DFHMDF POS=(23,22),ATTRB=ASKIP,LENGTH=18,                      X
                INITIAL='PF3 - RETOUR'
 MSG     DFHMDF POS=(24,1),ATTRB=(ASKIP,BRT),LENGTH=79
         DFHMSD TYPE=FINAL
         END
 MEMBER NAME  A03APGMT
       *======================================================*
       *   MENU DE GESTION DES PRODUITS                       *
       *======================================================*

       *======================================================*
       *   I D E N T I F I C A T I O N     D I V I S I O N    *
       *======================================================*
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03APGMT.

       *======================================================*
       *   E N V I R O N M E N T       D I V I S I O N        *
       *======================================================*
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER. IBM-390.
        OBJECT-COMPUTER. IBM-390.

       *======================================================*
       *           D A T A         D I V I S I O N            *
       *======================================================*
        DATA DIVISION.
        WORKING-STORAGE SECTION.

       * ZONE POUR LA DATE DU JOUR
        77  WS-DATE-JOUR           PIC X(8).


       *------------------------------------------------------*
       *   DESCRIPTION DETAILLEE DE LA ZONE DE COMMUNICATION  *
       *------------------------------------------------------*
        01  WS-COMMAREA.
            05 PROG-PRECEDENT      PIC X(8).
            05 PROG-COURANT        PIC X(8).
            05 PROG-SUIVANT        PIC X(8).
            05                     PIC X(26).

        01 C-R                     PIC S9(8) COMP.

        01 MON-PROG                PIC X(8) VALUE 'A03APGMT'.
        01 MA-MAP                  PIC X(8) VALUE 'A03AMAP '.
        01 MA-TRX                  PIC X(4) VALUE 'A03A'.
       *------------------------------------------------------*
       *   DESCRIPTION   DE   LA   MAP                        *
       *------------------------------------------------------*
        COPY A03AMAP.

       *------------------------------------------------------*
       *   ZONE DE MESSAGE TAMPON POUR LE SEND FROM           *
       *------------------------------------------------------*
        01  MESSAGE-TXT            PIC X(79).

       *------------------------------------------------------*
       *   DESCRIPTION   DES  TOUCHES   FONCTIONS             *
       *------------------------------------------------------*
        COPY DFHAID.

       *------------------------------------------------------*
       *   DESCRIPTION   DES  ATTRIBUTS                       *
       *------------------------------------------------------*
        COPY DFHBMSCA.

       *======================================================*
       *          L I N K A G E     S E C T I O N             *
       *======================================================*
        LINKAGE SECTION.
        01  DFHCOMMAREA.
            05 LK-COMMAREA            PIC X(50).

       *======================================================*
       *     P R O C E D U R E     D I V I S I O N            *
       *======================================================*

        PROCEDURE DIVISION.
        00000-INIT-PROGRAMME.
       *---------------------*
             PERFORM  10000-DEBUT-PROGRAMME
             PERFORM  20000-TRAIT-PROGRAMME
             GOBACK
             .

        10000-DEBUT-PROGRAMME.
       *---------------------*
       *   TEST DE PREMIERE ENTREE DANS LE PROGRAMME
       *   SI NON PROGRAMME  MENU --->  ARRET  (ACCES INTERDIT)
            IF EIBCALEN = 0
               INITIALIZE      WS-COMMAREA
            ELSE
               MOVE LK-COMMAREA    TO  WS-COMMAREA
            END-IF

            MOVE  PROG-COURANT     TO  PROG-PRECEDENT
            MOVE  MON-PROG         TO  PROG-COURANT
            .

        20000-TRAIT-PROGRAMME.
       *---------------------*
            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               PERFORM  21000-TRAIT-CHARGEMENT
               PERFORM  22000-TRAIT-ENVOI
            ELSE
               PERFORM  23000-TRAIT-RECEPTION
            END-IF
            .

        21000-TRAIT-CHARGEMENT.
       *----------------------*
       *  CHARGEMENT DE LA MAP AVANT AFFICHAGE
            MOVE LOW-VALUE TO A03AMAPO

       *  SI TRAITEMENT PARTICULIER AVANT AFFICHAGE
       *    PERFORM  21100-TRAIT-SPECIFIQUE
            .

       *21100-TRAIT-SPECIFIQUE.
       *----------------------*
       *    ..............................
       *    ..............................
       *    ..............................
       *    ..............................
       *    .

        22000-TRAIT-ENVOI.
       *-----------------*
       *    AJOUT DU CALCUL DE LA DATE DU JOUR
            MOVE FUNCTION CURRENT-DATE TO WS-DATE-JOUR

       *    MISE EN FORME DE LA DATE
            STRING    WS-DATE-JOUR (7 : 2)  DELIMITED BY SIZE
                      '/'                   DELIMITED BY SIZE
                      WS-DATE-JOUR (5 : 2)  DELIMITED BY SIZE
                      '/'                   DELIMITED BY SIZE
                      WS-DATE-JOUR (1 : 4)  DELIMITED BY SIZE
                  INTO DATEJO
            END-STRING

            EXEC CICS SEND MAP    ('A03AMAP')
                           ERASE
            END-EXEC

            MOVE PROG-COURANT TO PROG-SUIVANT

            EXEC CICS RETURN TRANSID  (MA-TRX)
                             COMMAREA (WS-COMMAREA)
                             LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23000-TRAIT-RECEPTION.
       *---------------------*
            EVALUATE EIBAID
               WHEN DFHENTER
                    PERFORM  23100-TRAIT-ENTER
               WHEN DFHCLEAR
                    PERFORM  23200-TRAIT-FIN
               WHEN OTHER
                    PERFORM  90000-ERR-TOUCHE
            END-EVALUATE
            .

        23110-PROG-SUIVANT.
       *------------------*
       *    IF  ......................
       *       MOVE '?????'   TO  PROG-SUIVANT
       *    END-IF

            EXEC CICS XCTL  PROGRAM  (PROG-SUIVANT)
                            COMMAREA (WS-COMMAREA)
                            LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23100-TRAIT-ENTER.
       *------------------*
       *    ..........................
            EXEC CICS RECEIVE MAP  ('A03AMAP')
                              RESP (C-R)
            END-EXEC

            EVALUATE C-R
               WHEN DFHRESP(NORMAL)
                    CONTINUE
       *       WHEN DFHRESP(MAPFAIL)
       *            .............
               WHEN OTHER
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE

       *    ............................
       *    ...  ANALYSE DES CHAMPS  ...
       *    ............................
            EVALUATE CHOIXI
               WHEN '1'
                 MOVE 'A03CPGMT' TO PROG-SUIVANT
                 PERFORM 23110-PROG-SUIVANT
               WHEN '2'
                 MOVE 'A03BPGMT' TO PROG-SUIVANT
                 PERFORM 23110-PROG-SUIVANT
               WHEN '3'
                 MOVE 'A03DPGMT' TO PROG-SUIVANT
                 PERFORM 23110-PROG-SUIVANT
               WHEN '4'
                 MOVE 'CHOIX ACTUELLEMENT INDISPONIBLE' TO MSGO
                 PERFORM  22000-TRAIT-ENVOI
               WHEN '5'
                 MOVE 'A03EPGMT' TO PROG-SUIVANT
                 PERFORM 23110-PROG-SUIVANT
               WHEN OTHER
                 MOVE 'CHOIX INVALIDE'                  TO MSGO
                 PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        23200-TRAIT-FIN.
       *---------------*
            MOVE 'FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        90000-ERR-TOUCHE.
       *----------------*
            MOVE 'TOUCHE DE FONCTION INVALIDE' TO MSGO
            PERFORM  22000-TRAIT-ENVOI
            .

        91000-ERREUR-CICS.
       *-------------------*
            MOVE 'ERREUR CICS !!!  FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        99000-FIN-CICS.
       *--------------*
            EXEC CICS SEND FROM   (MESSAGE-TXT)
                           LENGTH (LENGTH OF MESSAGE-TXT)
                           ERASE
            END-EXEC

            EXEC CICS RETURN END-EXEC
            .
 MEMBER NAME  A03EMAP
 A03EMAP DFHMSD TYPE=&SYSPARM,MODE=INOUT,LANG=COBOL,EXTATT=YES,         X
                CTRL=(FREEKB,FRSET),STORAGE=AUTO,TIOAPFX=YES
 A03EMAP DFHMDI COLUMN=1,LINE=1,SIZE=(24,80)
         DFHMDF POS=(1,1),ATTRB=ASKIP,LENGTH=04,INITIAL='A03E'
         DFHMDF POS=(1,26),ATTRB=ASKIP,LENGTH=26,                       X
                INITIAL='   LISTE DES PRODUITS     '
         DFHMDF POS=(1,73),ATTRB=ASKIP,LENGTH=07,INITIAL='A03EMAP'
         DFHMDF POS=(2,64),ATTRB=ASKIP,LENGTH=05,                       X
                INITIAL='DATE:'
 DATEJ   DFHMDF POS=(2,70),ATTRB=(ASKIP,FSET,BRT),LENGTH=10

 PRDT    DFHMDF POS=(4,1),ATTRB=(ASKIP),LENGTH=79,OCCURS=10



         DFHMDF POS=(22,1),ATTRB=ASKIP,LENGTH=18,                       X
                INITIAL='PF7 - PREC.'
         DFHMDF POS=(22,22),ATTRB=ASKIP,LENGTH=18,                      X
                INITIAL='PF8 - SUIV.'

         DFHMDF POS=(23,1),ATTRB=ASKIP,LENGTH=18,                       X
                INITIAL='CLEAR - FIN'
         DFHMDF POS=(23,22),ATTRB=ASKIP,LENGTH=18,                      X
                INITIAL='PF3 - RETOUR'


 MSG     DFHMDF POS=(24,1),ATTRB=(ASKIP,BRT),LENGTH=79
         DFHMSD TYPE=FINAL
         END
 MEMBER NAME  A03EPGMT
       *======================================================*
       *   MENU DE GESTION DES PRODUITS                       *
       *======================================================*

       *======================================================*
       *   I D E N T I F I C A T I O N     D I V I S I O N    *
       *======================================================*
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A03EPGMT.

       *======================================================*
       *   E N V I R O N M E N T       D I V I S I O N        *
       *======================================================*
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER. IBM-390.
        OBJECT-COMPUTER. IBM-390.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.

       *======================================================*
       *           D A T A         D I V I S I O N            *
       *======================================================*
        DATA DIVISION.
        WORKING-STORAGE SECTION.

       * ZONE POUR LA DATE DU JOUR
        77  WS-DATE-JOUR           PIC X(8).

       *------------------------------------------------------*
       *   DESCRIPTION DE L'ENREGISTREMENT                    *
       *------------------------------------------------------*
        COPY FMVTPXB REPLACING ==:VAR:== BY ==ENR==.

       * PICTURE D'EDITION POUR LE PRIX
        01  WS-PRIX-X.
            05 WS-PRIX-ED          PIC ZZ9,99.

       *------------------------------------------------------*
       *   DESCRIPTION DETAILLEE DE LA ZONE DE COMMUNICATION  *
       *------------------------------------------------------*
        01  WS-COMMAREA.
            05 PROG-PRECEDENT      PIC X(8).
            05 PROG-COURANT        PIC X(8).
            05 PROG-SUIVANT        PIC X(8).
            05                     PIC X(26).

        01  C-R                    PIC S9(8) COMP.

        01  MON-PROG               PIC X(8) VALUE 'A03EPGMT'.
        01  MA-MAP                 PIC X(8) VALUE 'A03EMAP '.
        01  MA-TRX                 PIC X(4) VALUE 'A03E'.
       *------------------------------------------------------*
       *   DESCRIPTION   DE   LA   MAP                        *
       *------------------------------------------------------*
        COPY A03EMAP.

       *------------------------------------------------------*
       *   ZONE DE MESSAGE TAMPON POUR LE SEND FROM           *
       *------------------------------------------------------*
        01  MESSAGE-TXT            PIC X(79).

       *------------------------------------------------------*
       *   DESCRIPTION   DES  TOUCHES   FONCTIONS             *
       *------------------------------------------------------*
        COPY DFHAID.

       *------------------------------------------------------*
       *   DESCRIPTION   DES  ATTRIBUTS                       *
       *------------------------------------------------------*
        COPY DFHBMSCA.

       *------------------------------------------------------*
       *   VARIABLES     DE   TRAVAIL                         *
       *------------------------------------------------------*
        77  I                      PIC 9(3).
        77                         PIC 9.
            88 DATA-ENDOFDATA               VALUE 1.
        01  ENR                    PIC X(80) VALUE 'BONJOUR'.
       *======================================================*
       *          L I N K A G E     S E C T I O N             *
       *======================================================*
        LINKAGE SECTION.
        01  DFHCOMMAREA.
            05 LK-COMMAREA            PIC X(50).

       *======================================================*
       *     P R O C E D U R E     D I V I S I O N            *
       *======================================================*

        PROCEDURE DIVISION.
        00000-INIT-PROGRAMME.
       *---------------------*
             PERFORM  10000-DEBUT-PROGRAMME
             PERFORM  20000-TRAIT-PROGRAMME
             GOBACK
             .

        10000-DEBUT-PROGRAMME.
       *---------------------*
       *   TEST DE PREMIERE ENTREE DANS LE PROGRAMME
       *   SI NON PROGRAMME  MENU --->  ARRET  (ACCES INTERDIT)
            IF EIBCALEN = 0
               INITIALIZE      WS-COMMAREA
            ELSE
               MOVE LK-COMMAREA    TO  WS-COMMAREA
            END-IF

            MOVE  PROG-COURANT     TO  PROG-PRECEDENT
            MOVE  MON-PROG         TO  PROG-COURANT
            MOVE 'A03E' TO MA-TRX
            .

        20000-TRAIT-PROGRAMME.
       *---------------------*
            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               PERFORM  21000-TRAIT-CHARGEMENT
               PERFORM  22000-TRAIT-ENVOI
            ELSE
               PERFORM  23000-TRAIT-RECEPTION
            END-IF
            .

        21000-TRAIT-CHARGEMENT.
       *----------------------*
       *  CHARGEMENT DE LA MAP AVANT AFFICHAGE
            MOVE LOW-VALUE TO A03EMAPO

       *  SI TRAITEMENT PARTICULIER AVANT AFFICHAGE
            PERFORM  21100-TRAIT-SPECIFIQUE
            .

        21100-TRAIT-SPECIFIQUE.
       *----------------------*
            PERFORM 40100-LOAD-DATA
            PERFORM 22000-TRAIT-ENVOI
            .

        22000-TRAIT-ENVOI.
       *-----------------*
       *    AJOUT DU CALCUL DE LA DATE DU JOUR
            MOVE FUNCTION CURRENT-DATE TO WS-DATE-JOUR

       *    MISE EN FORME DE LA DATE
            STRING    WS-DATE-JOUR (7 : 2)  DELIMITED BY SIZE
                      '/'                   DELIMITED BY SIZE
                      WS-DATE-JOUR (5 : 2)  DELIMITED BY SIZE
                      '/'                   DELIMITED BY SIZE
                      WS-DATE-JOUR (1 : 4)  DELIMITED BY SIZE
                  INTO DATEJO
            END-STRING

            EXEC CICS SEND MAP    ('A03EMAP')
                           ERASE
            END-EXEC

            MOVE PROG-COURANT TO PROG-SUIVANT


            EXEC CICS RETURN TRANSID  (MA-TRX)
                             COMMAREA (WS-COMMAREA)
                             LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23000-TRAIT-RECEPTION.
       *---------------------*
            PERFORM 40999-RECEIVE-MAP
            EVALUATE EIBAID
               WHEN DFHENTER
                    PERFORM  23100-TRAIT-ENTER
               WHEN DFHPF3
                    PERFORM  23303-TRAIT-PF3
               WHEN DFHPF7
                    PERFORM  23307-TRAIT-PF7
               WHEN DFHPF8
                    PERFORM  23308-TRAIT-PF8
               WHEN DFHCLEAR
                    PERFORM  23200-TRAIT-CLEAR
               WHEN OTHER
                    PERFORM  90000-ERR-TOUCHE
            END-EVALUATE
            .


        23110-PROG-SUIVANT.
       *------------------*
       *    IF  ......................
       *       MOVE '?????'   TO  PROG-SUIVANT
       *    END-IF

            EXEC CICS XCTL  PROGRAM  (PROG-SUIVANT)
                            COMMAREA (WS-COMMAREA)
                            LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23100-TRAIT-ENTER.
       *------------------*
       *    ..........................
            PERFORM 40100-LOAD-DATA
            PERFORM 22000-TRAIT-ENVOI

            .

        23200-TRAIT-CLEAR.
       *---------------*
            MOVE 'FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        23303-TRAIT-PF3.
       *----------------*
            PERFORM 40000-RETOUR-MENU
            .

        23307-TRAIT-PF7.
       *----------------*
            EVALUATE ENR
                WHEN 'BONJOUR'
                    MOVE 'PAS DE PAGE PRECEDENTE'  TO MESSAGE-TXT
                WHEN 'AUREVOIR'
                    MOVE 'BONJOUR'  TO ENR
                WHEN OTHER
                    MOVE 'ERROR' TO MESSAGE-TXT
            END-EVALUATE
            PERFORM 40100-LOAD-DATA
            PERFORM 22000-TRAIT-ENVOI
            .

        23308-TRAIT-PF8.
       *----------------*
            EVALUATE ENR
                WHEN 'BONJOUR'
                    MOVE 'AUREVOIR' TO ENR
                WHEN 'AUREVOIR'
                    MOVE 'PAS DE PAGE SUIVANTE'  TO MESSAGE-TXT
                WHEN OTHER
                    MOVE 'ERROR' TO MESSAGE-TXT
            END-EVALUATE
            PERFORM 40100-LOAD-DATA
            PERFORM 22000-TRAIT-ENVOI
            .

        90000-ERR-TOUCHE.
       *----------------*
            MOVE 'TOUCHE DE FONCTION INVALIDE' TO MSGO
            PERFORM  22000-TRAIT-ENVOI
            .

        40999-RECEIVE-MAP.
       *---------------*
            EXEC CICS RECEIVE MAP  ('A03EMAP')
                              RESP (C-R)
            END-EXEC

            EVALUATE C-R
               WHEN DFHRESP(NORMAL)
                    CONTINUE
       *       WHEN DFHRESP(MAPFAIL)
       *            .............
               WHEN OTHER
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE
            .

        40000-RETOUR-MENU.
       *---------------*
            MOVE 'A03APGMT'  TO PROG-SUIVANT
            PERFORM 23110-PROG-SUIVANT
            .

        40100-LOAD-DATA.
       *-------------------*
       *    CHARGEMENT DES DONNEES DU FICHIER
            INITIALIZE I
            PERFORM UNTIL DATA-ENDOFDATA
                MOVE ENR       TO PRDTO OF DFHMS1 (I)
                ADD 1 TO I
                IF I > 10
                     SET DATA-ENDOFDATA TO TRUE
                END-IF
            END-PERFORM
            .

        91000-ERREUR-CICS.
       *-------------------*
            MOVE 'ERREUR CICS !!!  FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        99000-FIN-CICS.
       *--------------*
            EXEC CICS SEND FROM   (MESSAGE-TXT)
                           LENGTH (LENGTH OF MESSAGE-TXT)
                           ERASE
            END-EXEC

            EXEC CICS RETURN END-EXEC
            .
            .
