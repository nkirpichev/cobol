 MEMBER NAME  A04P1
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04P1.
        PROCEDURE DIVISION.
            DISPLAY 'HELLO'.
            STOP RUN.
 MEMBER NAME  A04P2
       ******************************************************************
       * DIVISION D'IDENTIFICATION DU PROGRAMME                         *
       ******************************************************************
        IDENTIFICATION DIVISION.
       * NOM DU PROGRAMME
        PROGRAM-ID. A04P2.
       * AUTEUR DU PROGRAMME
        AUTHOR. JULIEN
       * DATE DU PROGRAMME
        DATE-WRITTEN. 21/11/2023
       ******************************************************************
       * DEFINITION DE L'ENVIRONNEMENT D'EXECUTION DU PROGRAMME         *
       ******************************************************************
        ENVIRONMENT DIVISION.
       * SECTION CONFIGURATION SPECIALE DU PROGRAMME
        CONFIGURATION SECTION.
       * PARAGRAPHE DES NOMENCLATURES SP{CIALES
        SPECIAL-NAMES.
       * LE D{LIMITEUR DECIMAL EST UNE VIRGULE EN FRAN\AIS
            DECIMAL-POINT IS COMMA.
       * SECTION DE D{CLARATION DES P{RIPH{RIQUES ET FICHIERS UTILIS{S
        INPUT-OUTPUT SECTION.
       * LIEN ENTRE FICHIER UTILIS{ PAR PROGRAMME ET D{FINITION DANS JCL
        FILE-CONTROL.
       * D{FINITION DU FICHIER ET DU LIEN
            SELECT FCLIENT ASSIGN TO DDCLIENT
       * D{FINITION D'UNE VARIABLE POUR LE CODE STATUS D'OP{RATION I/O
                   FILE STATUS    IS FS.
       ******************************************************************
       * DIVISION D{FINITION DES DONN{ES DES FICHIERS                   *
       ******************************************************************
        DATA DIVISION.
       * SECTION D{FINITION DES VARIABLES DES FICHIERS
        FILE SECTION.
       * ... POUR LE FICHIER FCLIENT
        FD  FCLIENT
       * LES ENREGISTREMENTS SONT FIXES
            RECORDING MODE IS F.
       * UN ENREGISTREMENT EST UN CLIENT.
       * IL EST COMPOS{ DE 4 VARIABLES AVEC UNE LONGUEUR ET UN TYPE.
       * IL SE TERMINE PAR UN FILLER, LONGUEUR {GALE AU RESTE.
        01  ENR-CLIENT.
            05 ENR-NUMCLI     PIC 9(2).
            05 ENR-NOM        PIC X(15).
            05 ENR-PRENOM     PIC X(15).
            05 ENR-DATE-ENT   PIC 9(8).
            05                PIC X(40).
       * SECTION DES VARIABLES UTILIS{ES PAR LE PROGRAMME LUI-MêME
        WORKING-STORAGE SECTION.
       * LE CODE DE L'{TAT DU FICHIER, AVEC VALEUR D{FAUT.
        01  FS                PIC 9(2)   VALUE ZEROES.
       * UNE NOUVELLE VALEUR DE DATE FORMAT{E DE MANI}RE PLUS LISIBLE
        01  DATE-DECOMP.
            05 DATE-AA        PIC 9(4).
            05 DATE-MM        PIC 9(2).
            05 DATE-JJ        PIC 9(2).
        01  DATE-ED.
            05 DATE-JJ-ED     PIC 9(2).
            05 FILLER         PIC X      VALUE '/'.
            05 DATE-MM-ED     PIC 9(2).
            05 FILLER         PIC X      VALUE '/'.
            05 DATE-AA-ED     PIC 9(4).
       * UN COMPTEUR D'ENREGISTREMENTS.
        01  COUNTER           PIC 999    VALUE ZERO.
       * UN FLAG D{TECTANT QUAND LE FICHIER EST TERMIN{.
       * D{FINIR UNE ZONE M{MOIRE SANS NOM, PUIS LUI DONNER UN NOM QUAND
       * ELLE OBTIENT UNE VALEUR PARTICULI}RE (N'IMPORTE LAQUELLE) PERMET
       * DE LUI DONNER CETTE VALEUR QUAND ON LA SET @ TRUE PLUS TARD.
       * C'EST CE QUE L'ON APPELLE UN NOM CONDITION, D{FINI EN NIVEAU 88.
        01                     PIC X     VALUE ZEROES.
            88 FIN-FICHIER          VALUE 'F'.
       * LES OP{RATIONS SUR FICHIERS COMMENCENT ICI.
        PROCEDURE DIVISION.
       * LES LABELS DEFINIS PLUS LOIN SONT EXECUTES ICI.
       * ON COMMENCE PAR OUVRIR LE FICHIER, PUIS ON QUITTE EN CAS
       * D'ERREUR DE LECTURE.
       * ENSUITE, JUSQU'A CE QUE LA FIN DE FICHIER SOIT DETECTEE, ON
       * TRAITE CHAQUE ENREGISTREMENT, PUIS ON REFERME LE FICHIER.
       * V{RIFIER SI FIN-FICHIER EST TRUE V{RIFIE S'IL A LA MêME VALEUR
       * PAR LAQUELLE IL A {T{ D{FINIE DANS WORKING STORAGE.
             PERFORM DEBUT
             PERFORM UNTIL FIN-FICHIER
               PERFORM TRAITEMENT
               PERFORM LECTURE-FCLIENT
             END-PERFORM
             PERFORM FIN
             STOP RUN.

       * OUVERTURE ET DETECTION D'ERREUR BASIQUE.
       * PUIS ON FAIT UNE PREMI}RE LECTURE POUR VOIR SI LE FICHIER EST
       * VIDE.
        DEBUT.
            OPEN INPUT FCLIENT
            IF FS NOT =  ZEROES
               DISPLAY 'ERREUR OPEN FCLIENT, FS : ' FS
               STOP RUN
            END-IF.

            PERFORM LECTURE-FCLIENT
            IF FS = 10
               DISPLAY 'ATTENTION, FICHIER VIDE.'
               PERFORM FIN-ERREUR
            END-IF.
       * UTILIS{ POUR LIRE LE FICHIER ET EFFECTUER DES OPERATIONS
       * BASIQUES A CHAQUE LECTURE, NOTAMMENT LA D{TECTION DE FIN DE
       * FICHIER, L'INCR{MENTATION DU COMPTEUR ET UNED{TECTION D'ERREURS
       * DE LECTURE. LE SET TO TRUE DONNE @ FIN-FICHIER SA VALEUR D{FINIE
       * DANS WORKING STORAGE.
        LECTURE-FCLIENT.
            READ FCLIENT
              AT END     SET FIN-FICHIER TO TRUE
              NOT AT END ADD 1 TO COUNTER
            END-READ
            IF FS NOT = ZEROES AND 10
               DISPLAY 'ERREUR READ FCLIENT, FS : ' FS
               PERFORM FIN-ERREUR
            END-IF.
       * ON AFFICHE LES DONN{ES POUR CHAQUE ENREGISTREMENT, ET ON ADAPTE
       * LA VALEUR DE DATE AU FORMAT D'AFFICHAGE PR{C{DEMMENT {TABLI
       * EN D{PLA\ANT LES VALEURS DANS LES PICTURES D'{DITION.
        TRAITEMENT.
            DISPLAY 'NUMERO CLIENT : ' ENR-NUMCLI
            DISPLAY 'NOM CLIENT : ' ENR-NOM
            DISPLAY 'PRENOM CLIENT : ' ENR-PRENOM
            MOVE ENR-DATE-ENT TO DATE-DECOMP
            MOVE DATE-AA OF DATE-DECOMP TO DATE-AA-ED OF DATE-ED
            MOVE DATE-MM OF DATE-DECOMP TO DATE-MM-ED OF DATE-ED
            MOVE DATE-JJ OF DATE-DECOMP TO DATE-JJ-ED OF DATE-ED
            DISPLAY 'DATE ENTREE : ' DATE-ED
            DISPLAY SPACES.

       * EN CAS D'ERREUR, ON RENVOIE UN CODE FICHIER 17 ET ON FERME TOUT.
        FIN-ERREUR.
            MOVE 17 TO RETURN-CODE
            CLOSE FCLIENT
            STOP RUN.

       * SI TOUT VA BIEN, ON ARRIVE L@.
       * ON AFFICHE UNE NOTIF DE FIN DE FICHIER, LE NOMBRE
       * D'ENREGISTREMENTS TRAIT{S, PUIS ON FERME LE FICHIER.
        FIN.
            DISPLAY 'FIN DE FICHIER ATTEINTE.'
            DISPLAY 'NOMBRE D''ENREGISTREMENTS LUS : ' COUNTER
            CLOSE FCLIENT.
 MEMBER NAME  A04P3
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04P3.
        AUTHOR. JULIEN
        DATE-WRITTEN. 24/11/2023
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
       * VARIABLE SUR LAQUELLE ON VA TRAVAILLER
        01 V1  PIC X(40) VALUE 'IL ETAIT UNE FOIS UN MARCHAND DE FOIES'.

       * TABLEAU DE SEPARATION EN PAQUETS DE 8 CHARS
        01 TABLEAU REDEFINES V1.
           05 POSTE OCCURS 5 PIC X(8).

       * COMPTEUR DE CARACT}RES
        01 CNT PIC 9(2)  VALUE ZEROES.

       * INCR{MENTEUR DE BOUCLES NORMALES
        01 I PIC 9.

       * INCR{MENTEUR DE LA BOUCLE DES VOYELLES.
       * CHAQUE CHIFFRE CORRESPOND A UNE VOYELLE DIFF{RENTE.
        01 V PIC 9.

       * CONTIENT TEMPORAIREMENT UNE DES VARIABLES LORS D'UN {CHANGE DE
       * VALEURS ENTRE DEUX VARIABLES.
        01 TEMP PIC X(8).

        01 V2 PIC X(10) VALUE 'ARTHUR'.
        01 V3 PIC X(10) VALUE 'RIMBAUD'.
        01 V4 PIC X(21).

        01 V5 PIC X(24) VALUE 'AAAAA;BBBBB;CCCCC;DDDDD;'.

        01 V6 PIC X(6).
        01 V7 PIC X(6).
        01 V8 PIC X(6).
        01 V9 PIC X(6).

        01 V10 PIC 9(2).
        01 V11 PIC 9(2).
        01 V12 PIC 9(2).
        01 V13 PIC 9(2).

        01 Z1 PIC 99 VALUE 5.
        01 Z2 PIC 9V9 VALUE 3,4.
        01 Z3 PIC S999V99 VALUE -11,68.
        01 Z4 PIC S9(9)V9 VALUE ZEROES.

        01 EDITZ4 PIC +(10),9.

        01 ZACCEPT.
          05 ZA PIC X.
          05 ZB PIC X.
          05 ZC PIC X.

        01 ZD PIC X.

        01 ZACCEPT2.
          05 ZE PIC X.
          05 ZF PIC X.

        PROCEDURE DIVISION.
            PERFORM
              PERFORM  EXO-A
              PERFORM  EXO-B
              PERFORM  EXO-C
              PERFORM  EXO-E
              PERFORM  EXO-F
              PERFORM  EXO-G
              PERFORM  EXO-H
              PERFORM  EXO-I
              PERFORM  EXO-J
              PERFORM  EXO-K
              PERFORM  EXO-L
              PERFORM  EXO-M
            END-PERFORM
            STOP RUN.

        EXO-A.
            INSPECT V1 TALLYING CNT FOR ALL ' '
            DISPLAY 'NOMBRE D''ESPACES : ' CNT.

        EXO-B.
            INSPECT V1 REPLACING ALL 'FOI' BY 'OIF'
            DISPLAY V1.

        EXO-C.
            INSPECT V1 REPLACING FIRST ' ' BY '*'
            DISPLAY V1.

        EXO-E.
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 5
              DISPLAY 'POSTE ' I ' : ' POSTE(I)
              INSPECT POSTE(I) TALLYING CNT FOR LEADING ' '
              DISPLAY 'NOMBRE D''ESPACES AU DEBUT DE POSTE ' I ' : ' CNT
            END-PERFORM.

        EXO-F.
            MOVE POSTE(1) TO TEMP
            MOVE POSTE(3) TO POSTE(1)
            MOVE TEMP TO POSTE(3)
            DISPLAY 'NOUVEAU POSTE 1 : ' POSTE(1)
            DISPLAY 'NOUVEAU POSTE 3 : ' POSTE(3).

        EXO-G.
            INSPECT V1 CONVERTING 'AEIOUY' TO '123456'
            DISPLAY V1.

        EXO-H.
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 5
              MOVE ZERO TO CNT
              PERFORM VARYING V FROM 1 BY 1 UNTIL CNT GREATER 2 OR V > 6
                INSPECT POSTE(I) TALLYING CNT FOR ALL V
              END-PERFORM
              IF CNT GREATER 2
                DISPLAY 'POSTE ' I ' A AU MOINS 3 CHIFFRES : ' POSTE(I)
              END-IF
            END-PERFORM.

        EXO-I.
            STRING
              V2 DELIMITED BY SPACES
              ' ' DELIMITED BY SIZE
              V3 DELIMITED BY SPACES
              INTO V4
            END-STRING
            DISPLAY V4.

        EXO-J.
            UNSTRING
              V5 DELIMITED BY ';'
              INTO V6 COUNT IN V10
                   V7 COUNT IN V11
                   V8 COUNT IN V12
                   V9 COUNT IN V13
            END-UNSTRING
            DISPLAY V6 '    CHARS COUNT: ' V10
            DISPLAY V7 '    CHARS COUNT: ' V11
            DISPLAY V8 '    CHARS COUNT: ' V12
            DISPLAY V9 '    CHARS COUNT: ' V13.
       * VERSION ALTERNATIVE QUAND ON CONNAIT PAS LE NOMBRE DE SEGMENTS
       * A D{COUPER.
       *    PERFORM VARYING I5 FROM 1 BY 1 UNTIL I5 > 4
       *      UNSTRING V5 DELIMITED BY ';'
       *        INTO V5-5-VAR(I5) COUNT IN V5-5-CPT(I5)
       *        WITH POINTER V5-POINTER
       *      END-UNSTRING
       *      DISPLAY 'V5-V-VAR : ' V5-5-VAR(I5)
       *    END-PERFORM
        EXO-K.
       * SANS COMPUTE, SANS ARRONDI
            ADD Z1, Z2, Z3, 5 GIVING Z4
            MOVE Z4 TO EDITZ4
            DISPLAY 'A/ SANS ARRONDI : ' EDITZ4

            SUBTRACT Z3 FROM Z4 GIVING Z4
            MOVE Z4 TO EDITZ4
            DISPLAY 'B/ SANS ARRONDI : ' EDITZ4

            MULTIPLY Z3 BY Z2 GIVING Z4
            MULTIPLY Z4 BY -1 GIVING Z4
            MOVE Z4 TO EDITZ4
            DISPLAY 'C/ SANS ARRONDI : ' EDITZ4

            DIVIDE Z4 BY Z2 GIVING Z4
            ADD Z4, Z3 GIVING Z4
            MOVE Z4 TO EDITZ4
            DISPLAY 'D/ SANS ARRONDI : ' EDITZ4

       * SANS COMPUTE, AVEC ARRONDI
            INITIALIZE Z4
            ADD Z1, Z2, Z3, 5 GIVING Z4 ROUNDED
            MOVE Z4 TO EDITZ4
            DISPLAY 'A/ AVEC ARRONDI : ' EDITZ4

            SUBTRACT Z3 FROM Z4 GIVING Z4 ROUNDED
            MOVE Z4 TO EDITZ4
            DISPLAY 'B/ AVEC ARRONDI : ' EDITZ4

            MULTIPLY Z3 BY Z2 GIVING Z4 ROUNDED
            MULTIPLY Z4 BY -1 GIVING Z4 ROUNDED
            MOVE Z4 TO EDITZ4
            DISPLAY 'C/ AVEC ARRONDI : ' EDITZ4

            DIVIDE Z4 BY Z2 GIVING Z4 ROUNDED
            ADD Z4, Z3 GIVING Z4 ROUNDED
            MOVE Z4 TO EDITZ4
            DISPLAY 'D/ AVEC ARRONDI : ' EDITZ4

       * AVEC COMPUTE, SANS ARRONDI
            INITIALIZE Z4
            COMPUTE Z4 = Z1 + Z2 + Z3 + 5
            MOVE Z4 TO EDITZ4
            DISPLAY 'A/ COMPUTE SANS ARRONDI : ' EDITZ4

            COMPUTE Z4 = Z4 - Z3
            MOVE Z4 TO EDITZ4
            DISPLAY 'B/ COMPUTE SANS ARRONDI : ' EDITZ4

            COMPUTE Z4 = Z3 * Z2 * -1
            MOVE Z4 TO EDITZ4
            DISPLAY 'C/ COMPUTE SANS ARRONDI : ' EDITZ4

            COMPUTE Z4 = Z4 / Z2 + Z3
            MOVE Z4 TO EDITZ4
            DISPLAY 'D/ COMPUTE SANS ARRONDI : ' EDITZ4

       * AVEC COMPUTE, AVEC ARRONDI
            INITIALIZE Z4
            COMPUTE Z4 ROUNDED = Z1 + Z2 + Z3 + 5
            MOVE Z4 TO EDITZ4
            DISPLAY 'A/ COMPUTE AVEC ARRONDI : ' EDITZ4

            COMPUTE Z4 ROUNDED = Z4 - Z3
            MOVE Z4 TO EDITZ4
            DISPLAY 'B/ COMPUTE AVEC ARRONDI : ' EDITZ4

            COMPUTE Z4 ROUNDED = Z3 * Z2 * -1
            MOVE Z4 TO EDITZ4
            DISPLAY 'C/ COMPUTE AVEC ARRONDI : ' EDITZ4

            COMPUTE Z4 ROUNDED = Z4 / Z2 + Z3
            MOVE Z4 TO EDITZ4
            DISPLAY 'D/ COMPUTE AVEC ARRONDI : ' EDITZ4.

        EXO-L.
            ACCEPT ZACCEPT
            PERFORM UNTIL ZACCEPT = 'FIN'
              DISPLAY 'ZACCEPT ACTUEL : ' ZACCEPT
              IF ZA = 'A' AND ZB = 'B' AND ZC = 'C'
                DISPLAY 'TRT1'
              ELSE
                IF ZA NOT = 'A' OR ZB = 'B'
                  DISPLAY 'TRT2'
                ELSE
                  DISPLAY 'AUCUN TRAITEMENT'
                END-IF
              END-IF
              ACCEPT ZACCEPT
            END-PERFORM.

        EXO-M.
            ACCEPT ZD
            PERFORM UNTIL ZD = '8'
              DISPLAY 'ZD ACTUEL : ' ZD
              EVALUATE ZD
              WHEN 'D'
                DISPLAY 'TRTD'
              WHEN 'E'
              WHEN 'F'
                DISPLAY 'TRTEF'
              WHEN OTHER
                DISPLAY 'AUCUN TRAITEMENT'
              END-EVALUATE
              ACCEPT ZD
            END-PERFORM

            ACCEPT ZACCEPT2
            PERFORM UNTIL ZACCEPT2 = 'VF'
              DISPLAY 'ZACCEPT2 ACTUEL : ' ZACCEPT2
              EVALUATE ZE ALSO ZF
              WHEN 'E' ALSO 'F'
                DISPLAY 'TRTF'
              WHEN 'F' ALSO 'E'
                DISPLAY 'TRTE'
              WHEN OTHER
                DISPLAY 'AUCUN TRAITEMENT'
              END-EVALUATE
              ACCEPT ZACCEPT2
            END-PERFORM

            ACCEPT ZACCEPT2
            PERFORM UNTIL ZACCEPT2 = 'NO'
              DISPLAY 'ZACCEPT2 ACTUEL : ' ZACCEPT2
              EVALUATE TRUE
              WHEN ZE > ZF
                DISPLAY 'TRTX'
              WHEN ZE NOT = 'A'
                DISPLAY 'TRTY'
              WHEN OTHER
                DISPLAY 'AUCUN TRAITEMENT'
              END-EVALUATE
              ACCEPT ZACCEPT2
            END-PERFORM.
 MEMBER NAME  A04P4
       ******************************************************************
       * DIVISION D'IDENTIFICATION DU PROGRAMME                         *
       ******************************************************************
        IDENTIFICATION DIVISION.
       * NOM DU PROGRAMME
        PROGRAM-ID. A04P4.
       * AUTEUR DU PROGRAMME
        AUTHOR. JULIEN
       * DATE DU PROGRAMME
        DATE-WRITTEN. 28/11/2023
       ******************************************************************
       * DEFINITION DE L'ENVIRONNEMENT D'EXECUTION DU PROGRAMME         *
       ******************************************************************
        ENVIRONMENT DIVISION.
       * SECTION CONFIGURATION SPECIALE DU PROGRAMME
        CONFIGURATION SECTION.
       * PARAGRAPHE DES NOMENCLATURES SP{CIALES
        SPECIAL-NAMES.
       * LE D{LIMITEUR DECIMAL EST UNE VIRGULE EN FRAN\AIS
            DECIMAL-POINT IS COMMA.
       * SECTION DE D{CLARATION DES P{RIPH{RIQUES ET FICHIERS UTILIS{S
        INPUT-OUTPUT SECTION.
       * LIEN ENTRE FICHIER UTILIS{ PAR PROGRAMME ET D{FINITION DANS JCL
        FILE-CONTROL.
            SELECT FCLIENT ASSIGN TO DDCLIENT
                   FILE STATUS    IS FS1.
            SELECT FNEW ASSIGN TO DDNEW
                   FILE STATUS    IS FS2.
       ******************************************************************
       * DIVISION D{FINITION DES DONN{ES DES FICHIERS                   *
       ******************************************************************
        DATA DIVISION.
       * SECTION D{FINITION DES VARIABLES DES FICHIERS
        FILE SECTION.
       * ... POUR LE FICHIER FCLIENT
        FD  FCLIENT
            RECORDING MODE IS F.
       * UN ENREGISTREMENT EST UN CLIENT.
       * IL EST COMPOS{ DE 4 VARIABLES AVEC UNE LONGUEUR ET UN TYPE.
       * IL SE TERMINE PAR UN FILLER, LONGUEUR {GALE AU RESTE.
        01  ENR-CLIENT.
            05 ENR-NUMCLI     PIC 9(2).
            05 ENR-NOM        PIC X(15).
            05 ENR-PRENOM     PIC X(15).
            05 ENR-DATE-ENT   PIC 9(8).
            05                PIC X(40).

        FD  FNEW
            RECORDING MODE IS F.

        01  COP-CLIENT.
            05 COP-NUMCLI     PIC 9(2).
            05 COP-NOM        PIC X(15).
            05 COP-PRENOM     PIC X(15).
            05 COP-DATE-ENT   PIC 9(8).
            05                PIC X(40).

       * SECTION DES VARIABLES UTILIS{ES PAR LE PROGRAMME LUI-MêME
        WORKING-STORAGE SECTION.
       * LE CODE DE L'{TAT DU FICHIER, AVEC VALEUR D{FAUT.
        01  FS1               PIC 9(2)   VALUE ZEROES.
        01  FS2               PIC 9(2)   VALUE ZEROES.
       * UNE NOUVELLE VALEUR DE DATE FORMAT{E DE MANI}RE PLUS LISIBLE
        01  DATE-DECOMP.
            05 DATE-AA        PIC 9(4).
            05 DATE-MM        PIC 9(2).
            05 DATE-JJ        PIC 9(2).
        01  DATE-ED.
            05 DATE-JJ-ED     PIC 9(2).
            05 FILLER         PIC X      VALUE '/'.
            05 DATE-MM-ED     PIC 9(2).
            05 FILLER         PIC X      VALUE '/'.
            05 DATE-AA-ED     PIC 9(4).
       * UN COMPTEUR D'ENREGISTREMENTS.
        01  COUNTER           PIC 999    VALUE ZERO.
       * UN FLAG D{TECTANT QUAND LE FICHIER EST TERMIN{.
       * D{FINIR UNE ZONE M{MOIRE SANS NOM, PUIS LUI DONNER UN NOM QUAND
       * ELLE OBTIENT UNE VALEUR PARTICULI}RE (N'IMPORTE LAQUELLE) PERMET
       * DE LUI DONNER CETTE VALEUR QUAND ON LA SET @ TRUE PLUS TARD.
       * C'EST CE QUE L'ON APPELLE UN NOM CONDITION, D{FINI EN NIVEAU 88.
        01                     PIC X     VALUE ZEROES.
            88 FIN-FICHIER          VALUE 'F'.
       * LES OP{RATIONS SUR FICHIERS COMMENCENT ICI.
        PROCEDURE DIVISION.
       * LES LABELS DEFINIS PLUS LOIN SONT EXECUTES ICI.
       * ON COMMENCE PAR OUVRIR LE FICHIER, PUIS ON QUITTE EN CAS
       * D'ERREUR DE LECTURE.
       * ENSUITE, JUSQU'A CE QUE LA FIN DE FICHIER SOIT DETECTEE, ON
       * TRAITE CHAQUE ENREGISTREMENT, PUIS ON REFERME LE FICHIER.
       * V{RIFIER SI FIN-FICHIER EST TRUE V{RIFIE S'IL A LA MêME VALEUR
       * PAR LAQUELLE IL A {T{ D{FINIE DANS WORKING STORAGE.
             PERFORM DEBUT
             PERFORM UNTIL FIN-FICHIER
               PERFORM TRAITEMENT
               PERFORM LECTURE-FCLIENT
             END-PERFORM
             PERFORM FIN
             STOP RUN.

       * OUVERTURE ET DETECTION D'ERREUR BASIQUE.
       * PUIS ON FAIT UNE PREMI}RE LECTURE POUR VOIR SI LE FICHIER EST
       * VIDE.
        DEBUT.
            OPEN INPUT FCLIENT
            IF FS1 NOT = ZEROES
               DISPLAY 'ERREUR OPEN FCLIENT, FS : ' FS1
               STOP RUN
            END-IF.

            OPEN OUTPUT FNEW
            IF FS2 NOT = ZEROES
               DISPLAY 'ERREUR OPEN FNEW, FS : ' FS2
               STOP RUN
            END-IF.

            PERFORM LECTURE-FCLIENT
            IF FS1 = 10
               DISPLAY 'ATTENTION, FICHIER VIDE.'
               PERFORM FIN-ERREUR
            END-IF.
       * UTILIS{ POUR LIRE LE FICHIER ET EFFECTUER DES OPERATIONS
       * BASIQUES A CHAQUE LECTURE, NOTAMMENT LA D{TECTION DE FIN DE
       * FICHIER, L'INCR{MENTATION DU COMPTEUR ET UNED{TECTION D'ERREURS
       * DE LECTURE. LE SET TO TRUE DONNE @ FIN-FICHIER SA VALEUR D{FINIE
       * DANS WORKING STORAGE.
        LECTURE-FCLIENT.
            READ FCLIENT
              AT END     SET FIN-FICHIER TO TRUE
              NOT AT END ADD 1 TO COUNTER
            END-READ
            IF FS1 NOT = ZEROES AND 10
               DISPLAY 'ERREUR READ FCLIENT, FS : ' FS1
               PERFORM FIN-ERREUR
            END-IF.
       * ON AFFICHE LES DONN{ES POUR CHAQUE ENREGISTREMENT, ET ON ADAPTE
       * LA VALEUR DE DATE AU FORMAT D'AFFICHAGE PR{C{DEMMENT {TABLI
       * EN D{PLA\ANT LES VALEURS DANS LES PICTURES D'{DITION.
        TRAITEMENT.
            MOVE ENR-DATE-ENT TO DATE-DECOMP
            MOVE DATE-AA OF DATE-DECOMP TO DATE-AA-ED OF DATE-ED
            MOVE DATE-MM OF DATE-DECOMP TO DATE-MM-ED OF DATE-ED
            MOVE DATE-JJ OF DATE-DECOMP TO DATE-JJ-ED OF DATE-ED
            DISPLAY DATE-AA
            IF DATE-AA OF DATE-DECOMP < 2022
              MOVE ENR-CLIENT TO COP-CLIENT
              WRITE COP-CLIENT
            END-IF.
       * EN CAS D'ERREUR, ON RENVOIE UN CODE FICHIER 17 ET ON FERME TOUT.
        FIN-ERREUR.
            MOVE 17 TO RETURN-CODE
            CLOSE FCLIENT
            CLOSE FNEW
            STOP RUN.

       * SI TOUT VA BIEN, ON ARRIVE L@.
       * ON AFFICHE UNE NOTIF DE FIN DE FICHIER, LE NOMBRE
       * D'ENREGISTREMENTS TRAIT{S, PUIS ON FERME LE FICHIER.
        FIN.
            DISPLAY 'FIN DE FICHIER ATTEINTE.'
            DISPLAY 'NOMBRE D''ENREGISTREMENTS LUS : ' COUNTER
            CLOSE FCLIENT
            CLOSE FNEW.
 MEMBER NAME  A04P5
       ******************************************************************
       * DIVISION D'IDENTIFICATION DU PROGRAMME                         *
       ******************************************************************
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04P5.
        AUTHOR. JULIEN
        DATE-WRITTEN. 29/11/2023
       ******************************************************************
       * DEFINITION DE L'ENVIRONNEMENT D'EXECUTION DU PROGRAMME         *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT FIC-ENT ASSIGN TO DDENT
                   FILE STATUS    IS FS1.
            SELECT FIC-SOR ASSIGN TO DDSORT
                   FILE STATUS    IS FS2.
       ******************************************************************
       * DIVISION D{FINITION DES DONN{ES DES FICHIERS                   *
       ******************************************************************
        DATA DIVISION.
        FILE SECTION.
        FD  FIC-ENT
            RECORDING MODE IS F.
        01  ENT-CLIENT.
            05 E-CODE-PRDT    PIC X(4).
            05 FILLER         PIC X(1).
            05 E-TYPE-MVT     PIC X(1).
            05 FILLER         PIC X(1).
            05 E-QTE-MVT      PIC 9(2).
            05 FILLER         PIC X(71).

        FD  FIC-SOR
            RECORDING MODE IS F.
        01  SOR-CLIENT.
            05 S-CODE-PRDT    PIC X(4).
            05 FILLER         PIC X(1).
            05 S-TYPE-MVT     PIC X(1).
            05 FILLER         PIC X(1).
            05 S-QTE-MVT      PIC 9(2).
            05 FILLER         PIC X(71).

        WORKING-STORAGE SECTION.
        01  FS1               PIC 9(2)   VALUE ZEROES.
        01  FS2               PIC 9(2)   VALUE ZEROES.

        01  COUNTER-READ      PIC 9(2)   VALUE ZERO.
        01  COUNTER-WRITE     PIC 9(2)   VALUE ZERO.
        01  COUNTER-INVLD     PIC 9(2)   VALUE ZERO.

        01                    PIC X      VALUE ZEROES.
            88 OK                        VALUE '1'.
            88 KO                        VALUE '2'.
        01                    PIC X      VALUE ZEROES.
            88 FIN-FICHIER               VALUE '1'.
            88 FICHIER-VIDE              VALUE '2'.
        PROCEDURE DIVISION.
            PERFORM OUVERTURE

            READ FIC-ENT
              AT END SET FICHIER-VIDE TO TRUE
            END-READ

            COMPUTE COUNTER-READ = COUNTER-READ + 1.

            PERFORM UNTIL FIN-FICHIER
              PERFORM TRAITEMENT
            END-PERFORM

            PERFORM FERMETURE
            STOP RUN.

        OUVERTURE.
            OPEN INPUT FIC-ENT
            IF FS1 NOT = 00
              DISPLAY 'ERREUR OUVERTURE FICHIER ENTREE'
              STOP RUN
            END-IF

            OPEN OUTPUT FIC-SOR
            IF FS2 NOT = 00
              DISPLAY 'ERREUR OUVERTURE FICHIER SORTIE'
              STOP RUN
            END-IF.

        LECTURE.
            READ FIC-ENT
              AT END SET FIN-FICHIER TO TRUE
            END-READ

            IF NOT FIN-FICHIER
              COMPUTE COUNTER-READ = COUNTER-READ + 1
            END-IF.

        TRAITEMENT.
            PERFORM VERIF-ERREURS

            IF OK
              MOVE SPACES TO SOR-CLIENT
              MOVE E-CODE-PRDT TO S-CODE-PRDT
              MOVE E-TYPE-MVT  TO S-TYPE-MVT
              MOVE E-QTE-MVT   TO S-QTE-MVT
              WRITE SOR-CLIENT
              COMPUTE COUNTER-WRITE = COUNTER-WRITE + 1
            END-IF

            PERFORM LECTURE.

        VERIF-ERREURS.
            SET OK TO TRUE

            PERFORM ERREUR-CODE-PRDT
            PERFORM ERREUR-TYPE-MVT
            PERFORM ERREUR-QTE-MVT

            IF KO
              COMPUTE COUNTER-INVLD = COUNTER-INVLD + 1
            END-IF.

        ERREUR-CODE-PRDT.
            IF E-CODE-PRDT = SPACES
              DISPLAY 'CODE PRODUIT ERRON{ : ' E-CODE-PRDT
              SET KO TO TRUE
            END-IF.

        ERREUR-TYPE-MVT.
            IF (E-TYPE-MVT NOT = 'E') AND (E-TYPE-MVT NOT = 'S')
              DISPLAY 'TYPE MOUVEMENT ERRON{ : ' E-TYPE-MVT
              SET KO TO TRUE
            END-IF.

        ERREUR-QTE-MVT.
            IF (E-QTE-MVT NOT NUMERIC) OR (E-QTE-MVT = 0)
              DISPLAY 'LA QUANTIT{ EST {GALE @ Z{RO : ' E-QTE-MVT
              SET KO TO TRUE
            ELSE
              IF E-QTE-MVT < 0
                DISPLAY 'LA QUANTIT{ EST INFERIEURE @ Z{RO : ' E-QTE-MVT
                SET KO TO TRUE
              END-IF
            END-IF.

        FERMETURE.
            IF FIN-FICHIER
              DISPLAY 'FIN DE FICHIER ATTEINTE.'
            ELSE
              IF FICHIER-VIDE
                DISPLAY 'FICHIER VIDE.'
              END-IF
            END-IF

            CLOSE FIC-ENT
            CLOSE FIC-SOR

            DISPLAY 'ENREGISTREMENTS LUS : ' COUNTER-READ
            DISPLAY 'ENREGISTREMENTS COPI{S : ' COUNTER-WRITE
            DISPLAY 'ERREURS : ' COUNTER-INVLD

            STOP RUN.
 MEMBER NAME  A04P5A
       ******************************************************************
       * DIVISION D'IDENTIFICATION DU PROGRAMME                         *
       ******************************************************************
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04P5A.
        AUTHOR. JULIEN
        DATE-WRITTEN. 29/11/2023
       ******************************************************************
       * DEFINITION DE L'ENVIRONNEMENT D'EXECUTION DU PROGRAMME         *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT FIC-ENT ASSIGN TO DDENT
                   FILE STATUS    IS FS1.
            SELECT FIC-SOR ASSIGN TO DDSORT
                   FILE STATUS    IS FS2.
       ******************************************************************
       * DIVISION D{FINITION DES DONN{ES DES FICHIERS                   *
       ******************************************************************
        DATA DIVISION.
        FILE SECTION.
        FD  FIC-ENT
            RECORDING MODE IS F.
        01  ENT-CLIENT.
            05 E-CODE-PRDT    PIC X(4).
            05 FILLER         PIC X(1).
            05 E-TYPE-MVT     PIC X(1).
            05 FILLER         PIC X(1).
            05 E-QTE-MVT      PIC 9(2).
            05 FILLER         PIC X(71).

        FD  FIC-SOR
            RECORDING MODE IS F.
        01  SOR-CLIENT.
            05 S-CODE-PRDT    PIC X(4).
            05 FILLER         PIC X(1).
            05 S-TYPE-MVT     PIC X(1).
            05 FILLER         PIC X(1).
            05 S-QTE-MVT      PIC 9(2).
            05 FILLER         PIC X(1).
       * COMP-3 TOUT COURT MARCHE AUSSI.
            05 S-PRI-MVT      PIC 9(3)V9(2) USAGE IS COMP-3.
            05 FILLER         PIC X(67).

        WORKING-STORAGE SECTION.
        01  FS1               PIC 9(2)   VALUE ZEROES.
        01  FS2               PIC 9(2)   VALUE ZEROES.

        01  COUNTER-READ      PIC 9(2)   VALUE ZERO.
        01  COUNTER-WRITE     PIC 9(2)   VALUE ZERO.
        01  COUNTER-INVLD     PIC 9(2)   VALUE ZERO.

        77  I                 PIC 9.

        01  PRX-TOT-PROD      PIC 9(6)V9(6) VALUE ZEROES.
        01  PRX-TOT-PROD-ED   PIC Z(5)9,9(6).

        01  PRX-TOT-STK       PIC 9(6)V9(6) VALUE ZEROES.
        01  PRX-TOT-STK-ED    PIC Z(5)9,9(6).

        01  TAB.
            05                PIC X(4)   VALUE 'Z001'.
            05                PIC 999V99 VALUE 51,69.
            05                PIC X(4)   VALUE 'A001'.
            05                PIC 999V99 VALUE  4,05.
            05                PIC X(4)   VALUE 'A006'.
            05                PIC 999V99 VALUE 100,00.
            05                PIC X(4)   VALUE 'D110'.
            05                PIC 999V99 VALUE 581,55.
            05                PIC X(4)   VALUE 'R001'.
            05                PIC 999V99 VALUE 78,00.

        01  REDEFINES TAB.
            05 POSTE OCCURS 5.
               10  P-CODE-PRD PIC X(4).
               10  P-PRIX-UNI PIC 9(3)V99.

        77                    PIC X      VALUE ZEROES.
            88 OK                        VALUE '1'.
            88 KO                        VALUE '2'.
        77                    PIC X      VALUE ZEROES.
            88 FIN-FICHIER               VALUE '1'.
            88 FICHIER-VIDE              VALUE '2'.
        77                    PIC X      VALUE ZEROES.
            88 CODE-FOUND                VALUE '1'.
            88 CODE-NOT-FOUND            VALUE '2'.
        PROCEDURE DIVISION.
            PERFORM OUVERTURE
            PERFORM LECTURE-INITIALE

            PERFORM UNTIL FIN-FICHIER OR FICHIER-VIDE
              PERFORM TRAITEMENT
            END-PERFORM

            PERFORM FERMETURE
            STOP RUN.

        OUVERTURE.
            OPEN INPUT FIC-ENT
            IF FS1 NOT = 00
              DISPLAY 'ERREUR OUVERTURE FICHIER ENTREE'
              STOP RUN
            END-IF

            OPEN OUTPUT FIC-SOR
            IF FS2 NOT = 00
              DISPLAY 'ERREUR OUVERTURE FICHIER SORTIE'
              STOP RUN
            END-IF.

        LECTURE-INITIALE.
            READ FIC-ENT
              AT END SET FICHIER-VIDE TO TRUE
            END-READ

            IF FS1 NOT = 00 AND FS1 NOT = 10
              DISPLAY 'ERREUR LECTURE FICHIER ENTREE'
              STOP RUN
            END-IF

            IF NOT FICHIER-VIDE
              COMPUTE COUNTER-READ = COUNTER-READ + 1
            END-IF.

        LECTURE-SUBSEQUENTE.
            READ FIC-ENT
              AT END SET FIN-FICHIER TO TRUE
            END-READ

            IF FS1 NOT = 00 AND FS1 NOT = 10
              DISPLAY 'ERREUR LECTURE FICHIER ENTREE'
              STOP RUN
            END-IF

            IF NOT FIN-FICHIER
              COMPUTE COUNTER-READ = COUNTER-READ + 1
            END-IF.

        TRAITEMENT.
            PERFORM VERIF-ERREURS

            IF OK
              MOVE SPACES TO SOR-CLIENT
              PERFORM VERIF-PRIX
              MOVE E-CODE-PRDT  TO S-CODE-PRDT
              MOVE E-TYPE-MVT   TO S-TYPE-MVT
              MOVE E-QTE-MVT    TO S-QTE-MVT
              WRITE SOR-CLIENT
              IF FS2 NOT = 00
                DISPLAY 'ERREUR ECRITURE FICHIER SORTIE'
                STOP RUN
              END-IF
              COMPUTE COUNTER-WRITE = COUNTER-WRITE + 1
            END-IF

            PERFORM LECTURE-SUBSEQUENTE.

        VERIF-ERREURS.
            SET OK TO TRUE

            PERFORM ERREUR-CODE-PRDT
            PERFORM ERREUR-TYPE-MVT
            PERFORM ERREUR-QTE-MVT

            IF KO
              COMPUTE COUNTER-INVLD = COUNTER-INVLD + 1
            END-IF.

        ERREUR-CODE-PRDT.
            IF E-CODE-PRDT = SPACES
              DISPLAY 'CODE PRODUIT ERRON{ : ' E-CODE-PRDT
              SET KO TO TRUE
            END-IF.

        ERREUR-TYPE-MVT.
            IF (E-TYPE-MVT NOT = 'E') AND (E-TYPE-MVT NOT = 'S')
              DISPLAY 'TYPE MOUVEMENT ERRON{ : ' E-TYPE-MVT
              SET KO TO TRUE
            END-IF.

        ERREUR-QTE-MVT.
            IF (E-QTE-MVT NOT NUMERIC) OR (E-QTE-MVT = 0)
              DISPLAY 'LA QUANTIT{ EST {GALE @ Z{RO : ' E-QTE-MVT
              SET KO TO TRUE
            ELSE
              IF E-QTE-MVT < 0
                DISPLAY 'LA QUANTIT{ EST INFERIEURE @ Z{RO : ' E-QTE-MVT
                SET KO TO TRUE
              END-IF
            END-IF.

        VERIF-PRIX.
            SET CODE-NOT-FOUND TO TRUE

            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 5 OR CODE-FOUND
              IF E-CODE-PRDT = P-CODE-PRD(I)
                SET CODE-FOUND TO TRUE
                MOVE P-PRIX-UNI(I) TO S-PRI-MVT
                COMPUTE PRX-TOT-PROD ROUNDED = P-PRIX-UNI(I) * E-QTE-MVT
                MOVE PRX-TOT-PROD TO PRX-TOT-PROD-ED
                DISPLAY 'PRIX TOTAL PRODUIT ' E-CODE-PRDT ' : '
       -        PRX-TOT-PROD-ED
                COMPUTE PRX-TOT-STK ROUNDED = PRX-TOT-STK + PRX-TOT-PROD
              END-IF
            END-PERFORM

            IF CODE-NOT-FOUND
              INITIALIZE S-PRI-MVT
              DISPLAY 'CODE PRODUIT INEXISTANT EN TABLE : ' E-CODE-PRDT
            END-IF.

        FERMETURE.
            IF FIN-FICHIER
              DISPLAY 'FIN DE FICHIER ATTEINTE.'
            ELSE
              IF FICHIER-VIDE
                DISPLAY 'FICHIER VIDE.'
              END-IF
            END-IF

            CLOSE FIC-ENT
            CLOSE FIC-SOR

            MOVE PRX-TOT-STK TO PRX-TOT-STK-ED
            DISPLAY 'PRIX TOTAL DU STOCK : ' PRX-TOT-STK-ED

            DISPLAY 'ENREGISTREMENTS LUS : ' COUNTER-READ
            DISPLAY 'ENREGISTREMENTS COPI{S : ' COUNTER-WRITE
            DISPLAY 'ERREURS : ' COUNTER-INVLD

            STOP RUN.
 MEMBER NAME  A04P6
       ******************************************************************
       * DIVISION D'IDENTIFICATION DU PROGRAMME                         *
       ******************************************************************
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04P6.
        AUTHOR. JULIEN
        DATE-WRITTEN. 01/12/2023
       ******************************************************************
       * DEFINITION DE L'ENVIRONNEMENT D'EXECUTION DU PROGRAMME         *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT FIC-ENT ASSIGN TO DDENT
                   FILE STATUS    IS FS1.
            SELECT FIC-SOR ASSIGN TO DDSORT
                   FILE STATUS    IS FS2.
       ******************************************************************
       * DIVISION D{FINITION DES DONN{ES DES FICHIERS                   *
       ******************************************************************
        DATA DIVISION.
        FILE SECTION.
        FD  FIC-ENT
            RECORDING MODE IS F.
        01  ENT-CLIENT.
            05 E-CODE-PRDT    PIC X(4).
            05 FILLER         PIC X(1).
            05 E-TYPE-MVT     PIC X(1).
            05 FILLER         PIC X(1).
            05 E-QTE-MVT      PIC 9(2).
            05 FILLER         PIC X(71).

        FD  FIC-SOR
            RECORDING MODE IS F.
        01  SOR-CLIENT.
            05 S-CODE-PRDT       PIC X(4).
            05 FILLER            PIC X(1).
            05 S-TYPE-MVT        PIC X(1).
            05 FILLER            PIC X(1).
            05 S-QTE-MVT         PIC 9(3).
            05 FILLER            PIC X(70).

        WORKING-STORAGE SECTION.
        01  FS1                  PIC 9(2)      VALUE ZEROES.
        01  FS2                  PIC 9(2)      VALUE ZEROES.

        01  CURRENT-CODE-PDT     PIC X(4)      VALUE SPACES.
        01  CURRENT-STOCK        PIC S999      VALUE ZEROES.
        01  CURRENT-STOCK-ED     PIC 999.

        01  COUNTER-CURRENT-PRDT PIC 9(2)      VALUE ZERO.

        77  I                    PIC 9.

        01  TAB.
            05                   PIC X(4)      VALUE 'Z001'.
            05                   PIC 9(5)V99   VALUE 51,69.
            05                   PIC X(4)      VALUE 'A001'.
            05                   PIC 9(5)V99   VALUE  4,05.
            05                   PIC X(4)      VALUE 'A006'.
            05                   PIC 9(5)V99   VALUE 100,00.
            05                   PIC X(4)      VALUE 'D110'.
            05                   PIC 9(5)V99   VALUE 581,55.
            05                   PIC X(4)      VALUE 'R001'.
            05                   PIC 9(5)V99   VALUE 78,00.

        01  REDEFINES TAB.
            05 POSTE OCCURS 5.
               10  P-CODE-PRD    PIC X(4).
               10  P-PRIX-UNI    PIC 9(5)V99.

        01  REDEFINES TAB.
            05 CHARS-LISTE OCCURS 5.
               10  CHAR-1        PIC X.
               10  CHAR-2        PIC X.
               10  CHAR-3        PIC X.
               10  CHAR-4        PIC X.
               10  FILLER        PIC X(7).

        01  P-PRIX-UNI-ED        PIC Z(4)9,99.

        77                       PIC X         VALUE ZEROES.
            88 FIN-FICHIER                     VALUE '1'.
            88 FICHIER-VIDE                    VALUE '2'.

        PROCEDURE DIVISION.
            PERFORM OUVERTURE
            PERFORM LECTURE-INITIALE

            IF NOT FICHIER-VIDE
              PERFORM TRAITEMENT-INITIAL
            END-IF

            PERFORM UNTIL FIN-FICHIER OR FICHIER-VIDE
              PERFORM TRAITEMENT-SUBSEQUENT
            END-PERFORM

            IF FIN-FICHIER
              PERFORM DERNIER-TRAITEMENT
              PERFORM MODIF-PRIX
            END-IF

            PERFORM FERMETURE
            STOP RUN.

        OUVERTURE.
            OPEN INPUT FIC-ENT
            IF FS1 NOT = 00
              DISPLAY 'ERREUR OUVERTURE FICHIER ENTREE'
              STOP RUN
            END-IF

            OPEN OUTPUT FIC-SOR
            IF FS2 NOT = 00
              DISPLAY 'ERREUR OUVERTURE FICHIER SORTIE'
              STOP RUN
            END-IF.

        LECTURE-INITIALE.
            READ FIC-ENT
              AT END SET FICHIER-VIDE TO TRUE
            END-READ

            IF FS1 NOT = 00 AND FS1 NOT = 10
              DISPLAY 'ERREUR LECTURE FICHIER ENTREE'
              STOP RUN
            END-IF.

        TRAITEMENT-INITIAL.
            MOVE E-CODE-PRDT TO CURRENT-CODE-PDT
            ADD 1 TO COUNTER-CURRENT-PRDT
            PERFORM CALCUL-MOUVEMENT
            PERFORM LECTURE-SUBSEQUENTE.

        LECTURE-SUBSEQUENTE.
            READ FIC-ENT
              AT END SET FIN-FICHIER TO TRUE
            END-READ

            IF FS1 NOT = 00 AND FS1 NOT = 10
              DISPLAY 'ERREUR LECTURE FICHIER ENTREE'
              STOP RUN
            END-IF.

        TRAITEMENT-SUBSEQUENT.
            IF E-CODE-PRDT = CURRENT-CODE-PDT
              ADD 1 TO COUNTER-CURRENT-PRDT
              PERFORM CALCUL-MOUVEMENT
            ELSE
              DISPLAY 'NOMBRE D''ENREGISTREMENTS POUR '
       -      CURRENT-CODE-PDT ' : ' COUNTER-CURRENT-PRDT
              MOVE CURRENT-STOCK TO CURRENT-STOCK-ED
              IF CURRENT-STOCK < 0
                DISPLAY CURRENT-CODE-PDT ' S ' CURRENT-STOCK-ED
              ELSE
                DISPLAY CURRENT-CODE-PDT ' E ' CURRENT-STOCK-ED
              END-IF
              PERFORM ECRITURE
              MOVE E-CODE-PRDT TO CURRENT-CODE-PDT
              MOVE 1 TO COUNTER-CURRENT-PRDT
              INITIALIZE CURRENT-STOCK
              PERFORM CALCUL-MOUVEMENT
            END-IF

            PERFORM LECTURE-SUBSEQUENTE.

        CALCUL-MOUVEMENT.
            IF E-TYPE-MVT = 'E'
              ADD E-QTE-MVT TO CURRENT-STOCK
            ELSE
              SUBTRACT E-QTE-MVT FROM CURRENT-STOCK
            END-IF.

        ECRITURE.
            MOVE SPACES TO SOR-CLIENT
            MOVE CURRENT-CODE-PDT TO S-CODE-PRDT
            IF CURRENT-STOCK < 0
              MOVE 'S' TO S-TYPE-MVT
            ELSE
              MOVE 'E' TO S-TYPE-MVT
            END-IF
            MOVE CURRENT-STOCK-ED TO S-QTE-MVT
            WRITE SOR-CLIENT.

        DERNIER-TRAITEMENT.
            IF FIN-FICHIER
              DISPLAY 'NOMBRE D''ENREGISTREMENTS POUR '
       -      CURRENT-CODE-PDT ' : ' COUNTER-CURRENT-PRDT
              MOVE CURRENT-STOCK TO CURRENT-STOCK-ED
              IF CURRENT-STOCK < 0
                DISPLAY CURRENT-CODE-PDT ' S ' CURRENT-STOCK-ED
              ELSE
                DISPLAY CURRENT-CODE-PDT ' E ' CURRENT-STOCK-ED
              END-IF
            PERFORM ECRITURE
            END-IF.

        MODIF-PRIX.
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 5
              IF CHAR-1 OF CHARS-LISTE(I) = 'A'
                COMPUTE P-PRIX-UNI(I) ROUNDED = P-PRIX-UNI(I) * 1,10
              ELSE
                IF CHAR-1 OF CHARS-LISTE(I) = 'D'
                  COMPUTE P-PRIX-UNI(I) ROUNDED = P-PRIX-UNI(I) - 50
                END-IF
              END-IF
            END-PERFORM.

        FERMETURE.
            IF FIN-FICHIER
              DISPLAY 'FIN DE FICHIER ATTEINTE.'
            ELSE
              IF FICHIER-VIDE
                DISPLAY 'FICHIER VIDE.'
              END-IF
            END-IF

            DISPLAY '*** NOUVEAUX PRIX ***'
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 5
              MOVE P-PRIX-UNI(I) TO P-PRIX-UNI-ED
              DISPLAY P-CODE-PRD(I) ' : ' P-PRIX-UNI-ED
            END-PERFORM

            CLOSE FIC-ENT
            CLOSE FIC-SOR

            STOP RUN.
 MEMBER NAME  A04P7
       ******************************************************************
       * DIVISION D'IDENTIFICATION DU PROGRAMME                         *
       ******************************************************************
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04P7.
        AUTHOR. JULIEN
        DATE-WRITTEN. 04/12/2023
       ******************************************************************
       * DEFINITION DE L'ENVIRONNEMENT D'EXECUTION DU PROGRAMME         *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT FIC-ENT1 ASSIGN TO DDENT1
                   FILE STATUS    IS FS1.
            SELECT FIC-ENT2 ASSIGN TO DDENT2
                   FILE STATUS    IS FS2.
            SELECT FIC-SOR ASSIGN TO DDSORT
                   FILE STATUS    IS FS3.
       ******************************************************************
       * DIVISION D{FINITION DES DONN{ES DES FICHIERS                   *
       ******************************************************************
        DATA DIVISION.
        FILE SECTION.
        FD  FIC-ENT1
            RECORDING MODE IS F.
        01  ENT-CLIENT.
            05 E-CODE-PRD    PIC X(4).
            05 FILLER         PIC X(1).
            05 E-TYPE-MVT     PIC X(1).
            05 FILLER         PIC X(1).
            05 E-QTE-MVT      PIC 9(2).
            05 FILLER         PIC X(71).

        FD  FIC-ENT2
            RECORDING MODE IS F.
        01  ENT-PRIX.
            05 E-CODE-PRD    PIC X(4).
            05 FILLER         PIC X(1).
            05 E-PRIX-UNIT    PIC 999V99.
            05 FILLER         PIC X(70).

        FD  FIC-SOR
            RECORDING MODE IS F.
        01  SOR-CLIENT.
            05 S-CODE-PRD       PIC X(4).
            05 FILLER            PIC X(1).
            05 S-TYPE-MVT        PIC X(1).
            05 FILLER            PIC X(1).
            05 S-QTE-MVT         PIC 9(2).
            05 FILLER            PIC X(1).
            05 S-PRIX-UNIT       PIC 999V99.
            05 FILLER            PIC X(65).

        WORKING-STORAGE SECTION.
        01  FS1                  PIC 9(2)      VALUE ZEROES.
        01  FS2                  PIC 9(2)      VALUE ZEROES.
        01  FS3                  PIC 9(2)      VALUE ZEROES.

        77                       PIC X         VALUE ZEROES.
            88 FIN-FICHIER1                    VALUE '1'.

        77                       PIC X         VALUE ZEROES.
            88 FIN-FICHIER2                    VALUE '1'.

        PROCEDURE DIVISION.
            PERFORM OUVERTURE-FICHIERS
            PERFORM LECTURES-INITIALES

       * LE FAIT DE METTRE HIGH-VALUE DANS LE CODE-PRODUIT D'UN FICHIER
       * TERMINE ASSURE QU'IL SERA TOUJOURS PLUS GRAND QUE L'AUTRE
       * CODE-PRODUIT, CE QUI VEUT DIRE QUE LE TRAITEMENT NORMAL PEUT
       * AVOIR LIEU JUSQU'@ LA FIN DES DEUX FICHIERS, PAS BESOIN DE
       * FAIRE DES TRAITEMENTS ALTERNATIFS APRES QUE L'UN SE TERMINE.
       * LES CONDITIONS DU TRAITEMENT NORMAL SERONT TOUJOURS APPLICABLES.
            PERFORM UNTIL FIN-FICHIER1 AND FIN-FICHIER2
              PERFORM TRAITEMENT
            END-PERFORM

            DISPLAY 'FINS DES FICHIERS ENTREE ATTEINTES.'

            PERFORM FERMETURE.

        OUVERTURE-FICHIERS.
            OPEN INPUT FIC-ENT1

            IF FS1 NOT = 00
              DISPLAY 'ERREUR OUVERTURE FICHIER D''ENTREE 1'
              STOP RUN
            END-IF

            OPEN INPUT FIC-ENT2

            IF FS2 NOT = 00
              DISPLAY 'ERREUR OUVERTURE FICHIER D''ENTREE 2'
              STOP RUN
            END-IF

            OPEN OUTPUT FIC-SOR

            IF FS3 NOT = 00
              DISPLAY 'ERREUR OUVERTURE FICHIER DE SORTIE'
              STOP RUN
            END-IF.

         LECTURES-INITIALES.
            PERFORM LECTURE-FICHIER1
            PERFORM LECTURE-FICHIER2

            IF FIN-FICHIER1 AND FIN-FICHIER2
              DISPLAY 'LES FICHIERS D''ENTREE SONT VIDES.'
              PERFORM FERMETURE
            END-IF.

         LECTURE-DEUX-FICHIERS.
            PERFORM LECTURE-FICHIER1
            PERFORM LECTURE-FICHIER2.

         LECTURE-FICHIER1.
            READ FIC-ENT1
              AT END
                SET FIN-FICHIER1 TO TRUE
                MOVE HIGH-VALUE TO E-CODE-PRD OF ENT-CLIENT
            END-READ

            IF FS1 NOT = 00 AND FS1 NOT = 10
              DISPLAY 'ERREUR LECTURE FICHIER D''ENTREE 1'
              PERFORM FERMETURE
            END-IF.

         LECTURE-FICHIER2.
            READ FIC-ENT2
              AT END
                SET FIN-FICHIER2 TO TRUE
                MOVE HIGH-VALUE TO E-CODE-PRD OF ENT-PRIX
            END-READ

            IF FS2 NOT = 00 AND FS2 NOT = 10
              DISPLAY 'ERREUR LECTURE FICHIER D''ENTREE 2'
              PERFORM FERMETURE
            END-IF.

         TRAITEMENT.
            MOVE SPACES TO SOR-CLIENT

            IF E-CODE-PRD OF ENT-CLIENT = E-CODE-PRD OF ENT-PRIX
              MOVE E-CODE-PRD OF ENT-CLIENT TO S-CODE-PRD
              MOVE E-TYPE-MVT OF ENT-CLIENT TO S-TYPE-MVT
              MOVE E-QTE-MVT OF ENT-CLIENT TO S-QTE-MVT
              MOVE E-PRIX-UNIT OF ENT-PRIX TO S-PRIX-UNIT
              WRITE SOR-CLIENT
              PERFORM LECTURE-DEUX-FICHIERS
            ELSE
              IF E-CODE-PRD OF ENT-CLIENT < E-CODE-PRD OF ENT-PRIX
                MOVE E-CODE-PRD OF ENT-CLIENT TO S-CODE-PRD
                MOVE E-TYPE-MVT OF ENT-CLIENT TO S-TYPE-MVT
                MOVE E-QTE-MVT OF ENT-CLIENT TO S-QTE-MVT
                MOVE ZEROES TO S-PRIX-UNIT
                WRITE SOR-CLIENT
                PERFORM LECTURE-FICHIER1
              ELSE
                IF E-CODE-PRD OF ENT-CLIENT > E-CODE-PRD OF ENT-PRIX
                  MOVE E-CODE-PRD OF ENT-PRIX TO S-CODE-PRD
                  MOVE 'E' TO S-TYPE-MVT
                  MOVE ZEROES TO S-QTE-MVT
                  MOVE E-PRIX-UNIT TO S-PRIX-UNIT
                  WRITE SOR-CLIENT
                  PERFORM LECTURE-FICHIER2
                END-IF
              END-IF
            END-IF.

         FERMETURE.
       *  ON PEUT LES ECRIRE EN UNE LIGNE AUSSI.
            CLOSE FIC-ENT1 FIC-ENT2 FIC-SOR
            STOP RUN.
 MEMBER NAME  A04P8
       ******************************************************************
       * DIVISION D'IDENTIFICATION DU PROGRAMME                         *
       ******************************************************************
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04P8.
        AUTHOR. JULIEN
        DATE-WRITTEN. 04/12/2023
       ******************************************************************
       * DEFINITION DE L'ENVIRONNEMENT D'EXECUTION DU PROGRAMME         *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT FIC-ENT ASSIGN TO DDENT
                   FILE STATUS    IS FS.
       ******************************************************************
       * DIVISION D{FINITION DES DONN{ES DES FICHIERS                   *
       ******************************************************************
        DATA DIVISION.
        FILE SECTION.
        FD  FIC-ENT
            RECORDING MODE IS F.
        01  ENT-CLIENT.
            05 STOCK-ENR.
              10 E-ENR-TYPE   PIC 9.
              10 FILLER       PIC X(1).
              10 E-CODE-PRD   PIC X(4).
              10 FILLER       PIC X(1).
              10 E-TYPE-MVT   PIC X(1).
              10 FILLER       PIC X(1).
              10 E-QTE-MVT    PIC 9(2).
              10 FILLER       PIC X(69).

            05 PRICE-ENR REDEFINES STOCK-ENR.
              10 E-ENR-TYPE   PIC 9.
              10 FILLER       PIC X(1).
              10 E-CODE-PRD   PIC X(4).
              10 FILLER       PIC X(1).
              10 E-PRICE-PRD  PIC 999V99.
              10 FILLER       PIC X(68).

        WORKING-STORAGE SECTION.
        77  FS                  PIC 9(2)      VALUE ZEROES.

        01 CODE-PRD             PIC X(4).
        01 TYPE-MVT             PIC X.
        01 QTE-MVT              PIC 99.

        77                       PIC X         VALUE ZEROES.
            88 FIN-FICHIER                    VALUE '1'.

        PROCEDURE DIVISION.
            PERFORM OUVERTURE-FICHIER
            PERFORM LECTURE

            PERFORM UNTIL FIN-FICHIER
              PERFORM TRAITEMENT
            END-PERFORM

            DISPLAY 'FINS DU FICHIER ENTREE ATTEINTE.'

            PERFORM FERMETURE.

        OUVERTURE-FICHIER.
            OPEN INPUT FIC-ENT

            IF FS NOT = 00
              DISPLAY 'ERREUR OUVERTURE FICHIER D''ENTREE'
              STOP RUN
            END-IF.

        LECTURE.
            READ FIC-ENT
              AT END SET FIN-FICHIER TO TRUE
            END-READ

            IF FS NOT = 00 AND FS NOT = 10
              DISPLAY 'ERREUR LECTURE FICHIER ENTREE.'
              STOP RUN
            END-IF.

        TRAITEMENT.
            IF E-ENR-TYPE OF STOCK-ENR = 1
              MOVE E-CODE-PRD OF STOCK-ENR TO CODE-PRD
              MOVE E-TYPE-MVT OF STOCK-ENR TO TYPE-MVT
              MOVE E-QTE-MVT  OF STOCK-ENR TO QTE-MVT
            ELSE
              DISPLAY CODE-PRD ' ' TYPE-MVT ' ' QTE-MVT ' ' E-PRICE-PRD
            END-IF

            PERFORM LECTURE.

        FERMETURE.
            CLOSE FIC-ENT
            STOP RUN.
 MEMBER NAME  A04P9
       ******************************************************************
       * DIVISION D'IDENTIFICATION DU PROGRAMME                         *
       ******************************************************************
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04P9.
        AUTHOR. JULIEN
        DATE-WRITTEN. 05/12/2023
       ******************************************************************
       * DEFINITION DE L'ENVIRONNEMENT D'EXECUTION DU PROGRAMME         *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
       ******************************************************************
       * DIVISION D{FINITION DES DONN{ES DES FICHIERS                   *
       ******************************************************************
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01 Z2-SP2.
            05 Z2-DATE1          PIC 9(8).
            05 Z2-DATE2          PIC 9(8).
            05 Z2-CODRET         PIC 9.
            05 Z2-NBJOURS        PIC 9(5).

        PROCEDURE DIVISION.
            MOVE 20230315 TO Z2-DATE1
            MOVE 20230524 TO Z2-DATE2
            CALL 'A04SP2' USING Z2-SP2
            DISPLAY Z2-CODRET ' ' Z2-NBJOURS
            STOP RUN.
 MEMBER NAME  A04SP2
       ******************************************************************
       * DIVISION D'IDENTIFICATION DU PROGRAMME                         *
       ******************************************************************
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04SP2.
        AUTHOR. JULIEN
        DATE-WRITTEN. 05/12/2023
       ******************************************************************
       * DEFINITION DE L'ENVIRONNEMENT D'EXECUTION DU PROGRAMME         *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
       ******************************************************************
       * DIVISION D{FINITION DES DONN{ES DES FICHIERS                   *
       ******************************************************************
        DATA DIVISION.
        LINKAGE SECTION.
        01 Z2-SP2.
            05 Z2-DATE1          PIC 9(8).
            05 Z2-DATE2          PIC 9(8).
            05 Z2-CODRET         PIC 9.
            05 Z2-NBJOURS        PIC 9(5).

        PROCEDURE DIVISION USING Z2-SP2.
            IF Z2-DATE1 IS NUMERIC AND Z2-DATE2 IS NUMERIC
              COMPUTE Z2-NBJOURS =
              FUNCTION INTEGER-OF-DATE (Z2-DATE2) -
              FUNCTION INTEGER-OF-DATE (Z2-DATE1)
              MOVE 0 TO Z2-CODRET
            ELSE
              MOVE 1 TO Z2-CODRET
            END-IF

            GOBACK.
 MEMBER NAME  A04P10
       ******************************************************************
       * DIVISION D'IDENTIFICATION DU PROGRAMME                         *
       ******************************************************************
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04P10.
        AUTHOR. JULIEN
        DATE-WRITTEN. 05/12/2023
       ******************************************************************
       * DEFINITION DE L'ENVIRONNEMENT D'EXECUTION DU PROGRAMME         *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT FIC-ENT ASSIGN TO DDENT
                   ORGANIZATION IS INDEXED
                   ACCESS MODE IS RANDOM
                   RECORD KEY IS ENR-CODE-PRDT
                   FILE STATUS    IS FS1.
       ******************************************************************
       * DIVISION D{FINITION DES DONN{ES DES FICHIERS                   *
       ******************************************************************
        DATA DIVISION.
        FILE SECTION.
        FD  FIC-ENT.
        01  ENR1.
            05 ENR-CODE-PRDT  PIC X(4).
            05 FILLER         PIC X(1).
            05 ENR-TYPE-MVT   PIC X(1).
            05 FILLER         PIC X(1).
            05 ENR-QTE-MVT    PIC 9(2).
            05 FILLER         PIC X(1).
            05 ENR-PRIX       PIC 999V99.
            05 FILLER         PIC X(65).

        WORKING-STORAGE SECTION.
        01   FS1              PIC 99.

        PROCEDURE DIVISION.
            OPEN INPUT FIC-ENT
            IF FS1 NOT = 00 AND FS1 NOT = 10
              DISPLAY 'ERREUR OUVERTURE : ' FS1
              STOP RUN
            END-IF
            MOVE 'P510' TO ENR-CODE-PRDT
            READ FIC-ENT KEY IS ENR-CODE-PRDT
              INVALID KEY DISPLAY 'CETTE CLE N''EXISTE PAS.'
              NOT INVALID KEY DISPLAY ENR1
            END-READ
            CLOSE FIC-ENT
            STOP RUN.
 MEMBER NAME  A04SP3
       ******************************************************************
       * DIVISION D'IDENTIFICATION DU PROGRAMME                         *
       ******************************************************************
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04SP3.
        AUTHOR. JULIEN
        DATE-WRITTEN. 06/12/2023
       ******************************************************************
       * DEFINITION DE L'ENVIRONNEMENT D'EXECUTION DU PROGRAMME         *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT FIC-ENT ASSIGN TO DDENT
                   ORGANIZATION IS INDEXED
                   ACCESS MODE IS RANDOM
                   RECORD KEY IS ENR-CODE-PRDT
                   FILE STATUS    IS FS.

        DATA DIVISION.
        FILE SECTION.
        FD  FIC-ENT.
        01  ENR.
            05 ENR-CODE-PRDT  PIC X(4).
            05 FILLER         PIC X(1).
            05 ENR-TYPE-MVT   PIC X(1).
            05 FILLER         PIC X(1).
            05 ENR-QTE-MVT    PIC 9(2).
            05 FILLER         PIC X(1).
            05 ENR-PRIX       PIC 999V99.
            05 FILLER         PIC X(65).

        WORKING-STORAGE SECTION.
        01 FS                 PIC 99.

        LINKAGE SECTION.
        01 Z3-SP3.
            05 Z3-CODE-PRDT      PIC X(4).
            05 Z3-CODRET         PIC 9.
            05 Z3-ENR            PIC X(80).

        PROCEDURE DIVISION USING Z3-SP3.
            PERFORM OUVERTURE
            PERFORM LECTURE
            PERFORM FERMETURE.

        OUVERTURE.
            OPEN INPUT FIC-ENT

            IF FS NOT = 00
              DISPLAY 'ERREUR OUVERTURE FICHIER : ' FS
              GOBACK
            END-IF.

        LECTURE.
            MOVE Z3-CODE-PRDT TO ENR-CODE-PRDT

            READ FIC-ENT KEY IS ENR-CODE-PRDT
                INVALID KEY
                  MOVE 1 TO Z3-CODRET
                NOT INVALID KEY
                  MOVE ENR TO Z3-ENR
                  MOVE 0 TO Z3-CODRET
            END-READ.

        FERMETURE.
            CLOSE FIC-ENT
            GOBACK.
 MEMBER NAME  A04SP4
       ******************************************************************
       * DIVISION D'IDENTIFICATION DU PROGRAMME                         *
       ******************************************************************
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04SP4.
        AUTHOR. JULIEN
        DATE-WRITTEN. 06/12/2023
       ******************************************************************
       * DEFINITION DE L'ENVIRONNEMENT D'EXECUTION DU PROGRAMME         *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT FIC-ENT ASSIGN TO DDENT
                   ORGANIZATION IS INDEXED
                   ACCESS MODE IS RANDOM
                   RECORD KEY IS ENR-CODE-PRDT
                   FILE STATUS    IS FS.

        DATA DIVISION.
        FILE SECTION.
        FD  FIC-ENT.
        01  ENR.
            05 ENR-CODE-PRDT  PIC X(4).
            05 FILLER         PIC X(1).
            05 ENR-TYPE-MVT   PIC X(1).
            05 FILLER         PIC X(1).
            05 ENR-QTE-MVT    PIC 9(2).
            05 FILLER         PIC X(1).
            05 ENR-PRIX       PIC 999V99.
            05 FILLER         PIC X(65).

        WORKING-STORAGE SECTION.
        01 FS                 PIC 99.

        LINKAGE SECTION.
        01 Z4-SP4.
            05 Z4-CODRET         PIC 9.
            05 Z4-ENR.
               10 Z4-CODE-PRDT   PIC X(4).
               10 Z4-TYPE-MVT    PIC X.
               10 Z4-QTE-MVT     PIC 99.
               10 Z4-PRIX        PIC 999V99.

        PROCEDURE DIVISION USING Z4-SP4.
            PERFORM OUVERTURE
            PERFORM VERIF-VALEUR
            PERFORM ECRITURE
            PERFORM FERMETURE.

        OUVERTURE.
            OPEN I-O FIC-ENT

            IF FS NOT = 00
              DISPLAY 'ERREUR OUVERTURE FICHIER POUR ECRITURE : ' FS
              GOBACK
            END-IF.

        VERIF-VALEUR.
            IF Z4-PRIX = ZEROES
              MOVE 2 TO Z4-CODRET
              PERFORM FERMETURE
            END-IF.

        ECRITURE.
            MOVE SPACES TO ENR

            MOVE Z4-CODE-PRDT TO ENR-CODE-PRDT
            MOVE Z4-TYPE-MVT TO ENR-TYPE-MVT
            MOVE Z4-QTE-MVT TO ENR-QTE-MVT
            MOVE Z4-PRIX TO ENR-PRIX

            WRITE ENR
                INVALID KEY
                  MOVE 1 TO Z4-CODRET
                NOT INVALID KEY
                  MOVE 0 TO Z4-CODRET
            END-WRITE.

        FERMETURE.
            CLOSE FIC-ENT
            GOBACK.
 MEMBER NAME  A04P11
       ******************************************************************
       * DIVISION D'IDENTIFICATION DU PROGRAMME                         *
       ******************************************************************
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04P11.
        AUTHOR. JULIEN
        DATE-WRITTEN. 06/12/2023
       ******************************************************************
       * DEFINITION DE L'ENVIRONNEMENT D'EXECUTION DU PROGRAMME         *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01 Z3-SP3.
            05 Z3-CODE-PRDT      PIC X(4).
            05 Z3-CODRET         PIC 9.
            05 Z3-ENR            PIC X(80).

        01 Z4-SP4.
            05 Z4-CODRET         PIC 9.
            05 Z4-ENR.
               10 Z4-CODE-PRDT   PIC X(4).
               10 Z4-TYPE-MVT    PIC X.
               10 Z4-QTE-MVT     PIC 99.
               10 Z4-PRIX        PIC 999V99.

        01 ENR-ECRITURE.
            05 ECR-CODE-PRDT    PIC X(4).
            05 FILLER           PIC X.
            05 ECR-TYPE-MVT     PIC X.
            05 FILLER           PIC X.
            05 ECR-QTE-MVT      PIC 99.
            05 FILLER           PIC X.
            05 ECR-PRIX         PIC 999V99.

        PROCEDURE DIVISION.
            MOVE SPACES TO ENR-ECRITURE
            ACCEPT ENR-ECRITURE

            PERFORM UNTIL ENR-ECRITURE = 'FIN'
              IF ECR-PRIX = ZEROES
                PERFORM APPEL-LECTURE
              ELSE
                PERFORM APPEL-ECRITURE
              END-IF
            END-PERFORM

            PERFORM FERMETURE.

        APPEL-LECTURE.
              MOVE ECR-CODE-PRDT TO Z3-CODE-PRDT

              CALL 'A04SP3' USING Z3-SP3

              IF Z3-CODRET = 1
                DISPLAY 'CLE NON TROUVEE : ' Z3-CODE-PRDT
              ELSE
                DISPLAY 'ENTREE TROUVEE : ' Z3-ENR
              END-IF

              MOVE SPACES TO ENR-ECRITURE
              ACCEPT ENR-ECRITURE.

        APPEL-ECRITURE.
              MOVE ECR-CODE-PRDT TO Z4-CODE-PRDT
              MOVE ECR-TYPE-MVT TO Z4-TYPE-MVT
              MOVE ECR-QTE-MVT TO Z4-QTE-MVT
              MOVE ECR-PRIX TO Z4-PRIX

              CALL 'A04SP4' USING Z4-SP4

              IF Z4-CODRET = 0
                DISPLAY 'ENTREE ECRITE : ' ENR-ECRITURE
              END-IF

              IF Z4-CODRET = 1
                DISPLAY 'ERREUR D''ECRITURE POUR : ' ENR-ECRITURE
              END-IF
              IF Z4-CODRET = 2
                DISPLAY 'PAS UNE VALEUR D''ECRITURE.'
              END-IF

              MOVE SPACES TO ENR-ECRITURE
              ACCEPT ENR-ECRITURE.

        FERMETURE.
            STOP RUN.
 MEMBER NAME  A04SP5
       ******************************************************************
       * DIVISION D'IDENTIFICATION DU PROGRAMME                         *
       ******************************************************************
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04SP5.
        AUTHOR. JULIEN
        DATE-WRITTEN. 06/12/2023
       ******************************************************************
       * DEFINITION DE L'ENVIRONNEMENT D'EXECUTION DU PROGRAMME         *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT FIC-ENT ASSIGN TO DDENT
                   ORGANIZATION IS INDEXED
                   ACCESS MODE IS RANDOM
                   RECORD KEY IS ENR-CODE-PRDT
                   FILE STATUS    IS FS.

        DATA DIVISION.
        FILE SECTION.
        FD  FIC-ENT.
        01  ENR.
            05 ENR-CODE-PRDT  PIC X(4).
            05 FILLER         PIC X(1).
            05 ENR-TYPE-MVT   PIC X(1).
            05 FILLER         PIC X(1).
            05 ENR-QTE-MVT    PIC 9(2).
            05 FILLER         PIC X(1).
            05 ENR-PRIX       PIC 999V99.
            05 FILLER         PIC X(65).

        WORKING-STORAGE SECTION.
        01 FS                 PIC 99.

        LINKAGE SECTION.
        01 Z5-SP5.
            05 Z5-CODE-FONCTION  PIC X.
               88 LECTURE        VALUE 'L'.
               88 CREATION       VALUE 'C'.
               88 MODIFICATION   VALUE 'M'.
               88 SUPPRESSION    VALUE 'S'.
            05 Z5-CODRET         PIC 9.
               88 CORRECT        VALUE ZEROES.
               88 NON-TROUVE     VALUE 1.
               88 EN-DOUBLE      VALUE 2.
               88 ERREUR         VALUE 3.
            05 Z5-ENR.
               10 Z5-CODE-PRDT   PIC X(4).
               10 Z5-TYPE-MVT    PIC X.
               10 Z5-QTE-MVT     PIC 99.
               10 Z5-PRIX        PIC 999V99.

        PROCEDURE DIVISION USING Z5-SP5.
            PERFORM OUVERTURE
            EVALUATE TRUE
              WHEN LECTURE PERFORM LECTURE-ACTION
              WHEN CREATION PERFORM CREATION-ACTION
              WHEN MODIFICATION PERFORM MODIFICATION-ACTION
              WHEN SUPPRESSION PERFORM SUPPRESSION-ACTION
            END-EVALUATE
            PERFORM FERMETURE.

        OUVERTURE.
            OPEN I-O FIC-ENT

            IF FS NOT = 00
              DISPLAY 'ERREUR OUVERTURE FICHIER POUR ECRITURE : ' FS
              GOBACK
            END-IF.

        LECTURE-ACTION.
            MOVE Z5-CODE-PRDT TO ENR-CODE-PRDT
            READ FIC-ENT KEY IS ENR-CODE-PRDT
              INVALID KEY
                SET NON-TROUVE TO TRUE
                DISPLAY 'CODE NON TROUVE : ' Z5-CODE-PRDT
              NOT INVALID KEY
                SET CORRECT TO TRUE
                DISPLAY 'ENREGISTREMENT TROUVE : ' ENR
            END-READ.

        CREATION-ACTION.
            MOVE SPACES TO ENR

            MOVE Z5-CODE-PRDT TO ENR-CODE-PRDT
            MOVE Z5-TYPE-MVT TO ENR-TYPE-MVT
            MOVE Z5-QTE-MVT TO ENR-QTE-MVT
            MOVE Z5-PRIX TO ENR-PRIX

            WRITE ENR
                INVALID KEY
                  SET EN-DOUBLE TO TRUE
                  DISPLAY 'DOUBLON TROUVE POUR : ' Z5-CODE-PRDT
                NOT INVALID KEY
                  SET CORRECT TO TRUE
                  DISPLAY 'LIGNE CREE POUR : ' Z5-CODE-PRDT
            END-WRITE.

        MODIFICATION-ACTION.
            MOVE SPACES TO ENR

            MOVE Z5-CODE-PRDT TO ENR-CODE-PRDT
            MOVE Z5-TYPE-MVT TO ENR-TYPE-MVT
            MOVE Z5-QTE-MVT TO ENR-QTE-MVT
            MOVE Z5-PRIX TO ENR-PRIX

            REWRITE ENR
                INVALID KEY
                  SET NON-TROUVE TO TRUE
                  DISPLAY 'LIGNE NON TROUVE POUR : ' Z5-CODE-PRDT
                NOT INVALID KEY
                  SET CORRECT TO TRUE
                  DISPLAY 'LIGNE REECRITE : ' ENR
            END-REWRITE.

        SUPPRESSION-ACTION.
            PERFORM LECTURE-ACTION
            DELETE FIC-ENT
                INVALID KEY
                  SET NON-TROUVE TO TRUE
                  DISPLAY 'LIGNE NON TROUVE POUR : ' Z5-CODE-PRDT
                NOT INVALID KEY
                  SET CORRECT TO TRUE
                  DISPLAY 'LIGNE EFFACEE POUR : ' Z5-CODE-PRDT
            END-DELETE.

        FERMETURE.
            CLOSE FIC-ENT
            GOBACK.
 MEMBER NAME  A04P12
       ******************************************************************
       * DIVISION D'IDENTIFICATION DU PROGRAMME                         *
       ******************************************************************
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04P12.
        AUTHOR. JULIEN
        DATE-WRITTEN. 06/12/2023
       ******************************************************************
       * DEFINITION DE L'ENVIRONNEMENT D'EXECUTION DU PROGRAMME         *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01 Z5-SP5.
            05 Z5-CODE-FONCTION  PIC X.
               88 LECTURE        VALUE 'L'.
               88 CREATION       VALUE 'C'.
               88 MODIFICATION   VALUE 'M'.
               88 SUPPRESSION    VALUE 'S'.
            05 Z5-CODRET         PIC 9.
               88 CORRECT        VALUE ZEROES.
               88 NON-TROUVE     VALUE 1.
               88 EN-DOUBLE      VALUE 2.
               88 ERREUR         VALUE 3.
            05 Z5-ENR.
               10 Z5-CODE-PRDT   PIC X(4).
               10 Z5-TYPE-MVT    PIC X.
               10 Z5-QTE-MVT     PIC 99.
               10 Z5-PRIX        PIC 999V99.

        PROCEDURE DIVISION.
            MOVE SPACES TO Z5-ENR
            ACCEPT Z5-ENR

       *    SET LECTURE TO TRUE
       *    SET CREATION TO TRUE
       *    SET MODIFICATION TO TRUE
            SET SUPPRESSION TO TRUE

            PERFORM UNTIL Z5-ENR = 'FIN'
              CALL 'A04SP5' USING Z5-SP5
              ACCEPT Z5-ENR
            END-PERFORM

            PERFORM FERMETURE.

        FERMETURE.
            STOP RUN.
 MEMBER NAME  A04AMAP
 A04AMAP DFHMSD TYPE=&SYSPARM,MODE=INOUT,LANG=COBOL,EXTATT=YES,         X
                CTRL=(FREEKB,FRSET),STORAGE=AUTO,TIOAPFX=YES
 A04AMAP DFHMDI COLUMN=1,LINE=1,SIZE=(24,80)
         DFHMDF POS=(1,1),ATTRB=ASKIP,LENGTH=04,INITIAL='A04A'
         DFHMDF POS=(1,23),ATTRB=ASKIP,LENGTH=26,                       X
                INITIAL='GESTION DU FICHIER PRODUIT'
         DFHMDF POS=(1,65),ATTRB=ASKIP,LENGTH=07,INITIAL='A04AMAP'
         DFHMDF POS=(2,55),ATTRB=ASKIP,LENGTH=06,INITIAL='DATE :'
 DATE    DFHMDF POS=(2,62),ATTRB=(ASKIP,FSET),LENGTH=10,                X
                INITIAL='20/20/2020'
         DFHMDF POS=(8,13),ATTRB=(ASKIP,BRT),LENGTH=01,INITIAL='1'
         DFHMDF POS=(8,15),ATTRB=ASKIP,LENGTH=40,                       X
                INITIAL='- CREATION D''UN PRODUIT'
         DFHMDF POS=(10,13),ATTRB=(ASKIP,BRT),LENGTH=01,INITIAL='2'
         DFHMDF POS=(10,15),ATTRB=ASKIP,LENGTH=40,                      X
                INITIAL='- INTERROGATION D''UN PRODUIT'
         DFHMDF POS=(12,13),ATTRB=(ASKIP,BRT),LENGTH=01,INITIAL='3'
         DFHMDF POS=(12,15),ATTRB=ASKIP,LENGTH=40,                      X
                INITIAL='- MODIFICATION D''UN PRODUIT'
         DFHMDF POS=(14,13),ATTRB=(ASKIP,BRT),LENGTH=01,INITIAL='4'
         DFHMDF POS=(14,15),ATTRB=ASKIP,LENGTH=40,                      X
                INITIAL='- SUPPRESSION D''UN PRODUIT'
         DFHMDF POS=(17,25),ATTRB=ASKIP,LENGTH=13,                      X
                INITIAL='VOTRE CHOIX :'
 CHOIX   DFHMDF POS=(17,39),ATTRB=(UNPROT,NUM,IC,FSET),LENGTH=01,       X
                JUSTIFY=(RIGHT,ZERO)
         DFHMDF POS=(17,41),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(23,1),ATTRB=ASKIP,LENGTH=11,INITIAL='CLEAR - FIN'
 MSG     DFHMDF POS=(24,1),ATTRB=(ASKIP,BRT),LENGTH=79
         DFHMSD TYPE=FINAL
         END
 MEMBER NAME  A04APGMT
       *======================================================*
       *   MENU DE GESTION DES PRODUITS                       *
       *======================================================*

       *======================================================*
       *   I D E N T I F I C A T I O N     D I V I S I O N    *
       *======================================================*
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04APGMT.

       *======================================================*
       *   E N V I R O N M E N T       D I V I S I O N        *
       *======================================================*
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER. IBM-390.
        OBJECT-COMPUTER. IBM-390.

       *======================================================*
       *           D A T A         D I V I S I O N            *
       *======================================================*
        DATA DIVISION.
        WORKING-STORAGE SECTION.

       * ZONE POUR DATE DU JOUR
        01  WS-DATE                 PIC X(8) VALUE SPACES.

       *------------------------------------------------------*
       *   DESCRIPTION DETAILLEE DE LA ZONE DE COMMUNICATION  *
       *------------------------------------------------------*
        01  WS-COMMAREA.
            05 PROG-PRECEDENT      PIC X(8).
            05 PROG-COURANT        PIC X(8).
            05 PROG-SUIVANT        PIC X(8).
            05                     PIC X(26).

        01 C-R                     PIC S9(8) COMP.

        01 MON-PROG                PIC X(8) VALUE 'A04APGMT'.
        01 MA-MAP                  PIC X(8) VALUE 'A04AMAP '.
        01 MA-TRX                  PIC X(4) VALUE 'A04A'.
       *------------------------------------------------------*
       *   DESCRIPTION   DE   LA   MAP                        *
       *------------------------------------------------------*
        COPY A04AMAP.

       *------------------------------------------------------*
       *   ZONE DE MESSAGE TAMPON POUR LE SEND FROM           *
       *------------------------------------------------------*
        01  MESSAGE-TXT            PIC X(79).

       *------------------------------------------------------*
       *   DESCRIPTION   DES  TOUCHES   FONCTIONS             *
       *------------------------------------------------------*
        COPY DFHAID.

       *------------------------------------------------------*
       *   DESCRIPTION   DES  ATTRIBUTS                       *
       *------------------------------------------------------*
        COPY DFHBMSCA.

       *======================================================*
       *          L I N K A G E     S E C T I O N             *
       *======================================================*
        LINKAGE SECTION.
        01  DFHCOMMAREA.
            05 LK-COMMAREA            PIC X(50).

       *======================================================*
       *     P R O C E D U R E     D I V I S I O N            *
       *======================================================*

        PROCEDURE DIVISION.
        00000-INIT-PROGRAMME.
       *---------------------*
             PERFORM  10000-DEBUT-PROGRAMME
             PERFORM  20000-TRAIT-PROGRAMME
             GOBACK
             .

        10000-DEBUT-PROGRAMME.
       *---------------------*
       *   TEST DE PREMIERE ENTREE DANS LE PROGRAMME
       *   SI NON PROGRAMME  MENU --->  ARRET  (ACCES INTERDIT)
            IF EIBCALEN = 0
               INITIALIZE      WS-COMMAREA
            ELSE
               MOVE LK-COMMAREA    TO  WS-COMMAREA
            END-IF

            MOVE  PROG-COURANT     TO  PROG-PRECEDENT
            MOVE  MON-PROG         TO  PROG-COURANT
            .

        20000-TRAIT-PROGRAMME.
       *---------------------*
            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               PERFORM  21000-TRAIT-CHARGEMENT
               PERFORM  22000-TRAIT-ENVOI
            ELSE
               PERFORM  23000-TRAIT-RECEPTION
            END-IF
            .

        21000-TRAIT-CHARGEMENT.
       *----------------------*
       *  CHARGEMENT DE LA MAP AVANT AFFICHAGE
            MOVE LOW-VALUE TO A04AMAPO

       *  SI TRAITEMENT PARTICULIER AVANT AFFICHAGE
       *    PERFORM  21100-TRAIT-SPECIFIQUE
            .

       *21100-TRAIT-SPECIFIQUE.
       *----------------------*
       *    ..............................
       *    ..............................
       *    ..............................
       *    ..............................
       *    .

        22000-TRAIT-ENVOI.
       *-----------------*
       * ALIMENTATION DE LA DATE DU JOUR
            MOVE FUNCTION CURRENT-DATE TO WS-DATE
            STRING WS-DATE (7 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATE (5 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATE (1 : 4) DELIMITED BY SIZE
                   INTO DATEO
            END-STRING

            EXEC CICS SEND MAP    ('A04AMAP')
                           ERASE
            END-EXEC

            MOVE PROG-COURANT TO PROG-SUIVANT

            EXEC CICS RETURN TRANSID  (MA-TRX)
                             COMMAREA (WS-COMMAREA)
                             LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23000-TRAIT-RECEPTION.
       *---------------------*
            EVALUATE EIBAID
               WHEN DFHENTER
                    PERFORM  23100-TRAIT-ENTER
               WHEN DFHCLEAR
                    PERFORM  23200-TRAIT-FIN
               WHEN DFHPF12
                    MOVE 'A04APGMT' TO  PROG-SUIVANT
                    PERFORM  23110-PROG-SUIVANT
               WHEN OTHER
                    PERFORM  90000-ERR-TOUCHE
            END-EVALUATE
            .

        23110-PROG-SUIVANT.
       *------------------*
       *    IF  ......................
       *       MOVE '?????'   TO  PROG-SUIVANT
       *    END-IF

            EXEC CICS XCTL  PROGRAM  (PROG-SUIVANT)
                            COMMAREA (WS-COMMAREA)
                            LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23100-TRAIT-ENTER.
       *------------------*
       *    ..........................
            EXEC CICS RECEIVE MAP  ('A04AMAP')
                              RESP (C-R)
            END-EXEC

            EVALUATE C-R
               WHEN DFHRESP(NORMAL)
                    CONTINUE
       *       WHEN DFHRESP(MAPFAIL)
       *            .............
               WHEN OTHER
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE

       *    ............................
       *    ...  ANALYSE DES CHAMPS  ...
       *    ............................
            EVALUATE CHOIXI
               WHEN '1'
                 MOVE 'A04CPGMT' TO  PROG-SUIVANT
                 PERFORM 23110-PROG-SUIVANT
               WHEN '2'
                 MOVE 'A04BPGMT' TO  PROG-SUIVANT
                 PERFORM 23110-PROG-SUIVANT
               WHEN '3'
               WHEN '4'
                 MOVE 'CHOIX ACTUELLEMENT INDISPONIBLE' TO MSGO
                 PERFORM  22000-TRAIT-ENVOI
               WHEN OTHER
                 MOVE 'CHOIX INVALIDE'                  TO MSGO
                 PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        23200-TRAIT-FIN.
       *---------------*
            MOVE 'FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        90000-ERR-TOUCHE.
       *----------------*
            MOVE 'TOUCHE DE FONCTION INVALIDE' TO MSGO
            PERFORM  22000-TRAIT-ENVOI
            .

        91000-ERREUR-CICS.
       *-------------------*
            MOVE 'ERREUR CICS !!!  FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        99000-FIN-CICS.
       *--------------*
            EXEC CICS SEND FROM   (MESSAGE-TXT)
                           LENGTH (LENGTH OF MESSAGE-TXT)
                           ERASE
            END-EXEC

            EXEC CICS RETURN END-EXEC
            .
 MEMBER NAME  A04BPGMT
       *======================================================*
       *   MENU DE GESTION DES PRODUITS                       *
       *======================================================*

       *======================================================*
       *   I D E N T I F I C A T I O N     D I V I S I O N    *
       *======================================================*
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04BPGMT.

       *======================================================*
       *   E N V I R O N M E N T       D I V I S I O N        *
       *======================================================*
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER. IBM-390.
        OBJECT-COMPUTER. IBM-390.

       *======================================================*
       *           D A T A         D I V I S I O N            *
       *======================================================*
        DATA DIVISION.
        WORKING-STORAGE SECTION.

       * ZONE POUR DATE DU JOUR
        01  WS-DATE                 PIC X(8) VALUE SPACES.

       * DESCRIPTION DE L'ENREGISTREMENT
        01 ENR.
            05 ENR-CODE-PRDT       PIC X(4).
            05 FILLER              PIC X.
            05 ENR-TYPE-MVT        PIC X.
            05 FILLER              PIC X.
            05 ENR-QTE-MVT         PIC 99.
            05 FILLER              PIC X.
            05 ENR-PRIX            PIC 999V99.
            05 FILLER              PIC X(65).

       * PICTURE D'EDITION POUR LE PRIX
        01 WS-PRIX-X.
            05 WS-PRIX-ED          PIC ZZ9,99.

       *------------------------------------------------------*
       *   DESCRIPTION DETAILLEE DE LA ZONE DE COMMUNICATION  *
       *------------------------------------------------------*
        01  WS-COMMAREA.
            05 PROG-PRECEDENT      PIC X(8).
            05 PROG-COURANT        PIC X(8).
            05 PROG-SUIVANT        PIC X(8).
            05                     PIC X(26).

        01 C-R                     PIC S9(8) COMP.

        01 MON-PROG                PIC X(8) VALUE 'A04BPGMT'.
        01 MA-MAP                  PIC X(8) VALUE 'A04BMAP '.
        01 MA-TRX                  PIC X(4) VALUE 'A04B'.
       *------------------------------------------------------*
       *   DESCRIPTION   DE   LA   MAP                        *
       *------------------------------------------------------*
        COPY A04BMAP.

       *------------------------------------------------------*
       *   ZONE DE MESSAGE TAMPON POUR LE SEND FROM           *
       *------------------------------------------------------*
        01  MESSAGE-TXT            PIC X(79).

       *------------------------------------------------------*
       *   DESCRIPTION   DES  TOUCHES   FONCTIONS             *
       *------------------------------------------------------*
        COPY DFHAID.

       *------------------------------------------------------*
       *   DESCRIPTION   DES  ATTRIBUTS                       *
       *------------------------------------------------------*
        COPY DFHBMSCA.

       *======================================================*
       *          L I N K A G E     S E C T I O N             *
       *======================================================*
        LINKAGE SECTION.
        01  DFHCOMMAREA.
            05 LK-COMMAREA            PIC X(50).

       *======================================================*
       *     P R O C E D U R E     D I V I S I O N            *
       *======================================================*

        PROCEDURE DIVISION.
        00000-INIT-PROGRAMME.
       *---------------------*
             PERFORM  10000-DEBUT-PROGRAMME
             PERFORM  20000-TRAIT-PROGRAMME
             GOBACK
             .

        10000-DEBUT-PROGRAMME.
       *---------------------*
       *   TEST DE PREMIERE ENTREE DANS LE PROGRAMME
       *   SI NON PROGRAMME  MENU --->  ARRET  (ACCES INTERDIT)
            IF EIBCALEN = 0
               INITIALIZE      WS-COMMAREA
            ELSE
               MOVE LK-COMMAREA    TO  WS-COMMAREA
            END-IF

            MOVE  PROG-COURANT     TO  PROG-PRECEDENT
            MOVE  MON-PROG         TO  PROG-COURANT
            .

        20000-TRAIT-PROGRAMME.
       *---------------------*
            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               PERFORM  21000-TRAIT-CHARGEMENT
               PERFORM  22000-TRAIT-ENVOI
            ELSE
               PERFORM  23000-TRAIT-RECEPTION
            END-IF
            .

        21000-TRAIT-CHARGEMENT.
       *----------------------*
       *  CHARGEMENT DE LA MAP AVANT AFFICHAGE
            MOVE LOW-VALUE TO A04BMAPO

       *  SI TRAITEMENT PARTICULIER AVANT AFFICHAGE
       *    PERFORM  21100-TRAIT-SPECIFIQUE
            .

       *21100-TRAIT-SPECIFIQUE.
       *----------------------*
       *    ..............................
       *    ..............................
       *    ..............................
       *    ..............................
       *    .

        22000-TRAIT-ENVOI.
       *-----------------*
       * ALIMENTATION DE LA DATE DU JOUR
            MOVE FUNCTION CURRENT-DATE TO WS-DATE
            STRING WS-DATE (7 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATE (5 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATE (1 : 4) DELIMITED BY SIZE
                   INTO DATEO
            END-STRING

            EXEC CICS SEND MAP    ('A04BMAP')
                           ERASE
            END-EXEC

            MOVE PROG-COURANT TO PROG-SUIVANT

            EXEC CICS RETURN TRANSID  (MA-TRX)
                             COMMAREA (WS-COMMAREA)
                             LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23000-TRAIT-RECEPTION.
       *---------------------*
            EVALUATE EIBAID
               WHEN DFHENTER
                    PERFORM  23100-TRAIT-ENTER
               WHEN DFHCLEAR
                    PERFORM  23200-TRAIT-FIN
               WHEN DFHPF12
                    MOVE 'A04APGMT' TO  PROG-SUIVANT
                    PERFORM  23110-PROG-SUIVANT
               WHEN OTHER
                    PERFORM  90000-ERR-TOUCHE
            END-EVALUATE
            .

        23110-PROG-SUIVANT.
       *------------------*
       *    IF  ......................
       *       MOVE '?????'   TO  PROG-SUIVANT
       *    END-IF

            EXEC CICS XCTL  PROGRAM  (PROG-SUIVANT)
                            COMMAREA (WS-COMMAREA)
                            LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23100-TRAIT-ENTER.
       *------------------*
       *    ..........................
            EXEC CICS RECEIVE MAP  ('A04BMAP')
                              RESP (C-R)
            END-EXEC

            EVALUATE C-R
               WHEN DFHRESP(NORMAL)
                    CONTINUE
       *       WHEN DFHRESP(MAPFAIL)
       *            .............
               WHEN OTHER
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE

       *    ............................
       *    ...  ANALYSE DES CHAMPS  ...
       *    ............................
       * CONTROLE CODE PRODUIT OBLIGATOIRE
            IF CODEPRDI = SPACES
               MOVE 'CODE PRODUIT NON RENSEIGNE' TO MSGO
               PERFORM 22000-TRAIT-ENVOI
            ELSE
       * CODE PRODUIT SAISI, CONTROLE D'EXISTENCE DANS LE FICHIER
               MOVE CODEPRDI TO ENR-CODE-PRDT
               EXEC CICS READ
                    FILE ('FORA04F1')
                    RIDFLD (ENR-CODE-PRDT)
                    INTO (ENR)
                    RESP (C-R)
               END-EXEC
               EVALUATE C-R
                  WHEN DFHRESP(NORMAL)
       * ENREGISTREMENT TROUVE, ON RENSEIGNE LES ZONES EN OUTPUT
                       MOVE ENR-TYPE-MVT TO TYPEMVTO
                       MOVE ENR-QTE-MVT TO QTEMVTO
                       MOVE ENR-PRIX TO WS-PRIX-ED
                       MOVE WS-PRIX-X TO PRIPRDO
                       PERFORM 22000-TRAIT-ENVOI
                  WHEN DFHRESP(NOTFND)
                       MOVE 'CODE PRODUIT INEXISTANT' TO MSGO
                       PERFORM 22000-TRAIT-ENVOI
                  WHEN OTHER
                       PERFORM 91000-ERREUR-CICS
               END-EVALUATE
            .

        23200-TRAIT-FIN.
       *---------------*
            MOVE 'FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        90000-ERR-TOUCHE.
       *----------------*
            MOVE 'TOUCHE DE FONCTION INVALIDE' TO MSGO
            PERFORM  22000-TRAIT-ENVOI
            .

        91000-ERREUR-CICS.
       *-------------------*
            MOVE 'ERREUR CICS !!!  FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        99000-FIN-CICS.
       *--------------*
            EXEC CICS SEND FROM   (MESSAGE-TXT)
                           LENGTH (LENGTH OF MESSAGE-TXT)
                           ERASE
            END-EXEC

            EXEC CICS RETURN END-EXEC
            .
 MEMBER NAME  A04CMAP
 A04CMAP DFHMSD TYPE=&SYSPARM,MODE=INOUT,LANG=COBOL,EXTATT=YES,         X
                CTRL=(FREEKB,FRSET),STORAGE=AUTO,TIOAPFX=YES
 A04CMAP DFHMDI COLUMN=1,LINE=1,SIZE=(24,80)
         DFHMDF POS=(1,1),ATTRB=ASKIP,LENGTH=04,INITIAL='A04C'
         DFHMDF POS=(1,26),ATTRB=ASKIP,LENGTH=27,                       X
                INITIAL='CREATION D''UN PRODUIT'
         DFHMDF POS=(1,65),ATTRB=ASKIP,LENGTH=07,INITIAL='A04CMAP'
         DFHMDF POS=(2,55),ATTRB=ASKIP,LENGTH=06,INITIAL='DATE :'
 DATE    DFHMDF POS=(2,62),ATTRB=(ASKIP,FSET),LENGTH=10
         DFHMDF POS=(8,13),ATTRB=ASKIP,LENGTH=25,                       X
                INITIAL='CODE PRODUIT            :'
 CODEPRD DFHMDF POS=(8,39),ATTRB=(UNPROT,NUM,IC,FSET),LENGTH=04,        X
                JUSTIFY=(RIGHT,ZERO)
         DFHMDF POS=(8,44),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(10,13),ATTRB=ASKIP,LENGTH=25,                      X
                INITIAL='TYPE MOUVEMENT          :'
 TYPEMVT DFHMDF POS=(10,39),ATTRB=(UNPROT,NUM,FSET),LENGTH=01,          X
                JUSTIFY=(RIGHT,ZERO)
         DFHMDF POS=(10,41),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(12,13),ATTRB=ASKIP,LENGTH=25,                      X
                INITIAL='QUANTITE                :'
 QTEMVT  DFHMDF POS=(12,39),ATTRB=(UNPROT,NUM,FSET),LENGTH=02,          X
                JUSTIFY=(RIGHT,ZERO)
         DFHMDF POS=(12,42),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(14,13),ATTRB=ASKIP,LENGTH=25,                      X
                INITIAL='PRIX UNITAIRE           :'
 PRIPRD  DFHMDF POS=(14,39),ATTRB=(UNPROT,NUM,FSET),LENGTH=06,          X
                JUSTIFY=(RIGHT,ZERO)
         DFHMDF POS=(14,46),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(23,1),ATTRB=ASKIP,LENGTH=11,INITIAL='CLEAR - FIN'
         DFHMDF POS=(23,15),ATTRB=ASKIP,LENGTH=12,INITIAL='F12 - RETOUR'
 MSG     DFHMDF POS=(24,1),ATTRB=(ASKIP,BRT),LENGTH=79
         DFHMSD TYPE=FINAL
         END
 MEMBER NAME  A04CPGMT
       *======================================================*
       *   MENU DE GESTION DES PRODUITS                       *
       *======================================================*

       *======================================================*
       *   I D E N T I F I C A T I O N     D I V I S I O N    *
       *======================================================*
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04CPGMT.

       *======================================================*
       *   E N V I R O N M E N T       D I V I S I O N        *
       *======================================================*
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER. IBM-390.
        OBJECT-COMPUTER. IBM-390.

       *======================================================*
       *           D A T A         D I V I S I O N            *
       *======================================================*
        DATA DIVISION.
        WORKING-STORAGE SECTION.

       * ZONE POUR DATE DU JOUR
        01  WS-DATE                 PIC X(8) VALUE SPACES.

       * DESCRIPTION DE L'ENREGISTREMENT
        01 ENR.
            05 ENR-CODE-PRDT       PIC X(4).
            05 FILLER              PIC X.
            05 ENR-TYPE-MVT        PIC X.
            05 FILLER              PIC X.
            05 ENR-QTE-MVT         PIC 99.
            05 FILLER              PIC X.
            05 ENR-PRIX            PIC 999V99.
            05 FILLER              PIC X(65).

       * PICTURE D'EDITION POUR LE PRIX
        01 WS-PRIX-X.
            05 WS-PRIX-ED          PIC ZZ9,99.

       *------------------------------------------------------*
       *   DESCRIPTION DETAILLEE DE LA ZONE DE COMMUNICATION  *
       *------------------------------------------------------*
        01  WS-COMMAREA.
            05 PROG-PRECEDENT      PIC X(8).
            05 PROG-COURANT        PIC X(8).
            05 PROG-SUIVANT        PIC X(8).
            05                     PIC X(26).

        01 C-R                     PIC S9(8) COMP.

        01 MON-PROG                PIC X(8) VALUE 'A04CPGMT'.
        01 MA-MAP                  PIC X(8) VALUE 'A04CMAP '.
        01 MA-TRX                  PIC X(4) VALUE 'A04C'.
       *------------------------------------------------------*
       *   DESCRIPTION   DE   LA   MAP                        *
       *------------------------------------------------------*
        COPY A04CMAP.

       *------------------------------------------------------*
       *   ZONE DE MESSAGE TAMPON POUR LE SEND FROM           *
       *------------------------------------------------------*
        01  MESSAGE-TXT            PIC X(79).

       *------------------------------------------------------*
       *   DESCRIPTION   DES  TOUCHES   FONCTIONS             *
       *------------------------------------------------------*
        COPY DFHAID.

       *------------------------------------------------------*
       *   DESCRIPTION   DES  ATTRIBUTS                       *
       *------------------------------------------------------*
        COPY DFHBMSCA.


       *------------------------------------------------------*
       *   NOMS CONDITIONS                                    *
       *------------------------------------------------------*
        77                         PIC X VALUE ZEROES.
          88 CORRECT                     VALUE '1'.
          88 CHAMP-VIDE                  VALUE '2'.
          88 CHAMP-NON-NUM               VALUE '3'.
          88 TYPE-INVALIDE               VALUE '4'.

       *======================================================*
       *          L I N K A G E     S E C T I O N             *
       *======================================================*
        LINKAGE SECTION.
        01  DFHCOMMAREA.
            05 LK-COMMAREA            PIC X(50).

       *======================================================*
       *     P R O C E D U R E     D I V I S I O N            *
       *======================================================*

        PROCEDURE DIVISION.
        00000-INIT-PROGRAMME.
       *---------------------*
             PERFORM  10000-DEBUT-PROGRAMME
             PERFORM  20000-TRAIT-PROGRAMME
             GOBACK
             .

        10000-DEBUT-PROGRAMME.
       *---------------------*
       *   TEST DE PREMIERE ENTREE DANS LE PROGRAMME
       *   SI NON PROGRAMME  MENU --->  ARRET  (ACCES INTERDIT)
            IF EIBCALEN = 0
               INITIALIZE      WS-COMMAREA
            ELSE
               MOVE LK-COMMAREA    TO  WS-COMMAREA
            END-IF

            MOVE  PROG-COURANT     TO  PROG-PRECEDENT
            MOVE  MON-PROG         TO  PROG-COURANT
            .

        20000-TRAIT-PROGRAMME.
       *---------------------*
            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               PERFORM  21000-TRAIT-CHARGEMENT
               PERFORM  22000-TRAIT-ENVOI
            ELSE
               PERFORM  23000-TRAIT-RECEPTION
            END-IF
            .

        21000-TRAIT-CHARGEMENT.
       *----------------------*
       *  CHARGEMENT DE LA MAP AVANT AFFICHAGE
            MOVE LOW-VALUE TO A04CMAPO

       *  SI TRAITEMENT PARTICULIER AVANT AFFICHAGE
       *    PERFORM  21100-TRAIT-SPECIFIQUE
            .

       *21100-TRAIT-SPECIFIQUE.
       *----------------------*
       *    ..............................
       *    ..............................
       *    ..............................
       *    ..............................
       *    .

        22000-TRAIT-ENVOI.
       *-----------------*
       * ALIMENTATION DE LA DATE DU JOUR
            MOVE FUNCTION CURRENT-DATE TO WS-DATE
            STRING WS-DATE (7 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATE (5 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATE (1 : 4) DELIMITED BY SIZE
                   INTO DATEO
            END-STRING

            EXEC CICS SEND MAP    ('A04CMAP')
                           ERASE
            END-EXEC

            MOVE PROG-COURANT TO PROG-SUIVANT

            EXEC CICS RETURN TRANSID  (MA-TRX)
                             COMMAREA (WS-COMMAREA)
                             LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23000-TRAIT-RECEPTION.
       *---------------------*
            EVALUATE EIBAID
               WHEN DFHENTER
                    PERFORM  23100-TRAIT-ENTER
               WHEN DFHCLEAR
                    PERFORM  23200-TRAIT-FIN
               WHEN DFHPF12
                    MOVE 'A04APGMT' TO  PROG-SUIVANT
                    PERFORM  23110-PROG-SUIVANT
               WHEN OTHER
                    PERFORM  90000-ERR-TOUCHE
            END-EVALUATE
            .

        23110-PROG-SUIVANT.
       *------------------*
       *    IF  ......................
       *       MOVE '?????'   TO  PROG-SUIVANT
       *    END-IF

            EXEC CICS XCTL  PROGRAM  (PROG-SUIVANT)
                            COMMAREA (WS-COMMAREA)
                            LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23100-TRAIT-ENTER.
       *------------------*
       *    ..........................
            EXEC CICS RECEIVE MAP  ('A04CMAP')
                              RESP (C-R)
            END-EXEC

            EVALUATE C-R
               WHEN DFHRESP(NORMAL)
                    CONTINUE
       *       WHEN DFHRESP(MAPFAIL)
       *            .............
               WHEN OTHER
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE

       *    ............................
       *    ...  ANALYSE DES CHAMPS  ...
       *    ............................
       * CONTROLE CODE PRODUIT OBLIGATOIRE
            SET CORRECT TO TRUE
       *    IF CODEPRDI = SPACES
       *       OR TYPEMVTI = SPACES
       *       OR QTEMVTI = SPACES
       *       OR PRIPRDI = SPACES
       *         MOVE 'CHAMP NON RENSEIGNE' TO MSGO
       *         PERFORM 22000-TRAIT-ENVOI
       *    ELSE
            PERFORM VERIF-CHAMP-VIDE
            IF CORRECT
              PERFORM VERIF-NUM
            END-IF
            IF CORRECT
              PERFORM VERIF-TYPE-MVT
            END-IF

       * CODE PRODUIT SAISI, CONTROLE D'EXISTENCE DANS LE FICHIER
            IF CORRECT
               MOVE CODEPRDI TO ENR-CODE-PRDT
               MOVE TYPEMVTI TO ENR-TYPE-MVT
               MOVE QTEMVTI  TO ENR-QTE-MVT
               MOVE PRIPRDI  TO ENR-PRIX
               EXEC CICS WRITE
                    FILE ('FORA04F1')
                    FROM (ENR)
                    RIDFLD (ENR-CODE-PRDT)
                    RESP (C-R)
               END-EXEC
               EVALUATE C-R
                  WHEN DFHRESP(NORMAL)
       * ENREGISTREMENT TROUVE, ON RENSEIGNE LES ZONES EN OUTPUT
                       MOVE 'ENREGISTREMENT EFFECTUE' TO MSGO
                       PERFORM 22000-TRAIT-ENVOI
                  WHEN OTHER
                       PERFORM 91000-ERREUR-CICS
               END-EVALUATE
            END-IF
            .

        VERIF-CHAMP-VIDE.
            IF CODEPRDL = ZEROES
            OR TYPEMVTL = ZEROES
            OR QTEMVTL = ZEROES
            OR PRIPRDL = ZEROES
                 MOVE 'CHAMP NON RENSEIGNE' TO MSGO
                 SET CHAMP-VIDE TO TRUE
                 PERFORM 22000-TRAIT-ENVOI
            END-IF.

        VERIF-NUM.
            IF QTEMVTI NOT NUMERIC OR PRIPRDI NOT NUMERIC
                 MOVE 'LA QUANTITE ET/OU LE PRIX N''EST PAS NUMERIQUE.'
                      TO MSGO
                 SET CHAMP-NON-NUM TO TRUE
                 PERFORM 22000-TRAIT-ENVOI
            END-IF.

        VERIF-TYPE-MVT.
            IF TYPEMVTI NOT = 'E' AND TYPEMVTI NOT = 'S'
                 MOVE 'LE TYPE NE PEUT ETRE QUE E OU S.'
                      TO MSGO
                 SET TYPE-INVALIDE TO TRUE
                 PERFORM 22000-TRAIT-ENVOI
            END-IF.

        23200-TRAIT-FIN.
       *---------------*
            MOVE 'FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        90000-ERR-TOUCHE.
       *----------------*
            MOVE 'TOUCHE DE FONCTION INVALIDE' TO MSGO
            PERFORM  22000-TRAIT-ENVOI
            .

        91000-ERREUR-CICS.
       *-------------------*
            MOVE 'ERREUR CICS !!!  FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        99000-FIN-CICS.
       *--------------*
            EXEC CICS SEND FROM   (MESSAGE-TXT)
                           LENGTH (LENGTH OF MESSAGE-TXT)
                           ERASE
            END-EXEC

            EXEC CICS RETURN END-EXEC
            .
 MEMBER NAME  A04DMAP
 A04DMAP DFHMSD TYPE=&SYSPARM,MODE=INOUT,LANG=COBOL,EXTATT=YES,         X
                CTRL=(FREEKB,FRSET),STORAGE=AUTO,TIOAPFX=YES
 A04DMAP DFHMDI COLUMN=1,LINE=1,SIZE=(24,80)
         DFHMDF POS=(1,1),ATTRB=ASKIP,LENGTH=04,INITIAL='A04D'
         DFHMDF POS=(1,26),ATTRB=ASKIP,LENGTH=27,                       X
                INITIAL='MODIFICATION D''UN PRODUIT'
         DFHMDF POS=(1,65),ATTRB=ASKIP,LENGTH=07,INITIAL='A04DMAP'
         DFHMDF POS=(2,55),ATTRB=ASKIP,LENGTH=06,INITIAL='DATE :'
 DATE    DFHMDF POS=(2,62),ATTRB=(ASKIP,FSET),LENGTH=10
         DFHMDF POS=(8,13),ATTRB=ASKIP,LENGTH=25,                       X
                INITIAL='CODE PRODUIT            :'
 CODEPRD DFHMDF POS=(8,39),ATTRB=(UNPROT,IC,FSET),LENGTH=04,            X
                JUSTIFY=(RIGHT,ZERO)
         DFHMDF POS=(8,44),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(10,13),ATTRB=ASKIP,LENGTH=25,                      X
                INITIAL='TYPE MOUVEMENT          :'
 TYPEMVT DFHMDF POS=(10,39),ATTRB=(UNPROT,FSET),LENGTH=01,              X
                JUSTIFY=(RIGHT,ZERO)
         DFHMDF POS=(10,41),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(12,13),ATTRB=ASKIP,LENGTH=25,                      X
                INITIAL='QUANTITE                :'
 QTEMVT  DFHMDF POS=(12,39),ATTRB=(UNPROT,NUM,FSET),LENGTH=02,          X
                JUSTIFY=(RIGHT,ZERO)
         DFHMDF POS=(12,42),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(14,13),ATTRB=ASKIP,LENGTH=25,                      X
                INITIAL='PRIX UNITAIRE           :'
 PRIPRD  DFHMDF POS=(14,39),ATTRB=(UNPROT,NUM,FSET),LENGTH=06,          X
                JUSTIFY=(RIGHT,ZERO)
         DFHMDF POS=(14,46),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(23,1),ATTRB=ASKIP,LENGTH=11,INITIAL='CLEAR - FIN'
         DFHMDF POS=(23,15),ATTRB=ASKIP,LENGTH=12,INITIAL='PF3 - RETOUR'
         DFHMDF POS=(23,30),ATTRB=ASKIP,LENGTH=17,                      X
                INITIAL='PF10 - VALIDATION'
 MSG     DFHMDF POS=(24,1),ATTRB=(ASKIP,BRT),LENGTH=79
         DFHMSD TYPE=FINAL
         END
 MEMBER NAME  A04DPGMT
       *======================================================*
       *   MENU DE GESTION DES PRODUITS                       *
       *======================================================*

       *======================================================*
       *   I D E N T I F I C A T I O N     D I V I S I O N    *
       *======================================================*
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04DPGMT.

       *======================================================*
       *   E N V I R O N M E N T       D I V I S I O N        *
       *======================================================*
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        SOURCE-COMPUTER. IBM-390.
        OBJECT-COMPUTER. IBM-390.

       *======================================================*
       *           D A T A         D I V I S I O N            *
       *======================================================*
        DATA DIVISION.
        WORKING-STORAGE SECTION.

       * ZONE POUR DATE DU JOUR
        01  WS-DATE                 PIC X(8) VALUE SPACES.

       * DESCRIPTION DE L'ENREGISTREMENT
        01 ENR.
            05 ENR-CODE-PRDT       PIC X(4).
            05 FILLER              PIC X.
            05 ENR-TYPE-MVT        PIC X.
            05 FILLER              PIC X.
            05 ENR-QTE-MVT         PIC 99.
            05 FILLER              PIC X.
            05 ENR-PRIX            PIC 999V99.
            05 FILLER              PIC X(65).

       * PICTURE D'EDITION POUR LE PRIX
        01 WS-PRIX-X.
            05 WS-PRIX-ED          PIC ZZ9,99.

       * NOMS-CONDITIONS POUR LES VERIFS D'ENTREE
        77                         PIC X VALUE ZEROES.
            88 OK                        VALUE '1'.
            88 KO                        VALUE '2'.




       *------------------------------------------------------*
       *   DESCRIPTION DETAILLEE DE LA ZONE DE COMMUNICATION  *
       *------------------------------------------------------*
        01  WS-COMMAREA.
            05 PROG-PRECEDENT      PIC X(8).
            05 PROG-COURANT        PIC X(8).
            05 PROG-SUIVANT        PIC X(8).
            05                     PIC X(26).

        01 C-R                     PIC S9(8) COMP.

        01 MON-PROG                PIC X(8) VALUE 'A04DPGMT'.
        01 MA-MAP                  PIC X(8) VALUE 'A04DMAP '.
        01 MA-TRX                  PIC X(4) VALUE 'A04D'.
       *------------------------------------------------------*
       *   DESCRIPTION   DE   LA   MAP                        *
       *------------------------------------------------------*
        COPY A04DMAP.

       *------------------------------------------------------*
       *   ZONE DE MESSAGE TAMPON POUR LE SEND FROM           *
       *------------------------------------------------------*
        01  MESSAGE-TXT            PIC X(79).

       *------------------------------------------------------*
       *   DESCRIPTION   DES  TOUCHES   FONCTIONS             *
       *------------------------------------------------------*
        COPY DFHAID.

       *------------------------------------------------------*
       *   DESCRIPTION   DES  ATTRIBUTS                       *
       *------------------------------------------------------*
        COPY DFHBMSCA.
        COPY ATTRIBUT.

       *======================================================*
       *          L I N K A G E     S E C T I O N             *
       *======================================================*
        LINKAGE SECTION.
        01  DFHCOMMAREA.
            05 LK-COMMAREA            PIC X(50).

       *======================================================*
       *     P R O C E D U R E     D I V I S I O N            *
       *======================================================*

        PROCEDURE DIVISION.
        00000-INIT-PROGRAMME.
       *---------------------*
             PERFORM  10000-DEBUT-PROGRAMME
             PERFORM  20000-TRAIT-PROGRAMME
             GOBACK
             .

        10000-DEBUT-PROGRAMME.
       *---------------------*
       *   TEST DE PREMIERE ENTREE DANS LE PROGRAMME
       *   SI NON PROGRAMME  MENU --->  ARRET  (ACCES INTERDIT)
            IF EIBCALEN = 0
               INITIALIZE      WS-COMMAREA
            ELSE
               MOVE LK-COMMAREA    TO  WS-COMMAREA
            END-IF

            MOVE  PROG-COURANT     TO  PROG-PRECEDENT
            MOVE  MON-PROG         TO  PROG-COURANT
            .

        20000-TRAIT-PROGRAMME.
       *---------------------*
            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               PERFORM  21000-TRAIT-CHARGEMENT
               PERFORM  22000-TRAIT-ENVOI
            ELSE
               PERFORM  23000-TRAIT-RECEPTION
            END-IF
            .

        21000-TRAIT-CHARGEMENT.
       *----------------------*
       *  CHARGEMENT DE LA MAP AVANT AFFICHAGE
            MOVE LOW-VALUE TO A04DMAPO

       *  SI TRAITEMENT PARTICULIER AVANT AFFICHAGE
       *    PERFORM  21100-TRAIT-SPECIFIQUE
            .

       *21100-TRAIT-SPECIFIQUE.
       *----------------------*
       *    ..............................
       *    ..............................
       *    ..............................
       *    ..............................
       *    .

        22000-TRAIT-ENVOI.
       *-----------------*
       * ALIMENTATION DE LA DATE DU JOUR
            MOVE FUNCTION CURRENT-DATE TO WS-DATE
            STRING WS-DATE (7 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATE (5 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATE (1 : 4) DELIMITED BY SIZE
                   INTO DATEO
            END-STRING

            EXEC CICS SEND MAP    ('A04DMAP')
                           ERASE
            END-EXEC

            MOVE PROG-COURANT TO PROG-SUIVANT

            EXEC CICS RETURN TRANSID  (MA-TRX)
                             COMMAREA (WS-COMMAREA)
                             LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23000-TRAIT-RECEPTION.
       *---------------------*
            EVALUATE EIBAID
               WHEN DFHENTER
                    PERFORM  23100-TRAIT-ENTER
               WHEN DFHCLEAR
                    PERFORM  23200-TRAIT-FIN
               WHEN DFHPF3
                    MOVE 'A04APGMT' TO  PROG-SUIVANT
                    PERFORM  23110-PROG-SUIVANT
               WHEN DFHPF10
                    PERFORM  MODIFICATION
               WHEN OTHER
                    PERFORM  90000-ERR-TOUCHE
            END-EVALUATE
            .

        23110-PROG-SUIVANT.
       *------------------*
       *    IF  ......................
       *       MOVE '?????'   TO  PROG-SUIVANT
       *    END-IF

            EXEC CICS XCTL  PROGRAM  (PROG-SUIVANT)
                            COMMAREA (WS-COMMAREA)
                            LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23100-TRAIT-ENTER.
       *------------------*
       *    ..........................
            EXEC CICS RECEIVE MAP  ('A04DMAP')
                              RESP (C-R)
            END-EXEC

            EVALUATE C-R
               WHEN DFHRESP(NORMAL)
                    CONTINUE
       *       WHEN DFHRESP(MAPFAIL)
       *            .............
               WHEN OTHER
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE

       *    ............................
       *    ...  ANALYSE DES CHAMPS  ...
       *    ............................
            SET OK TO TRUE
            PERFORM VERIF-INPUT-PRESENCE
            IF NOT KO
               EXEC CICS READ
                    FILE ('FORA04F1')
                    INTO (ENR)
                    RIDFLD (CODEPRDI)
                    RESP (C-R)
               END-EXEC
               EVALUATE C-R
                  WHEN DFHRESP(NORMAL)
       * ENREGISTREMENT TROUVE, ON RENSEIGNE LES ZONES EN OUTPUT
                       MOVE 'APPUYER SUR F10 POUR VALIDER' TO MSGO
                       MOVE DFHBMPRF TO CODEPRDA
                       MOVE ENR-CODE-PRDT TO CODEPRDO
                       MOVE ENR-TYPE-MVT TO TYPEMVTO
                       MOVE ENR-QTE-MVT TO QTEMVTO
                       MOVE ENR-PRIX TO WS-PRIX-ED
                       MOVE WS-PRIX-ED TO PRIPRDO
                       PERFORM 22000-TRAIT-ENVOI
                  WHEN DFHRESP(NOTFND)
                       MOVE 'CODE PRODUIT NON TROUVE' TO MSGO
                       PERFORM 22000-TRAIT-ENVOI
                  WHEN OTHER
                       PERFORM 91000-ERREUR-CICS
               END-EVALUATE
            END-IF.

        VERIF-INPUT-PRESENCE.
            IF CODEPRDL = ZEROES
              MOVE 'CODE PRODUIT NON RENSEIGNE' TO MSGO
              SET KO TO TRUE
              PERFORM 22000-TRAIT-ENVOI
            END-IF.

        MODIFICATION.
            SET OK TO TRUE
            IF CODEPRDO = SPACES
            OR TYPEMVTO = SPACES
            OR QTEMVTO = SPACES
            OR PRIPRDO = SPACES
              MOVE 'TOUS LES CHAMPS DOIVENT ETRE REMPLIS' TO MSGO
              SET KO TO TRUE
              PERFORM 22000-TRAIT-ENVOI
            END-IF

            IF NOT KO
              IF TYPEMVTI NOT = 'E' AND TYPEMVTI NOT = 'S'
                MOVE 'LE TYPE DE MOUVEMENT NE PEUT ETRE QUE
       -       ' E OU S' TO MSGO
                SET KO TO TRUE
                PERFORM 22000-TRAIT-ENVOI
              END-IF
            END-IF

            IF NOT KO
              IF QTEMVTI NOT NUMERIC AND PRIPRDI NOT NUMERIC
                MOVE 'LA QUANTITE DE MOUVEMENT ET LE PRIX DOIVENT
       -       ' ETRE NUMERIQUES' TO MSGO
                SET KO TO TRUE
                PERFORM 22000-TRAIT-ENVOI
              END-IF
            END-IF

            IF NOT KO
               MOVE CODEPRDO TO ENR-CODE-PRDT
               EXEC CICS READ
                    FILE ('FORA04F1')
                    INTO (ENR)
                    RIDFLD (ENR-CODE-PRDT)
                    UPDATE
                    RESP (C-R)
               END-EXEC
               EVALUATE C-R
                  WHEN DFHRESP(NORMAL)
                       CONTINUE
                  WHEN DFHRESP(NOTFND)
                       MOVE 'ERREUR READ UPDATE' TO MSGO
                       PERFORM 22000-TRAIT-ENVOI
                  WHEN OTHER
                       PERFORM 91000-ERREUR-CICS
               END-EVALUATE
               MOVE TYPEMVTI TO ENR-TYPE-MVT
               MOVE QTEMVTI TO ENR-QTE-MVT
               MOVE PRIPRDI TO ENR-PRIX
               MOVE ATTR-UNPROT-FSET TO CODEPRDA

               EXEC CICS REWRITE
                    FILE ('FORA04F1')
                    FROM (ENR)
                    RESP (C-R)
               END-EXEC

               EVALUATE C-R
                  WHEN DFHRESP(NORMAL)
                       MOVE 'ENREGISTREMENT EFFECTUE' TO MSGO
                       PERFORM 22000-TRAIT-ENVOI
                  WHEN DFHRESP(NOTFND)
                       MOVE 'CODE PRODUIT NON TROUVE' TO MSGO
                       PERFORM 22000-TRAIT-ENVOI
                  WHEN OTHER
                       PERFORM 91000-ERREUR-CICS
               END-EVALUATE
            END-IF.

        23200-TRAIT-FIN.
       *---------------*
            MOVE 'FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        90000-ERR-TOUCHE.
       *----------------*
            MOVE 'TOUCHE DE FONCTION INVALIDE' TO MSGO
            PERFORM  22000-TRAIT-ENVOI
            .

        91000-ERREUR-CICS.
       *-------------------*
            MOVE 'ERREUR CICS !!!  FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        99000-FIN-CICS.
       *--------------*
            EXEC CICS SEND FROM   (MESSAGE-TXT)
                           LENGTH (LENGTH OF MESSAGE-TXT)
                           ERASE
            END-EXEC

            EXEC CICS RETURN END-EXEC
            .
 MEMBER NAME  A04JPGMD
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04JPGMD.
        AUTHOR. JULIEN.
        DATE-WRITTEN. 15/12/2023.
       ******************************************************************
       *         LECTURE DES CONTRATS PAR PERSONNE                      *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
       * COMPTEURS
        77  CPT-LUS            PIC 99 VALUE ZEROES.

       * INDICATEUR FIN DE TABLE
        77                     PIC X  VALUE SPACES.
            88 FIN-TABLE              VALUE '1'.

       * PICTURES D'EDITION
        77  SQLCODE-ED         PIC +(8)9     VALUE ZEROES.
        77  QTE-ED             PIC Z(3)9     VALUE ZEROES.
        77  PRIX-ED            PIC Z(5)9,99  VALUE ZEROES.

       * SQLCA
            EXEC SQL INCLUDE SQLCA   END-EXEC.

       * TABLE CONTRAT
            EXEC SQL INCLUDE CONTRAT END-EXEC.

       * TABLE PERSONNE
            EXEC SQL INCLUDE PERSONNE END-EXEC.

       * TABLE VENTES
            EXEC SQL INCLUDE VENTES END-EXEC.

       * DECLARATION DU CURSEUR
            EXEC SQL DECLARE CURS CURSOR FOR
             SELECT DISTINCT C.CODEP, P.IDENTITE, C.CODEA, C.SIREN
             FROM CONTRAT C
             JOIN PERSONNE P
             ON C.CODEP = P.CODEP
            END-EXEC

       * LIGNES D'EDITION
        01  L1.
            05            PIC X(7)   VALUE 'CODEP'.
            05            PIC X(26)  VALUE 'IDENTITE'.
            05            PIC X(6)   VALUE 'CODEA'.
            05            PIC X(5)   VALUE 'SIREN'.

        01  L2.
            05            PIC X(60)  VALUE ALL '-'.

        01  L3.
            05            PIC X(6)   VALUE 'CODEA'.
            05            PIC X(12)   VALUE 'DATE VENTE'.
            05            PIC X(7)   VALUE 'SIREN'.
            05            PIC X(9)  VALUE 'QUANTITE'.
            05            PIC X(5)  VALUE 'PRIX'.

        PROCEDURE DIVISION.
       ******************************************************************
       * AFFICHER TOUS LES CONTRATS ET LES ARTISTES CONCERNES, PUIS     *
       * INSERER UNE NOUVELLE VENTE POUR L'ALBUM T702.                  *
       ******************************************************************
            PERFORM DEBUT
            PERFORM UNTIL FIN-TABLE
               PERFORM AFFICHER-CONTRAT
               PERFORM LECTURE-CONTRAT
            END-PERFORM

            PERFORM INSERTION

            DISPLAY L2
            DISPLAY L3
            DISPLAY L2

            PERFORM AFFICHAGE-INSERTION

            PERFORM DELETE-INSERTION

            PERFORM FIN
            STOP RUN
            .

        DEBUT.
            EXEC SQL OPEN CURS END-EXEC
            IF SQLCODE NOT = ZEROES
               MOVE SQLCODE TO SQLCODE-ED
               DISPLAY 'ERREUR OPEN CURS, SQLCODE: ' SQLCODE-ED
               PERFORM FIN-ERREUR
            END-IF

       * 1ERE LECTURE CURS
            PERFORM LECTURE-CONTRAT
            IF FIN-TABLE
               DISPLAY 'TABLE CONTRAT VIDE'
               PERFORM FIN-ERREUR
            END-IF

            DISPLAY L2
            DISPLAY L1
            DISPLAY L2

            .

        AFFICHER-CONTRAT.
            ADD 1 TO CPT-LUS
            DISPLAY CON-CODEP ' '  PER-IDENTITE ' ' CON-CODEA '  '
            CON-SIREN
            .

        LECTURE-CONTRAT.
            INITIALIZE CON-CONTRAT
            INITIALIZE PER-PERSONNE
            EXEC SQL FETCH CURS
             INTO :CON-CODEP, :PER-IDENTITE, :CON-CODEA, :CON-SIREN
            END-EXEC

            EVALUATE SQLCODE
             WHEN ZEROES
              CONTINUE
             WHEN +100
              SET FIN-TABLE TO TRUE
             WHEN OTHER
               MOVE SQLCODE TO SQLCODE-ED
               DISPLAY 'ERREUR FETCH, SQLCODE : ' SQLCODE-ED
               PERFORM FIN-ERREUR
            END-EVALUATE
            .

        INSERTION.
            EXEC SQL INSERT INTO VENTES
             VALUES ('T702',
                     CURRENT DATE,
                     '463CQ',
                     200,
                     (SELECT PRIX FROM VENTES
                            WHERE CODEA = 'T702'
                            AND DATEVENTE = '20.12.1997') * 1.10)
            END-EXEC

            EVALUATE SQLCODE
             WHEN ZEROES
              DISPLAY ' '
              DISPLAY 'INSERTION EFFECTUEE'
              DISPLAY ' '
             WHEN OTHER
               MOVE SQLCODE TO SQLCODE-ED
               DISPLAY 'ERREUR FETCH, SQLCODE : ' SQLCODE-ED
               PERFORM FIN-ERREUR
            END-EVALUATE
            .

        DELETE-INSERTION.
            EXEC SQL
              DELETE FROM VENTES
                     WHERE CODEA = 'T702'
                     AND DATEVENTE = '15.12.2023'
            END-EXEC.

        AFFICHAGE-INSERTION.
            EXEC SQL
              SELECT CODEA, DATEVENTE, SIREN, QTE, PRIX
              INTO :VEN-CODEA,
                   :VEN-DATEVENTE,
                   :VEN-SIREN,
                   :VEN-QTE,
                   :VEN-PRIX
              FROM VENTES
              WHERE DATEVENTE = CURRENT DATE
            END-EXEC

            MOVE VEN-QTE TO QTE-ED
            MOVE VEN-PRIX TO PRIX-ED

            DISPLAY VEN-CODEA '  ' VEN-DATEVENTE '  ' VEN-SIREN ' '
            QTE-ED '   ' PRIX-ED.

        FIN-ERREUR.
            MOVE 17 TO RETURN-CODE
            STOP RUN
            .

        FIN.
            EXEC SQL CLOSE CURS END-EXEC

            DISPLAY SPACES
            DISPLAY 'CPT-LUS : ' CPT-LUS
            .
 MEMBER NAME  A04CTDAT
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04CTDAT.
        AUTHOR. JULIEN.
        DATE-WRITTEN. 19/12/2023.
       ******************************************************************
       *  FONCTION DU SOUS-PROGRAMME: CONTROLE ET FORMATAGE D'UNE DATE  *
       *  230329 : CREATION DU PROGRAMME                                *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
       * DESCRIPTION DE LA TABLE DES MOIS
        01  TAB-MOIS.
            05                 PIC X(11) VALUE '31JANVIER'.
            05                 PIC X(11) VALUE '28FEVRIER'.
            05                 PIC X(11) VALUE '31MARS'.
            05                 PIC X(11) VALUE '30AVRIL'.
            05                 PIC X(11) VALUE '31MAI'.
            05                 PIC X(11) VALUE '30JUIN'.
            05                 PIC X(11) VALUE '31JUILLET'.
            05                 PIC X(11) VALUE '31AOUT'.
            05                 PIC X(11) VALUE '30SEPTEMBRE'.
            05                 PIC X(11) VALUE '31OCTOBRE'.
            05                 PIC X(11) VALUE '30NOVEMBRE'.
            05                 PIC X(11) VALUE '31DECEMBRE'.
        01  REDEFINES TAB-MOIS.
            05 POSTE OCCURS 12.
               10 NB-JOURS     PIC 99.
               10 LIB-MOIS     PIC X(9).

       * ZONES POUR CALCUL ANNEE BISSEXTILE
        01  QUOTIENT           PIC 9(4)  VALUE ZEROES.
        01  RESTE              PIC 9(4)  VALUE ZEROES.

        LINKAGE SECTION.
       * DESCRIPTION DE LA ZONE DE COMMUNICATION AVEC LE PROGRAMME
       * APPELANT
        01  ZCOM.
            05 ZDATE.
               10 ZANNEE       PIC 9(4).
               10 ZMOIS        PIC 9(2).
               10 ZJOUR        PIC 9(2).
            05 ZCDRET          PIC 9.
               88 ZCDRET-OK    VALUE 0.
               88 ZCDRET-KO    VALUE 1.
            05 ZDATE-EDIT      PIC X(17).

        PROCEDURE DIVISION USING ZCOM.
            PERFORM CONTROLE-DATE
            IF ZCDRET-OK
               PERFORM FORMATAGE-DATE
            END-IF

            PERFORM FIN
            .
        CONTROLE-DATE.
            SET ZCDRET-KO TO TRUE

       * CONTROLE DE NUMERICITE DE LA DATE
            IF ZDATE NOT NUMERIC
               PERFORM FIN
            END-IF

       * CONTROLE DU MOIS
            IF ZMOIS < 1 OR > 12
               PERFORM FIN
            END-IF

       * CONTROLE NB JOURS FEVRIER
            IF ZMOIS = 2
               PERFORM ALIM-NB-JOURS-FEVRIER
            END-IF

       * CONTROLE DU JOUR DANS LA TABLE SELON LE MOIS SAISI QUI
       * CORRESPOND AU NUMERO DU POSTE DANS LA TABLE
            IF ZJOUR < 1 OR > NB-JOURS(ZMOIS)
               PERFORM FIN
            END-IF

       * SI PAS D'ERREUR METTRE 0 DANS CODE RETOUR
            SET ZCDRET-OK TO TRUE
            .

        ALIM-NB-JOURS-FEVRIER.
       * - LES ANNEES DIVISIBLES PAR 400 SONT BISSEXTILES

       * - LES CENTENAIRES NE SONT PAS BISSEXTILES
       * - LES ANNEES DIVISIBLES PAR 4 SONT BISSEXTILES
       *    DIVIDE ZANNEE BY 4 GIVING QUOTIENT REMAINDER RESTE

            IF FUNCTION REM(ZANNEE, 400) = ZEROES
               ADD 1 TO NB-JOURS(2)
               DISPLAY '       ' ZANNEE ' BISSEXTILE'
            ELSE
               IF FUNCTION REM(ZANNEE, 100) = ZEROES
                  DISPLAY '       ' ZANNEE ' NON BISSEXTILE'
               ELSE
                  IF FUNCTION REM(ZANNEE, 4) = ZEROES
                     ADD 1 TO NB-JOURS(2)
                     DISPLAY '       ' ZANNEE ' BISSEXTILE'
                  ELSE
                     DISPLAY '       ' ZANNEE ' NON BISSEXTILE'
                  END-IF
               END-IF
            END-IF
            .


        FORMATAGE-DATE.
            STRING ZJOUR           DELIMITED BY SIZE
                   SPACES          DELIMITED BY SIZE
                   LIB-MOIS(ZMOIS) DELIMITED BY SPACES
                   SPACES          DELIMITED BY SIZE
                   ZANNEE          DELIMITED BY SIZE
            INTO ZDATE-EDIT
            .

        FIN.
            GOBACK
            .
 MEMBER NAME  A04P13
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04P13.
        AUTHOR. JULIEN.
        DATE-WRITTEN. 19/12/2023.
       ******************************************************************
       * PROGRAMME DE TEST DE A04SP7                                    *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
       * SQLCA
            EXEC SQL INCLUDE SQLCA END-EXEC

       * COPY DE LA ZONE DE COMMUNICATION AVEC A00SP7
            COPY ZSP7.

       * DIVERS
        01  WS-CAS                      PIC 99       VALUE ZEROES.
        01  WS-RESULTAT-ATTENDU         PIC X(50)    VALUE SPACES.

        PROCEDURE DIVISION.
       * CAS 1
       * CREATION BIEN EFFECTUEE
            INITIALIZE ZSP7
            MOVE 'C109'                    TO ZSP7-CODEA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'P190'                    TO ZSP7-CODEP
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'I'                       TO ZSP7-FONCTION
            MOVE 6                         TO ZSP7-DROITS
            MOVE 'CREATION BIEN EFFECTUEE' TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

            EXEC SQL ROLLBACK END-EXEC

       * CAS 2
       * CREATION BIEN EFFECTUEE
            INITIALIZE ZSP7
            MOVE 'COMPILATION 90'          TO ZSP7-TITREA
            MOVE 'MUSIDISQUES'             TO ZSP7-RAISON-SOCIALE
            MOVE 'BRASSENS G.'             TO ZSP7-IDENTITE
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'C'                       TO ZSP7-FONCTION
            MOVE 22                        TO ZSP7-DROITS
            MOVE 'CREATION BIEN EFFECTUEE' TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

            EXEC SQL ROLLBACK END-EXEC

       * CAS 3
       * ALBUM INEXISTANT
            INITIALIZE ZSP7
            MOVE 'AAAA'                    TO ZSP7-CODEA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'P190'                    TO ZSP7-CODEP
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'I'                       TO ZSP7-FONCTION
            MOVE 6                         TO ZSP7-DROITS
            MOVE 'ALBUM INEXISTANT'        TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 4
       * ALBUM INEXISTANT
            INITIALIZE ZSP7
            MOVE 'AAAAAAAAAAAAAA'          TO ZSP7-TITREA
            MOVE 'MUSIDISQUES'             TO ZSP7-RAISON-SOCIALE
            MOVE 'BRASSENS G.'             TO ZSP7-IDENTITE
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'C'                       TO ZSP7-FONCTION
            MOVE 6                         TO ZSP7-DROITS
            MOVE 'ALBUM INEXISTANT'        TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 5
       * CODE ALBUM ET TITRE RENSEIGNES
            INITIALIZE ZSP7
            MOVE 'C109'                    TO ZSP7-CODEA
            MOVE 'COMPILATION 90'          TO ZSP7-TITREA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'P190'                    TO ZSP7-CODEP
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'I'                       TO ZSP7-FONCTION
            MOVE 6                         TO ZSP7-DROITS
            MOVE 'CODE ALBUM ET TITRE RENSEIGNES' TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 6
       * MAISON DE DISTRIBUTION INEXISTANTE
            INITIALIZE ZSP7
            MOVE 'C109'                    TO ZSP7-CODEA
            MOVE 'AAAAA'                   TO ZSP7-SIREN
            MOVE 'P190'                    TO ZSP7-CODEP
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'I'                       TO ZSP7-FONCTION
            MOVE 6                         TO ZSP7-DROITS
            MOVE 'MAISON DIST INEXISTANTE' TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 7
       * MAISON DE DISTRIBUTION INEXISTANTE
            INITIALIZE ZSP7
            MOVE 'COMPILATION 90'          TO ZSP7-TITREA
            MOVE 'AAAAAAAAAAA'             TO ZSP7-RAISON-SOCIALE
            MOVE 'BRASSENS G.'             TO ZSP7-IDENTITE
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'C'                       TO ZSP7-FONCTION
            MOVE 6                         TO ZSP7-DROITS
            MOVE 'MAISON DIST INEXISTANTE' TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 8
       * CODE MAISON ET RAISON SOCIALE RENSEIGNES
            INITIALIZE ZSP7
            MOVE 'COMPILATION 90'          TO ZSP7-TITREA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'MUSIDISQUES'             TO ZSP7-RAISON-SOCIALE
            MOVE 'BRASSENS G.'             TO ZSP7-IDENTITE
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'C'                       TO ZSP7-FONCTION
            MOVE 6                         TO ZSP7-DROITS
            MOVE 'CODE MAISON ET RAISON RENS' TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 9
       * PERSONNE INEXISTANTE
            INITIALIZE ZSP7
            MOVE 'C109'                    TO ZSP7-CODEA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'AAAA'                    TO ZSP7-CODEP
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'I'                       TO ZSP7-FONCTION
            MOVE 6                         TO ZSP7-DROITS
            MOVE 'PERSONNE INEXISTANTE'    TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 10
       * PERSONNE INEXISTANTE
            INITIALIZE ZSP7
            MOVE 'COMPILATION 90'          TO ZSP7-TITREA
            MOVE 'MUSIDISQUES'             TO ZSP7-RAISON-SOCIALE
            MOVE 'AAAAAAAAAAA'             TO ZSP7-IDENTITE
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'C'                       TO ZSP7-FONCTION
            MOVE 6                         TO ZSP7-DROITS
            MOVE 'PERSONNE INEXISTANTE'    TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 11
       * CODE PERSONNE ET IDENTITE RENSEIGNES
            INITIALIZE ZSP7
            MOVE 'C109'                    TO ZSP7-CODEA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'P190'                    TO ZSP7-CODEP
            MOVE 'BRASSENS G.'             TO ZSP7-IDENTITE
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'I'                       TO ZSP7-FONCTION
            MOVE 6                         TO ZSP7-DROITS
            MOVE 'CODE PERSONNE ET IDENTITE RENSEIGNES'
                                           TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 12
       * CONTRAT DEJA EXISTANT
            INITIALIZE ZSP7
            MOVE 'A836'                    TO ZSP7-CODEA
            MOVE '200AJ'                   TO ZSP7-SIREN
            MOVE 'P150'                    TO ZSP7-CODEP
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'D'                       TO ZSP7-FONCTION
            MOVE 6                         TO ZSP7-DROITS
            MOVE 'CONTRAT DEJA EXISTANT'   TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 13
       * DATE DE SIGNATURE INVALIDE
            INITIALIZE ZSP7
            MOVE 'C109'                    TO ZSP7-CODEA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'P190'                    TO ZSP7-CODEP
            MOVE 'AAAAAAAA'                TO ZSP7-DATESIGN
            MOVE 'I'                       TO ZSP7-FONCTION
            MOVE 6                         TO ZSP7-DROITS
            MOVE 'DATE SIGNATURE INVALIDE' TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 14
       * DATE DE SIGNATURE INVALIDE
            INITIALIZE ZSP7
            MOVE 'C109'                    TO ZSP7-CODEA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'P190'                    TO ZSP7-CODEP
            MOVE '99999999'                TO ZSP7-DATESIGN
            MOVE 'I'                       TO ZSP7-FONCTION
            MOVE 6                         TO ZSP7-DROITS
            MOVE 'DATE SIGNATURE INVALIDE' TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 15
       * FONCTION INVALIDE
            INITIALIZE ZSP7
            MOVE 'C109'                    TO ZSP7-CODEA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'P190'                    TO ZSP7-CODEP
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'A'                       TO ZSP7-FONCTION
            MOVE 6                         TO ZSP7-DROITS
            MOVE 'FONCTION INVALIDE'       TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 16
       * DROITS INVALIDES
            INITIALIZE ZSP7
            MOVE 'C109'                    TO ZSP7-CODEA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'P190'                    TO ZSP7-CODEP
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'I'                       TO ZSP7-FONCTION
            MOVE ZEROES                    TO ZSP7-DROITS
            MOVE 'DROITS INVALIDES'        TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 17
       * DROITS INVALIDES
            INITIALIZE ZSP7
            MOVE 'C109'                    TO ZSP7-CODEA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'P190'                    TO ZSP7-CODEP
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'I'                       TO ZSP7-FONCTION
            MOVE 7                         TO ZSP7-DROITS
            MOVE 'DROITS INVALIDES'        TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

            STOP RUN
            .

        APPEL-SSPROG.
            DISPLAY SPACES
            ADD 1 TO WS-CAS
            DISPLAY ' CAS : ' WS-CAS
            DISPLAY '   ALBUM   : ' ZSP7-CODEA ', ' ZSP7-TITREA
            DISPLAY '   MAISON  : ' ZSP7-SIREN ', ' ZSP7-RAISON-SOCIALE
            DISPLAY '   PERSONNE: ' ZSP7-CODEP ', ' ZSP7-IDENTITE
            DISPLAY '   DROITS  : ' ZSP7-DROITS
            DISPLAY '   DATESIGN: ' ZSP7-DATESIGN
            DISPLAY '   FONCTION: ' ZSP7-FONCTION
            DISPLAY '   RESULTAT ATTENDU : ' WS-RESULTAT-ATTENDU

            CALL 'A04SP7' USING ZSP7

            DISPLAY '   RESULTAT OBSERVE : ' ZSP7-CODERET ' ' ZSP7-LIBERR
            .
 MEMBER NAME  A04SP7
       ******************************************************************
       * DIVISION D'IDENTIFICATION DU PROGRAMME                         *
       ******************************************************************
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04SP7.
        AUTHOR. JULIEN
        DATE-WRITTEN. 18/12/2023
       ******************************************************************
       * DEFINITION DE L'ENVIRONNEMENT D'EXECUTION DU PROGRAMME         *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
       * SQLCA
            EXEC SQL INCLUDE SQLCA    END-EXEC.

       * CONTRAT
            EXEC SQL INCLUDE CONTRAT  END-EXEC.

       * ALBUM
            EXEC SQL INCLUDE ALBUM    END-EXEC.

       * MAISON DE DISTRIBUTION
            EXEC SQL INCLUDE MAISDISQ END-EXEC.

       * PERSONNE
            EXEC SQL INCLUDE PERSONNE END-EXEC.

        01 MOYENNE-DROITS      PIC S999V99 USAGE COMP-3.

        01 NUM1                PIC S999V99 USAGE COMP-3.
        01 NUM2                PIC S999V99 USAGE COMP-3.

        01 SQLCODE-ED          PIC -(5)9.

        01 ZCOM.
            05 ZDATE.
               10 ZANNEE       PIC 9(4).
               10 ZMOIS        PIC 9(2).
               10 ZJOUR        PIC 9(2).
            05 ZCDRET          PIC 9.
               88 ZCDRET-OK    VALUE 0.
               88 ZCDRET-KO    VALUE 1.
            05 ZDATE-EDIT      PIC X(17).

        01 DATE-DU-JOUR.
            05 ANNEE-MOIS-JOUR PIC 9(8).
            05 FILLER          PIC 9(13).

        77                     PIC X  VALUE ZEROES.
            88 ENTREE-INVALIDE        VALUE '1'.
            88 ENTREE-VALIDE           VALUE '2'.

        LINKAGE SECTION.
            EXEC SQL INCLUDE ZSP7 END-EXEC.

        PROCEDURE DIVISION USING ZSP7.
            PERFORM INITIALISATION
            PERFORM VERIFICATIONS.

        INITIALISATION.
            INITIALIZE ZSP7-CODERET
            SET ENTREE-VALIDE TO TRUE.

        VERIFICATIONS.
            PERFORM VERIF-VALIDITE-ALBUM
            IF ENTREE-VALIDE PERFORM VERIF-VALIDITE-MAISON   END-IF
            IF ENTREE-VALIDE PERFORM VERIF-VALIDITE-PERSONNE END-IF
            IF ENTREE-VALIDE PERFORM VERIF-VALIDITE-FONCTION END-IF
            IF ENTREE-VALIDE PERFORM VERIF-EXISTENCE-CONTRAT END-IF
            IF ENTREE-VALIDE PERFORM VERIF-VALIDITE-DROITS   END-IF
            IF ENTREE-VALIDE PERFORM VERIF-VALIDITE-DATE     END-IF

            IF ENTREE-VALIDE
              PERFORM INSERER-CONTRAT
            END-IF

            PERFORM REDIGE-LIBELLE.

       * L'ALIMENTATION DES VARIABLES HOTES SE FAIT MAINTENANT PAR LES
       * PARAS DE RECHERCHE, LE PASSAGE COMMENTE N'EST A PRIORI PLUS
       * UTILE, DE MEME QUE LES PARAS QUI SE RETROUVENT INUTILISES.
        INSERER-CONTRAT.
       *    IF ZSP7-CODEA = SPACES
       *      PERFORM RECUPERER-CODEA
       *    ELSE
       *      MOVE ZSP7-CODEA TO CON-CODEA
       *    END-IF
       *
       *    IF ZSP7-SIREN = SPACES
       *      PERFORM RECUPERER-SIREN
       *    ELSE
       *      MOVE ZSP7-SIREN TO CON-SIREN
       *    END-IF
       *
       *    IF ZSP7-CODEP = SPACES
       *      PERFORM RECUPERER-CODEP
       *    ELSE
       *      MOVE ZSP7-CODEP TO CON-CODEP
       *    END-IF
       *
            PERFORM TRANSFORMER-DATE

            PERFORM INSERTION-PROPREMENT-DITE.

        RECUPERER-CODEA.
            MOVE ZSP7-TITREA TO ALB-TITREA-TEXT
            EXEC SQL
              SELECT CODEA
              INTO :CON-CODEA
              FROM ALBUM
                WHERE TITREA = :ALB-TITREA
              END-EXEC.

        RECUPERER-SIREN.
            MOVE ZSP7-RAISON-SOCIALE TO MAI-RAISON-SOCIALE
            EXEC SQL
              SELECT SIREN
              INTO :CON-SIREN
              FROM MAISON_DIST
                WHERE RAISON_SOCIALE = :MAI-RAISON-SOCIALE
              END-EXEC.

        RECUPERER-CODEP.
            MOVE ZSP7-IDENTITE TO PER-IDENTITE-TEXT
            EXEC SQL
              SELECT CODEP
              INTO :CON-CODEP
              FROM PERSONNE
                WHERE IDENTITE = :PER-IDENTITE
              END-EXEC.

        TRANSFORMER-DATE.
            STRING
              ZSP7-DATESIGN-JJ DELIMITED BY SIZE
              '.'              DELIMITED BY SIZE
              ZSP7-DATESIGN-MM DELIMITED BY SIZE
              '.'              DELIMITED BY SIZE
              ZSP7-DATESIGN-AA DELIMITED BY SIZE
              INTO CON-DATESIGN
            END-STRING.

        INSERTION-PROPREMENT-DITE.
            MOVE ZSP7-DROITS TO CON-DROITS
            MOVE ZSP7-FONCTION TO CON-FONCTION
            DISPLAY CON-CODEA ' ' CON-SIREN ' ' CON-CODEP ' ' CON-DROITS
            ' ' CON-DATESIGN ' ' CON-FONCTION
            EXEC SQL
              INSERT INTO CONTRAT
              VALUES (:CON-CODEA,
                      :CON-SIREN,
                      :CON-CODEP,
                      :CON-DROITS,
                      :CON-DATESIGN,
                      :CON-FONCTION)
            END-EXEC
            EXEC SQL
              SELECT *
                INTO :CON-CODEA,
                     :CON-SIREN,
                     :CON-CODEP,
                     :CON-DROITS,
                     :CON-DATESIGN,
                     :CON-FONCTION
                FROM CONTRAT
                WHERE CODEA = :CON-CODEA
                AND SIREN = :CON-SIREN
                AND CODEP = :CON-CODEP
            END-EXEC.

        VERIF-VALIDITE-ALBUM.
       *    DISPLAY 'DEMARRAGE CONTROLE VALIDITE ALBUM...'
            PERFORM VERIF-ALBUM-CHAMPS
            IF ENTREE-VALIDE
              PERFORM RECHERCHE-ALBUM
            END-IF.

        VERIF-ALBUM-CHAMPS.
       *    DISPLAY 'VERIFICATION REMPLISSAGE...'
            IF ZSP7-CODEA = SPACES AND ZSP7-TITREA = SPACES
              SET ENTREE-INVALIDE TO TRUE
              MOVE 1 TO ZSP7-CODERET
            ELSE
              IF ZSP7-CODEA NOT = SPACES
              AND ZSP7-TITREA NOT = SPACES
                SET ENTREE-INVALIDE TO TRUE
                MOVE 2 TO ZSP7-CODERET
              END-IF
            END-IF.

        RECHERCHE-ALBUM.
       *    DISPLAY 'VERIFICATION EXISTENCE ALBUM...'

            IF ZSP7-CODEA NOT = SPACES
              PERFORM RECHERCHE-PAR-CODEA
            END-IF

            IF ZSP7-TITREA NOT = SPACES
              PERFORM RECHERCHE-PAR-TITREA
            END-IF

            PERFORM ALBUM-EVALUER-SQLCODE.

       * LES PARAS DE RECHERCHE ALIMENTENT EGALEMENT LES VARIABLES
       * HOTES DE CONTRAT EN ANTICIPATION DE L'INSERTION FINALE.
        RECHERCHE-PAR-CODEA.
       *      DISPLAY '... PAR CODEA'
              MOVE ZSP7-CODEA TO CON-CODEA
              EXEC SQL
                SELECT TITREA
                INTO :ALB-TITREA
                FROM ALBUM
                     WHERE CODEA = :CON-CODEA
              END-EXEC.

        RECHERCHE-PAR-TITREA.
       *      DISPLAY '... PAR TITREA'
              MOVE ZSP7-TITREA TO ALB-TITREA-TEXT
              EXEC SQL
                SELECT CODEA
                INTO :CON-CODEA
                FROM ALBUM
                     WHERE TITREA = :ALB-TITREA
              END-EXEC.

        ALBUM-EVALUER-SQLCODE.
            EVALUATE SQLCODE
             WHEN ZEROES
               DISPLAY 'ALBUM TROUVE.'
             WHEN +100
               SET ENTREE-INVALIDE TO TRUE
               MOVE 1 TO ZSP7-CODERET
             WHEN OTHER
               SET ENTREE-INVALIDE TO TRUE
               MOVE 99 TO ZSP7-CODERET
            END-EVALUATE.

        VERIF-VALIDITE-MAISON.
       *    DISPLAY 'DEMARRAGE CONTROLE VALIDITE MAISON DISTRIBUTION...'

            PERFORM VERIF-MAISON-CHAMPS

            IF ENTREE-VALIDE
              PERFORM RECHERCHE-MAISON
            END-IF.

        VERIF-MAISON-CHAMPS.
       *    DISPLAY 'VERIFICATION REMPLISSAGE...'
            IF ZSP7-SIREN = SPACES AND ZSP7-RAISON-SOCIALE = SPACES
              SET ENTREE-INVALIDE TO TRUE
              MOVE 3 TO ZSP7-CODERET
            ELSE
              IF ZSP7-SIREN NOT = SPACES
              AND ZSP7-RAISON-SOCIALE NOT = SPACES
                SET ENTREE-INVALIDE TO TRUE
                MOVE 4 TO ZSP7-CODERET
              END-IF
            END-IF.

        RECHERCHE-MAISON.
       *    DISPLAY 'VERIFICATION EXISTENCE MAISON DE DISTRI...'

            IF ZSP7-SIREN NOT = SPACES
              PERFORM RECHERCHE-PAR-SIREN
            END-IF

            IF ZSP7-RAISON-SOCIALE NOT = SPACES
              PERFORM RECHERCHE-PAR-RAISON-SOCIALE
            END-IF

            PERFORM MAISON-EVALUER-SQLCODE.

        RECHERCHE-PAR-SIREN.
       *    DISPLAY '... PAR SIREN'
            MOVE ZSP7-SIREN TO CON-SIREN
            EXEC SQL
              SELECT RAISON_SOCIALE, ADRESSE, CODERES
              INTO :MAI-RAISON-SOCIALE,
                   :MAI-ADRESSE,
                   :MAI-CODERES
              FROM MAISON_DIST
                   WHERE SIREN = :CON-SIREN
            END-EXEC.

        RECHERCHE-PAR-RAISON-SOCIALE.
       *    DISPLAY '... PAR RAISON-SOCIALE'
            MOVE ZSP7-RAISON-SOCIALE TO MAI-RAISON-SOCIALE
            EXEC SQL
              SELECT SIREN, ADRESSE, CODERES
              INTO :CON-SIREN,
                   :MAI-ADRESSE,
                   :MAI-CODERES
              FROM MAISON_DIST
                   WHERE RAISON_SOCIALE = :MAI-RAISON-SOCIALE
            END-EXEC.

        MAISON-EVALUER-SQLCODE.
            EVALUATE SQLCODE
             WHEN ZEROES
               DISPLAY 'MAISON DE DISTRIBUTION TROUVEE.'
             WHEN +100
               SET ENTREE-INVALIDE TO TRUE
               MOVE 3 TO ZSP7-CODERET
             WHEN OTHER
               SET ENTREE-INVALIDE TO TRUE
               MOVE 99 TO ZSP7-CODERET
            END-EVALUATE.

        VERIF-VALIDITE-PERSONNE.
       *    DISPLAY 'DEMARRAGE CONTROLE VALIDITE ARTISTE...'

            PERFORM VERIF-PERSONNE-CHAMPS

            IF ENTREE-VALIDE
              PERFORM RECHERCHE-PERSONNE
            END-IF.

        VERIF-PERSONNE-CHAMPS.
       *    DISPLAY 'VERIFICATION REMPLISSAGE...'
            IF ZSP7-CODEP = SPACES AND ZSP7-IDENTITE = SPACES
              SET ENTREE-INVALIDE TO TRUE
              MOVE 5 TO ZSP7-CODERET
            ELSE
              IF ZSP7-CODEP NOT = SPACES
              AND ZSP7-IDENTITE NOT = SPACES
                SET ENTREE-INVALIDE TO TRUE
                MOVE 6 TO ZSP7-CODERET
              END-IF
            END-IF.

        RECHERCHE-PERSONNE.
            IF ZSP7-CODEP NOT = SPACES
              PERFORM RECHERCHE-PAR-CODEP
            END-IF

            IF ZSP7-IDENTITE NOT = SPACES
              PERFORM RECHERCHE-PAR-IDENTITE
            END-IF

            PERFORM PERSONNE-EVALUER-SQLCODE.

        RECHERCHE-PAR-CODEP.
       *    DISPLAY '... PAR CODEP'
            MOVE ZSP7-CODEP TO CON-CODEP
            EXEC SQL
              SELECT IDENTITE, TYPE
              INTO :PER-IDENTITE,
                   :PER-TYPE
              FROM PERSONNE
                   WHERE CODEP = :CON-CODEP
            END-EXEC.

        RECHERCHE-PAR-IDENTITE.
       *    DISPLAY '... PAR IDENTITE'
            MOVE ZSP7-IDENTITE TO PER-IDENTITE-TEXT
            EXEC SQL
              SELECT CODEP, TYPE
              INTO :CON-CODEP,
                   :PER-TYPE
              FROM PERSONNE
                   WHERE IDENTITE = :PER-IDENTITE
            END-EXEC.

        PERSONNE-EVALUER-SQLCODE.
            EVALUATE SQLCODE
             WHEN ZEROES
               DISPLAY 'ARTISTE TROUVE.'
             WHEN +100
               SET ENTREE-INVALIDE TO TRUE
               MOVE 5 TO ZSP7-CODERET
             WHEN OTHER
               SET ENTREE-INVALIDE TO TRUE
               MOVE 99 TO ZSP7-CODERET
            END-EVALUATE.

        VERIF-EXISTENCE-CONTRAT.
       *    DISPLAY 'DEMARRAGE CONTROLE EXISTENCE CONTRAT...'

            PERFORM RECHERCHE-CONTRAT
            PERFORM CONTRAT-EVALUER-SQLCODE.
       * CON-FONCTION EST LA SEULE VARIABLE HOTE NON ALIMENTEE PAR LES
       * PARAS DE VERIF APPROPRIES, CAR LE CONTROLE DE LA FONCTION EST
       * PLUS SIMPLE. IL FAUT DONC L'ALIMENTER MAINTENANT.
        RECHERCHE-CONTRAT.
            MOVE ZSP7-FONCTION TO CON-FONCTION
            EXEC SQL
              SELECT DROITS, DATESIGN
              INTO :CON-DROITS,
                   :CON-DATESIGN
              FROM CONTRAT
                   WHERE CODEA = :CON-CODEA
                   AND SIREN = :CON-SIREN
                   AND CODEP = :CON-CODEP
                   AND FONCTION = :CON-FONCTION
            END-EXEC.

        CONTRAT-EVALUER-SQLCODE.
            EVALUATE SQLCODE
             WHEN ZEROES
               SET ENTREE-INVALIDE TO TRUE
               MOVE 7 TO ZSP7-CODERET
             WHEN +100
               DISPLAY 'CONTRAT NON EXISTENT.'
             WHEN OTHER
               SET ENTREE-INVALIDE TO TRUE
               MOVE 99 TO ZSP7-CODERET
            END-EVALUATE.

        VERIF-VALIDITE-FONCTION.
       *    DISPLAY 'DEMARRAGE CONTROLE VALIDITE FONCTION...'
            IF ZSP7-FONCTION NOT = 'I'
            AND ZSP7-FONCTION NOT = 'P'
            AND ZSP7-FONCTION NOT = 'C'
            AND ZSP7-FONCTION NOT = 'D'
              SET ENTREE-INVALIDE TO TRUE
              MOVE 9 TO ZSP7-CODERET
            END-IF.

        VERIF-VALIDITE-DROITS.
       *    DISPLAY 'DEMARRAGE CONTROLE VALIDITE DROITS...'

            PERFORM VERIF-DROITS-CHAMPS

            IF ENTREE-VALIDE
              PERFORM DROITS-RECUPERATION-MOYENNE
            END-IF.

        VERIF-DROITS-CHAMPS.
       *    DISPLAY 'VERIFICATION REMPLISSAGE...'

            IF ZSP7-DROITS = ZEROES
              SET ENTREE-INVALIDE TO TRUE
              MOVE 10 TO ZSP7-CODERET
            END-IF.

        DROITS-RECUPERATION-MOYENNE.
       *    DISPLAY 'VERIFICATION MOYENNE DES DROITS'
            PERFORM VERIF-MOYENNE-ARTISTE

            IF SQLCODE = +100
              PERFORM VERIF-MOYENNE-FONCTION
            END-IF

            PERFORM VERIF-DROITS-FOURCHETTE.

        VERIF-MOYENNE-ARTISTE.
       *    MOVE ZSP7-FONCTION TO CON-FONCTION
       *    MOVE ZSP7-CODEP TO CON-CODEP
            EXEC SQL
              SELECT CODEP, AVG(DROITS)
              INTO :CON-CODEP, :MOYENNE-DROITS
              FROM CONTRAT
                   WHERE FONCTION = :CON-FONCTION
                   AND CODEP = :CON-CODEP
              GROUP BY CODEP
            END-EXEC.

        VERIF-MOYENNE-FONCTION.
       *    DISPLAY '1ER CONTRAT DANS CETTE FONCTION POUR ARTISTE'
       *    DISPLAY 'MOYENNE GENERALE UTILISEE POUR : ' CON-FONCTION
            EXEC SQL
              SELECT AVG(DROITS)
              INTO :MOYENNE-DROITS
              FROM CONTRAT
                   WHERE FONCTION = :CON-FONCTION
            END-EXEC.

        VERIF-DROITS-FOURCHETTE.
            COMPUTE NUM1 ROUNDED = MOYENNE-DROITS * 0,90
            COMPUTE NUM2 ROUNDED = MOYENNE-DROITS * 1,10

            EVALUATE TRUE
            WHEN ZSP7-DROITS > NUM1
            AND ZSP7-DROITS < NUM2
              DISPLAY 'DROITS DANS LA BONNE MARGE DE PRIX.'
            WHEN OTHER
              SET ENTREE-INVALIDE TO TRUE
              MOVE 10 TO ZSP7-CODERET
            END-EVALUATE.

        VERIF-VALIDITE-DATE.
       *    DISPLAY 'DEMARRAGE CONTROLE VALIDITE DATE...'

            PERFORM VERIF-DATE-CHAMP

            IF ENTREE-VALIDE
              PERFORM DATE-COHERENCE-FORMAT
            END-IF

            IF ENTREE-VALIDE
              PERFORM DATE-COHERENCE-CHRONO
            END-IF.

        VERIF-DATE-CHAMP.
            IF ZSP7-DATESIGN = ZEROES
              SET ENTREE-INVALIDE TO TRUE
              MOVE 8 TO ZSP7-CODERET
            END-IF.

        DATE-COHERENCE-FORMAT.
            INITIALIZE ZCOM
            MOVE ZSP7-DATESIGN TO ZDATE
            CALL 'A04CTDAT' USING ZCOM
            IF ZCDRET-KO
              SET ENTREE-INVALIDE TO TRUE
              MOVE 8 TO ZSP7-CODERET
       *      DISPLAY 'DATE INVALIDE'
            END-IF.

        DATE-COHERENCE-CHRONO.
            MOVE FUNCTION CURRENT-DATE TO DATE-DU-JOUR
            IF ZSP7-DATESIGN < DATE-DU-JOUR
              SET ENTREE-INVALIDE TO TRUE
              MOVE 8 TO ZSP7-CODERET
            END-IF.

        REDIGE-LIBELLE.
            EVALUATE ZSP7-CODERET
              WHEN 0
                MOVE 'CREATION BIEN EFFECTUEE' TO ZSP7-LIBERR
              WHEN 1
                MOVE 'ALBUM NON RENSEIGNE OU INEXISTANT' TO ZSP7-LIBERR
              WHEN 2
                MOVE 'CODE ALBUM ET TITRE RENSEIGNES' TO ZSP7-LIBERR
              WHEN 3
                STRING
                  'MAISON DE DISTRIBUTION NON-' DELIMITED BY '-'
                  ' RENSEIGNEE OU INEXISTANTE-' DELIMITED BY '-'
                  INTO ZSP7-LIBERR
                END-STRING
              WHEN 4
                STRING
                  'CODE MAISON DE DISTRIBUTION-' DELIMITED BY '-'
                  ' ET RAISON SOCIALE RENSEIGNES-' DELIMITED BY '-'
                  INTO ZSP7-LIBERR
                END-STRING
              WHEN 5
                MOVE 'PERSONNE NON RENSEIGNEE OU INEXISTANTE'
                TO ZSP7-LIBERR
              WHEN 6
                MOVE 'CODE PERSONNE ET IDENTITE RENSEIGNES'
                TO ZSP7-LIBERR
              WHEN 7
                MOVE 'CONTRAT DEJA EXISTANT' TO ZSP7-LIBERR
              WHEN 8
                MOVE 'DATE DE SIGNATURE INVALIDE' TO ZSP7-LIBERR
              WHEN 9
                MOVE 'FONCTION INVALIDE' TO ZSP7-LIBERR
              WHEN 10
                MOVE 'DROITS INVALIDES' TO ZSP7-LIBERR
              WHEN 99
                MOVE 'ERREUR TECHNIQUE' TO ZSP7-LIBERR
            END-EVALUATE
            GOBACK.
 MEMBER NAME  DISPTEST
        IDENTIFICATION DIVISION.
        PROGRAM-ID. DISPTEST.
        AUTHOR. JULIEN.
        DATE-WRITTEN. 19/12/2023.
       ******************************************************************
       * PROGRAMME DE TEST DE A04SP7                                    *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01  Z1 PIC X(40).

        01  Z1-TAB REDEFINES Z1.
            05 Z1-CHARS OCCURS 40.
              10 Z1-CHAR PIC X.

        01  Z2 PIC X(40).

        01  Z2-TAB REDEFINES Z2.
            05 Z2-CHARS OCCURS 40.
              10 Z2-CHAR PIC X.

        01  I  PIC 99.
        01  J  PIC 99.
        01  COUNTER PIC 99.

        PROCEDURE DIVISION.
       *    MOVE 'PILE OU FACE, VICE ET VERSA, RECTO VERSO' TO Z1

       *    PERFORM COMPTER-V
       *    PERFORM INVERSER-CHARS
       *    PERFORM COMPTER-MOTS
       *    PERFORM COMPTER-LETTRES
            DISPLAY FUNCTION CURRENT-DATE
            STOP RUN.

        COMPTER-V.
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 40
              IF Z1-CHAR(I) = 'V'
                COMPUTE COUNTER = COUNTER + 1
              END-IF
            END-PERFORM
            DISPLAY 'NOMBRE DE V DANS LA PHRASE : ' COUNTER.

        INVERSER-CHARS.
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 40
              COMPUTE J = 41 - I
              MOVE Z1-CHAR(I) TO Z2-CHAR(J)
            END-PERFORM
            DISPLAY Z2.

        COMPTER-MOTS.
            MOVE 1 TO COUNTER
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 40
              IF Z1-CHAR(I) = SPACES
                COMPUTE COUNTER = COUNTER + 1
              END-IF
            END-PERFORM

            DISPLAY 'COMPTE DE MOTS : ' COUNTER.

        COMPTER-LETTRES.
            MOVE 0 TO COUNTER
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 40
              IF Z1-CHAR(I) NOT = SPACES
                COMPUTE COUNTER = COUNTER + 1
              END-IF
            END-PERFORM

            DISPLAY 'COMPTE DE CHARS : ' COUNTER.
 MEMBER NAME  A04FMAP
 A04FMAP DFHMSD TYPE=&SYSPARM,MODE=INOUT,LANG=COBOL,EXTATT=YES,         X
                CTRL=(FREEKB,FRSET),STORAGE=AUTO,TIOAPFX=YES
 A04FMAP DFHMDI COLUMN=1,LINE=1,SIZE=(24,80)
         DFHMDF POS=(1,1),ATTRB=ASKIP,LENGTH=04,INITIAL='A04F'
         DFHMDF POS=(1,23),ATTRB=ASKIP,LENGTH=32,                       X
                INITIAL='VISU/CREAT/MODIF JEU'
         DFHMDF POS=(1,65),ATTRB=ASKIP,LENGTH=07,INITIAL='A04FMAP'
         DFHMDF POS=(2,59),ATTRB=ASKIP,LENGTH=6,INITIAL='DATE :'
 DATEJ   DFHMDF POS=(2,66),ATTRB=(ASKIP,FSET),LENGTH=10
         DFHMDF POS=(4,05),ATTRB=ASKIP,LENGTH=12,                       X
                INITIAL='CODE JEU   :'
 CODEJ   DFHMDF POS=(4,18),ATTRB=(UNPROT,FSET,IC),LENGTH=5
         DFHMDF POS=(4,24),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(4,30),ATTRB=ASKIP,LENGTH=19,                       X
                INITIAL='USERID DE CREATION:'
 UCREA   DFHMDF POS=(4,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=8
 NCREA   DFHMDF POS=(4,59),ATTRB=(ASKIP,BRT,FSET),LENGTH=20
         DFHMDF POS=(05,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NB REP MAX :'
 NBREM   DFHMDF POS=(05,18),ATTRB=(UNPROT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(05,21),ATTRB=ASKIP
         DFHMDF POS=(06,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NB POINTS  :'
 NPOIN   DFHMDF POS=(06,18),ATTRB=(UNPROT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(06,21),ATTRB=ASKIP
         DFHMDF POS=(07,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='STATUT     :'
 STATU   DFHMDF POS=(07,18),ATTRB=(UNPROT,FSET),LENGTH=1
 LSTATU  DFHMDF POS=(07,20),ATTRB=(ASKIP,BRT,FSET),LENGTH=10
         DFHMDF POS=(08,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NUM REPONSE:'
 NOREP   DFHMDF POS=(08,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(08,30),ATTRB=ASKIP,LENGTH=19,                      X
                INITIAL='USERID GAGNANT    :'
 UGAGN   DFHMDF POS=(08,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=8
 NGAGN   DFHMDF POS=(08,59),ATTRB=(ASKIP,BRT,FSET),LENGTH=20
         DFHMDF POS=(11,30),ATTRB=ASKIP,LENGTH=15,                      X
                INITIAL='BATAILLE NAVALE'
         DFHMDF POS=(12,30),ATTRB=ASKIP,LENGTH=15,                      X
                INITIAL='---------------'
         DFHMDF POS=(13,18),ATTRB=ASKIP,LENGTH=08,                      X
                INITIAL='SOLUTION'
         DFHMDF POS=(13,50),ATTRB=ASKIP,LENGTH=16,                      X
                INITIAL='DERNIERE REPONSE'
         DFHMDF POS=(15,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='BATIMENT 1 :'
 SBAT1A  DFHMDF POS=(15,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 SBAT1B  DFHMDF POS=(15,21),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 SBAT1C  DFHMDF POS=(15,24),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 SBAT1D  DFHMDF POS=(15,27),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 RBAT1A  DFHMDF POS=(15,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 RBAT1B  DFHMDF POS=(15,53),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 RBAT1C  DFHMDF POS=(15,56),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 RBAT1D  DFHMDF POS=(15,59),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
         DFHMDF POS=(16,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='BATIMENT 2 :'
 SBAT2A  DFHMDF POS=(16,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 SBAT2B  DFHMDF POS=(16,21),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 SBAT2C  DFHMDF POS=(16,24),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 RBAT2A  DFHMDF POS=(16,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 RBAT2B  DFHMDF POS=(16,53),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 RBAT2C  DFHMDF POS=(16,56),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
         DFHMDF POS=(17,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='BATIMENT 3 :'
 SBAT3A  DFHMDF POS=(17,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 SBAT3B  DFHMDF POS=(17,21),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 RBAT3A  DFHMDF POS=(17,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 RBAT3B  DFHMDF POS=(17,53),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
         DFHMDF POS=(18,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='BATIMENT 4 :'
 SBAT4A  DFHMDF POS=(18,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 SBAT4B  DFHMDF POS=(18,21),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 RBAT4A  DFHMDF POS=(18,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 RBAT4B  DFHMDF POS=(18,53),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
         DFHMDF POS=(23,1),ATTRB=ASKIP,LENGTH=13,INITIAL='CLEAR-FIN'
         DFHMDF POS=(23,15),ATTRB=ASKIP,LENGTH=32,                      X
                INITIAL='PF7-JEU PREC    PF8-JEU SUIV'
         DFHMDF POS=(23,48),ATTRB=ASKIP,LENGTH=15,                      X
                INITIAL='PF10-VALIDATION'
 MSG     DFHMDF POS=(24,1),ATTRB=(ASKIP,BRT),LENGTH=79
         DFHMSD TYPE=FINAL
         END
 MEMBER NAME  A04GMAP
 A04GMAP DFHMSD TYPE=&SYSPARM,MODE=INOUT,LANG=COBOL,EXTATT=YES,         X
                CTRL=(FREEKB,FRSET),STORAGE=AUTO,TIOAPFX=YES
 A04GMAP DFHMDI COLUMN=1,LINE=1,SIZE=(24,80)
         DFHMDF POS=(1,1),ATTRB=ASKIP,LENGTH=04,INITIAL='A04G'
         DFHMDF POS=(1,23),ATTRB=ASKIP,LENGTH=32,                       X
                INITIAL='REPONSE DU JOUEUR'
         DFHMDF POS=(1,65),ATTRB=ASKIP,LENGTH=07,INITIAL='A04GMAP'
         DFHMDF POS=(2,59),ATTRB=ASKIP,LENGTH=6,INITIAL='DATE :'
 DATEJ   DFHMDF POS=(2,66),ATTRB=(ASKIP,FSET),LENGTH=10
         DFHMDF POS=(4,05),ATTRB=ASKIP,LENGTH=12,                       X
                INITIAL='CODE JEU   :'
 CODEJ   DFHMDF POS=(4,18),ATTRB=(UNPROT,FSET,IC),LENGTH=5
         DFHMDF POS=(4,24),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(4,30),ATTRB=ASKIP,LENGTH=19,                       X
                INITIAL='USERID DE CREATION:'
 UCREA   DFHMDF POS=(4,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=8
 NCREA   DFHMDF POS=(4,59),ATTRB=(ASKIP,BRT,FSET),LENGTH=20
         DFHMDF POS=(05,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NB REP MAX :'
 NBREM   DFHMDF POS=(05,18),ATTRB=(UNPROT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(05,21),ATTRB=ASKIP
         DFHMDF POS=(06,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NB POINTS  :'
 NPOIN   DFHMDF POS=(06,18),ATTRB=(UNPROT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(06,21),ATTRB=ASKIP
         DFHMDF POS=(07,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='STATUT     :'
 STATU   DFHMDF POS=(07,18),ATTRB=(UNPROT,FSET),LENGTH=1
 LSTATU  DFHMDF POS=(07,20),ATTRB=(ASKIP,BRT,FSET),LENGTH=10
         DFHMDF POS=(08,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NUM REPONSE:'
 NOREP   DFHMDF POS=(08,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(08,30),ATTRB=ASKIP,LENGTH=19,                      X
                INITIAL='USERID GAGNANT    :'
 UGAGN   DFHMDF POS=(08,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=8
 NGAGN   DFHMDF POS=(08,59),ATTRB=(ASKIP,BRT,FSET),LENGTH=20
         DFHMDF POS=(11,30),ATTRB=ASKIP,LENGTH=15,                      X
                INITIAL='BATAILLE NAVALE'
         DFHMDF POS=(12,30),ATTRB=ASKIP,LENGTH=15,                      X
                INITIAL='---------------'
         DFHMDF POS=(13,18),ATTRB=ASKIP,LENGTH=08,                      X
                INITIAL='SOLUTION'
         DFHMDF POS=(13,50),ATTRB=ASKIP,LENGTH=16,                      X
                INITIAL='DERNIERE REPONSE'
 STATTIR DFHMDF POS=(15,05),ATTRB=(ASKIP,PROT,FSET),LENGTH=11
         DFHMDF POS=(23,1),ATTRB=ASKIP,LENGTH=13,INITIAL='CLEAR-FIN'
         DFHMDF POS=(23,15),ATTRB=ASKIP,LENGTH=32,                      X
                INITIAL='PF7-JEU PREC    PF8-JEU SUIV'
         DFHMDF POS=(23,48),ATTRB=ASKIP,LENGTH=15,                      X
                INITIAL='PF10-VALIDATION'
 MSG     DFHMDF POS=(24,1),ATTRB=(ASKIP,BRT),LENGTH=79
         DFHMSD TYPE=FINAL
         END
 MEMBER NAME  A04EMAP
 A04EMAP DFHMSD TYPE=&SYSPARM,MODE=INOUT,LANG=COBOL,EXTATT=YES,         X
                CTRL=(FREEKB,FRSET),STORAGE=AUTO,TIOAPFX=YES
 A04EMAP DFHMDI COLUMN=1,LINE=1,SIZE=(24,80)
         DFHMDF POS=(1,1),ATTRB=ASKIP,LENGTH=04,INITIAL='A04E'
         DFHMDF POS=(1,23),ATTRB=ASKIP,LENGTH=32,                       X
                INITIAL='SELECTION D''UN JEU'
         DFHMDF POS=(1,65),ATTRB=ASKIP,LENGTH=07,INITIAL='A04EMAP'
         DFHMDF POS=(2,59),ATTRB=ASKIP,LENGTH=6,INITIAL='DATE :'
 DATEJ   DFHMDF POS=(2,66),ATTRB=(ASKIP,FSET),LENGTH=10
         DFHMDF POS=(4,05),ATTRB=ASKIP,LENGTH=12,                       X
                INITIAL='CODE JEU   :'
 CODEJ   DFHMDF POS=(4,18),ATTRB=(UNPROT,FSET,IC),LENGTH=5
         DFHMDF POS=(4,24),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(4,30),ATTRB=ASKIP,LENGTH=19,                       X
                INITIAL='USERID DE CREATION:'
 UCREA   DFHMDF POS=(4,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=8
 NCREA   DFHMDF POS=(4,59),ATTRB=(ASKIP,BRT,FSET),LENGTH=20
         DFHMDF POS=(05,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NB REP MAX :'
 NBREM   DFHMDF POS=(05,18),ATTRB=(UNPROT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(05,21),ATTRB=ASKIP
         DFHMDF POS=(06,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NB POINTS  :'
 NPOIN   DFHMDF POS=(06,18),ATTRB=(UNPROT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(06,21),ATTRB=ASKIP
         DFHMDF POS=(07,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='STATUT     :'
 STATU   DFHMDF POS=(07,18),ATTRB=(UNPROT,FSET),LENGTH=1
 LSTATU  DFHMDF POS=(07,20),ATTRB=(ASKIP,BRT,FSET),LENGTH=10
         DFHMDF POS=(08,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NUM REPONSE:'
 NOREP   DFHMDF POS=(08,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(08,30),ATTRB=ASKIP,LENGTH=19,                      X
                INITIAL='USERID GAGNANT    :'
 UGAGN   DFHMDF POS=(08,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=8
 NGAGN   DFHMDF POS=(08,59),ATTRB=(ASKIP,BRT,FSET),LENGTH=20
 LIBTITR DFHMDF POS=(11,30),ATTRB=ASKIP,LENGTH=15
 DELIMIT DFHMDF POS=(12,30),ATTRB=ASKIP,LENGTH=15
 LIBLAST DFHMDF POS=(13,18),ATTRB=ASKIP,LENGTH=16
 STATTIR DFHMDF POS=(15,05),ATTRB=(ASKIP,PROT,FSET),LENGTH=20
 LIBREP  DFHMDF POS=(17,05),ATTRB=ASKIP,LENGTH=10
 REPONSE DFHMDF POS=(17,16),ATTRB=(ASKIP,PROT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(23,1),ATTRB=ASKIP,LENGTH=13,INITIAL='CLEAR-FIN'
         DFHMDF POS=(23,17),ATTRB=ASKIP,LENGTH=16,                      X
                INITIAL='ENTER-AFFICH JEU'
 F10KEY  DFHMDF POS=(23,35),ATTRB=ASKIP,LENGTH=20
 MSG     DFHMDF POS=(24,1),ATTRB=(ASKIP,BRT),LENGTH=79
         DFHMSD TYPE=FINAL
         END
 MEMBER NAME  A04EJEUX
       *======================================================*
       *   MENU DE GESTION DES PRODUITS                       *
       *======================================================*

       *======================================================*
       *   I D E N T I F I C A T I O N     D I V I S I O N    *
       *======================================================*
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04EJEUX.

       *======================================================*
       *   E N V I R O N M E N T       D I V I S I O N        *
       *======================================================*
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER. IBM-390.
        OBJECT-COMPUTER. IBM-390.

       *======================================================*
       *           D A T A         D I V I S I O N            *
       *======================================================*
        DATA DIVISION.
        WORKING-STORAGE SECTION.

       * ZONE POUR DATE DU JOUR
        01  WS-DATE                 PIC X(8) VALUE SPACES.

       *------------------------------------------------------*
       *   DESCRIPTION DETAILLEE DE LA ZONE DE COMMUNICATION  *
       *------------------------------------------------------*
        01  WS-COMMAREA.
            05 PROG-PRECEDENT      PIC X(8).
            05 PROG-COURANT        PIC X(8).
            05 PROG-SUIVANT        PIC X(8).
            05                     PIC X(26).

        01  WS-USERID              PIC X(8).

        01 C-R                     PIC S9(8) COMP.

        01 MON-PROG                PIC X(8) VALUE 'A04EJEUX'.
        01 MA-MAP                  PIC X(8) VALUE 'A04EMAP '.
        01 MA-TRX                  PIC X(4) VALUE 'A04E'.

       *------------------------------------------------------*
       *   DESCRIPTION DES VARIABLES UTILISEES EN SOUS-PROG   *
       *------------------------------------------------------*
        COPY ZCOMSELJ.
        COPY ZCOMBTN.
       *------------------------------------------------------*
       *   DESCRIPTION   DE   LA   MAP                        *
       *------------------------------------------------------*
        COPY A04EMAP.

       *------------------------------------------------------*
       *   ZONE DE MESSAGE TAMPON POUR LE SEND FROM           *
       *------------------------------------------------------*
        01  MESSAGE-TXT            PIC X(79).

       *------------------------------------------------------*
       *   DESCRIPTION   DES  TOUCHES   FONCTIONS             *
       *------------------------------------------------------*
        COPY DFHAID.

       *------------------------------------------------------*
       *   DESCRIPTION   DES  ATTRIBUTS                       *
       *------------------------------------------------------*
        COPY DFHBMSCA.
        COPY ATTRIBUT.
       *======================================================*
       *          L I N K A G E     S E C T I O N             *
       *======================================================*
        LINKAGE SECTION.
        01  DFHCOMMAREA.
            05 LK-COMMAREA            PIC X(50).

       *======================================================*
       *     P R O C E D U R E     D I V I S I O N            *
       *======================================================*
        PROCEDURE DIVISION.
        INIT-PROGRAMME.
       *----------------*
             PERFORM DEBUT-PROGRAMME
             PERFORM TRAITEMENT-PROGRAMME
             GOBACK.

        DEBUT-PROGRAMME.
       *-----------------*
       *   TEST DE PREMIERE ENTREE DANS LE PROGRAMME
       *   SI NON PROGRAMME  MENU --->  ARRET  (ACCES INTERDIT)
            IF EIBCALEN = 0
               INITIALIZE      WS-COMMAREA
            ELSE
               MOVE LK-COMMAREA    TO  WS-COMMAREA
            END-IF

            MOVE  PROG-COURANT     TO  PROG-PRECEDENT
            MOVE  MON-PROG         TO  PROG-COURANT.

        TRAITEMENT-PROGRAMME.
       *----------------------*
            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               PERFORM  INITIALISATION-MAP
               PERFORM  ENVOI-MAP
            ELSE
               PERFORM  TRAITEMENT-TOUCHE
            END-IF.


        INITIALISATION-MAP.
       *--------------------*
       *  CHARGEMENT DE LA MAP AVANT AFFICHAGE
            MOVE LOW-VALUE TO A04EMAPO.

        ENVOI-MAP.
       *-----------*
       * ALIMENTATION DE LA DATE DU JOUR
            MOVE FUNCTION CURRENT-DATE TO WS-DATE
            STRING WS-DATE (7 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATE (5 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATE (1 : 4) DELIMITED BY SIZE
                   INTO DATEJO
            END-STRING

            IF EIBCALEN = 0
               MOVE CURSEUR TO CODEJL
            END-IF

            EXEC CICS SEND MAP    ('A04EMAP')
                           ERASE
                           CURSOR
            END-EXEC

            MOVE PROG-COURANT TO PROG-SUIVANT

            EXEC CICS RETURN TRANSID  (MA-TRX)
                             COMMAREA (WS-COMMAREA)
                             LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC.

        TRAITEMENT-TOUCHE.
       *-------------------*
            EVALUATE EIBAID
               WHEN DFHENTER
                    PERFORM TRAITEMENT-ENTER
                    PERFORM ENVOI-MAP
               WHEN DFHCLEAR
                    PERFORM TRAIT-FIN
               WHEN DFHPF10
                    PERFORM TRAITEMENT-F10
                    PERFORM ENVOI-MAP
               WHEN OTHER
                    PERFORM ERR-TOUCHE
            END-EVALUATE.

        APPEL-SELECTION-SPROG.
       *-----------------------*
            CALL 'A03FSELJ'   USING ZCOM-SELJEU.

        APPEL-JEU-SPROG.
       *-----------------*
            EXEC CICS LINK  PROGRAM  (PROG-SUIVANT)
                            COMMAREA (ZCOM-BTN)
                            LENGTH   (LENGTH OF ZCOM-BTN)
            END-EXEC.

        RECEPTION-DONNEES-CICS.
       *------------------------*
            EXEC CICS RECEIVE MAP  ('A04EMAP')
                              RESP (C-R)
            END-EXEC

            EVALUATE C-R
               WHEN DFHRESP(NORMAL)
                    CONTINUE
       *       WHEN DFHRESP(MAPFAIL)
       *            .............
               WHEN OTHER
                    PERFORM ERREUR-CICS
            END-EVALUATE.

        TRAITEMENT-ENTER.
       *------------------*
            PERFORM RECEPTION-DONNEES-CICS

            PERFORM RECUPERATION-USERID

            MOVE CODEJI TO ZCOM-CODEJEU OF ZCOM-SELJEU
       *    EVALUATE CODEJI
       *    WHEN 'BASE'
       *      PERFORM APPEL-SELECTION-SPROG
       *    WHEN OTHER
       *      MOVE 'ECRIRE BASE' TO MSGO
       *    END-EVALUATE.
            MOVE WS-USERID TO ZCOM-USERID OF ZCOM-SELJEU
            MOVE 'A03FSELJ' TO PROG-SUIVANT
            PERFORM APPEL-SELECTION-SPROG

       *    ............................
       *    ...  ANALYSE DES CHAMPS  ...
       *    ............................
            EVALUATE TRUE
               WHEN RET-NONTROUVE
                 MOVE 'JEU INEXISTANT' TO MSGO
       *         PERFORM ENVOI-MAP
               WHEN RET-TERMINE
                 MOVE 'JEU TERMINE, PAS DE REPONSE POSSIBLE' TO MSGO
       *         PERFORM ENVOI-MAP
               WHEN RET-ENCOURS
                 MOVE 'UNE PARTIE EST EN COURS' TO MSGO
       *         PERFORM ENVOI-MAP
               WHEN RET-TROUVE
                 MOVE ATTR-PROT-SKIP TO CODEJF
                 PERFORM AFFICHER-JEU
                 MOVE ATTR-UNPROT-FSET TO REPONSEF
                 MOVE CURSEUR TO REPONSEL
       *         PERFORM ENVOI-MAP
               WHEN OTHER
                 MOVE 'ERREUR RETOUR CONTROLE SELECTION' TO MSGO
       *         PERFORM ENVOI-MAP
            END-EVALUATE.

        RECUPERATION-USERID.
       *---------------------*
            EXEC CICS ASSIGN
              USERID (WS-USERID)
            END-EXEC.

        AFFICHER-JEU.
       *--------------*
            MOVE 'BATAILLE NAVALE' TO LIBTITRO
            MOVE '---------------' TO DELIMITO
            MOVE 'DERNIERE REPONSE' TO LIBLASTO
            MOVE 'REPONSE : ' TO LIBREPO
            MOVE 'JEU TROUVE. F10 POUR VALIDER VOTRE REPONSE' TO MSGO
            MOVE 'TF10-VALIDATION' TO F10KEYO.

        TRAITEMENT-F10.
       *----------------*
            PERFORM RECEPTION-DONNEES-CICS

            IF RET-TROUVE
              MOVE REPONSEI TO ZCOM-SAISIE OF ZCOM-BTN
              MOVE WS-USERID TO ZCOM-USERID OF ZCOM-BTN
              MOVE 'A02TBNAV' TO PROG-SUIVANT
              PERFORM APPEL-JEU-SPROG
              PERFORM ENVOI-MAP
            ELSE
              PERFORM ERR-TOUCHE
            END-IF

            EVALUATE TRUE
               WHEN REP-INVALIDE
                 MOVE 'REPONSE INVALIDE' TO STATTIRO
                 MOVE CURSEUR TO REPONSEL
       *         PERFORM ENVOI-MAP
               WHEN REP-PLOUF
                 MOVE 'PLOUF' TO STATTIRO
       *         PERFORM ENVOI-MAP
               WHEN REP-TOUCHE
                 MOVE 'TOUCHE' TO STATTIRO
       *         PERFORM ENVOI-MAP
               WHEN REP-COULE
                 MOVE 'TOUCHE COULE' TO STATTIRO
       *         PERFORM ENVOI-MAP
               WHEN REP-GAGNE
                 MOVE 'BRAVO, TU AS GAGNE !' TO STATTIRO
                 MOVE ATTR-PROT-SKIP TO REPONSEF
       *         PERFORM ENVOI-MAP
               WHEN OTHER
                 MOVE 'ERREUR RETOUR CONTROLE SELECTION' TO MSGO
       *         PERFORM ENVOI-MAP
            END-EVALUATE.

        TRAIT-FIN.
       *-----------*
            MOVE 'FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM FIN-CICS
            .

        ERR-TOUCHE.
       *------------*
            MOVE 'TOUCHE DE FONCTION INVALIDE' TO MSGO
            PERFORM ENVOI-MAP
            .

        ERREUR-CICS.
       *-------------*
            MOVE 'ERREUR CICS !!!  FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM FIN-CICS
            .

        FIN-CICS.
       *----------*
            EXEC CICS SEND FROM   (MESSAGE-TXT)
                           LENGTH (LENGTH OF MESSAGE-TXT)
                           ERASE
            END-EXEC

            EXEC CICS RETURN END-EXEC
            .
 MEMBER NAME  A04BMAP
         PRINT NOGEN
 A04BMAP DFHMSD TYPE=&SYSPARM,MODE=INOUT,LANG=COBOL,EXTATT=YES,         X
                CTRL=(FREEKB,FRSET),STORAGE=AUTO,TIOAPFX=YES
 A04BMAP DFHMDI COLUMN=1,LINE=1,SIZE=(24,80)
         DFHMDF POS=(1,1),ATTRB=ASKIP,LENGTH=04,INITIAL='A04B'
         DFHMDF POS=(1,23),ATTRB=ASKIP,LENGTH=27,                       X
                INITIAL='INTERROGATION D''UN PRODUIT'
         DFHMDF POS=(1,65),ATTRB=ASKIP,LENGTH=07,INITIAL='A04BMAP'
         DFHMDF POS=(2,55),ATTRB=ASKIP,LENGTH=06,INITIAL='DATE :'
 DATE    DFHMDF POS=(2,62),ATTRB=(ASKIP,FSET),LENGTH=10
         DFHMDF POS=(8,13),ATTRB=ASKIP,LENGTH=25,                       X
                INITIAL='CODE PRODUIT            :'
 CODEPRD DFHMDF POS=(8,39),ATTRB=(UNPROT,NUM,IC,FSET),LENGTH=04,        X
                JUSTIFY=(RIGHT,ZERO)
         DFHMDF POS=(8,44),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(10,13),ATTRB=ASKIP,LENGTH=25,                      X
                INITIAL='TYPE MOUVEMENT          :'
 TYPEMVT DFHMDF POS=(10,39),ATTRB=(PROT,FSET),LENGTH=01,                X
                JUSTIFY=(RIGHT,ZERO)
         DFHMDF POS=(10,41),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(12,13),ATTRB=ASKIP,LENGTH=25,                      X
                INITIAL='QUANTITE                :'
 QTEMVT  DFHMDF POS=(12,39),ATTRB=(PROT,FSET),LENGTH=02,                X
                JUSTIFY=(RIGHT,ZERO)
         DFHMDF POS=(12,42),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(14,13),ATTRB=ASKIP,LENGTH=25,                      X
                INITIAL='PRIX UNITAIRE           :'
 PRIPRD  DFHMDF POS=(14,39),ATTRB=(PROT,FSET),LENGTH=06,                X
                JUSTIFY=(RIGHT,ZERO)
         DFHMDF POS=(14,46),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(23,1),ATTRB=ASKIP,LENGTH=11,INITIAL='CLEAR - FIN'
         DFHMDF POS=(23,15),ATTRB=ASKIP,LENGTH=12,INITIAL='F12 - RETOUR'
 MSG     DFHMDF POS=(24,1),ATTRB=(ASKIP,BRT),LENGTH=79
         DFHMSD TYPE=FINAL
         END
 MEMBER NAME  A04
       ******************************************************************
       * DIVISION D'IDENTIFICATION DU PROGRAMME                         *
       ******************************************************************
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04PROJ.
        AUTHOR. JULIEN
        DATE-WRITTEN. 02/01/2024
       ******************************************************************
       * DEFINITION DE L'ENVIRONNEMENT D'EXECUTION DU PROGRAMME         *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT FIC-ENT1 ASSIGN TO DDENT1
                   FILE STATUS    IS FS1.
            SELECT FIC-ENT2 ASSIGN TO DDENT2
                   FILE STATUS    IS FS2.
            SELECT FIC-SOR1 ASSIGN TO DDSORT1
                   FILE STATUS    IS FS3.
            SELECT FIC-SOR2 ASSIGN TO DDSORT2
                   FILE STATUS    IS FS4.
       ******************************************************************
       * DIVISION DEFINITION DES DONNEES DES FICHIERS                   *
       ******************************************************************
        DATA DIVISION.
        FILE SECTION.
        FD  FIC-ENT1 IS EXTERNAL
            RECORDING MODE IS F.
        COPY WASSURES.

        FD  FIC-ENT2
            RECORDING MODE IS F.
        COPY WFMVTS.

        FD  FIC-SOR1
            RECORDING MODE IS F.
        01  SOR1-CLIENT.
            05 CLIENT-MAT        PIC 9(6).
            05 CLIENT-NOM-PRENOM PIC X(20).
            05 CLIENT-RUE-ADR    PIC X(18).
            05 CLIENT-CODE-POST  PIC 9(5).
            05 CLIENT-VILLE      PIC X(12).
            05 CLIENT-VEHICULE   PIC X(1).
            05 CLIENT-PRIME      PIC 9(4)V9(2).
            05 CLIENT-BON-MAL    PIC X(1).
            05 CLIENT-TAUX       PIC 9(2).
            05 FILLER            PIC X(9).

        FD  FIC-SOR2
            RECORDING MODE IS F.
        01  SOR2-ERREUR.
            05 ERREUR-LIBELLE    PIC X(60).
            05 ERREUR-MATRICULE  PIC X(6).
            05 ERREUR-CODE-MVT   PIC X(1).
            05 FILLER            PIC X(13).

        WORKING-STORAGE SECTION.
        01  FIC-ENT1             PIC 9(2)      EXTERNAL.

        01  FS1                  PIC 9(2)      VALUE ZEROES.
        01  FS2                  PIC 9(2)      VALUE ZEROES.
        01  FS3                  PIC 9(2)      VALUE ZEROES.

        01  SP-CONTROLE-CODERET  PIC 9(2).

        77  I                    PIC 9.

        COPY WMESSAGE.

        77                       PIC X         VALUE ZEROES.
            88 FIN-FICENT2                     VALUE '1'.
            88 FICENT2-VIDE                    VALUE '2'.

        PROCEDURE DIVISION.
 MEMBER NAME  A04MODIF
       ******************************************************************
       * DIVISION D'IDENTIFICATION DU PROGRAMME                         *
       ******************************************************************
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04MODIF.
        AUTHOR. JULIEN
        DATE-WRITTEN. 03/01/2024
       * CE SOUS-PROGRAMME PREND UN ENREGISTREMENT MOUVEMENT, UN CODE
       * D'INSTRUCTION, UNE DATE, UN NOM D'UTILISATEUR ET EVENTUELLEMENT
       * UN MESSAGE D'ANOMALIE, ET REDIGE LES ENREGISTREMENTS APPROPRIES
       * SUIVANT LE CODE D'INSTRUCTION.
       ******************************************************************
       * DEFINITION DE L'ENVIRONNEMENT D'EXECUTION DU PROGRAMME         *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
       * C'EST LE FICHIER CLIENT FINAL.
            SELECT FIC-SOR1 ASSIGN TO DDSOR1
                   ORGANIZATION IS INDEXED
                   ACCESS MODE IS RANDOM
                   RECORD KEY IS CLIENT-MAT
                   FILE STATUS    IS FS3.
       * C'EST LE FICHIER D'ETAT DES ANOMALIES.
            SELECT FIC-SOR2 ASSIGN TO DDSOR2
                   FILE STATUS    IS FS4.
       ******************************************************************
       * DIVISION DEFINITION DES DONNEES DES FICHIERS                   *
       ******************************************************************
        DATA DIVISION.
        FILE SECTION.
        FD  FIC-SOR1.
        01  SOR1-CLIENT.
            05 CLIENT-MAT        PIC X(6).
            05 CLIENT-NOM-PRENOM PIC X(20).
            05 CLIENT-RUE-ADR    PIC X(18).
            05 CLIENT-CODE-POST  PIC 9(5).
            05 CLIENT-VILLE      PIC X(12).
            05 CLIENT-VEHICULE   PIC X(1).
            05 CLIENT-PRIME      PIC 9(4)V9(2).
            05 CLIENT-BON-MAL    PIC X(1).
            05 CLIENT-TAUX       PIC 9(2).
            05 FILLER            PIC X(9).

       * LA PREMIERE VARIABLE GROUPE EST LE FORMAT NORMAL D'UN
       * ENREGISTREMENT DANS LE FICHIER D'ETAT DES ANOMALIES. LES
       * AUTRES SONT DES MODELES D'AFFICHAGE POUR LES DECORATIONS
       * ET INFORMATIONS D'ENTETE.
       * IL EST APPAREMMENT IMPOSSIBLE D'ASSIGNER DES VALEURS PAR
       * DEFAUT DANS LES DEFINITIONS D'ENREGISTREMENT DE FICHIERS,
       * ELLES SERONT DONC ASSIGNES AU MOMENT DE L'ECRITURE.
        FD  FIC-SOR2
            RECORDING MODE IS F.
        01  SOR2-ERREUR.
            05 ERREUR-MATRICULE  PIC X(6).
            05 LABEL-ERREUR      PIC X(10).
            05 ERREUR-LIBELLE    PIC X(60).
            05 FILLER            PIC X(4).

        01  LIGNE-INTITULE.
            05 FILLER            PIC X(30).
            05 INTITULE          PIC X(20).
            05 FILLER            PIC X(30).

        01  LIGNE-DATE-MAJ.
            05 LABEL-DATE        PIC X(17).
            05 DATE-CALCULEE     PIC X(10).
            05 FILLER            PIC X(53).

        01  LIGNE-GROUPE.
            05 LABEL-GROUPE      PIC X(17).
            05 GROUPUTIL         PIC X(6).
            05 FILLER            PIC X(57).

        01  LIGNE-BLANCHE        PIC X(80).

        01  LIGNE-TIRETS         PIC X(80).

        WORKING-STORAGE SECTION.
        01  FS3                  PIC 9(2)      VALUE ZEROES.
        01  FS4                  PIC 9(2)      VALUE ZEROES.

        LINKAGE SECTION.
       * COPY CONTENANT LA DEFINITION D'UN ENREGISTREMENT DU FICHIER
       * MOUVEMENT.
        COPY WFMVTS.

       * CODE D'INSTRUCTION ET DE RETOUR DU SOUS-PROGRAMME.
        01  SP-ECRIT-CODEINSTR    PIC 9(3).
        01  SP-ECRIT-CODERET      PIC 9(3).

       * VARIABLES ACCEUILLANT LE NOM D'UTILISATEUR ET LA DATE.
        01  SP-ECRIT-UTIL         PIC X(6).
        01  SP-ECRIT-DATE         PIC X(10).

       * VARIABLE ACCEPTANT LE LIBELLE EN CAS D'ANOMALIE A ENREGISTRER.
        01  ERREUR-MESSAGE        PIC X(60).

        PROCEDURE DIVISION USING W-FMVTSE,
                                 SP-ECRIT-CODEINSTR,
                                 ERREUR-MESSAGE,
                                 SP-ECRIT-UTIL,
                                 SP-ECRIT-DATE
                           RETURNING SP-ECRIT-CODERET.
            EVALUATE SP-ECRIT-CODEINSTR
            WHEN 0
              PERFORM INITIALISATION-FICSOR2
            WHEN 100
              PERFORM TRAITEMENT-ECRITURE
            WHEN 200
              PERFORM TRAITEMENT-MODIFICATION
            WHEN 300
              PERFORM TRAITEMENT-SUPPRESSION
            WHEN 1
            WHEN 2
            WHEN 3
            WHEN 4
              PERFORM TRAITEMENT-ANOMALIE
            WHEN OTHER
              PERFORM ERREUR-INTERRUPTION
            END-EVALUATE
            GOBACK.

        INITIALISATION-FICSOR2.
            PERFORM OUVERTURE-FICSOR2
            PERFORM ECRITURE-ENTETE
            CLOSE FIC-SOR2.

       * LES OPERATIONS D'ECRITURE SEMBLENT PURGER LES BUFFERS DU FICHIER
       * CONCERNE CAR JE SUIS OBLIGE DE REMETTRE DES ESPACES DANS
       * L'ENREGISTREMENT QUE JE VEUX ECRIRE DIRECTEMENT APRES CHAQUE
       * ECRITURE POUR EVITER LES ZEROS BINAIRES.
        ECRITURE-ENTETE.
            MOVE ALL SPACES TO LIGNE-INTITULE
            MOVE 'ETAT  DES  ANOMALIES' TO INTITULE
            WRITE LIGNE-INTITULE
            MOVE ALL SPACES TO LIGNE-BLANCHE
            WRITE LIGNE-BLANCHE
            MOVE ALL SPACES TO LIGNE-DATE-MAJ
            MOVE 'MISE A JOUR DU : ' TO LABEL-DATE
            MOVE SP-ECRIT-DATE TO DATE-CALCULEE
            WRITE LIGNE-DATE-MAJ
            MOVE ALL SPACES TO LIGNE-GROUPE
            MOVE 'GROUPE         : ' TO LABEL-GROUPE
            MOVE SP-ECRIT-UTIL TO GROUPUTIL
            WRITE LIGNE-GROUPE
            MOVE ALL SPACES TO LIGNE-BLANCHE
            WRITE LIGNE-BLANCHE
            MOVE ALL '-' TO LIGNE-TIRETS
            WRITE LIGNE-TIRETS.

        TRAITEMENT-ECRITURE.
            PERFORM OUVERTURE-FICSOR1
            PERFORM ECRITURE-CREATION
            CLOSE FIC-SOR1.

        TRAITEMENT-MODIFICATION.
            PERFORM OUVERTURE-FICSOR1
            PERFORM ECRITURE-MODIFICATION
            CLOSE FIC-SOR1.

        TRAITEMENT-SUPPRESSION.
            PERFORM OUVERTURE-FICSOR1
            PERFORM ECRITURE-SUPPRESSION
            CLOSE FIC-SOR1.

        TRAITEMENT-ANOMALIE.
            PERFORM OUVERTURE-FICSOR2
            PERFORM ECRITURE-ANOMALIE
            CLOSE FIC-SOR2.

        ERREUR-INTERRUPTION.
            DISPLAY 'CODE INSTRUCTION INCONNU : ' SP-ECRIT-CODEINSTR.

        OUVERTURE-FICSOR1.
            OPEN I-O FIC-SOR1

            IF FS3 NOT = ZEROES
              MOVE 1 TO SP-ECRIT-CODERET
              GOBACK
            END-IF.

        OUVERTURE-FICSOR2.
            OPEN OUTPUT FIC-SOR2

            IF FS4 NOT = ZEROES
              MOVE 1 TO SP-ECRIT-CODERET
              GOBACK
            END-IF.

        ECRITURE-CREATION.
            PERFORM PREPARATION-ECRITURE
            WRITE SOR1-CLIENT
                INVALID KEY
                  MOVE 1 TO SP-ECRIT-CODERET
                NOT INVALID KEY
                  MOVE ZEROES TO SP-ECRIT-CODERET
            END-WRITE.

        ECRITURE-MODIFICATION.
            PERFORM PREPARATION-ECRITURE

            REWRITE SOR1-CLIENT
                INVALID KEY
                  MOVE 1 TO SP-ECRIT-CODERET
                NOT INVALID KEY
                  MOVE ZEROES TO SP-ECRIT-CODERET
            END-REWRITE.

        ECRITURE-SUPPRESSION.
            PERFORM LECTURE-ACTION

            DELETE FIC-SOR1
                INVALID KEY
                  MOVE 1 TO SP-ECRIT-CODERET
                NOT INVALID KEY
                  MOVE ZEROES TO SP-ECRIT-CODERET
            END-DELETE.

        PREPARATION-ECRITURE.
            MOVE SPACES TO SOR1-CLIENT

            MOVE F-MAT TO CLIENT-MAT
            MOVE F-NOM-PRE TO CLIENT-NOM-PRENOM
            MOVE F-RUE TO CLIENT-RUE-ADR
            MOVE F-CP TO CLIENT-CODE-POST
            MOVE F-VILLE TO CLIENT-VILLE
            MOVE F-CODE TO CLIENT-VEHICULE
            MOVE F-PRIME TO CLIENT-PRIME
            MOVE F-BM TO CLIENT-BON-MAL
            MOVE F-TAUX TO CLIENT-TAUX.

        LECTURE-ACTION.
            MOVE F-MAT TO CLIENT-MAT
            READ FIC-SOR1 KEY IS CLIENT-MAT
              INVALID KEY
                MOVE 1 TO SP-ECRIT-CODERET
            END-READ.

        ECRITURE-ANOMALIE.
            MOVE SPACES TO SOR2-ERREUR

            MOVE F-MAT TO ERREUR-MATRICULE
            MOVE ' ERREUR : ' TO LABEL-ERREUR
            MOVE ERREUR-MESSAGE TO ERREUR-LIBELLE

            WRITE SOR2-ERREUR.

            EVALUATE FS4
            WHEN ZEROES
              MOVE ZEROES TO SP-ECRIT-CODERET
            WHEN OTHER
              MOVE 1 TO SP-ECRIT-CODERET
            END-EVALUATE.
 MEMBER NAME  A04MESS
       ******************************************************************
       * DIVISION D'IDENTIFICATION DU PROGRAMME                         *
       ******************************************************************
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04MESS.
        AUTHOR. JULIEN
        DATE-WRITTEN. 03/01/2024
       * CE SOUS-PROGRAMME CONTIENT LES LIBELLES DE LA PLUPART DES
       * MESSAGES UTILISES LORS DE L'IMPRESSION DES STATISTIQES ET DES
       * ANOMALIES. IL RECUPERE UN CODE D'INSTRUCTION DONNE PAR LE
       * PROGRAMME PRINCIPAL ET RENVOIE LE LIBELLE APPROPRIE.
       ******************************************************************
       * DEFINITION DE L'ENVIRONNEMENT D'EXECUTION DU PROGRAMME         *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
       ******************************************************************
       * DIVISION DEFINITION DES DONNEES DES FICHIERS                   *
       ******************************************************************
        DATA DIVISION.
        WORKING-STORAGE SECTION.
       * COPY CONTENANT UN LISTING DES LIBELLES.
        COPY WMESSAGE.

        01 MESSAGES REDEFINES TABLE-MESSAGE.
           05 OBJET-MESSAGE PIC X(60) OCCURS 17 TIMES.

        LINKAGE SECTION.
        01  SP-MESS-CODEINSTR    PIC 9(3).

        01  ERREUR-MESSAGE       PIC X(60).

        PROCEDURE DIVISION USING SP-MESS-CODEINSTR
                           RETURNING ERREUR-MESSAGE.
            MOVE OBJET-MESSAGE(SP-MESS-CODEINSTR) TO ERREUR-MESSAGE
            GOBACK.
 MEMBER NAME  A04FIND
       ******************************************************************
       * DIVISION D'IDENTIFICATION DU PROGRAMME                         *
       ******************************************************************
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04FIND.
        AUTHOR. JULIEN
        DATE-WRITTEN. 02/01/2024
       * CE SOUS-PROGRAMME PREND UNE LIGNE DU FICHIER MOUVEMENT ET
       * CONTROLE LA VALIDITE DU CODE MOUVEMENT AINSI QUE LA POSSIBILITE
       * D'EFFECTUER L'ACTION ASSOCIEE.
       * ELLE PARTICIPE EGALEMENT AU COMPTAGE DES STATISTIQUES SUIVANT LE
       * RESULTAT DES CONTROLES.
       ******************************************************************
       * DEFINITION DE L'ENVIRONNEMENT D'EXECUTION DU PROGRAMME         *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
       * C'EST LE FICHIER CLIENT ORIGINAL.
            SELECT FIC-ENT1 ASSIGN TO DDENT1
                   ORGANIZATION IS INDEXED
                   ACCESS MODE IS RANDOM
                   RECORD KEY IS MAT-X3
                   FILE STATUS    IS FS1.
       ******************************************************************
       * DIVISION DEFINITION DES DONNEES DES FICHIERS                   *
       ******************************************************************
        DATA DIVISION.
        FILE SECTION.
       * IL MANQUE LA VARIABLE GROUPE DANS LA COPY WASSURES
        FD  FIC-ENT1.
        01  ENT1-CLIENT.
        COPY WASSURES.

        WORKING-STORAGE SECTION.
        01  FS1                  PIC 9(2)      VALUE ZEROES.

       * NOMS-CONDITIONS CONTROLANT L'ETAT DU FICHIER CLIENT.
        77                       PIC X         VALUE ZEROES.
            88 FIN-FICENT1                     VALUE '1'.
            88 FICENT1-VIDE                    VALUE '2'.

        LINKAGE SECTION.
       * COPY CONTENANT L'ENREGISTREMENT DU FICHIER MOUVEMENT EN COURS
       * DE TRAITEMENT.
        COPY WFMVTS.

       * COMPTEURS UTILISES POUR LES DECOMPTES DE STATISTIQUES.
        01 COMPTE-MVT-TRAITES    PIC 9(3).
        01 COMPTE-ANOMALIES      PIC 9(3).
        01 COMPTE-CREATION       PIC 9(3).
        01 COMPTE-MODIF          PIC 9(3).
        01 COMPTE-SUPPR          PIC 9(3).
        01 COMPTE-ANOM-MVT       PIC 9(3).
        01 COMPTE-ANOM-CREA      PIC 9(3).
        01 COMPTE-ANOM-MODIF     PIC 9(3).
        01 COMPTE-ANOM-SUPPR     PIC 9(3).

        01 SP-CONTROLE-CODERET   PIC 9(3).

        PROCEDURE DIVISION USING W-FMVTSE,
                                 COMPTE-MVT-TRAITES,
                                 COMPTE-ANOMALIES,
                                 COMPTE-CREATION,
                                 COMPTE-MODIF,
                                 COMPTE-SUPPR,
                                 COMPTE-ANOM-MVT,
                                 COMPTE-ANOM-CREA,
                                 COMPTE-ANOM-MODIF,
                                 COMPTE-ANOM-SUPPR
                           RETURNING SP-CONTROLE-CODERET.
            PERFORM OUVERTURE-FICENT1

            EVALUATE F-CODE
            WHEN 'C'
              PERFORM CONTROLE-EXISTENCE
            WHEN 'M'
              PERFORM MODIF-CONTROLE-INEXISTENCE
            WHEN 'S'
              PERFORM SUPPR-CONTROLE-INEXISTENCE
            WHEN OTHER
              PERFORM ERREUR-CODE-MVT
            END-EVALUATE

            PERFORM FERMETURE-SOUS-PROG.

        OUVERTURE-FICENT1.
            OPEN INPUT FIC-ENT1

            IF FS1 NOT = ZEROES
              PERFORM ERREUR-OUVERTURE-FICENT1
            END-IF.

        CONTROLE-EXISTENCE.
            MOVE F-MAT TO MAT-X3
            READ FIC-ENT1 KEY IS MAT-X3
              INVALID KEY MOVE 100 TO SP-CONTROLE-CODERET
                          ADD 1 TO COMPTE-MVT-TRAITES
                          ADD 1 TO COMPTE-CREATION
              NOT INVALID KEY MOVE 2 TO SP-CONTROLE-CODERET
                              ADD 1 TO COMPTE-ANOM-CREA
                              ADD 1 TO COMPTE-ANOMALIES
            END-READ.

        MODIF-CONTROLE-INEXISTENCE.
            MOVE F-MAT TO MAT-X3
            READ FIC-ENT1 KEY IS MAT-X3
              INVALID KEY MOVE 3 TO SP-CONTROLE-CODERET
                          ADD 1 TO COMPTE-ANOM-MODIF
                          ADD 1 TO COMPTE-ANOMALIES
              NOT INVALID KEY MOVE 200 TO SP-CONTROLE-CODERET
                              ADD 1 TO COMPTE-MVT-TRAITES
                              ADD 1 TO COMPTE-MODIF
            END-READ.

        SUPPR-CONTROLE-INEXISTENCE.
            MOVE F-MAT TO MAT-X3
            READ FIC-ENT1 KEY IS MAT-X3
              INVALID KEY MOVE 4 TO SP-CONTROLE-CODERET
                          ADD 1 TO COMPTE-ANOM-SUPPR
                          ADD 1 TO COMPTE-ANOMALIES
              NOT INVALID KEY MOVE 300 TO SP-CONTROLE-CODERET
                              ADD 1 TO COMPTE-MVT-TRAITES
                              ADD 1 TO COMPTE-SUPPR
            END-READ.

        ERREUR-CODE-MVT.
            ADD 1 TO COMPTE-ANOM-MVT
            ADD 1 TO COMPTE-ANOMALIES
            MOVE 1 TO SP-CONTROLE-CODERET.

        ERREUR-OUVERTURE-FICENT1.
            MOVE 404 TO SP-CONTROLE-CODERET
            GOBACK.

        FERMETURE-SOUS-PROG.
            CLOSE FIC-ENT1
            GOBACK.
 MEMBER NAME  A04PROJ
       ******************************************************************
       * DIVISION D'IDENTIFICATION DU PROGRAMME                         *
       ******************************************************************
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04PROJ.
        AUTHOR. JULIEN
        DATE-WRITTEN. 02/01/2024
       ******************************************************************
       * DEFINITION DE L'ENVIRONNEMENT D'EXECUTION DU PROGRAMME         *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
       * C'EST LE FICHIER MOUVEMENT.
       * LE PREFIXE AS- EST NECESSAIRE AVANT UN NOM DE FICHIER ESDS.
            SELECT FIC-ENT2 ASSIGN TO AS-DDENT2
                   ORGANIZATION IS SEQUENTIAL
                   ACCESS MODE IS SEQUENTIAL
                   FILE STATUS    IS FS2.
       ******************************************************************
       * DIVISION DEFINITION DES DONNEES DES FICHIERS                   *
       ******************************************************************
        DATA DIVISION.
        FILE SECTION.
       * IL MANQUE UN FILLER FINAL DANS LA COPY WFMVTS
        FD  FIC-ENT2.
        COPY WFMVTS.
            02 FILLER            PIC X(9).

        WORKING-STORAGE SECTION.
        01  FS2                  PIC 9(2) VALUE ZEROES.

       * COMPTEUR UTILISE POUR BOUCLER.
        01  I                    PIC 9(2).

       * COMPTEURS UTILISES POUR TRAQUER LES STATISTIQUES.
        01  COMPTE-MVT-LECTURE   PIC 9(3) VALUE ZEROES.
        01  COMPTE-MVT-TRAITES   PIC 9(3) VALUE ZEROES.
        01  COMPTE-ANOMALIES     PIC 9(3) VALUE ZEROES.
        01  COMPTE-CREATION      PIC 9(3) VALUE ZEROES.
        01  COMPTE-MODIF         PIC 9(3) VALUE ZEROES.
        01  COMPTE-SUPPR         PIC 9(3) VALUE ZEROES.
        01  COMPTE-ANOM-MVT      PIC 9(3) VALUE ZEROES.
        01  COMPTE-ANOM-CREA     PIC 9(3) VALUE ZEROES.
        01  COMPTE-ANOM-MODIF    PIC 9(3) VALUE ZEROES.
        01  COMPTE-ANOM-SUPPR    PIC 9(3) VALUE ZEROES.

       * CODE RETOUR DU SOUS-PROGRAMME DE CONTROLE DES MOUVEMENTS.
        01  SP-CONTROLE-CODERET  PIC 9(3).

       * CODE D'INSTRUCTION DONNE AU SOUS-PROGRAMME DE REFERENCEMENT
       * DES LIBELLES AFIN DE LUI INDIQUER LEQUEL RECUPERER.
        01  SP-MESS-CODEINSTR    PIC 9(3).

       * VARIABLES UTILISES PAR LE SOUS-PROGRAMME D'ECRITURE.
       * LE CODE D'INSTRUCTION INDIQUE AU SOUS-PROGRAMME D'ECRITURE
       * QUELLE ACTION EFFECTUER.
        01  SP-ECRIT-CODEINSTR   PIC 9(3).
        01  SP-ECRIT-CODERET     PIC 9(3).
        01  SP-ECRIT-DATE        PIC X(10).
        01  SP-ECRIT-UTIL        PIC X(6).

       * MODELES UTILISES POUR L'IMPRESSION DE LA DECORATION ET DES,
       * METADONNES EN SYSOUT, SURTOUT DANS L'ENTETE.
        01  ENTETE.
            05 METADONNES.
               10 LABEL-USER    PIC X(8)  VALUE ' USER : '.
               10 UTILISATEUR   PIC X(6).
               10 FILLER        PIC X(45).
               10 LABEL-DATE    PIC X(10) VALUE 'DATE : LE '.
               10 DATE-DU-JOUR.
                  15 JOUR-JJ  PIC X(2).
                  15 FILLER   PIC X     VALUE '/'.
                  15 JOUR-MM  PIC X(2).
                  15 FILLER   PIC X     VALUE '/'.
                  15 JOUR-AAAA PIC X(4).
               10 FILLER       PIC X.
            05 CADRE-HAUT-BAS.
               10 FILLER      PIC X     VALUE '+'.
               10 FILLER      PIC X(78) VALUE ALL '-'.
               10 FILLER      PIC X     VALUE '+'.
            05 CADRE-STATISTIQUES.
               10 FILLER      PIC X     VALUE '|'.
               10 FILLER      PIC X(33) VALUE ALL SPACES.
               10 FILLER      PIC X(12) VALUE 'STATISTIQUES'.
               10 FILLER      PIC X(33) VALUE ALL SPACES.
               10 FILLER      PIC X     VALUE '|'.
            05 CADRE-VIDE.
               10 FILLER      PIC X     VALUE '|'.
               10 FILLER      PIC X(78) VALUE ALL SPACES.
               10 FILLER      PIC X     VALUE '|'.

       * FORMAT D'IMPRESSION EN SYSOUT POUR L'ETAT FINAL DU FICHIER
       * MOUVEMENT.
        01  LIGNE-ETAT-FICENT2.
            05 LIGNE-FICENT2-VIDE.
               10 FILLER PIC X VALUE '|'.
               10 FILLER PIC X(22) VALUE ALL SPACES.
               10 LIGNE
                    PIC X(33)
                    VALUE 'LE FICHIER DE MOUVEMENT EST VIDE.'.
               10 FILLER PIC X(23) VALUE ALL SPACES.
               10 FILLER PIC X VALUE '|'.
            05 LIGNE-FIN-FICENT2.
               10 FILLER PIC X VALUE '|'.
               10 FILLER PIC X(25) VALUE ALL SPACES.
               10 LIGNE
                    PIC X(28)
                    VALUE 'FIN DU FICHIER DE MOUVEMENT.'.
               10 FILLER PIC X(25) VALUE ALL SPACES.
               10 FILLER PIC X VALUE '|'.

       * FORMAT D'IMPRESSION POUR LES STATISTIQUES EN SYSOUT.
        01  LIGNE-STAT.
            05 FILLER         PIC X(2) VALUE '| '.
            05 ERREUR-MESSAGE PIC X(60).
            05 COMPTEUR-STAT  PIC Z(13)9.
            05 FILLER         PIC X(4) VALUE '   |'.

       * NOMS-CONDITIONS INDIQUANT L'ETAT DU FICHIER MOUVEMENT.
        77                      PIC X     VALUE ZEROES.
            88 FIN-FICENT2                VALUE '1'.
            88 FICENT2-VIDE               VALUE '2'.

       * CETTE LINKAGE EN PROGRAMME PRINCIPAL PERMET DE RECUPERER LES
       * VARIABLES DEFINIES EN PARAMETRES DANS LE STEP JCL CORRESPONDANT
        LINKAGE SECTION.
        01  PARM-BUFFER.
            05  PARM-LENGTH      PIC S9(4)   COMP.
            05  PARM-DATA        PIC X(256).

        PROCEDURE DIVISION USING PARM-BUFFER.
            PERFORM PREPARER-ENTETE
            PERFORM INITIALISATION-FICSOR2

            PERFORM OUVERTURE-FICENT2
            PERFORM LECTURE-INITIALE-FICENT2

            PERFORM TRAITEMENT-FICENT2

            PERFORM FIN-PROGRAMME.

        PREPARER-ENTETE.
            PERFORM RECUPERER-UTILISATEUR
            PERFORM CALCULER-DATE
            PERFORM AFFICHER-ENTETE.

        RECUPERER-UTILISATEUR.
            MOVE PARM-DATA(1:PARM-LENGTH) TO UTILISATEUR
            MOVE UTILISATEUR TO SP-ECRIT-UTIL.

        CALCULER-DATE.
            MOVE FUNCTION CURRENT-DATE(7:8) TO JOUR-JJ
            MOVE FUNCTION CURRENT-DATE(5:6) TO JOUR-MM
            MOVE FUNCTION CURRENT-DATE(1:4) TO JOUR-AAAA
            MOVE DATE-DU-JOUR TO SP-ECRIT-DATE.

        AFFICHER-ENTETE.
            DISPLAY METADONNES
            DISPLAY CADRE-HAUT-BAS
            DISPLAY CADRE-STATISTIQUES
            DISPLAY CADRE-HAUT-BAS.

        INITIALISATION-FICSOR2.
            MOVE ZEROES TO SP-ECRIT-CODEINSTR

            PERFORM EFFECTUER-ECRITURE.

        OUVERTURE-FICENT2.
            OPEN INPUT FIC-ENT2

            IF FS2 NOT = ZEROES
              STOP RUN
            END-IF.

        LECTURE-INITIALE-FICENT2.
            READ FIC-ENT2
              AT END SET FICENT2-VIDE TO TRUE
              NOT AT END ADD 1 TO COMPTE-MVT-LECTURE
            END-READ.

        LECTURE-SUBSEQU-FICENT2.
            READ FIC-ENT2
              AT END SET FIN-FICENT2 TO TRUE
              NOT AT END ADD 1 TO COMPTE-MVT-LECTURE
            END-READ.

        TRAITEMENT-FICENT2.
            PERFORM UNTIL FIN-FICENT2 OR FICENT2-VIDE
              PERFORM TRAITEMENT-MOUVEMENT
              PERFORM LECTURE-SUBSEQU-FICENT2
            END-PERFORM.

        TRAITEMENT-MOUVEMENT.
            PERFORM VERIFIER-CODE-MVT

            EVALUATE SP-CONTROLE-CODERET
            WHEN 100
            WHEN 200
            WHEN 300
              PERFORM EFFECTUER-ECRITURE
            WHEN OTHER
              PERFORM TRAITER-ANOMALIE
            END-EVALUATE.

        VERIFIER-CODE-MVT.
            CALL 'A04FIND' USING W-FMVTSE,
                                 COMPTE-MVT-TRAITES,
                                 COMPTE-ANOMALIES,
                                 COMPTE-CREATION,
                                 COMPTE-MODIF,
                                 COMPTE-SUPPR,
                                 COMPTE-ANOM-MVT,
                                 COMPTE-ANOM-CREA,
                                 COMPTE-ANOM-MODIF,
                                 COMPTE-ANOM-SUPPR
                           RETURNING SP-CONTROLE-CODERET.

        EFFECTUER-ECRITURE.
            MOVE SP-CONTROLE-CODERET TO SP-ECRIT-CODEINSTR
            CALL 'A04MODIF' USING W-FMVTSE,
                                  SP-ECRIT-CODEINSTR,
                                  ERREUR-MESSAGE,
                                  SP-ECRIT-UTIL,
                                  SP-ECRIT-DATE
                            RETURNING SP-ECRIT-CODERET.

        TRAITER-ANOMALIE.
            MOVE SP-CONTROLE-CODERET TO SP-MESS-CODEINSTR
            MOVE SP-CONTROLE-CODERET TO SP-ECRIT-CODEINSTR
            PERFORM RECUPERER-LIBELLE
            PERFORM EFFECTUER-ECRITURE.

        RECUPERER-LIBELLE.
            CALL 'A04MESS' USING SP-MESS-CODEINSTR
                           RETURNING ERREUR-MESSAGE.

        FIN-PROGRAMME.
            PERFORM AFFICHAGE-ETAT-FICENT2
            PERFORM AFFICHAGE-STATISTIQUES

            CLOSE FIC-ENT2
            STOP RUN.

        AFFICHAGE-ETAT-FICENT2.
            EVALUATE TRUE
            WHEN FICENT2-VIDE
              DISPLAY LIGNE-FICENT2-VIDE
            WHEN FIN-FICENT2
              DISPLAY LIGNE-FIN-FICENT2
            END-EVALUATE.

        AFFICHAGE-STATISTIQUES.
            PERFORM VARYING I FROM 5 BY 1 UNTIL I > 14
              MOVE I TO SP-MESS-CODEINSTR
              CALL 'A04MESS' USING SP-MESS-CODEINSTR
                             RETURNING ERREUR-MESSAGE

              EVALUATE I
              WHEN 5
                MOVE COMPTE-MVT-TRAITES TO COMPTEUR-STAT
              WHEN 6
                MOVE COMPTE-MVT-LECTURE TO COMPTEUR-STAT
              WHEN 7
                MOVE COMPTE-ANOMALIES   TO COMPTEUR-STAT
              WHEN 8
                MOVE COMPTE-CREATION    TO COMPTEUR-STAT
              WHEN 9
                MOVE COMPTE-MODIF       TO COMPTEUR-STAT
              WHEN 10
                MOVE COMPTE-SUPPR       TO COMPTEUR-STAT
              WHEN 11
                MOVE COMPTE-ANOM-MVT    TO COMPTEUR-STAT
              WHEN 12
                MOVE COMPTE-ANOM-CREA   TO COMPTEUR-STAT
              WHEN 13
                MOVE COMPTE-ANOM-MODIF  TO COMPTEUR-STAT
              WHEN 14
                MOVE COMPTE-ANOM-SUPPR  TO COMPTEUR-STAT
              END-EVALUATE
              DISPLAY LIGNE-STAT
            END-PERFORM
            DISPLAY CADRE-HAUT-BAS.
 MEMBER NAME  A04FISQL
       ******************************************************************
       * DIVISION D'IDENTIFICATION DU PROGRAMME                         *
       ******************************************************************
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04FISQL.
        AUTHOR. JULIEN
        DATE-WRITTEN. 08/01/2024
       * CE SOUS-PROGRAMME PREND UNE LIGNE DU FICHIER MOUVEMENT ET
       * CONTROLE LA VALIDITE DU CODE MOUVEMENT AINSI QUE LA POSSIBILITE
       * D'EFFECTUER L'ACTION ASSOCIEE.
       * ELLE PARTICIPE EGALEMENT AU COMPTAGE DES STATISTIQUES SUIVANT LE
       * RESULTAT DES CONTROLES.
       ******************************************************************
       * DEFINITION DE L'ENVIRONNEMENT D'EXECUTION DU PROGRAMME         *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
       ******************************************************************
       * DIVISION DEFINITION DES DONNEES DES FICHIERS                   *
       ******************************************************************
        DATA DIVISION.
        WORKING-STORAGE SECTION.
       * SQLCA
            EXEC SQL INCLUDE SQLCA END-EXEC

       * DEFINITION DE LA TABLE ASSURES
            EXEC SQL INCLUDE ASSURES  END-EXEC

        LINKAGE SECTION.
       * COPY CONTENANT L'ENREGISTREMENT DU FICHIER MOUVEMENT EN COURS
       * DE TRAITEMENT.
        COPY WFMVTS.
            02 FILLER            PIC X(9).

       * COMPTEURS UTILISES POUR LES DECOMPTES DE STATISTIQUES.
        01 COMPTE-MVT-TRAITES    PIC 9(3).
        01 COMPTE-ANOMALIES      PIC 9(3).
        01 COMPTE-CREATION       PIC 9(3).
        01 COMPTE-MODIF          PIC 9(3).
        01 COMPTE-SUPPR          PIC 9(3).
        01 COMPTE-ANOM-MVT       PIC 9(3).
        01 COMPTE-ANOM-CREA      PIC 9(3).
        01 COMPTE-ANOM-MODIF     PIC 9(3).
        01 COMPTE-ANOM-SUPPR     PIC 9(3).

        01 SP-CONTROLE-CODERET   PIC 9(3).

        PROCEDURE DIVISION USING W-FMVTSE,
                                 COMPTE-MVT-TRAITES,
                                 COMPTE-ANOMALIES,
                                 COMPTE-CREATION,
                                 COMPTE-MODIF,
                                 COMPTE-SUPPR,
                                 COMPTE-ANOM-MVT,
                                 COMPTE-ANOM-CREA,
                                 COMPTE-ANOM-MODIF,
                                 COMPTE-ANOM-SUPPR
                           RETURNING SP-CONTROLE-CODERET.
            EVALUATE F-CODE
            WHEN 'C'
              PERFORM CONTROLE-EXISTENCE
            WHEN 'M'
              PERFORM MODIF-CONTROLE-INEXISTENCE
            WHEN 'S'
              PERFORM SUPPR-CONTROLE-INEXISTENCE
            WHEN OTHER
              PERFORM ERREUR-CODE-MVT
            END-EVALUATE

            PERFORM FERMETURE-SOUS-PROG.

        CONTROLE-EXISTENCE.
            PERFORM RECHERCHE-SQL

            EVALUATE SQLCODE
             WHEN ZEROES
               MOVE 2 TO SP-CONTROLE-CODERET
               ADD 1 TO COMPTE-ANOM-CREA
               ADD 1 TO COMPTE-ANOMALIES
             WHEN +100
               MOVE 100 TO SP-CONTROLE-CODERET
               ADD 1 TO COMPTE-MVT-TRAITES
               ADD 1 TO COMPTE-CREATION
            END-EVALUATE.

        MODIF-CONTROLE-INEXISTENCE.
            PERFORM RECHERCHE-SQL

            EVALUATE SQLCODE
             WHEN ZEROES
               MOVE 200 TO SP-CONTROLE-CODERET
               ADD 1 TO COMPTE-MVT-TRAITES
               ADD 1 TO COMPTE-MODIF
             WHEN +100
               MOVE 3 TO SP-CONTROLE-CODERET
               ADD 1 TO COMPTE-ANOM-MODIF
               ADD 1 TO COMPTE-ANOMALIES
            END-EVALUATE.

        SUPPR-CONTROLE-INEXISTENCE.
            PERFORM RECHERCHE-SQL

            EVALUATE SQLCODE
             WHEN ZEROES
               MOVE 300 TO SP-CONTROLE-CODERET
               ADD 1 TO COMPTE-MVT-TRAITES
               ADD 1 TO COMPTE-SUPPR
             WHEN +100
               MOVE 4 TO SP-CONTROLE-CODERET
               ADD 1 TO COMPTE-ANOM-SUPPR
               ADD 1 TO COMPTE-ANOMALIES
            END-EVALUATE.

        RECHERCHE-SQL.
            MOVE F-MAT TO ASS-NUMASS
            EXEC SQL
              SELECT NOM
              INTO :ASS-NOM
              FROM ASSURES
                WHERE NUMASS = :ASS-NUMASS
              END-EXEC.

        ERREUR-CODE-MVT.
            ADD 1 TO COMPTE-ANOM-MVT
            ADD 1 TO COMPTE-ANOMALIES
            MOVE 1 TO SP-CONTROLE-CODERET.

        FERMETURE-SOUS-PROG.
            GOBACK.
 MEMBER NAME  A04MOSQL
       ******************************************************************
       * DIVISION D'IDENTIFICATION DU PROGRAMME                         *
       ******************************************************************
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04MOSQL.
        AUTHOR. JULIEN
        DATE-WRITTEN. 03/01/2024
       * CE SOUS-PROGRAMME PREND UN ENREGISTREMENT MOUVEMENT, UN CODE
       * D'INSTRUCTION, UNE DATE, UN NOM D'UTILISATEUR ET EVENTUELLEMENT
       * UN MESSAGE D'ANOMALIE, ET REDIGE LES ENREGISTREMENTS APPROPRIES
       * SUIVANT LE CODE D'INSTRUCTION.
       ******************************************************************
       * DEFINITION DE L'ENVIRONNEMENT D'EXECUTION DU PROGRAMME         *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
       * C'EST LE FICHIER D'ETAT DES ANOMALIES.
            SELECT FIC-ETAT ASSIGN TO DDETAT
                   FILE STATUS    IS FS-ETAT.
       ******************************************************************
       * DIVISION DEFINITION DES DONNEES DES FICHIERS                   *
       ******************************************************************
        DATA DIVISION.
        FILE SECTION.
       * LA PREMIERE VARIABLE GROUPE EST LE FORMAT NORMAL D'UN
       * ENREGISTREMENT DANS LE FICHIER D'ETAT DES ANOMALIES. LES
       * AUTRES SONT DES MODELES D'AFFICHAGE POUR LES DECORATIONS
       * ET INFORMATIONS D'ENTETE.
       * IL EST APPAREMMENT IMPOSSIBLE D'ASSIGNER DES VALEURS PAR
       * DEFAUT DANS LES DEFINITIONS D'ENREGISTREMENT DE FICHIERS,
       * ELLES SERONT DONC ASSIGNES AU MOMENT DE L'ECRITURE.
        FD  FIC-ETAT
            RECORDING MODE IS F.
        01  ETAT-ERREUR.
            05 ERREUR-MATRICULE  PIC X(6).
            05 LABEL-ERREUR      PIC X(10).
            05 ERREUR-LIBELLE    PIC X(60).
            05 FILLER            PIC X(4).

        01  LIGNE-INTITULE.
            05 FILLER            PIC X(30).
            05 INTITULE          PIC X(20).
            05 FILLER            PIC X(30).

        01  LIGNE-DATE-MAJ.
            05 LABEL-DATE        PIC X(17).
            05 DATE-CALCULEE     PIC X(10).
            05 FILLER            PIC X(53).

        01  LIGNE-GROUPE.
            05 LABEL-GROUPE      PIC X(17).
            05 GROUPUTIL         PIC X(6).
            05 FILLER            PIC X(57).

        01  LIGNE-BLANCHE        PIC X(80).

        01  LIGNE-TIRETS         PIC X(80).

        WORKING-STORAGE SECTION.
       * SQLCA
            EXEC SQL INCLUDE SQLCA END-EXEC

       * DEFINITION DE LA TABLE ASSURES
            EXEC SQL INCLUDE ASSURES  END-EXEC

        01  FS-ETAT              PIC 9(2)      VALUE ZEROES.

        01  I                     PIC 9(2).

        01  SQLCODE-EDIT          PIC -(5)9.

        LINKAGE SECTION.
       * COPY CONTENANT LA DEFINITION D'UN ENREGISTREMENT DU FICHIER
       * MOUVEMENT.
        COPY WFMVTS.
            02 FILLER            PIC X(9).

       * CODE D'INSTRUCTION ET DE RETOUR DU SOUS-PROGRAMME.
        01  SP-ECRIT-CODEINSTR    PIC 9(3).
        01  SP-ECRIT-CODERET      PIC 9(3).

       * VARIABLES ACCEUILLANT LE NOM D'UTILISATEUR ET LA DATE.
        01  SP-ECRIT-UTIL         PIC X(6).
        01  SP-ECRIT-DATE         PIC X(10).

       * VARIABLE ACCEPTANT LE LIBELLE EN CAS D'ANOMALIE A ENREGISTRER.
        01  ERREUR-MESSAGE        PIC X(60).

        PROCEDURE DIVISION USING W-FMVTSE,
                                 SP-ECRIT-CODEINSTR,
                                 ERREUR-MESSAGE,
                                 SP-ECRIT-UTIL,
                                 SP-ECRIT-DATE
                           RETURNING SP-ECRIT-CODERET.
            EVALUATE SP-ECRIT-CODEINSTR
            WHEN 0
              PERFORM INITIALISATION-FICETAT
            WHEN 100
              PERFORM TRAITEMENT-CREATION
            WHEN 200
              PERFORM TRAITEMENT-MODIFICATION
            WHEN 300
              PERFORM TRAITEMENT-SUPPRESSION
            WHEN 1
            WHEN 2
            WHEN 3
            WHEN 4
              PERFORM TRAITEMENT-ANOMALIE
            WHEN OTHER
              PERFORM ERREUR-INTERRUPTION
            END-EVALUATE
            GOBACK.

        INITIALISATION-FICETAT.
            PERFORM OUVERTURE-FICETAT
            PERFORM ECRITURE-ENTETE
            CLOSE FIC-ETAT.

       * LES OPERATIONS D'ECRITURE SEMBLENT PURGER LES BUFFERS DU FICHIER
       * CONCERNE CAR JE SUIS OBLIGE DE REMETTRE DES ESPACES DANS
       * L'ENREGISTREMENT QUE JE VEUX ECRIRE DIRECTEMENT APRES CHAQUE
       * ECRITURE POUR EVITER LES ZEROS BINAIRES.
        ECRITURE-ENTETE.
            MOVE ALL SPACES TO LIGNE-INTITULE
            MOVE 'ETAT  DES  ANOMALIES' TO INTITULE
            WRITE LIGNE-INTITULE
            MOVE ALL SPACES TO LIGNE-BLANCHE
            WRITE LIGNE-BLANCHE
            MOVE ALL SPACES TO LIGNE-DATE-MAJ
            MOVE 'MISE A JOUR DU : ' TO LABEL-DATE
            MOVE SP-ECRIT-DATE TO DATE-CALCULEE
            WRITE LIGNE-DATE-MAJ
            MOVE ALL SPACES TO LIGNE-GROUPE
            MOVE 'GROUPE         : ' TO LABEL-GROUPE
            MOVE SP-ECRIT-UTIL TO GROUPUTIL
            WRITE LIGNE-GROUPE
            MOVE ALL SPACES TO LIGNE-BLANCHE
            WRITE LIGNE-BLANCHE
            MOVE ALL '-' TO LIGNE-TIRETS
            WRITE LIGNE-TIRETS.

        TRAITEMENT-CREATION.
            PERFORM PREPARER-VARIABLES-HOTES
            EXEC SQL
              INSERT INTO ASSURES
              VALUES (:ASS-NUMASS,
                      :ASS-NOM,
                      :ASS-ADRESSE,
                      :ASS-CP,
                      :ASS-VILLE,
                      :ASS-TYPE,
                      :ASS-PRIME,
                      :ASS-BONUS,
                      :ASS-TAUX)
            END-EXEC.
       *
       *    MOVE SQLCODE TO SQLCODE-EDIT
       *
       *    EVALUATE SQLCODE
       *     WHEN ZEROES
       *       DISPLAY 'CREATION REUSSIE'
       *     WHEN OTHER
       *       DISPLAY 'CREATION ECHOUEE : ' SQLCODE-EDIT
       *    END-EVALUATE.

        TRAITEMENT-MODIFICATION.
            PERFORM PREPARER-VARIABLES-HOTES
            EXEC SQL
              UPDATE ASSURES
              SET NOM     = :ASS-NOM,
                  ADRESSE = :ASS-ADRESSE,
                  CP      = :ASS-CP,
                  VILLE   = :ASS-VILLE,
                  TYPE    = :ASS-TYPE,
                  PRIME   = :ASS-PRIME,
                  BONUS   = :ASS-BONUS,
                  TAUX    = :ASS-TAUX
              WHERE NUMASS = :ASS-NUMASS
            END-EXEC.
       *
       *    MOVE SQLCODE TO SQLCODE-EDIT
       *
       *    EVALUATE SQLCODE
       *     WHEN ZEROES
       *       DISPLAY 'MODIF REUSSIE'
       *     WHEN OTHER
       *       DISPLAY 'MODIF ECHOUEE : ' SQLCODE-EDIT
       *    END-EVALUATE.

        TRAITEMENT-SUPPRESSION.
            MOVE F-MAT TO ASS-NUMASS
            EXEC SQL
              DELETE FROM ASSURES
              WHERE NUMASS = :ASS-NUMASS
            END-EXEC.
       *
       *    MOVE SQLCODE TO SQLCODE-EDIT
       *
       *    EVALUATE SQLCODE
       *     WHEN ZEROES
       *       DISPLAY 'SUPPRESSION REUSSIE'
       *     WHEN OTHER
       *       DISPLAY 'SUPPRESSION ECHOUEE : ' SQLCODE-EDIT
       *    END-EVALUATE.

        TRAITEMENT-ANOMALIE.
            PERFORM OUVERTURE-FICETAT
            PERFORM ECRITURE-ANOMALIE
            CLOSE FIC-ETAT.

        PREPARER-VARIABLES-HOTES.
            MOVE F-MAT TO ASS-NUMASS
            MOVE SPACES TO ASS-NOM-TEXT
            MOVE F-NOM-PRE TO ASS-NOM-TEXT
            PERFORM COMPTER-CHARS-NOM
            MOVE I TO ASS-NOM-LEN
            MOVE SPACES TO ASS-ADRESSE-TEXT
            MOVE F-RUE TO ASS-ADRESSE-TEXT
            PERFORM COMPTER-CHARS-ADRESSE
            MOVE I TO ASS-ADRESSE-LEN
            MOVE F-CP TO ASS-CP
            MOVE SPACES TO ASS-VILLE-TEXT
            MOVE F-VILLE TO ASS-VILLE-TEXT
            PERFORM COMPTER-CHARS-VILLE
            MOVE I TO ASS-VILLE-LEN
            MOVE F-CODE TO ASS-TYPE
            MOVE F-PRIME TO ASS-PRIME
            MOVE F-BM TO ASS-BONUS
            MOVE F-TAUX TO ASS-TAUX.

        COMPTER-CHARS-NOM.
            MOVE ZEROES TO I
            INSPECT F-NOM-PRE REPLACING FIRST SPACE BY '/'
            INSPECT F-NOM-PRE TALLYING I FOR CHARACTERS BEFORE SPACES.

        COMPTER-CHARS-ADRESSE.
            MOVE ZEROES TO I
            MOVE FUNCTION REVERSE(F-RUE) TO F-RUE
            INSPECT F-RUE REPLACING LEADING SPACES BY '/'
            MOVE FUNCTION REVERSE(F-RUE) TO F-RUE
            INSPECT F-RUE TALLYING I FOR CHARACTERS BEFORE '/'.

        COMPTER-CHARS-VILLE.
            MOVE ZEROES TO I
            MOVE FUNCTION REVERSE(F-VILLE) TO F-VILLE
            INSPECT F-VILLE REPLACING LEADING SPACES BY '/'
            MOVE FUNCTION REVERSE(F-VILLE) TO F-VILLE
            INSPECT F-VILLE TALLYING I FOR CHARACTERS BEFORE '/'.

        ERREUR-INTERRUPTION.
            DISPLAY 'CODE INSTRUCTION INCONNU : ' SP-ECRIT-CODEINSTR.

        OUVERTURE-FICETAT.
            OPEN OUTPUT FIC-ETAT

            IF FS-ETAT NOT = ZEROES
              MOVE 1 TO SP-ECRIT-CODERET
              GOBACK
            END-IF.

        ECRITURE-ANOMALIE.
            MOVE SPACES TO ETAT-ERREUR

            MOVE F-MAT TO ERREUR-MATRICULE
            MOVE ' ERREUR : ' TO LABEL-ERREUR
            MOVE ERREUR-MESSAGE TO ERREUR-LIBELLE

            WRITE ETAT-ERREUR.

            EVALUATE FS-ETAT
            WHEN ZEROES
              MOVE ZEROES TO SP-ECRIT-CODERET
            WHEN OTHER
              MOVE 1 TO SP-ECRIT-CODERET
            END-EVALUATE.
 MEMBER NAME  A04PRSQL
       ******************************************************************
       * DIVISION D'IDENTIFICATION DU PROGRAMME                         *
       ******************************************************************
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04PRSQL.
        AUTHOR. JULIEN
        DATE-WRITTEN. 08/01/2024
       ******************************************************************
       * DEFINITION DE L'ENVIRONNEMENT D'EXECUTION DU PROGRAMME         *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
       * C'EST LE FICHIER MOUVEMENT.
       * LE PREFIXE AS- EST NECESSAIRE AVANT UN NOM DE FICHIER ESDS.
            SELECT FIC-MVT ASSIGN TO AS-DDMVT
                   ORGANIZATION IS SEQUENTIAL
                   ACCESS MODE IS SEQUENTIAL
                   FILE STATUS    IS FS-MVT.

            SELECT FIC-ID  ASSIGN TO DDID
                   FILE STATUS IS FS-FICID.
       ******************************************************************
       * DIVISION DEFINITION DES DONNEES DES FICHIERS                   *
       ******************************************************************
        DATA DIVISION.
        FILE SECTION.
       * IL MANQUE UN FILLER FINAL DANS LA COPY WFMVTS
        FD  FIC-MVT.
        COPY WFMVTS.
            02 FILLER            PIC X(9).

        FD  FIC-ID
            RECORDING MODE IS F.
        01  LIGNE-USERID.
            05 USERID            PIC X(6).
            05 FILLER            PIC X(74).

        WORKING-STORAGE SECTION.
        01  FS-MVT               PIC 9(2) VALUE ZEROES.
        01  FS-FICID             PIC 9(2) VALUE ZEROES.

       * COMPTEUR UTILISE POUR BOUCLER.
        01  I                    PIC 9(2).

       * COMPTEURS UTILISES POUR TRAQUER LES STATISTIQUES.
        01  COMPTE-MVT-LECTURE   PIC 9(3) VALUE ZEROES.
        01  COMPTE-MVT-TRAITES   PIC 9(3) VALUE ZEROES.
        01  COMPTE-ANOMALIES     PIC 9(3) VALUE ZEROES.
        01  COMPTE-CREATION      PIC 9(3) VALUE ZEROES.
        01  COMPTE-MODIF         PIC 9(3) VALUE ZEROES.
        01  COMPTE-SUPPR         PIC 9(3) VALUE ZEROES.
        01  COMPTE-ANOM-MVT      PIC 9(3) VALUE ZEROES.
        01  COMPTE-ANOM-CREA     PIC 9(3) VALUE ZEROES.
        01  COMPTE-ANOM-MODIF    PIC 9(3) VALUE ZEROES.
        01  COMPTE-ANOM-SUPPR    PIC 9(3) VALUE ZEROES.

       * CODE RETOUR DU SOUS-PROGRAMME DE CONTROLE DES MOUVEMENTS.
        01  SP-CONTROLE-CODERET  PIC 9(3).

       * CODE D'INSTRUCTION DONNE AU SOUS-PROGRAMME DE REFERENCEMENT
       * DES LIBELLES AFIN DE LUI INDIQUER LEQUEL RECUPERER.
        01  SP-MESS-CODEINSTR    PIC 9(3).

       * VARIABLES UTILISES PAR LE SOUS-PROGRAMME D'ECRITURE.
       * LE CODE D'INSTRUCTION INDIQUE AU SOUS-PROGRAMME D'ECRITURE
       * QUELLE ACTION EFFECTUER.
        01  SP-ECRIT-CODEINSTR   PIC 9(3).
        01  SP-ECRIT-CODERET     PIC 9(3).
        01  SP-ECRIT-DATE        PIC X(10).
        01  SP-ECRIT-UTIL        PIC X(6).

       * MODELES UTILISES POUR L'IMPRESSION DE LA DECORATION ET DES,
       * METADONNES EN SYSOUT, SURTOUT DANS L'ENTETE.
        01  ENTETE.
            05 METADONNES.
               10 LABEL-USER    PIC X(8)  VALUE ' USER : '.
               10 UTILISATEUR   PIC X(6).
               10 FILLER        PIC X(45).
               10 LABEL-DATE    PIC X(10) VALUE 'DATE : LE '.
               10 DATE-DU-JOUR.
                  15 JOUR-JJ  PIC X(2).
                  15 FILLER   PIC X     VALUE '/'.
                  15 JOUR-MM  PIC X(2).
                  15 FILLER   PIC X     VALUE '/'.
                  15 JOUR-AAAA PIC X(4).
               10 FILLER       PIC X.
            05 CADRE-HAUT-BAS.
               10 FILLER      PIC X     VALUE '+'.
               10 FILLER      PIC X(78) VALUE ALL '-'.
               10 FILLER      PIC X     VALUE '+'.
            05 CADRE-STATISTIQUES.
               10 FILLER      PIC X     VALUE '|'.
               10 FILLER      PIC X(33) VALUE ALL SPACES.
               10 FILLER      PIC X(12) VALUE 'STATISTIQUES'.
               10 FILLER      PIC X(33) VALUE ALL SPACES.
               10 FILLER      PIC X     VALUE '|'.
            05 CADRE-VIDE.
               10 FILLER      PIC X     VALUE '|'.
               10 FILLER      PIC X(78) VALUE ALL SPACES.
               10 FILLER      PIC X     VALUE '|'.

       * FORMAT D'IMPRESSION EN SYSOUT POUR L'ETAT FINAL DU FICHIER
       * MOUVEMENT.
        01  LIGNE-ETAT-FICMVT.
            05 LIGNE-FICMVT-VIDE.
               10 FILLER PIC X VALUE '|'.
               10 FILLER PIC X(22) VALUE ALL SPACES.
               10 LIGNE
                    PIC X(33)
                    VALUE 'LE FICHIER DE MOUVEMENT EST VIDE.'.
               10 FILLER PIC X(23) VALUE ALL SPACES.
               10 FILLER PIC X VALUE '|'.
            05 LIGNE-FIN-FICMVT.
               10 FILLER PIC X VALUE '|'.
               10 FILLER PIC X(25) VALUE ALL SPACES.
               10 LIGNE
                    PIC X(28)
                    VALUE 'FIN DU FICHIER DE MOUVEMENT.'.
               10 FILLER PIC X(25) VALUE ALL SPACES.
               10 FILLER PIC X VALUE '|'.

       * FORMAT D'IMPRESSION POUR LES STATISTIQUES EN SYSOUT.
        01  LIGNE-STAT.
            05 FILLER         PIC X(2) VALUE '| '.
            05 ERREUR-MESSAGE PIC X(60).
            05 COMPTEUR-STAT  PIC Z(13)9.
            05 FILLER         PIC X(4) VALUE '   |'.

       * NOMS-CONDITIONS INDIQUANT L'ETAT DU FICHIER MOUVEMENT.
        77                      PIC X     VALUE ZEROES.
            88 FIN-FICMVT                 VALUE '1'.
            88 FICMVT-VIDE                VALUE '2'.

        PROCEDURE DIVISION.
            PERFORM PREPARER-ENTETE
            PERFORM INITIALISATION-FICETAT

            PERFORM OUVERTURE-FICMVT
            PERFORM LECTURE-INITIALE-FICMVT

            PERFORM TRAITEMENT-FICMVT

            PERFORM FIN-PROGRAMME.

        PREPARER-ENTETE.
            PERFORM RECUPERER-UTILISATEUR
            PERFORM CALCULER-DATE
            PERFORM AFFICHER-ENTETE.

        RECUPERER-UTILISATEUR.
            OPEN INPUT FIC-ID
            READ FIC-ID
            MOVE USERID TO UTILISATEUR
            MOVE UTILISATEUR TO SP-ECRIT-UTIL
            CLOSE FIC-ID.

        CALCULER-DATE.
            MOVE FUNCTION CURRENT-DATE(7:8) TO JOUR-JJ
            MOVE FUNCTION CURRENT-DATE(5:6) TO JOUR-MM
            MOVE FUNCTION CURRENT-DATE(1:4) TO JOUR-AAAA
            MOVE DATE-DU-JOUR TO SP-ECRIT-DATE.

        AFFICHER-ENTETE.
            DISPLAY METADONNES
            DISPLAY CADRE-HAUT-BAS
            DISPLAY CADRE-STATISTIQUES
            DISPLAY CADRE-HAUT-BAS.

        INITIALISATION-FICETAT.
            MOVE ZEROES TO SP-ECRIT-CODEINSTR

            PERFORM EFFECTUER-ECRITURE.

        OUVERTURE-FICMVT.
            OPEN INPUT FIC-MVT

            IF FS-MVT NOT = ZEROES
              STOP RUN
            END-IF.

        LECTURE-INITIALE-FICMVT.
            READ FIC-MVT
              AT END SET FICMVT-VIDE TO TRUE
              NOT AT END ADD 1 TO COMPTE-MVT-LECTURE
            END-READ.

        LECTURE-SUBSEQU-FICMVT.
            READ FIC-MVT
              AT END SET FIN-FICMVT TO TRUE
              NOT AT END ADD 1 TO COMPTE-MVT-LECTURE
            END-READ.

        TRAITEMENT-FICMVT.
            PERFORM UNTIL FIN-FICMVT OR FICMVT-VIDE
              PERFORM TRAITEMENT-MOUVEMENT
              PERFORM LECTURE-SUBSEQU-FICMVT
            END-PERFORM.

        TRAITEMENT-MOUVEMENT.
            PERFORM VERIFIER-CODE-MVT

            EVALUATE SP-CONTROLE-CODERET
            WHEN 100
            WHEN 200
            WHEN 300
              PERFORM EFFECTUER-ECRITURE
            WHEN OTHER
              PERFORM TRAITER-ANOMALIE
            END-EVALUATE.

        VERIFIER-CODE-MVT.
            CALL 'A04FISQL' USING W-FMVTSE,
                                 COMPTE-MVT-TRAITES,
                                 COMPTE-ANOMALIES,
                                 COMPTE-CREATION,
                                 COMPTE-MODIF,
                                 COMPTE-SUPPR,
                                 COMPTE-ANOM-MVT,
                                 COMPTE-ANOM-CREA,
                                 COMPTE-ANOM-MODIF,
                                 COMPTE-ANOM-SUPPR
                           RETURNING SP-CONTROLE-CODERET.

        EFFECTUER-ECRITURE.
            MOVE SP-CONTROLE-CODERET TO SP-ECRIT-CODEINSTR
            CALL 'A04MOSQL' USING W-FMVTSE,
                                  SP-ECRIT-CODEINSTR,
                                  ERREUR-MESSAGE,
                                  SP-ECRIT-UTIL,
                                  SP-ECRIT-DATE
                            RETURNING SP-ECRIT-CODERET.

        TRAITER-ANOMALIE.
            MOVE SP-CONTROLE-CODERET TO SP-MESS-CODEINSTR
            MOVE SP-CONTROLE-CODERET TO SP-ECRIT-CODEINSTR
            PERFORM RECUPERER-LIBELLE
            PERFORM EFFECTUER-ECRITURE.

        RECUPERER-LIBELLE.
            CALL 'A04MESS' USING SP-MESS-CODEINSTR
                           RETURNING ERREUR-MESSAGE.

        FIN-PROGRAMME.
            PERFORM AFFICHAGE-ETAT-FICMVT
            PERFORM AFFICHAGE-STATISTIQUES

            CLOSE FIC-MVT
            STOP RUN.

        AFFICHAGE-ETAT-FICMVT.
            EVALUATE TRUE
            WHEN FICMVT-VIDE
              DISPLAY LIGNE-FICMVT-VIDE
            WHEN FIN-FICMVT
              DISPLAY LIGNE-FIN-FICMVT
            END-EVALUATE.

        AFFICHAGE-STATISTIQUES.
            PERFORM VARYING I FROM 5 BY 1 UNTIL I > 14
              MOVE I TO SP-MESS-CODEINSTR
              CALL 'A04MESS' USING SP-MESS-CODEINSTR
                             RETURNING ERREUR-MESSAGE

              EVALUATE I
              WHEN 5
                MOVE COMPTE-MVT-TRAITES TO COMPTEUR-STAT
              WHEN 6
                MOVE COMPTE-MVT-LECTURE TO COMPTEUR-STAT
              WHEN 7
                MOVE COMPTE-ANOMALIES   TO COMPTEUR-STAT
              WHEN 8
                MOVE COMPTE-CREATION    TO COMPTEUR-STAT
              WHEN 9
                MOVE COMPTE-MODIF       TO COMPTEUR-STAT
              WHEN 10
                MOVE COMPTE-SUPPR       TO COMPTEUR-STAT
              WHEN 11
                MOVE COMPTE-ANOM-MVT    TO COMPTEUR-STAT
              WHEN 12
                MOVE COMPTE-ANOM-CREA   TO COMPTEUR-STAT
              WHEN 13
                MOVE COMPTE-ANOM-MODIF  TO COMPTEUR-STAT
              WHEN 14
                MOVE COMPTE-ANOM-SUPPR  TO COMPTEUR-STAT
              END-EVALUATE
              DISPLAY LIGNE-STAT
            END-PERFORM
            DISPLAY CADRE-HAUT-BAS.
 MEMBER NAME  A04RECID
       ******************************************************************
       * DIVISION D'IDENTIFICATION DU PROGRAMME                         *
       ******************************************************************
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04RECID.
        AUTHOR. JULIEN
        DATE-WRITTEN. 10/01/2024
       ******************************************************************
       * DEFINITION DE L'ENVIRONNEMENT D'EXECUTION DU PROGRAMME         *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT FIC-ID ASSIGN TO RECID
                   FILE STATUS    IS FS-FICID.
       ******************************************************************
       * DIVISION DEFINITION DES DONNEES DES FICHIERS                   *
       ******************************************************************
        DATA DIVISION.
        FILE SECTION.
        FD  FIC-ID
            RECORDING MODE IS F.
        01  LIGNE-USERID.
            05 USERID            PIC X(6).
            05 FILLER            PIC X(74).

        WORKING-STORAGE SECTION.
        01  FS-FICID             PIC X(2).

        LINKAGE SECTION.
        01  PARM-BUFFER.
            05  PARM-LENGTH      PIC S9(4)   COMP.
            05  PARM-DATA        PIC X(256).

        PROCEDURE DIVISION USING PARM-BUFFER.
            OPEN OUTPUT FIC-ID
            MOVE PARM-DATA TO USERID
            WRITE LIGNE-USERID
            CLOSE FIC-ID
            STOP RUN.
 MEMBER NAME  LISTLIB
        IDENTIFICATION DIVISION.
        PROGRAM-ID. 'LISTLIB'.
       *
       * LIST DES MEMBRES D'UNE LIBRAIRIE
       *
        ENVIRONMENT DIVISION.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT LIB ASSIGN UT-S-LIB
              FILE STATUS FS-LIB.
            SELECT JCL ASSIGN FJCL
              FILE STATUS FS-JCL.
        DATA DIVISION.
        FILE SECTION.
        FD LIB
              RECORD CONTAINS 256 CHARACTERS
               RECORDING MODE IS U.
        01 ELIB.
            05 ENR-LEN        PIC S9(4) COMP.
            05                PIC X(254).
        FD JCL RECORDING F.
        01 EJCL               PIC X(80).
        WORKING-STORAGE SECTION.
        77  FS-LIB            PIC XX.
        77  FS-JCL            PIC XX.
        77  IND               PIC S9(4) COMP.
        77  NBMEM             PIC S9(4) COMP VALUE 0.
        77  FIN               PIC X VALUE 'N'.
        01 TABLE-JCL.
            05  JCL1 PIC X(80) VALUE
                '//FORA04A JOB CLASS=A,MSGCLASS=A,NOTIFY=&SYSUID'.
            05  JCL2 PIC X(80) VALUE '//S1 EXEC PGM=IEBGENER'.
            05  JCL3 PIC X(80) VALUE '//SYSPRINT DD SYSOUT=A'.
            05  JCL4 PIC X(80) VALUE '//SYSIN    DD DUMMY'.
            05  JCL5 PIC X(80) VALUE
                '//SYSUT2   DD DSN=FORA04.EXPORT,DISP=SHR'.
            05  JCL6 PIC X(80) VALUE '//SYSUT1   DD *'.
            05  JCL7 PIC X(80) VALUE ALL '*'.
            05  JCL8.
              10     PIC X(11) VALUE '*   MEMBRE='.
              10 J8-MEM PIC X(8).
              10     PIC X(11) VALUE ' LIBRAIRIE='.
              10 J8-LIB PIC X(50).
            05  JCL9 PIC X(80) VALUE ALL '*'.
            05  JCLA.
              10     PIC X(27) VALUE '//         DD DISP=SHR,DSN='.
              10 JA-LIB PIC X(53) VALUE SPACE.
            05  JCLB PIC X(80) VALUE '//         DD *'.
        01 REDEFINES TABLE-JCL.
            05  JCLL PIC X(80) OCCURS 11.
        77  ITAB     PIC S9(4) COMP.
        LINKAGE SECTION.
        01  PARM.
            05 LEN            PIC S9(4) COMP.
            05 L-LIB          PIC X(80).
        PROCEDURE DIVISION USING PARM.
            IF LEN = 0
              DISPLAY 'LE NOM DE LA LIBRAIRIE N''A PAS ETE DONNE'
              MOVE 16 TO RETURN-CODE
              STOP RUN
            END-IF
            MOVE L-LIB TO J8-LIB
            OPEN OUTPUT JCL
            PERFORM TEST-STAT-JCL
            OPEN INPUT LIB
            PERFORM TEST-STAT-LIB
            PERFORM VARYING ITAB FROM 1 BY 1 UNTIL ITAB > 6
              MOVE JCLL(ITAB) TO EJCL
              WRITE EJCL
              PERFORM TEST-STAT-JCL
            END-PERFORM
            READ LIB
            PERFORM UNTIL FS-LIB = '10' OR FIN = 'O'
              PERFORM TEST-STAT-LIB
       *      DISPLAY ELIB
              MOVE 3          TO IND
              PERFORM  UNTIL IND > ENR-LEN OR FIN = 'O'
                IF ELIB(IND:8) = HIGH-VALUE
                  MOVE 'O'          TO FIN
                ELSE
                  ADD 1             TO NBMEM
                  MOVE  ELIB(IND:8) TO J8-MEM
                  MOVE SPACE        TO JA-LIB
                  STRING L-LIB       DELIMITED BY LOW-VALUE
                         '('         DELIMITED BY SIZE
                         ELIB(IND:8) DELIMITED BY SPACE
                         ')'         DELIMITED BY SIZE
                    INTO JA-LIB
                  PERFORM VARYING ITAB FROM 7 BY 1 UNTIL ITAB > 11
                    MOVE JCLL(ITAB) TO EJCL
                    WRITE EJCL
                    PERFORM TEST-STAT-JCL
                  END-PERFORM
                  IF ELIB(IND + 11:1) = X'00'
                    ADD 12          TO IND
                  ELSE
                    ADD 42          TO IND
                  END-IF
                END-IF
              END-PERFORM
              READ LIB
            END-PERFORM
            CLOSE LIB
            PERFORM TEST-STAT-LIB
            DISPLAY ' '
            DISPLAY 'NOMBRE DE MEMBRES = ' NBMEM
            STOP RUN
            .
        TEST-STAT-LIB.
            IF FS-LIB NOT = '00'
              DISPLAY 'ERREUR LIBRAIRIE ' FS-LIB
              MOVE 16 TO RETURN-CODE
              STOP RUN
            END-IF
            .
        TEST-STAT-JCL.
            IF FS-JCL NOT = '00'
              DISPLAY 'ERREUR SORTIE JCL ' FS-JCL
              MOVE 16 TO RETURN-CODE
              STOP RUN
            END-IF
            .
 MEMBER NAME  A040CI7
 A040CI7 DFHMSD TYPE=&SYSPARM,MODE=INOUT,LANG=COBOL,EXTATT=YES,         X
                CTRL=(FREEKB,FRSET),STORAGE=AUTO,TIOAPFX=YES
 A040CI7 DFHMDI COLUMN=1,LINE=1,SIZE=(24,80)
 CODTERM DFHMDF POS=(1,1),ATTRB=(ASKIP,FSET),LENGTH=4,                  X
                COLOR=TURQUOISE
         DFHMDF POS=(1,6),ATTRB=ASKIP,LENGTH=1,INITIAL='/',             X
                COLOR=TURQUOISE
         DFHMDF POS=(1,9),ATTRB=ASKIP,LENGTH=4,INITIAL='A04Z',          X
                COLOR=TURQUOISE
         DFHMDF POS=(1,15),ATTRB=ASKIP,LENGTH=1,INITIAL='/',            X
                COLOR=TURQUOISE
         DFHMDF POS=(1,18),ATTRB=ASKIP,LENGTH=7,INITIAL='A040CI7',      X
                COLOR=TURQUOISE
 JOUR    DFHMDF POS=(1,59),ATTRB=(ASKIP,FSET),LENGTH=10,                X
                COLOR=TURQUOISE
 DATE    DFHMDF POS=(1,70),ATTRB=(ASKIP,FSET),LENGTH=10,                X
                COLOR=TURQUOISE
         DFHMDF POS=(2,1),ATTRB=ASKIP,LENGTH=8,INITIAL='CICSUSER',      X
                COLOR=TURQUOISE
 TEMPS   DFHMDF POS=(2,72),ATTRB=(ASKIP,FSET),LENGTH=8,                 X
                COLOR=TURQUOISE
         DFHMDF POS=(4,23),ATTRB=(ASKIP,BRT),LENGTH=42,                 X
                INITIAL='*-*-*----------MENU D''ACCES----------*-*-*',  X
                COLOR=TURQUOISE,HILIGHT=REVERSE
         DFHMDF POS=(4,66),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(10,35),ATTRB=ASKIP,LENGTH=14,                      X
                INITIAL='USERID      : ',COLOR=YELLOW
 USERID  DFHMDF POS=(10,50),ATTRB=(UNPROT,IC,FSET),LENGTH=8,            X
                COLOR=GREEN,HILIGHT=UNDERLINE
         DFHMDF POS=(10,59),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(11,35),ATTRB=ASKIP,LENGTH=14,                      X
                INITIAL='PASSWORD    : ',COLOR=YELLOW
 PASSW   DFHMDF POS=(11,50),ATTRB=(UNPROT,FSET,DRK),LENGTH=8,           X
                COLOR=GREEN,HILIGHT=UNDERLINE
         DFHMDF POS=(11,59),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(16,35),ATTRB=ASKIP,LENGTH=16,                      X
                INITIAL='VSAM/DB2 (V/D): ',COLOR=YELLOW
 METHODE DFHMDF POS=(16,52),ATTRB=(UNPROT,FSET),LENGTH=1,               X
                COLOR=GREEN,HILIGHT=UNDERLINE
         DFHMDF POS=(16,54),ATTRB=ASKIP,LENGTH=1
 MSG     DFHMDF POS=(22,1),ATTRB=(ASKIP,FSET),LENGTH=80,COLOR=RED
         DFHMDF POS=(24,1),ATTRB=ASKIP,LENGTH=18,                       X
                INITIAL='ENTER : VALIDATION',                           X
                COLOR=TURQUOISE
         DFHMDF POS=(24,71),ATTRB=ASKIP,LENGTH=9,                       X
                INITIAL='F12 : FIN',                                    X
                COLOR=TURQUOISE
         DFHMSD TYPE=FINAL
         END
 MEMBER NAME  A04MCI7
 A04MCI7 DFHMSD TYPE=&SYSPARM,MODE=INOUT,LANG=COBOL,EXTATT=YES,         X
                CTRL=(FREEKB,FRSET),STORAGE=AUTO,TIOAPFX=YES
 A04MCI7 DFHMDI COLUMN=1,LINE=1,SIZE=(24,80)
 CODTERM DFHMDF POS=(1,1),ATTRB=(ASKIP,FSET),LENGTH=4,                  X
                COLOR=TURQUOISE
         DFHMDF POS=(1,6),ATTRB=ASKIP,LENGTH=1,INITIAL='/',             X
                COLOR=TURQUOISE
         DFHMDF POS=(1,9),ATTRB=ASKIP,LENGTH=4,INITIAL='A04Y',          X
                COLOR=TURQUOISE
         DFHMDF POS=(1,15),ATTRB=ASKIP,LENGTH=1,INITIAL='/',            X
                COLOR=TURQUOISE
         DFHMDF POS=(1,17),ATTRB=ASKIP,LENGTH=7,INITIAL='A04MCI7',      X
                COLOR=TURQUOISE
 JOUR    DFHMDF POS=(1,59),ATTRB=(ASKIP,FSET),LENGTH=9,                 X
                COLOR=TURQUOISE
 DATE    DFHMDF POS=(1,70),ATTRB=(ASKIP,FSET),LENGTH=10,                X
                COLOR=TURQUOISE
 USERID  DFHMDF POS=(2,1),ATTRB=(ASKIP,FSET),LENGTH=8,                  X
                COLOR=TURQUOISE
         DFHMDF POS=(2,10),ATTRB=ASKIP,LENGTH=1,INITIAL='/',            X
                COLOR=TURQUOISE
 METHODE DFHMDF POS=(2,13),ATTRB=(ASKIP,FSET),LENGTH=4,                 X
                COLOR=TURQUOISE
 TEMPS   DFHMDF POS=(2,72),ATTRB=(ASKIP,FSET),LENGTH=8,                 X
                COLOR=TURQUOISE
         DFHMDF POS=(4,23),ATTRB=(ASKIP,BRT),LENGTH=44,                 X
                INITIAL='*-*-*----------MENU PRINCIPAL----------*-*-*', X
                COLOR=PINK,HILIGHT=REVERSE
         DFHMDF POS=(4,68),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(6,27),ATTRB=ASKIP,LENGTH=23,                       X
                INITIAL='1. CREATION D''UN ASSURE',COLOR=GREEN
         DFHMDF POS=(8,27),ATTRB=ASKIP,LENGTH=27,                       X
                INITIAL='2. CONSULTATION D''UN ASSURE',COLOR=GREEN
         DFHMDF POS=(10,27),ATTRB=ASKIP,LENGTH=26,                      X
                INITIAL='3. MISE A JOUR D''UN ASSURE',COLOR=GREEN
         DFHMDF POS=(12,27),ATTRB=ASKIP,LENGTH=26,                      X
                INITIAL='4. SUPPRESSION D''UN ASSURE',COLOR=GREEN
         DFHMDF POS=(14,27),ATTRB=ASKIP,LENGTH=20,                      X
                INITIAL='5. LISTE DES ASSURES',COLOR=GREEN
         DFHMDF POS=(16,27),ATTRB=ASKIP,LENGTH=23,                      X
                INITIAL='6. SUPPRESSION DIFFEREE',COLOR=GREEN
         DFHMDF POS=(18,23),ATTRB=ASKIP,LENGTH=42,                      X
                INITIAL='BIENVENUE AU MENU DE GESTION DES ASSURES !',   X
                COLOR=TURQUOISE
         DFHMDF POS=(20,23),ATTRB=ASKIP,LENGTH=32,                      X
                INITIAL='VEUILLEZ CHOISIR UNE OPTION =>  ',             X
                COLOR=TURQUOISE
         DFHMDF POS=(20,56),ATTRB=ASKIP,LENGTH=8,                       X
                INITIAL='CHOIX : ',COLOR=YELLOW
 CHOIX   DFHMDF POS=(20,65),ATTRB=(UNPROT,IC,FSET),LENGTH=1,            X
                COLOR=GREEN,HILIGHT=UNDERLINE
         DFHMDF POS=(20,67),ATTRB=ASKIP,LENGTH=1
 MSG     DFHMDF POS=(22,1),ATTRB=(ASKIP,FSET),LENGTH=80,COLOR=RED
         DFHMDF POS=(24,1),ATTRB=ASKIP,LENGTH=18,                       X
                INITIAL='ENTER : VALIDATION',COLOR=TURQUOISE
         DFHMDF POS=(24,27),ATTRB=ASKIP,LENGTH=22,                      X
                INITIAL='F3 : RETOUR MENU ACCES',COLOR=TURQUOISE
         DFHMDF POS=(24,71),ATTRB=ASKIP,LENGTH=9,                       X
                INITIAL='F12 : FIN',COLOR=TURQUOISE
         DFHMSD TYPE=FINAL
         END
 MEMBER NAME  A04PMENU
       *======================================================*
       *   MENU DE GESTION DES PRODUITS                       *
       *======================================================*

       *======================================================*
       *   I D E N T I F I C A T I O N     D I V I S I O N    *
       *======================================================*
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04PMENU.

       *======================================================*
       *   E N V I R O N M E N T       D I V I S I O N        *
       *======================================================*
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER. IBM-390.
        OBJECT-COMPUTER. IBM-390.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.

       *======================================================*
       *           D A T A         D I V I S I O N            *
       *======================================================*
        DATA DIVISION.
        WORKING-STORAGE SECTION.
       * ZONE POUR FICHIER USERID
        COPY FPSWD.

       * ZONE POUR DATE DU JOUR
        01  WS-DATE                 PIC X(8) VALUE SPACES.

       * ZONE POUR HEURE
        01  WS-HEURE                PIC X(8) VALUE SPACES.

       * ZONE POUR JOUR, IL S'AGIT D'UN INTEGER CORRESPONDANT A UN JOUR
       * DE LA SEMAINE.
        01  WS-JOUR                 PIC 9(1) VALUE ZEROES.

       *------------------------------------------------------*
       *   DESCRIPTION DETAILLEE DE LA ZONE DE COMMUNICATION  *
       *------------------------------------------------------*
        01  WS-COMMAREA.
            05 PROG-PRECEDENT      PIC X(8).
            05 PROG-COURANT        PIC X(8).
            05 PROG-SUIVANT        PIC X(8).
            05                     PIC X(26).

        01 C-R                     PIC S9(8) COMP.

        01 MON-PROG                PIC X(8) VALUE 'A04PMENU'.
        01 MA-MAP                  PIC X(8) VALUE 'A040CI7'.
        01 MA-TRX                  PIC X(4) VALUE 'A04Z'.
       *------------------------------------------------------*
       *   DESCRIPTION   DE   LA   MAP                        *
       *------------------------------------------------------*
        COPY A040CI7.

       *------------------------------------------------------*
       *   ZONE DE MESSAGE TAMPON POUR LE SEND FROM           *
       *------------------------------------------------------*
        01  MESSAGE-TXT            PIC X(79).

       *------------------------------------------------------*
       *   DESCRIPTION   DES  TOUCHES   FONCTIONS             *
       *------------------------------------------------------*
        COPY DFHAID.

       *------------------------------------------------------*
       *   DESCRIPTION   DES  ATTRIBUTS                       *
       *------------------------------------------------------*
        COPY DFHBMSCA.
        COPY ATTRIBUT.

       *======================================================*
       *          L I N K A G E     S E C T I O N             *
       *======================================================*
        LINKAGE SECTION.
        01  DFHCOMMAREA.
            05 LK-COMMAREA            PIC X(120).

       *======================================================*
       *     P R O C E D U R E     D I V I S I O N            *
       *======================================================*

        PROCEDURE DIVISION.
        00000-INIT-PROGRAMME.
       *---------------------*
             PERFORM  10000-DEBUT-PROGRAMME
             PERFORM  20000-TRAIT-PROGRAMME
             GOBACK
             .

        10000-DEBUT-PROGRAMME.
       *---------------------*
       *   TEST DE PREMIERE ENTREE DANS LE PROGRAMME
       *   SI NON PROGRAMME  MENU --->  ARRET  (ACCES INTERDIT)
            IF EIBCALEN = 0
               INITIALIZE      WS-COMMAREA
            ELSE
               MOVE LK-COMMAREA    TO  WS-COMMAREA
            END-IF

            MOVE  PROG-COURANT     TO  PROG-PRECEDENT
            MOVE  MON-PROG         TO  PROG-COURANT
            .

        20000-TRAIT-PROGRAMME.
       *---------------------*
            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               PERFORM  21000-TRAIT-CHARGEMENT
               PERFORM  22000-TRAIT-ENVOI
            ELSE
               PERFORM  23000-TRAIT-RECEPTION
            END-IF
            .

        21000-TRAIT-CHARGEMENT.
       *----------------------*
       *  CHARGEMENT DE LA MAP AVANT AFFICHAGE
            MOVE LOW-VALUE TO A040CI7O

       *  SI TRAITEMENT PARTICULIER AVANT AFFICHAGE
       *    PERFORM  21100-TRAIT-SPECIFIQUE
            .

       *21100-TRAIT-SPECIFIQUE.
       *----------------------*
       *    ..............................
       *    ..............................
       *    ..............................
       *    ..............................
       *    .

        22000-TRAIT-ENVOI.
       *-----------------*
       * ALIMENTATION DE LA DATE DU JOUR
            MOVE FUNCTION CURRENT-DATE TO WS-DATE
            STRING WS-DATE (7 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATE (5 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATE (1 : 4) DELIMITED BY SIZE
                   INTO DATEO
            END-STRING

            STRING WS-DATE (9 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATE (11 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATE (13 : 2) DELIMITED BY SIZE
                   INTO TEMPSO
            END-STRING

            DIVIDE FUNCTION INTEGER-OF-DAY BY 7
                   REMAINDER WS-JOUR
            END-DIVIDE

            EVALUATE WS-JOUR
            WHEN 0
              MOVE 'DIMANCHE' TO JOURO
            WHEN 1
              MOVE 'LUNDI' TO JOURO
            WHEN 2
              MOVE 'MARDI' TO JOURO
            WHEN 3
              MOVE 'MERCREDI' TO JOURO
            WHEN 4
              MOVE 'JEUDI' TO JOURO
            WHEN 5
              MOVE 'VENDREDI' TO JOURO
            WHEN 6
              MOVE 'SAMEDI' TO JOURO
            END-EVALUATE

            EXEC CICS SEND MAP    ('A040CI7')
                           ERASE
            END-EXEC

            MOVE PROG-COURANT TO PROG-SUIVANT

            EXEC CICS RETURN TRANSID  (MA-TRX)
                             COMMAREA (WS-COMMAREA)
                             LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23000-TRAIT-RECEPTION.
       *---------------------*
            EVALUATE EIBAID
               WHEN DFHENTER
                    PERFORM  23100-TRAIT-ENTER
               WHEN DFHPF12
                    PERFORM  23200-TRAIT-FIN
       *       WHEN DFHCLEAR
       *            MOVE 'A04APGMT' TO  PROG-SUIVANT
       *            PERFORM  23110-PROG-SUIVANT
               WHEN OTHER
                    PERFORM  90000-ERR-TOUCHE
            END-EVALUATE
            .

        23110-PROG-SUIVANT.
       *------------------*
       *    IF  ......................
       *       MOVE '?????'   TO  PROG-SUIVANT
       *    END-IF

            EXEC CICS XCTL  PROGRAM  (PROG-SUIVANT)
                            COMMAREA (WS-COMMAREA)
                            LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23100-TRAIT-ENTER.
       *------------------*
       *    ..........................
            EXEC CICS RECEIVE MAP  ('A040CI7')
                              RESP (C-R)
            END-EXEC

            EVALUATE C-R
               WHEN DFHRESP(NORMAL)
                    CONTINUE
       *       WHEN DFHRESP(MAPFAIL)
       *            .............
               WHEN OTHER
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE

            EVALUATE TRUE
              IF USERIDL = ZEROES
                 MOVE 'USERID NON RENSEIGNE' TO MSGO
                 PERFORM  22000-TRAIT-ENVOI


            EXEC CICS READ
                 FILE ('FORA04.KSDS.FPSWD')
                 INTO (E-PSWD)
                 RIDFLD (USERIDI)
                 RESP (C-R)
            END-EXEC

       *    ............................
       *    ...  ANALYSE DES CHAMPS  ...
       *    ............................
            EVALUATE C-R
               WHEN ZEROES
                 MOVE 'A04PMENU' TO  PROG-SUIVANT
                 PERFORM 23110-PROG-SUIVANT
               WHEN 23
                 STRING
                   'USERID INVALIDE - TENTATIVES RESTANTES : '
                     DELIMITED BY SIZE
                   E-CPT-PSWD-ACCES
                     DELIMITED BY SIZE
                   INTO MSGO
                 END-STRING
                 PERFORM  22000-TRAIT-ENVOI
               WHEN '3'
               WHEN '4'
                 MOVE 'CHOIX ACTUELLEMENT INDISPONIBLE' TO MSGO
                 PERFORM  22000-TRAIT-ENVOI
               WHEN OTHER
                 MOVE 'CHOIX INVALIDE'                  TO MSGO
                 PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        23200-TRAIT-FIN.
       *---------------*
            MOVE 'FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        90000-ERR-TOUCHE.
       *----------------*
            MOVE 'TOUCHE DE FONCTION INVALIDE' TO MSGO
            PERFORM  22000-TRAIT-ENVOI
            .

        91000-ERREUR-CICS.
       *-------------------*
            MOVE 'ERREUR CICS !!!  FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        99000-FIN-CICS.
       *--------------*
            EXEC CICS SEND FROM   (MESSAGE-TXT)
                           LENGTH (LENGTH OF MESSAGE-TXT)
                           ERASE
            END-EXEC

            EXEC CICS RETURN END-EXEC
            .
 MEMBER NAME  A04PPRIN
       *======================================================*
       *   MENU DE GESTION DES PRODUITS                       *
       *======================================================*

       *======================================================*
       *   I D E N T I F I C A T I O N     D I V I S I O N    *
       *======================================================*
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A04PPRIN.

       *======================================================*
       *   E N V I R O N M E N T       D I V I S I O N        *
       *======================================================*
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER. IBM-390.
        OBJECT-COMPUTER. IBM-390.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
       * C'EST LE FICHIER REFERENCANT LES UTILISATEURS ENREGISTRES.
            SELECT FIC-USER ASSIGN TO DDUSER
                   ORGANIZATION IS INDEXED
                   ACCESS MODE IS RANDOM
                   RECORD KEY IS E-USERID
                   FILE STATUS    IS FS-USER.

       *======================================================*
       *           D A T A         D I V I S I O N            *
       *======================================================*
        DATA DIVISION.
        FILE SECTION.
        FD  FIC-USER.
        COPY FPSWD.

        WORKING-STORAGE SECTION.
       * ZONE POUR DATE DU JOUR
        01  WS-DATE                 PIC X(8) VALUE SPACES.

       * ZONE POUR HEURE
        01  WS-HEURE                PIC X(8) VALUE SPACES.

       * ZONE POUR JOUR, IL S'AGIT D'UN INTEGER CORRESPONDANT A UN JOUR
       * DE LA SEMAINE.
        01  WS-JOUR                 PIC 9(1) VALUE ZEROES.

       *------------------------------------------------------*
       *   DESCRIPTION DETAILLEE DE LA ZONE DE COMMUNICATION  *
       *------------------------------------------------------*
        01  WS-COMMAREA.
            05 PROG-PRECEDENT      PIC X(8).
            05 PROG-COURANT        PIC X(8).
            05 PROG-SUIVANT        PIC X(8).
            05                     PIC X(26).

        01 C-R                     PIC S9(8) COMP.

        01 MON-PROG                PIC X(8) VALUE 'A04PMENU'.
        01 MA-MAP                  PIC X(8) VALUE 'A040CI7'.
        01 MA-TRX                  PIC X(4) VALUE 'A04Z'.
       *------------------------------------------------------*
       *   DESCRIPTION   DE   LA   MAP                        *
       *------------------------------------------------------*
        COPY A040CI7.

       *------------------------------------------------------*
       *   ZONE DE MESSAGE TAMPON POUR LE SEND FROM           *
       *------------------------------------------------------*
        01  MESSAGE-TXT            PIC X(79).

       *------------------------------------------------------*
       *   DESCRIPTION   DES  TOUCHES   FONCTIONS             *
       *------------------------------------------------------*
        COPY DFHAID.

       *------------------------------------------------------*
       *   DESCRIPTION   DES  ATTRIBUTS                       *
       *------------------------------------------------------*
        COPY DFHBMSCA.
        COPY ATTRIBUT.

       *======================================================*
       *          L I N K A G E     S E C T I O N             *
       *======================================================*
        LINKAGE SECTION.
        01  DFHCOMMAREA.
            05 LK-COMMAREA            PIC X(120).

       *======================================================*
       *     P R O C E D U R E     D I V I S I O N            *
       *======================================================*

        PROCEDURE DIVISION.
        00000-INIT-PROGRAMME.
       *---------------------*
             PERFORM  10000-DEBUT-PROGRAMME
             PERFORM  20000-TRAIT-PROGRAMME
             GOBACK
             .

        10000-DEBUT-PROGRAMME.
       *---------------------*
       *   TEST DE PREMIERE ENTREE DANS LE PROGRAMME
       *   SI NON PROGRAMME  MENU --->  ARRET  (ACCES INTERDIT)
            IF EIBCALEN = 0
               INITIALIZE      WS-COMMAREA
            ELSE
               MOVE LK-COMMAREA    TO  WS-COMMAREA
            END-IF

            MOVE  PROG-COURANT     TO  PROG-PRECEDENT
            MOVE  MON-PROG         TO  PROG-COURANT
            .

        20000-TRAIT-PROGRAMME.
       *---------------------*
            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               PERFORM  21000-TRAIT-CHARGEMENT
               PERFORM  22000-TRAIT-ENVOI
            ELSE
               PERFORM  23000-TRAIT-RECEPTION
            END-IF
            .

        21000-TRAIT-CHARGEMENT.
       *----------------------*
       *  CHARGEMENT DE LA MAP AVANT AFFICHAGE
            MOVE LOW-VALUE TO A040CI7O

       *  SI TRAITEMENT PARTICULIER AVANT AFFICHAGE
       *    PERFORM  21100-TRAIT-SPECIFIQUE
            .

       *21100-TRAIT-SPECIFIQUE.
       *----------------------*
       *    ..............................
       *    ..............................
       *    ..............................
       *    ..............................
       *    .

        22000-TRAIT-ENVOI.
       *-----------------*
       * ALIMENTATION DE LA DATE DU JOUR
            MOVE FUNCTION CURRENT-DATE TO WS-DATE
            STRING WS-DATE (7 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATE (5 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATE (1 : 4) DELIMITED BY SIZE
                   INTO DATEO
            END-STRING

            STRING WS-DATE (9 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATE (11 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATE (13 : 2) DELIMITED BY SIZE
                   INTO TEMPSO
            END-STRING

            DIVIDE FUNCTION INTEGER-OF-DAY BY 7
                   REMAINDER WS-JOUR
            END-DIVIDE

            EVALUATE WS-JOUR
            WHEN 0
              MOVE 'DIMANCHE' TO JOURO
            WHEN 1
              MOVE 'LUNDI' TO JOURO
            WHEN 2
              MOVE 'MARDI' TO JOURO
            WHEN 3
              MOVE 'MERCREDI' TO JOURO
            WHEN 4
              MOVE 'JEUDI' TO JOURO
            WHEN 5
              MOVE 'VENDREDI' TO JOURO
            WHEN 6
              MOVE 'SAMEDI' TO JOURO
            END-EVALUATE

            EXEC CICS SEND MAP    ('A040CI7')
                           ERASE
            END-EXEC

            MOVE PROG-COURANT TO PROG-SUIVANT

            EXEC CICS RETURN TRANSID  (MA-TRX)
                             COMMAREA (WS-COMMAREA)
                             LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23000-TRAIT-RECEPTION.
       *---------------------*
            EVALUATE EIBAID
               WHEN DFHENTER
                    PERFORM  23100-TRAIT-ENTER
               WHEN DFHPF12
                    PERFORM  23200-TRAIT-FIN
       *       WHEN DFHCLEAR
       *            MOVE 'A04APGMT' TO  PROG-SUIVANT
       *            PERFORM  23110-PROG-SUIVANT
               WHEN OTHER
                    PERFORM  90000-ERR-TOUCHE
            END-EVALUATE
            .

        23110-PROG-SUIVANT.
       *------------------*
       *    IF  ......................
       *       MOVE '?????'   TO  PROG-SUIVANT
       *    END-IF

            EXEC CICS XCTL  PROGRAM  (PROG-SUIVANT)
                            COMMAREA (WS-COMMAREA)
                            LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23100-TRAIT-ENTER.
       *------------------*
       *    ..........................
            EXEC CICS RECEIVE MAP  ('A040CI7')
                              RESP (C-R)
            END-EXEC

            EVALUATE C-R
               WHEN DFHRESP(NORMAL)
                    CONTINUE
       *       WHEN DFHRESP(MAPFAIL)
       *            .............
               WHEN OTHER
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE

       *    ............................
       *    ...  ANALYSE DES CHAMPS  ...
       *    ............................
            EVALUATE USERIDI
               WHEN '1'
                 MOVE 'A04CPGMT' TO  PROG-SUIVANT
                 PERFORM 23110-PROG-SUIVANT
               WHEN '2'
                 MOVE 'A04BPGMT' TO  PROG-SUIVANT
                 PERFORM 23110-PROG-SUIVANT
               WHEN '3'
               WHEN '4'
                 MOVE 'CHOIX ACTUELLEMENT INDISPONIBLE' TO MSGO
                 PERFORM  22000-TRAIT-ENVOI
               WHEN OTHER
                 MOVE 'CHOIX INVALIDE'                  TO MSGO
                 PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        23200-TRAIT-FIN.
       *---------------*
            MOVE 'FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        90000-ERR-TOUCHE.
       *----------------*
            MOVE 'TOUCHE DE FONCTION INVALIDE' TO MSGO
            PERFORM  22000-TRAIT-ENVOI
            .

        91000-ERREUR-CICS.
       *-------------------*
            MOVE 'ERREUR CICS !!!  FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        99000-FIN-CICS.
       *--------------*
            EXEC CICS SEND FROM   (MESSAGE-TXT)
                           LENGTH (LENGTH OF MESSAGE-TXT)
                           ERASE
            END-EXEC

            EXEC CICS RETURN END-EXEC
            .
            .
