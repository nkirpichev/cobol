
 MEMBER NAME  A00P1
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00P1.
       ******************************************************************
       * INDIQUE LES FONCTIONS PRINCIPALES DU PROGRAMMES                *
       * 231114 : AMAL. AJOUT CONTROLE NUMERO CLIENT                    *
       ******************************************************************
        PROCEDURE DIVISION.
            DISPLAY 'ON ECRIT CE QU''ON VEUT ET ON PEUT CONTINUER SUR LA
       -    'LIGNE SUIVANTE'.
 231114* CONTROLE NUMCLI
 231114     IF NUMCLI NOT NUMERIC
 231114        DISPLAY 'NUMCLI NON NUMERIQUE'
 231114     END-IF.
            PERFORM PAR1 THRU PAR3
            STOP RUN.
       PAR1.
            ........
       PAR2.
            ........
       PAR3.
            ........
 MEMBER NAME  A00P2B
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00P2.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 21/11/2023.
       ******************************************************************
       * LECTURE DU FICHIER CLIENT                                      *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT FCLIENT ASSIGN TO DDCLIENT
                   FILE STATUS    IS FS.
        DATA DIVISION.
        FILE SECTION.
        FD  FCLIENT.
       *    RECORDING MODE IS F.
       ******************************************************************
       * DESCRIPTION ENREG FICHIER CLIENT SEQUENTIEL                    *
       * LONG : 80                                                      *
       ******************************************************************
        01  ENR-CLIENT.
       * COL 1  : NUMERO CLIENT
            05 ENR-NUMCLI     PIC 9(2).
       * COL 3  : NOM CLIENT
            05 ENR-NOM        PIC X(15).
       * COL 18 : PRENOM CLIENT
            05 ENR-PRENOM     PIC X(15).
       * COL 33 : DATE ENTREE SSAAMMJJ
            05 ENR-DATE-ENT   PIC 9(8).
       * COL 41 : FILLER
            05                PIC X(40).
        WORKING-STORAGE SECTION.
       * CONTIENT LE CODE RETOUR D'EXECUTION DES ORDRES D'ENTREE SORTIE
       * DU FICHIER FCLIENT
        01  FS                PIC 99      VALUE ZEROES.

        01  VAR1              PIC S999V99 VALUE ZEROES.
        01  VAR1-ED1          PIC  **,999 VALUE ZEROES.
        01  VAR1-ED2          PIC  ZZZ,ZZ VALUE ZEROES.
        01  VAR1-ED3          PIC +++9,99 VALUE ZEROES.
        01  VAR1-ED4          PIC ---9,99 VALUE ZEROES.
        01  VAR1-ED5          PIC  ZZZ,ZZCR VALUE ZEROES.
        01  VAR1-ED6          PIC  ZZZ,ZZDB VALUE ZEROES.

        01  ZONE-H            PIC *.***,**+.

        01  VARDAT1           PIC 9(8).
        01  VARDAT1-ED        PIC 9999/99/99.
        PROCEDURE DIVISION.
            MOVE 105478561000 TO ZONE-H
            DISPLAY 'ZONE-H : ' ZONE-H
            DISPLAY SPACES

            MOVE 20231122     TO VARDAT1
            MOVE VARDAT1      TO VARDAT1-ED
            DISPLAY VARDAT1
            DISPLAY VARDAT1-ED
            DISPLAY SPACES

            MOVE +123,45      TO VAR1
            DISPLAY 'VAR1     : ' VAR1
            MOVE VAR1         TO VAR1-ED1
            DISPLAY 'VAR1-ED1 : ' VAR1-ED1
            MOVE VAR1         TO VAR1-ED2
            DISPLAY 'VAR1-ED2 : ' VAR1-ED2
            MOVE VAR1         TO VAR1-ED3
            DISPLAY 'VAR1-ED3 : ' VAR1-ED3
            MOVE VAR1         TO VAR1-ED4
            DISPLAY 'VAR1-ED4 : ' VAR1-ED4
            MOVE VAR1         TO VAR1-ED5
            DISPLAY 'VAR1-ED5 : ' VAR1-ED5
            MOVE VAR1         TO VAR1-ED6
            DISPLAY 'VAR1-ED6 : ' VAR1-ED6
            DISPLAY SPACES

            MOVE 000,01       TO VAR1
            DISPLAY 'VAR1     : ' VAR1
            MOVE VAR1         TO VAR1-ED1
            DISPLAY 'VAR1-ED1 : ' VAR1-ED1
            MOVE VAR1         TO VAR1-ED2
            DISPLAY 'VAR1-ED2 : ' VAR1-ED2
            MOVE VAR1         TO VAR1-ED3
            DISPLAY 'VAR1-ED3 : ' VAR1-ED3
            MOVE VAR1         TO VAR1-ED4
            DISPLAY 'VAR1-ED4 : ' VAR1-ED4
            DISPLAY SPACES

            MOVE ZEROES       TO VAR1
            DISPLAY 'VAR1     : ' VAR1
            MOVE VAR1         TO VAR1-ED1
            DISPLAY 'VAR1-ED1 : ' VAR1-ED1
            MOVE VAR1         TO VAR1-ED2
            DISPLAY 'VAR1-ED2 : ' VAR1-ED2
            MOVE VAR1         TO VAR1-ED3
            DISPLAY 'VAR1-ED3 : ' VAR1-ED3
            MOVE VAR1         TO VAR1-ED4
            DISPLAY 'VAR1-ED4 : ' VAR1-ED4
            DISPLAY SPACES

            MOVE -98,7        TO VAR1
            DISPLAY 'VAR1     : ' VAR1
            MOVE VAR1         TO VAR1-ED1
            DISPLAY 'VAR1-ED1 : ' VAR1-ED1
            MOVE VAR1         TO VAR1-ED2
            DISPLAY 'VAR1-ED2 : ' VAR1-ED2
            MOVE VAR1         TO VAR1-ED3
            DISPLAY 'VAR1-ED3 : ' VAR1-ED3
            MOVE VAR1         TO VAR1-ED4
            DISPLAY 'VAR1-ED4 : ' VAR1-ED4
            MOVE VAR1         TO VAR1-ED5
            DISPLAY 'VAR1-ED5 : ' VAR1-ED5
            MOVE VAR1         TO VAR1-ED6
            DISPLAY 'VAR1-ED6 : ' VAR1-ED6
            STOP RUN.
 MEMBER NAME  A00P2
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00P2.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 21/11/2023.
       ******************************************************************
       * LECTURE DU FICHIER CLIENT                                      *
       * DEROULE DU PROGRAMME                                           *
       * FAIRE DEBUT                                                    *
       *       OUVERTURE DU FICHIER CLIENT                              *
       *       LECTURE DU 1ER ENREGISTREMENT                            *
       *       TEST DU FICHIER VIDE                                     *
       * FAIRE JUSQU'A FIN DU FICHIER                                   *
       *       TRAITER L'ENREGISTREMENT                                 *
       *          AFFICHER LE CONTENU DE L'ENR CHAMP PAR CHAMP          *
       *       LECTURE ENREGISTREMENT SUIVANT                           *
       * FAIRE FIN                                                      *
       *       FERMER LE FICHIER                                        *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT FCLIENT ASSIGN TO DDCLIENT
                   FILE STATUS    IS FS.
        DATA DIVISION.
        FILE SECTION.
        FD  FCLIENT.
       *    RECORDING MODE IS F.
       ******************************************************************
       * DESCRIPTION ENREG FICHIER CLIENT SEQUENTIEL                    *
       * LONG : 80                                                      *
       ******************************************************************
        01  ENR-CLIENT.
       * COL 1  : NUMERO CLIENT
            05 ENR-NUMCLI     PIC 9(2).
       * COL 3  : NOM CLIENT
            05 ENR-NOM        PIC X(15).
       * COL 18 : PRENOM CLIENT
            05 ENR-PRENOM     PIC X(15).
       * COL 33 : DATE ENTREE SSAAMMJJ
            05 ENR-DATE-ENT   PIC 9(8).
       * COL 41 : FILLER
            05                PIC X(40).

        WORKING-STORAGE SECTION.
       * CONTIENT LE CODE RETOUR D'EXECUTION DES ORDRES D'ENTREE SORTIE
       * DU FICHIER FCLIENT
        01  FS                PIC 99      VALUE ZEROES.
       ******************************************************************
       * ZONES POUR AFFICHAGE  DE LA DATE D'ENTREE                      *
       ******************************************************************
       * DATE AVEC DECOMPOSITION ANNEE, MOIS, JOUR
        01  DATE-ENT-WS.
            05 DATE-ENT-AAAA  PIC 9(4).
            05 DATE-ENT-MM    PIC 9(2).
            05 DATE-ENT-JJ    PIC 9(2).
       * DATE AU FORMAT D'EDITION
        01  DATE-ENT-ED.
            05 DATE-ENT-ED-JJ    PIC 9(2).
            05                   PIC X    VALUE '/'.
            05 DATE-ENT-ED-MM    PIC 9(2).
            05                   PIC X    VALUE '/'.
            05 DATE-ENT-ED-AAAA  PIC 9(4).

       * COMPTEUR D'ENREGISTREMENTS LUS
       * --> INCREMENTE A CHAQUE LECTURE
       * --> AFFICHE EN FIN DE PROGRAMME
        01  CPT               PIC 99      VALUE ZEROES.

       * INDICATEUR DE FIN DE FICHIER
       * --> POSITIONNE A LA LECTURE QUAND FILE STATUS = 10
       * --> ARRETE LA BOUCLE DE TRAITEMENT QUAND POSITIONNE
        01  IND-FIN-FICHIER   PIC X       VALUE ZEROES.
            88 FIN-FICHIER                VALUE 'F'.

        PROCEDURE DIVISION.
            PERFORM DEBUT

       * TOUTES LES INSTRUCTIONS ENTRE PERFORM UNTIL ET END-PERFORM SONT
       * EXECUTEES (ICI CE SONT 2 PERFORM)
       * LA CONDITION EST TESTEE AVANT L'EXECUTION DES 2 PERFORMS
       * --> SI PAS FIN-FICHIER ON EXECUTE LES 2 PERFORMS ET ON REMONTE
       *     AU DEBUT DE LA BOUCLE POUR RETESTER SI FIN-FICHIER
       * --> SI FIN-FICHIER ON SORT DE LA BOUCLE ET ON EXECUTE LA FIN
            PERFORM UNTIL FIN-FICHIER
               PERFORM TRAIT-ENR
               PERFORM LECTURE-FCLIENT
            END-PERFORM

            PERFORM FIN

            STOP RUN.

        DEBUT.
       ******************************************************************
       * OUVERTURE DU FICHIER CLIENT EN LECTURE                         *
       * 1ERE LECTURE                                                   *
       * TEST DU FICHIER VIDE                                           *
       ******************************************************************
            OPEN INPUT FCLIENT
            IF FS NOT = ZEROES
       * ON NE GERE PAS DE FILE STATUS DIFFERENT DE ZERO
       * SI DIFFERENT DE ZERO, ARRET DU PROGRAMME AVEC ERREUR
               DISPLAY 'ERREUR OPEN FCLIENT, FS : ' FS
               PERFORM FIN-ERREUR
            END-IF.

       * LECTURE 1ER ENR
       * TEST DU FICHIER VIDE :
       * SI FILE STATUS = 10, ARRET DU PROGRAMME AVEC ERREUR
            PERFORM LECTURE-FCLIENT
            IF FIN-FICHIER
               DISPLAY 'ERREUR FICHIER CLIENT VIDE |||'
               PERFORM FIN-ERREUR
            END-IF.

        TRAIT-ENR.
       ******************************************************************
       * ICI, ON EST SUR D'AVOIR DANS LE BUFFER L'ENREGISTREMENT LU     *
       * AFFICHER LES CHAMPS UN PAR UN, UNE LIGNE PAR CHAMP             *
       ******************************************************************
            DISPLAY 'NUMERO CLIENT : ' ENR-NUMCLI
            DISPLAY 'NOM CLIENT    : ' ENR-NOM
            DISPLAY 'PRENOM CLIENT : ' ENR-PRENOM
       * TRAITEMENT PARTICULIER POUR LA DATE D'ENTREE
       * ELLE EST STOCKEE AU FORMAT AAAAMMJJ ET ON VEUT L'AFFICHER AU
       * FORMAT JJ/MM/AAAA
       * POUR CE FAIRE, ON PASSE PAR DES VARIABLES INTERMEDIAIRES :
       * 1- DATE-ENT-WS : CONTIENT LA DESCRIPTION ANNEE, MOIS, JOUR
       * 2- DATE-ENT-ED : AU FORMAT JJ/MM/AAAA
            MOVE ENR-DATE-ENT       TO DATE-ENT-WS
            MOVE DATE-ENT-AAAA      TO DATE-ENT-ED-AAAA
            MOVE DATE-ENT-MM        TO DATE-ENT-ED-MM
            MOVE DATE-ENT-JJ        TO DATE-ENT-ED-JJ
            DISPLAY 'DATE ENTREE   : ' DATE-ENT-ED
       * ON TERMINE PAR UNE LIGNE BLANCHE
            DISPLAY SPACES.

        LECTURE-FCLIENT.
       ******************************************************************
       * LECTURE DE L'ENREGISTREMENT SUIVANT                            *
       * AT END : INDIQUE CE QU'IL FAUT FAIRE SI FILE STATUS = 10       *
       *          POSITIONNE L'INDICATEUR DE FIN DE FICHIER AVEC LA     *
       *          VALEUR CORRESPONDANTE (UTILISATION D'UN NOM CONDITION)*
       * NOT AT END : INDIQUE CE QU'IL FAUT FAIRE SI FILE STATUS = ZERO *
       *          CAD QUAND L'ENREGISTREMENT EST TROUVE                 *
       *          INCREMENTER LE COMPTEUR DES ENREGISTREMENTS LUS       *
       * AUTRES CAS : SI FILE STATUS DIFFERENT DE ZERO ET DE 10         *
       *          ON NE PEUT GERER, ARRET DU PROGRAMME AVEC ERREUR      *
       ******************************************************************
               READ FCLIENT
                 AT END     SET FIN-FICHIER TO TRUE
                 NOT AT END ADD 1 TO CPT
               END-READ
               IF FS NOT = ZEROES AND 10
                  DISPLAY 'ERREUR READ FCLIENT, FS : ' FS
                  PERFORM FIN-ERREUR
               END-IF.

        FIN-ERREUR.
       ******************************************************************
       * PARAGRAPHE UTILISE EN CAS D'ERREUR NON GEREE PAR LE PROGRAMME  *
       * L'AFFICHAGE DE L'ERREUR SE FAIT AVANT L'APPEL                  *
       * ON POSITIONNE LE RETURN-CODE A UNE VALEUR SPECIFIQUE POUR      *
       * QUE LES STEPS SUIVANTS DANS LE JCL NE S'EXECUTENT PAS          *
       * ET ON ARRETE LE PROGRAMME                                      *
       ******************************************************************
            MOVE 17 TO RETURN-CODE
            CLOSE FCLIENT
            STOP RUN.

        FIN.
       ******************************************************************
       * PARAGRAPHE UTILISE SI TOUT S'EST BIEN PASSE                    *
       * AFFICHAGE DES COMPTEURS                                        *
       * FERMETURE DES FICHIERS                                         *
       ******************************************************************
            DISPLAY 'FIN DE FICHIER ATTEINTE'
            DISPLAY 'NB ENR LUS : ' CPT
            CLOSE FCLIENT.
 MEMBER NAME  A00P3
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00P3.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 27/11/2023
       ******************************************************************
       * EXERCICES SUR LES INSTRUCTIONS COBOL                           *
       * 271114 : CREATION                                              *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01  V1               PIC X(40)         VALUE
            'IL ETAIT UNE FOIS UN MARCHAND DE FOIES'.
        01  TAB REDEFINES V1.
            05 POSTE         PIC X(8)          OCCURS 5.
        01  I                PIC 99            VALUE ZEROES.

        01  RES-POSTE        PIC X(8)          VALUE SPACES.

        01  CPT              PIC 99            VALUE ZEROES.

       * LISTER LES POSTES CONTENANT AU MOINS TROIS CHIFFRES
        01  TABH.
            05 POSTEH                          OCCURS 5.
               10 CARH       PIC X             OCCURS 8.
                  88 CHIFFRE                   VALUE '0' THRU '9'.
        01  IH               PIC 9             VALUE ZEROES.
        01  JH               PIC 99            VALUE ZEROES.
        01  NUMH             PIC 9             VALUE ZEROES.
        01  CPTH             PIC 9             VALUE ZEROES.

       * VARIABLES POUR STRING
        01  V2               PIC X(10)         VALUE 'ARTHUR    '.
        01  V3               PIC X(10)         VALUE 'RIMBAUD   '.
        01  V4               PIC X(21)         VALUE SPACES.

       * VARIABLES POUR UNSTRING
        01  V5               PIC X(24)         VALUE
            'AAAAA;BBB;CCCC;D;'.
        01  V5-1             PIC X(5)          VALUE SPACES.
        01  V5-2             PIC X(5)          VALUE SPACES.
        01  V5-3             PIC X(5)          VALUE SPACES.
        01  V5-4             PIC X(5)          VALUE SPACES.
        01  V5-POINTER       PIC 99            VALUE 1.
        01  V5-5.
            05 V5-5-POSTE                      OCCURS 4.
               10 V5-5-VAR   PIC X(5).
               10 V5-5-CPT   PIC 9.
        01  I5               PIC 99            VALUE ZEROES.

        01  Z1               PIC 99            VALUE 5.
        01  Z2               PIC 9V9           VALUE 3,4.
        01  Z3               PIC S9(3)V99      VALUE -11,68.
        01  Z4               PIC S9(9)V9       VALUE ZEROES.
        01  Z4-ED            PIC +(10),+       VALUE ZEROES.

        01  ZACCEPT.
            05 ZA            PIC X.
            05 ZB            PIC X.
            05 ZC            PIC X.

        01  ZEVALUATE.
            05 ZD            PIC X.
            05 ZE            PIC X.
            05 ZF            PIC X.

        PROCEDURE DIVISION.
            PERFORM PA
            PERFORM PB
            PERFORM PC
            PERFORM PD
            PERFORM PE
            PERFORM PF-EN-VERT
            PERFORM PG
            PERFORM PH-EN-VERT
            PERFORM PI
            PERFORM PJ
            PERFORM PK
            PERFORM PL
            PERFORM PM
            STOP RUN.

        PA.
       ******************************************************************
       * COMPTER LE NOMBRE DE BLANCS DANS V1                            *
       ******************************************************************
            INSPECT V1 TALLYING CPT FOR ALL SPACES
            DISPLAY '         COMPTER LE NOMBRE DE BLANCS DANS V1'
            DISPLAY 'CPT : ' CPT.

        PB.
       ******************************************************************
       * REMPLACER 'FOI' PAR 'OIF'                                      *
       ******************************************************************
            MOVE ZEROES       TO CPT
            INSPECT V1 TALLYING  CPT FOR ALL 'FOI'
                       REPLACING ALL 'FOI' BY 'OIF'
            DISPLAY SPACES
            DISPLAY '         REMPLACER ''FOI'' PAR ''OIF'''
            DISPLAY 'CPT : ' CPT
            DISPLAY 'V1  : ' V1.

        PC.
       ******************************************************************
       * REMPLACER LE PREMIER BLANC TROUVE PAR '*'                      *
       ******************************************************************
            MOVE ZEROES       TO CPT
            INSPECT V1 REPLACING FIRST SPACE BY '*'
            DISPLAY SPACES
            DISPLAY '         REMPLACER LE PREMIER BLANC TROUVE PAR ''*''
       -    ''.
            DISPLAY 'V1  : ' V1.

        PD.
       ******************************************************************
       * DECOUPER V1 EN 5 POSTES DE 8 CARACTERES                        *
       ******************************************************************
            DISPLAY SPACES
            DISPLAY '         DECOUPER V1 EN 5 POSTES DE 8 CARACTERES'
            DISPLAY 'V1 : ' V1
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 5
               DISPLAY 'POSTE ' I ' : ' POSTE(I)
            END-PERFORM.

        PE.
       ******************************************************************
       * COMPTER LE NOMBRE DE BLANCS EN DEBUT DE CHAQUE POSTE           *
       ******************************************************************
            DISPLAY SPACES
            DISPLAY '         COMPTER LE NOMBRE DE BLANCS EN DEBUT DE CHA
       -    'QUE POSTE'
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 5
               MOVE ZEROES TO CPT
               INSPECT POSTE(I) TALLYING CPT FOR LEADING SPACES
               DISPLAY 'POSTE ' I ' : ' POSTE(I)
               DISPLAY 'CPT   ' CPT
            END-PERFORM.

        PF-EN-VERT.
       ******************************************************************
       * INVERSER LES CONTENUS DES POSTES 1 ET 3                        *
       ******************************************************************
            DISPLAY SPACES
            DISPLAY '         INVERSER LES CONTENUS DES POSTES 1 ET 3'
            MOVE POSTE(1)     TO RES-POSTE
            MOVE POSTE(3)     TO POSTE(1)
            MOVE RES-POSTE    TO POSTE(3)
            DISPLAY 'POSTE 1 APRES INVERSION : ' POSTE(1)
            DISPLAY 'POSTE 3 APRES INVERSION : ' POSTE(3).

        PG.
       ******************************************************************
       * DANS V1, CONVERTIR LES CARACTERES 'AEIOUY' PAR '123456'        *
       ******************************************************************
            DISPLAY SPACES
            DISPLAY '         CONVERTIR LES VOYELLES PAR DES CHIFFRES'
            DISPLAY 'TAB AVANT CONVERSION : ' TAB
            INSPECT TAB CONVERTING 'AEIOUY' TO '123456'
            DISPLAY 'TAB APRES CONVERSION : ' TAB.

        PH-EN-VERT.
       ******************************************************************
       * LISTER LES POSTES CONTENANT AU MOINS TROIS CHIFFRES            *
       * ALGORITHME :                                                   *
       * ON VA AVOIR DEUX TABLES IMBRIQUEES                             *
       * LES POSTES DE LA 1ERE TABLE SONT COMPOSES EUX-MEMES DE 8 POSTES*
       * D'UN CARACTERE CHACUN                                          *
       * POUR CHAQUE POSTEH DE IH DE 1 EN 1 JUSQU'A 5                   *
       *      CPTH <- 0
       *      POUR CHAQUE CARH DE JH DE 1 EN 1 JUSQU'A 8                *
       *           SI CARH(IH, JH) EST NUMERIQUE                        *
       *              CPTH <- CPTH + 1                                  *
       *           FINSI
       *      FIN POUR
       *      SI CPTH > 2
       *         AFFICHER POSTEH(IH)
       *      FINSI
       * FIN POUR
       ******************************************************************
            DISPLAY SPACES
            DISPLAY '         LISTER LES POSTES CONTENANT AU MOINS TROIS
       -    'CHIFFRES'
            MOVE V1 TO TABH
            PERFORM VARYING IH FROM 1 BY 1 UNTIL IH > 5
               MOVE ZEROES TO CPTH
               PERFORM VARYING JH FROM 1 BY 1 UNTIL JH > 8
       *          IF CHIFFRE (IH, JH)
                  IF CARH (IH, JH) IS NUMERIC
                     ADD 1 TO CPTH
                  END-IF
               END-PERFORM
               IF CPTH > 2
                  DISPLAY 'POSTEH ' IH ' : ' POSTEH(IH)
                  DISPLAY 'CPTH : ' CPTH
               END-IF
            END-PERFORM.

       * AUTRE METHODE AVEC INSPECT
            DISPLAY 'AUTRE METHODE AVEC INSPECT'
            PERFORM VARYING IH FROM 1 BY 1 UNTIL IH > 5
               MOVE ZEROES TO CPTH
               PERFORM VARYING JH FROM 0 BY 1 UNTIL JH > 9
                  MOVE JH TO NUMH
                  INSPECT POSTE(IH) TALLYING CPTH FOR ALL NUMH
               END-PERFORM
               IF CPTH > 2
                  DISPLAY 'POSTEH ' IH ' : ' POSTEH(IH)
                  DISPLAY 'CPTH : ' CPTH
               END-IF
            END-PERFORM.

        PI.
       ******************************************************************
       * CONCATENER V2 ET V3 DANS V4, UN SEUL BLANC ENTRE LES DEUX      *
       ******************************************************************
            DISPLAY SPACES
            DISPLAY '         CONCATENER V2 ET V3 DANS V4'
            STRING V2         DELIMITED BY SPACES
                   SPACES     DELIMITED BY SIZE
                   V3         DELIMITED BY SPACES
              INTO V4
              WITH POINTER    CPT
            DISPLAY 'V2 : ' V2
            DISPLAY 'V3 : ' V3
            DISPLAY 'V4 : ' V4
            DISPLAY 'CPT: ' CPT.

        PJ.
       ******************************************************************
       * DECONCATENER V5 EN 4 VARIABLES, LE DELIMITEUR EST ';'          *
       ******************************************************************
            DISPLAY SPACES
            DISPLAY '         DECONCATENER V5 EN 4 VARIABLES'
            UNSTRING V5       DELIMITED BY ';'
              INTO   V5-1
                     V5-2
                     V5-3
                     V5-4
            END-UNSTRING
            DISPLAY 'V5   : ' V5
            DISPLAY 'V5-1 : ' V5-1
            DISPLAY 'V5-2 : ' V5-2
            DISPLAY 'V5-3 : ' V5-3
            DISPLAY 'V5-4 : ' V5-4.

            DISPLAY SPACES
            DISPLAY '         DECONCATENER V5 EN 4 VARIABLES'
            DISPLAY '         ET NOMBRE DE CARACTERES PAR VARIABLE'
            PERFORM VARYING I5 FROM 1 BY 1 UNTIL I5 > 4
               UNSTRING V5       DELIMITED BY ';'
                 INTO   V5-5-VAR(I5) COUNT IN V5-5-CPT(I5)
                 WITH POINTER    V5-POINTER
               END-UNSTRING
               DISPLAY 'V5-5-VAR : ' V5-5-VAR(I5)
            END-PERFORM
            DISPLAY 'V5   : ' V5
            DISPLAY 'V5-5 : ' V5-5.
       *    DISPLAY 'V5-5-POSTE1: ' V5-5-POSTE(1)
       *    DISPLAY 'V5-5-POSTE2: ' V5-5-POSTE(2)
       *    DISPLAY 'V5-5-POSTE3: ' V5-5-POSTE(3)
       *    DISPLAY 'V5-5-POSTE4: ' V5-5-POSTE(4).

        PK.
       ******************************************************************
       * INSTRUCTIONS ARITHMETIQUES                                     *
       ******************************************************************
            DISPLAY SPACES
            DISPLAY '         INSTRUCTIONS ARITHMETIQUES'
            DISPLAY SPACES
            DISPLAY 'Z1 = 5'
            DISPLAY 'Z2 = 3,4'
            DISPLAY 'Z3 = -11,68'
            DISPLAY '-----> Z4 = Z1 + Z2 + Z3 + 5'
            ADD Z1 Z2 Z3 5 GIVING Z4
            MOVE Z4 TO Z4-ED
            DISPLAY 'Z4 = ' Z4-ED

            DISPLAY SPACES
            DISPLAY 'Z3 = -11,68'
            DISPLAY 'Z4 = ' Z4-ED
            DISPLAY '-----> Z4 = Z4 - Z3'
            SUBTRACT Z3 FROM Z4
            MOVE Z4 TO Z4-ED
            DISPLAY 'Z4 = ' Z4-ED

            DISPLAY SPACES
            DISPLAY 'Z2 = 3,4'
            DISPLAY 'Z3 = -11,68'
            DISPLAY 'Z4 = ' Z4-ED
            DISPLAY '-----> Z4 = Z3 * Z2 * (-1)'
            MULTIPLY Z3 BY Z2 GIVING Z4
            MULTIPLY -1 BY Z4
            MOVE Z4 TO Z4-ED
            DISPLAY 'Z4 = ' Z4-ED

            DISPLAY SPACES
            DISPLAY 'Z2 = 3,4'
            DISPLAY 'Z3 = -11,68'
            DISPLAY 'Z4 = ' Z4-ED
            DISPLAY '-----> Z4 = (Z4 / Z2) + Z3'
            DIVIDE Z2 INTO Z4
            ADD Z3 TO Z4
            MOVE Z4 TO Z4-ED
            DISPLAY 'Z4 = ' Z4-ED

       * UTILISATION DE COMPUTE AVEC ROUNDED
            MOVE 5      TO Z1
            MOVE 3,4    TO Z2
            MOVE -11,68 TO Z3
            DISPLAY SPACES
            DISPLAY '         COMPUTE'
            DISPLAY SPACES
            DISPLAY 'Z1 = 5'
            DISPLAY 'Z2 = 3,4'
            DISPLAY 'Z3 = -11,68'
            DISPLAY '-----> Z4 = Z1 + Z2 + Z3 + 5'
            COMPUTE Z4 ROUNDED = Z1 + Z2 + Z3 + 5
            MOVE Z4 TO Z4-ED
            DISPLAY 'Z4 = ' Z4-ED

            DISPLAY SPACES
            DISPLAY 'Z3 = -11,68'
            DISPLAY 'Z4 = ' Z4-ED
            DISPLAY '-----> Z4 = Z4 - Z3'
            COMPUTE Z4 ROUNDED = Z4 - Z3
            MOVE Z4 TO Z4-ED
            DISPLAY 'Z4 = ' Z4-ED

            DISPLAY SPACES
            DISPLAY 'Z2 = 3,4'
            DISPLAY 'Z3 = -11,68'
            DISPLAY 'Z4 = ' Z4-ED
            DISPLAY '-----> Z4 = Z3 * Z2 * (-1)'
            COMPUTE Z4 ROUNDED = Z3 * Z2 * (-1)
            MOVE Z4 TO Z4-ED
            DISPLAY 'Z4 = ' Z4-ED

            DISPLAY SPACES
            DISPLAY 'Z2 = 3,4'
            DISPLAY 'Z3 = -11,68'
            DISPLAY 'Z4 = ' Z4-ED
            DISPLAY '-----> Z4 = (Z4 / Z2) + Z3'
            COMPUTE Z4 ROUNDED = (Z4 / Z2) + Z3
            MOVE Z4 TO Z4-ED
            DISPLAY 'Z4 = ' Z4-ED
            .

        PL.
       ******************************************************************
       * INSTRUCTIONS CONDITIONNELLES                                   *
       ******************************************************************
            DISPLAY SPACES
            DISPLAY '         INSTRUCTIONS CONDITIONNELLES'

            ACCEPT ZACCEPT
            PERFORM UNTIL ZACCEPT = 'FIN'
               DISPLAY 'ZACCPET : ' ZACCEPT
       * 1ER CAS  : TRT1
               IF ZA = 'A' AND ZB = 'B' AND ZC = 'C'
                  DISPLAY 'TRT1'
               ELSE
       * 2EME CAS : TRT2
                  IF ZA NOT = 'A' OR ZB = 'B'
                     DISPLAY 'TRT2'
                  ELSE
       * TOUS LES AUTRES CAS
                     DISPLAY 'AUCUN TRAITEMENT'
                  END-IF
               END-IF
               ACCEPT ZACCEPT
            END-PERFORM
            .

        PM.
       ******************************************************************
       * INSTRUCTIONS CONDITIONNELLES                                   *
       ******************************************************************
            DISPLAY SPACES
            DISPLAY '         EVALUATE'

            ACCEPT ZEVALUATE
            PERFORM UNTIL ZEVALUATE = 'FIN'
               DISPLAY 'ZEVALUATE : ' ZEVALUATE
               EVALUATE ZD
       * 1ER CAS  : D
                WHEN 'D'     DISPLAY 'TRTD'
       * 2EME CAS : E OU F
                WHEN 'E'
                WHEN 'F'     DISPLAY 'TRTE'
       * TOUS LES AUTRES CAS
                WHEN OTHER   DISPLAY 'AUCUN TRAITEMENT'
               END-EVALUATE
               ACCEPT ZEVALUATE
            END-PERFORM

            ACCEPT ZEVALUATE
            PERFORM UNTIL ZEVALUATE = 'FIN'
               DISPLAY 'ZEVALUATE : ' ZEVALUATE
               EVALUATE ZE   ALSO ZF
       * 1ER CAS  : TRTF
                WHEN    'E'  ALSO 'F' DISPLAY 'TRTF'
       * 2EME CAS : TRTE
                WHEN    'F'  ALSO 'E' DISPLAY 'TRTE'
       * TOUS LES AUTRES CAS
                WHEN OTHER   DISPLAY 'AUCUN TRAITEMENT'
               END-EVALUATE
               EVALUATE TRUE
       * 1ER CAS  : TRTX
                WHEN    ZE > ZF       DISPLAY 'TRTX'
       * 2EME CAS : TRTY
                WHEN    ZE NOT = 'A'  DISPLAY 'TRTY'
       * 3EME CAS : NE RIEN FAIRE
                WHEN    ZE = 'A'      CONTINUE
       * TOUS LES AUTRES CAS
                WHEN OTHER   DISPLAY 'AUCUN TRAITEMENT'
               END-EVALUATE
               ACCEPT ZEVALUATE
            END-PERFORM
            .
 MEMBER NAME  A00P4
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00P4.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 21/11/2023.
       ******************************************************************
       * LECTURE DU FICHIER CLIENT                                      *
       * DEROULE DU PROGRAMME                                           *
       * FAIRE DEBUT                                                    *
       *       OUVERTURE DU FICHIER CLIENT                              *
       *       LECTURE DU 1ER ENREGISTREMENT                            *
       *       TEST DU FICHIER VIDE                                     *
       * FAIRE JUSQU'A FIN DU FICHIER                                   *
       *       TRAITER L'ENREGISTREMENT                                 *
       *          AFFICHER LE CONTENU DE L'ENR CHAMP PAR CHAMP          *
       *       LECTURE ENREGISTREMENT SUIVANT                           *
       * FAIRE FIN                                                      *
       *       FERMER LE FICHIER                                        *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT FCLIENT ASSIGN TO DDCLIENT
                   FILE STATUS    IS FS.
            SELECT FCLISOR ASSIGN TO DDCLISOR
                   FILE STATUS    IS FS2.
        DATA DIVISION.
        FILE SECTION.
        FD  FCLIENT.
       *    RECORDING MODE IS F.
       ******************************************************************
       * DESCRIPTION ENREG FICHIER CLIENT SEQUENTIEL                    *
       * LONG : 80                                                      *
       ******************************************************************
        01  ENR-CLIENT.
       * COL 1  : NUMERO CLIENT
            05 ENR-NUMCLI     PIC 9(2).
       * COL 3  : NOM CLIENT
            05 ENR-NOM        PIC X(15).
       * COL 18 : PRENOM CLIENT
            05 ENR-PRENOM     PIC X(15).
       * COL 33 : DATE ENTREE SSAAMMJJ
            05 ENR-DATE-ENT   PIC 9(8).
       * COL 41 : FILLER
            05                PIC X(40).

        FD  FCLISOR.
       *    RECORDING MODE IS F.
       ******************************************************************
       * DESCRIPTION ENREG FICHIER CLIENT SEQUENTIEL SORTIE             *
       * LONG : 80                                                      *
       ******************************************************************
        01  ENR-CLISOR        PIC X(80).

        WORKING-STORAGE SECTION.
       * CONTIENT LE CODE RETOUR D'EXECUTION DES ORDRES D'ENTREE SORTIE
       * DU FICHIER FCLIENT
        01  FS                PIC 99      VALUE ZEROES.
        01  FS2               PIC 99      VALUE ZEROES.
       ******************************************************************
       * ZONES POUR AFFICHAGE  DE LA DATE D'ENTREE                      *
       ******************************************************************
       * DATE AVEC DECOMPOSITION ANNEE, MOIS, JOUR
        01  DATE-ENT-WS.
            05 DATE-ENT-AAAA  PIC 9(4).
            05 DATE-ENT-MM    PIC 9(2).
            05 DATE-ENT-JJ    PIC 9(2).
       * DATE AU FORMAT D'EDITION
        01  DATE-ENT-ED.
            05 DATE-ENT-ED-JJ    PIC 9(2).
            05                   PIC X    VALUE '/'.
            05 DATE-ENT-ED-MM    PIC 9(2).
            05                   PIC X    VALUE '/'.
            05 DATE-ENT-ED-AAAA  PIC 9(4).

       * COMPTEUR D'ENREGISTREMENTS LUS
       * --> INCREMENTE A CHAQUE LECTURE
       * --> AFFICHE EN FIN DE PROGRAMME
        01  CPT               PIC 99      VALUE ZEROES.

       * INDICATEUR DE FIN DE FICHIER
       * --> POSITIONNE A LA LECTURE QUAND FILE STATUS = 10
       * --> ARRETE LA BOUCLE DE TRAITEMENT QUAND POSITIONNE
        01  IND-FIN-FICHIER   PIC X       VALUE ZEROES.
            88 FIN-FICHIER                VALUE 'F'.

        PROCEDURE DIVISION.
            PERFORM DEBUT

       * TOUTES LES INSTRUCTIONS ENTRE PERFORM UNTIL ET END-PERFORM SONT
       * EXECUTEES (ICI CE SONT 2 PERFORM)
       * LA CONDITION EST TESTEE AVANT L'EXECUTION DES 2 PERFORMS
       * --> SI PAS FIN-FICHIER ON EXECUTE LES 2 PERFORMS ET ON REMONTE
       *     AU DEBUT DE LA BOUCLE POUR RETESTER SI FIN-FICHIER
       * --> SI FIN-FICHIER ON SORT DE LA BOUCLE ET ON EXECUTE LA FIN
            PERFORM UNTIL FIN-FICHIER
               PERFORM TRAIT-ENR
               PERFORM LECTURE-FCLIENT
            END-PERFORM

            PERFORM FIN

            STOP RUN.

        DEBUT.
       ******************************************************************
       * OUVERTURE DU FICHIER CLIENT EN LECTURE                         *
       * 1ERE LECTURE                                                   *
       * TEST DU FICHIER VIDE                                           *
       ******************************************************************
            OPEN INPUT FCLIENT
            IF FS NOT = ZEROES
       * ON NE GERE PAS DE FILE STATUS DIFFERENT DE ZERO
       * SI DIFFERENT DE ZERO, ARRET DU PROGRAMME AVEC ERREUR
               DISPLAY 'ERREUR OPEN FCLIENT, FS : ' FS
               PERFORM FIN-ERREUR
            END-IF.

       * LECTURE 1ER ENR
       * TEST DU FICHIER VIDE :
       * SI FILE STATUS = 10, ARRET DU PROGRAMME AVEC ERREUR
            PERFORM LECTURE-FCLIENT
            IF FIN-FICHIER
               DISPLAY 'ERREUR FICHIER CLIENT VIDE |||'
               PERFORM FIN-ERREUR
            END-IF.

            OPEN OUTPUT FCLISOR
            IF FS2 NOT = ZEROES
       * ON NE GERE PAS DE FILE STATUS DIFFERENT DE ZERO
       * SI DIFFERENT DE ZERO, ARRET DU PROGRAMME AVEC ERREUR
               DISPLAY 'ERREUR OPEN FCLISOR, FS2: ' FS2
               PERFORM FIN-ERREUR
            END-IF.

        TRAIT-ENR.
            DISPLAY 'ENR-CLIENT : ' ENR-CLIENT
            MOVE ENR-DATE-ENT TO DATE-ENT-WS
            IF DATE-ENT-AAAA > 2020
               DISPLAY 'ECRITURE'
               PERFORM ECRITURE-ENR-CLISOR
            END-IF.

        LECTURE-FCLIENT.
       ******************************************************************
       * LECTURE DE L'ENREGISTREMENT SUIVANT                            *
       * AT END : INDIQUE CE QU'IL FAUT FAIRE SI FILE STATUS = 10       *
       *          POSITIONNE L'INDICATEUR DE FIN DE FICHIER AVEC LA     *
       *          VALEUR CORRESPONDANTE (UTILISATION D'UN NOM CONDITION)*
       * NOT AT END : INDIQUE CE QU'IL FAUT FAIRE SI FILE STATUS = ZERO *
       *          CAD QUAND L'ENREGISTREMENT EST TROUVE                 *
       *          INCREMENTER LE COMPTEUR DES ENREGISTREMENTS LUS       *
       * AUTRES CAS : SI FILE STATUS DIFFERENT DE ZERO ET DE 10         *
       *          ON NE PEUT GERER, ARRET DU PROGRAMME AVEC ERREUR      *
       ******************************************************************
               READ FCLIENT
                 AT END     SET FIN-FICHIER TO TRUE
                 NOT AT END ADD 1 TO CPT
               END-READ
               IF FS NOT = ZEROES AND 10
                  DISPLAY 'ERREUR READ FCLIENT, FS : ' FS
                  PERFORM FIN-ERREUR
               END-IF.

        ECRITURE-ENR-CLISOR.
               MOVE ENR-CLIENT TO ENR-CLISOR
               WRITE ENR-CLISOR
               IF FS2 NOT = ZEROES
                  DISPLAY 'ERREUR WRITE ENR-CLISOR, FS2 : ' FS2
                  PERFORM FIN-ERREUR
               END-IF.

        FIN-ERREUR.
       ******************************************************************
       * PARAGRAPHE UTILISE EN CAS D'ERREUR NON GEREE PAR LE PROGRAMME  *
       * L'AFFICHAGE DE L'ERREUR SE FAIT AVANT L'APPEL                  *
       * ON POSITIONNE LE RETURN-CODE A UNE VALEUR SPECIFIQUE POUR      *
       * QUE LES STEPS SUIVANTS DANS LE JCL NE S'EXECUTENT PAS          *
       * ET ON ARRETE LE PROGRAMME                                      *
       ******************************************************************
            MOVE 17 TO RETURN-CODE
            CLOSE FCLIENT
            STOP RUN.

        FIN.
       ******************************************************************
       * PARAGRAPHE UTILISE SI TOUT S'EST BIEN PASSE                    *
       * AFFICHAGE DES COMPTEURS                                        *
       * FERMETURE DES FICHIERS                                         *
       ******************************************************************
            DISPLAY 'FIN DE FICHIER ATTEINTE'
            DISPLAY 'NB ENR LUS : ' CPT
            CLOSE FCLIENT.
 MEMBER NAME  A
        01  TAB.
            05 PIC X(4)       VALUE 'Z001'.
            05 PIC 9(3)V99    VALUE 51,69.
            05 PIC X(4)       VALUE 'Z001'.
            05 PIC 9(3)V99    VALUE 51,69.
            05 PIC X(4)       VALUE 'Z001'.
            05 PIC 9(3)V99    VALUE 51,69.
            05 PIC X(4)       VALUE 'Z001'.
            05 PIC 9(3)V99    VALUE 51,69.
            05 PIC X(4)       VALUE 'Z001'.
            05 PIC 9(3)V99    VALUE 51,69.
            05 PIC X(4)       VALUE 'Z001'.
            05 PIC 9(3)V99    VALUE 51,69.
        01  REDEFINES TAB.
            05 POSTE  OCCURS 6.
               10 P-CODE-PRD  PIC X(4).
               10 P-PRIX-UNI  PIC 9(3)V99.

        01  ZONE        PIC 9.
            88 OK       VALUE 0.
            88 ERREUR   VALUE 1.

            SET OK      TO TRUE
            MOVE ZERO   TO ZONE

            SET ERREUR  TO TRUE
            MOVE 1      TO ZONE






            PERFORM TRAITEMENT
            STOP RUN.
       TRAITEMENT.
            PERFORM CONTROLE-ENR-ENT
            IF OK
               PERFORM ECRITURE-ENR-SOR
            ELSE
               ADD 1 TO CPT-ERR
            END-IF.
       CONTROLE-ENR-ENT.
            SET OK TO TRUE
            PERFORM CTRL-CODE-PRODUIT
            PERFORM CTRL-TYPE-MVT
            PERFORM CTRL-QUANTITE.
       CTRL-CODE-PRODUIT.
            IF CODE-PRD = SPACES
               DISPLAY 'CODE PRODUIT ERRONE : ' CODE-PRD
               SET ERREUR TO TRUE
            END-IF.
       CTRL-TYPE-MVT.
            ....
 MEMBER NAME  A00P5
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00P5.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 30/11/2023.
       ******************************************************************
       *    CONTROLE DU FICHIER MOUVEMENT                               *
       * DEBUT                                                          *
       *   OUVERTURE DES FICHIERS                                       *
       *   1ERE LECTURE FICHIER MVT                                     *
       * TRAITEMENT                                                     *
       *   FAIRE JUSQU'A FIN-FICHIER                                    *
       *     CONTROLE ENREGISTREMENT                                    *
       *       CONTROLE CODE PRODUIT                                    *
       *       CONTROLE TYPE MVT                                        *
       *       CONTROLE QUANTITE                                        *
       *     SI PAS D'ERREUR                                            *
       *       ECRIRE DANS FICHIER MVT SORTIE                           *
       * FIN                                                            *
       *   FERMER LES FICHIERS                                          *
       *   AFFICHER LES COMPTEURS                                       *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
       * FICHIER MOUVEMENTS A CONTROLER
            SELECT FENT       ASSIGN DDENT
                   FILE STATUS IS FS-ENT.
       * FICHIER MOUVEMENTS OK
            SELECT FSOR       ASSIGN DDSOR
                   FILE STATUS IS FS-SOR.

        DATA DIVISION.
        FILE SECTION.
        FD  FENT.
        01  ENR-ENT            PIC X(80).
        FD  FSOR.
        01  SOR-ENT            PIC X(80).

        WORKING-STORAGE SECTION.
       * DESCRIPTION DES ENREGISTREMENTS MVT A CONTROLER
        01  WSENT-ENR.
            05 WSENT-CODE-PRDT PIC X(4).
            05                 PIC X.
            05 WSENT-TYPE-MVT  PIC X.
               88 TYPE-MVT-VALIDE VALUE 'E' 'S'.
            05                 PIC X.
            05 WSENT-QTE-MVT   PIC 99.
            05                 PIC X(71).

       * DESCRIPTION DES ENREGISTREMENTS MVT OK
        01  WSSOR-ENR.
            05 WSSOR-CODE-PRDT PIC X(4).
            05                 PIC X.
            05 WSSOR-TYPE-MVT  PIC X.
            05                 PIC X.
            05 WSSOR-QTE-MVT   PIC 99.
            05                 PIC X(71).

       * FILE STATUS
        77  FS-ENT             PIC XX         VALUE ZEROES.
        77  FS-SOR             PIC XX         VALUE ZEROES.

       * COMPTEURS
        77  CPT-LUS            PIC 99 VALUE ZEROES.
        77  CPT-ECR            PIC 99 VALUE ZEROES.
        77  CPT-ERR            PIC 99 VALUE ZEROES.

       * INDICATEURS
        77  IND-ERR            PIC 9  VALUE ZEROES.
            88 OK                     VALUE ZEROES.
            88 ERREUR                 VALUE 1.
        77  IND-FIN-FICHIER    PIC 9  VALUE ZEROES.
            88 FIN-FICHIER            VALUE 1.

        PROCEDURE DIVISION.
            PERFORM DEBUT
            PERFORM UNTIL FIN-FICHIER
               PERFORM CONTROLE-ENT
               IF OK
                  PERFORM ECRITURE-SOR
               ELSE
                  ADD 1   TO CPT-ERR
               END-IF
               PERFORM LECTURE-ENT
            END-PERFORM
            PERFORM FIN
            STOP RUN
            .

        DEBUT.
       * OUVERTURE DES FICHIERS
            OPEN INPUT FENT
            IF FS-ENT NOT = ZEROES
               DISPLAY 'ERREUR OPEN FENT, FS : ' FS-ENT
               PERFORM FIN-ERREUR
            END-IF

            OPEN OUTPUT FSOR
            IF FS-SOR NOT = ZEROES
               DISPLAY 'ERREUR OPEN FSOR, FS : ' FS-SOR
               PERFORM FIN-ERREUR
            END-IF

       * 1ERE LECTURE FENT
            PERFORM LECTURE-ENT
            IF FIN-FICHIER
               DISPLAY 'FICHIER FENT VIDE'
               PERFORM FIN-ERREUR
            END-IF
            .

        CONTROLE-ENT.
       * INITIALISATION
            SET OK TO TRUE
            DISPLAY SPACES
            DISPLAY '--------> ENR NUM : ' CPT-LUS

       * CODE PRODUIT OBLIGATOIRE
            IF WSENT-CODE-PRDT = SPACES
               DISPLAY 'CODE PRODUIT NON RENSEIGNE'
               SET ERREUR TO TRUE
            END-IF

       * TYPE MOUVEMENT E OU S
            IF NOT TYPE-MVT-VALIDE
               DISPLAY 'TYPE MVT INVALIDE : ' WSENT-TYPE-MVT
               SET ERREUR TO TRUE
            END-IF

       * QUANTITE NUMERIQUE NON NULLE
            IF WSENT-QTE-MVT NOT NUMERIC
               DISPLAY 'QUANTITE NON NUMERIQUE : ' WSENT-QTE-MVT
               SET ERREUR TO TRUE
            ELSE
               IF WSENT-QTE-MVT = ZEROES
                  DISPLAY 'QUANTITE NULLE'
                  SET ERREUR TO TRUE
               END-IF
            END-IF
            .

        LECTURE-ENT.
            READ FENT INTO WSENT-ENR
              AT END     SET FIN-FICHIER TO TRUE
              NOT AT END ADD 1 TO CPT-LUS
            END-READ

            IF FS-ENT NOT = ZEROES AND '10'
               DISPLAY 'ERREUR READ FENT, FS : ' FS-ENT
               PERFORM FIN-ERREUR
            END-IF
            .

        ECRITURE-SOR.
            WRITE SOR-ENT FROM WSENT-ENR
            IF FS-SOR = ZEROES
               ADD 1 TO CPT-ECR
            ELSE
               DISPLAY 'ERREUR WRITE FSOR, FS : ' FS-SOR
               PERFORM FIN-ERREUR
            END-IF
            .

        FIN-ERREUR.
            MOVE 17 TO RETURN-CODE
            CLOSE FENT FSOR
            STOP RUN
            .

        FIN.
            CLOSE FENT FSOR

            DISPLAY 'CPT-LUS : ' CPT-LUS
            DISPLAY 'CPT-ECR : ' CPT-ECR
            DISPLAY 'CPT-ERR : ' CPT-ERR
            .
 MEMBER NAME  A00P5A
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00P5A.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 30/11/2023.
       ******************************************************************
       *    CONTROLE DU FICHIER MOUVEMENT                               *
       * DEBUT                                                          *
       *   OUVERTURE DES FICHIERS                                       *
       *   1ERE LECTURE FICHIER MVT                                     *
       * TRAITEMENT                                                     *
       *   FAIRE JUSQU'A FIN-FICHIER                                    *
       *     CONTROLE ENREGISTREMENT                                    *
       *       CONTROLE CODE PRODUIT                                    *
       *       CONTROLE TYPE MVT                                        *
       *       CONTROLE QUANTITE                                        *
       *     SI PAS D'ERREUR                                            *
       *       ECRIRE DANS FICHIER MVT SORTIE                           *
       * FIN                                                            *
       *   FERMER LES FICHIERS                                          *
       *   AFFICHER LES COMPTEURS                                       *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
       * FICHIER MOUVEMENTS A CONTROLER
            SELECT FENT       ASSIGN DDENT
                   FILE STATUS IS FS-ENT.
       * FICHIER MOUVEMENTS OK
            SELECT FSOR       ASSIGN DDSOR
                   FILE STATUS IS FS-SOR.

        DATA DIVISION.
        FILE SECTION.
        FD  FENT.
        01  ENR-ENT            PIC X(80).
        FD  FSOR.
        01  SOR-ENT            PIC X(80).

        WORKING-STORAGE SECTION.
       * DESCRIPTION DES ENREGISTREMENTS MVT A CONTROLER
        01  WSENT-ENR.
            05 WSENT-CODE-PRDT PIC X(4).
            05                 PIC X.
            05 WSENT-TYPE-MVT  PIC X.
               88 TYPE-MVT-VALIDE VALUE 'E' 'S'.
            05                 PIC X.
            05 WSENT-QTE-MVT   PIC 99.
            05                 PIC X(71).

       * DESCRIPTION DES ENREGISTREMENTS MVT OK
        01  WSSOR-ENR.
            05 WSSOR-CODE-PRDT PIC X(4).
            05                 PIC X.
            05 WSSOR-TYPE-MVT  PIC X.
            05                 PIC X.
            05 WSSOR-QTE-MVT   PIC 99.
            05                 PIC X.
            05 WSSOR-PRIX-UNIT PIC 9(3)V99 COMP-3.
            05                 PIC X(67).

       * FILE STATUS
        77  FS-ENT             PIC XX         VALUE ZEROES.
        77  FS-SOR             PIC XX         VALUE ZEROES.

       * COMPTEURS
        77  CPT-LUS            PIC 99 VALUE ZEROES.
        77  CPT-ECR            PIC 99 VALUE ZEROES.
        77  CPT-ERR            PIC 99 VALUE ZEROES.

       * INDICATEURS
        77  IND-ERR            PIC 9  VALUE ZEROES.
            88 OK                     VALUE ZEROES.
            88 ERREUR                 VALUE 1.
        77  IND-FIN-FICHIER    PIC 9  VALUE ZEROES.
            88 FIN-FICHIER            VALUE 1.

       * TABLES DES PRIX ASSOCIES AUX CODES PRODUITS
        01  TAB.
            05 PIC X(4)               VALUE 'Z001'.
            05 PIC 9(3)V99            VALUE 51,69.
            05 PIC X(4)               VALUE 'A001'.
            05 PIC 9(3)V99            VALUE 4,05.
            05 PIC X(4)               VALUE 'A006'.
            05 PIC 9(3)V99            VALUE 100,00.
            05 PIC X(4)               VALUE 'D110'.
            05 PIC 9(3)V99            VALUE 581,55.
            05 PIC X(4)               VALUE 'R001'.
            05 PIC 9(3)V99            VALUE 78,00.
        01  TAB-R REDEFINES TAB.
            05 POSTE OCCURS 5.
               10 P-CODE-PRDT         PIC X(4).
               10 P-PRIX-UNIT         PIC 9(3)V99.
        77  I                         PIC 99 VALUE ZEROES.
        77  IND-TROUVE                PIC 9  VALUE ZEROES.
            88  NON-TROUVE                   VALUE ZEROES.
            88  TROUVE                       VALUE 1.

        77  PRIX-TOTAL-PRDT           PIC 9(5)V99  VALUE ZEROES.
        77  PRIX-TOTAL-PRDT-ED        PIC Z(5),ZZ  VALUE ZEROES.
        77  PRIX-TOTAL-STOCK          PIC 9(7)V99  VALUE ZEROES.
        77  PRIX-TOTAL-STOCK-ED       PIC Z(7),ZZ  VALUE ZEROES.

        PROCEDURE DIVISION.
            PERFORM DEBUT
            PERFORM UNTIL FIN-FICHIER
               PERFORM CONTROLE-ENT
               IF OK
                  PERFORM RECHERCHE-PRIX-UNIT
                  PERFORM ECRITURE-SOR
               ELSE
                  ADD 1   TO CPT-ERR
               END-IF
               PERFORM LECTURE-ENT
            END-PERFORM
            PERFORM FIN
            STOP RUN
            .

        DEBUT.
       * OUVERTURE DES FICHIERS
            OPEN INPUT FENT
            IF FS-ENT NOT = ZEROES
               DISPLAY 'ERREUR OPEN FENT, FS : ' FS-ENT
               PERFORM FIN-ERREUR
            END-IF

            OPEN OUTPUT FSOR
            IF FS-SOR NOT = ZEROES
               DISPLAY 'ERREUR OPEN FSOR, FS : ' FS-SOR
               PERFORM FIN-ERREUR
            END-IF

       * 1ERE LECTURE FENT
            PERFORM LECTURE-ENT
            IF FIN-FICHIER
               DISPLAY 'FICHIER FENT VIDE'
               PERFORM FIN-ERREUR
            END-IF
            .

        CONTROLE-ENT.
       * INITIALISATION
            SET OK TO TRUE
            DISPLAY SPACES
            DISPLAY '--------> ENR NUM : ' CPT-LUS

       * CODE PRODUIT OBLIGATOIRE
            IF WSENT-CODE-PRDT = SPACES
               DISPLAY 'CODE PRODUIT NON RENSEIGNE'
               SET ERREUR TO TRUE
            END-IF

       * TYPE MOUVEMENT E OU S
            IF NOT TYPE-MVT-VALIDE
               DISPLAY 'TYPE MVT INVALIDE : ' WSENT-TYPE-MVT
               SET ERREUR TO TRUE
            END-IF

       * QUANTITE NUMERIQUE NON NULLE
            IF WSENT-QTE-MVT NOT NUMERIC
               DISPLAY 'QUANTITE NON NUMERIQUE : ' WSENT-QTE-MVT
               SET ERREUR TO TRUE
            ELSE
               IF WSENT-QTE-MVT = ZEROES
                  DISPLAY 'QUANTITE NULLE'
                  SET ERREUR TO TRUE
               END-IF
            END-IF
            .

        LECTURE-ENT.
            READ FENT INTO WSENT-ENR
              AT END     SET FIN-FICHIER TO TRUE
              NOT AT END ADD 1 TO CPT-LUS
            END-READ

            IF FS-ENT NOT = ZEROES AND '10'
               DISPLAY 'ERREUR READ FENT, FS : ' FS-ENT
               PERFORM FIN-ERREUR
            END-IF
            .

        RECHERCHE-PRIX-UNIT.
       * ALIMENTATION DU MVT SOR A PARTIR DU MVT ENT
            MOVE WSENT-ENR TO WSSOR-ENR

       * INITIALISATION DU PRIX
            MOVE ZEROES    TO WSSOR-PRIX-UNIT

       * INITIALISATION DE L'INDICATEUR PRIX TROUVE EN TABLE
            SET  NON-TROUVE TO TRUE

       * RECHERCHE DU CODE PRODUIT DANS LA TABLE
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 5
              IF WSENT-CODE-PRDT = P-CODE-PRDT(I)
       * SI LE CODE EST TROUVE, ON ALIMENTE LE PRIX DANS MVT SOR
                 MOVE P-PRIX-UNIT(I) TO WSSOR-PRIX-UNIT
                 SET TROUVE TO TRUE
                 COMPUTE PRIX-TOTAL-PRDT =
                      (WSENT-QTE-MVT * P-PRIX-UNIT(I))
                 ADD PRIX-TOTAL-PRDT TO PRIX-TOTAL-STOCK
                 MOVE PRIX-TOTAL-PRDT TO PRIX-TOTAL-PRDT-ED
                 DISPLAY 'PRIX TOTAL PRDT : ' PRIX-TOTAL-PRDT-ED
                 MOVE 5 TO I
              END-IF
            END-PERFORM

       * AFFICHER UN MSG SI PRIX NON TROUVE EN TABLE
            IF NON-TROUVE
               DISPLAY 'CODE PRODUIT INEXISTANT EN TABLE'
            END-IF
            .

        ECRITURE-SOR.
            WRITE SOR-ENT FROM WSSOR-ENR
            IF FS-SOR = ZEROES
               ADD 1 TO CPT-ECR
            ELSE
               DISPLAY 'ERREUR WRITE FSOR, FS : ' FS-SOR
               PERFORM FIN-ERREUR
            END-IF
            .

        FIN-ERREUR.
            MOVE 17 TO RETURN-CODE
            CLOSE FENT FSOR
            STOP RUN
            .

        FIN.
            CLOSE FENT FSOR

            MOVE PRIX-TOTAL-STOCK TO PRIX-TOTAL-STOCK-ED
            DISPLAY 'PRIX TOTAL STOCK : ' PRIX-TOTAL-STOCK-ED

            DISPLAY 'CPT-LUS : ' CPT-LUS
            DISPLAY 'CPT-ECR : ' CPT-ECR
            DISPLAY 'CPT-ERR : ' CPT-ERR
            .
 MEMBER NAME  A00P6
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00P6.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 30/11/2023.
       ******************************************************************
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
       * FICHIER MOUVEMENTS
            SELECT FENT       ASSIGN DDENT
                   FILE STATUS IS FS-ENT.

        DATA DIVISION.
        FILE SECTION.
        FD  FENT.
        01  ENR-ENT            PIC X(80).

        WORKING-STORAGE SECTION.
       * DESCRIPTION DES ENREGISTREMENTS MVT A CONTROLER
        01  WSENT-ENR.
            05 WSENT-CODE-PRDT PIC X(4).
            05                 PIC X.
            05 WSENT-TYPE-MVT  PIC X.
               88 TYPE-MVT-VALIDE VALUE 'E' 'S'.
            05                 PIC X.
            05 WSENT-QTE-MVT   PIC 99.
            05                 PIC X(71).

       * FILE STATUS
        77  FS-ENT             PIC XX         VALUE ZEROES.

       * INDICATEUR FIN DE FICHIER
        77                     PIC X          VALUE SPACES.
            88 FIN-FICHIER                    VALUE '1'.

       * RESERVE POUR TEST DE RUPTURE
        77  RES-CODE-PRDT      PIC X(4)       VALUE SPACES.

       * COMPTEURS
        77  CPT-LUS            PIC 99         VALUE ZEROES.
        77  CPT                PIC 99         VALUE ZEROES.

        PROCEDURE DIVISION.
            PERFORM DEBUT
            PERFORM TRAITEMENT
            PERFORM FIN
            STOP RUN
            .

        DEBUT.
            OPEN INPUT FENT
            IF FS-ENT NOT = ZEROES
               DISPLAY 'ERREUR OPEN FIC ENT, FS : ' FS-ENT
               PERFORM FIN-ERREUR
            END-IF

            PERFORM LIRE-FENT
            IF FIN-FICHIER
               DISPLAY 'ERREUR FIC ENT VIDE'
               PERFORM FIN-ERREUR
            END-IF
            .

        TRAITEMENT.
            PERFORM UNTIL FIN-FICHIER
              PERFORM INIT-BOUCLE
              PERFORM UNTIL WSENT-CODE-PRDT NOT = RES-CODE-PRDT
                      OR FIN-FICHIER
                PERFORM TRT-ENR
                PERFORM LIRE-FENT
              END-PERFORM
              PERFORM FIN-BOUCLE
            END-PERFORM
            .

        INIT-BOUCLE.
            MOVE WSENT-CODE-PRDT TO RES-CODE-PRDT
            MOVE ZEROES          TO CPT
            .

        TRT-ENR.
            ADD 1 TO CPT
            .

        FIN-BOUCLE.
            DISPLAY 'NB ENR ' RES-CODE-PRDT ' : ' CPT
            .

        LIRE-FENT.
            READ FENT   INTO WSENT-ENR

            EVALUATE FS-ENT
             WHEN ZEROES
              ADD 1 TO CPT-LUS
             WHEN '10'
              SET FIN-FICHIER TO TRUE
             WHEN OTHER
              DISPLAY 'ERREUR LECTURE FIC ENT, FS : ' FS-ENT
              PERFORM FIN-ERREUR
            END-EVALUATE
            .

        FIN-ERREUR.
            MOVE 17 TO RETURN-CODE
            STOP RUN
            .

        FIN.
            CLOSE FENT
            DISPLAY 'NB ENR LUS  : ' CPT-LUS
            .
 MEMBER NAME  SKELMAP
 SKELMAP DFHMSD TYPE=&SYSPARM,MODE=INOUT,LANG=COBOL,EXTATT=YES,         X
                CTRL=(FREEKB,FRSET),STORAGE=AUTO,TIOAPFX=YES
 SKELMAP DFHMDI COLUMN=1,LINE=1,SIZE=(24,80)
         DFHMDF POS=(1,1),ATTRB=ASKIP,LENGTH=04,INITIAL='A00A',         X
                COLOR=TURQUOISE
         DFHMDF POS=(1,23),ATTRB=ASKIP,LENGTH=25,                       X
                INITIAL='GESTION DU FICHIER CLIENT',COLOR=TURQUOISE
         DFHMDF POS=(1,65),ATTRB=ASKIP,LENGTH=06,INITIAL='A00AMAP',     X
                COLOR=TURQUOISE
         DFHMDF POS=(8,12),ATTRB=(ASKIP,BRT),LENGTH=02,INITIAL='01'
         DFHMDF POS=(8,15),ATTRB=ASKIP,LENGTH=40,COLOR=GREEN,           X
                INITIAL='- CREATION D''UN CLIENT'
         DFHMDF POS=(10,12),ATTRB=(ASKIP,BRT),LENGTH=02,INITIAL='02'
         DFHMDF POS=(10,15),ATTRB=ASKIP,LENGTH=40,COLOR=GREEN,          X
                INITIAL='- INTERROGATION/MISE A JOUR D''UN CLIENT'
         DFHMDF POS=(12,12),ATTRB=(ASKIP,BRT),LENGTH=02,INITIAL='03'
         DFHMDF POS=(12,15),ATTRB=ASKIP,LENGTH=40,COLOR=GREEN,          X
                INITIAL='- SUPPRESSION D''UN CLIENT'
         DFHMDF POS=(14,12),ATTRB=(ASKIP,BRT),LENGTH=02,INITIAL='04'
         DFHMDF POS=(14,15),ATTRB=ASKIP,LENGTH=40,COLOR=GREEN,          X
                INITIAL='- LISTE DES CLIENTS'
         DFHMDF POS=(17,25),ATTRB=ASKIP,LENGTH=13,                      X
                INITIAL='VOTRE CHOIX :',COLOR=GREEN
 CHOIX   DFHMDF POS=(17,39),ATTRB=(UNPROT,NUM,IC,FSET),LENGTH=02,       X
                JUSTIFY=(RIGHT,ZERO)
         DFHMDF POS=(17,42),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(23,1),ATTRB=ASKIP,LENGTH=11,INITIAL='CLEAR - FIN', X
                COLOR=TURQUOISE
 MSG     DFHMDF POS=(24,1),ATTRB=(ASKIP,BRT),LENGTH=79
         DFHMSD TYPE=FINAL
         END
 MEMBER NAME  SKELPROG
       *======================================================*
       *   SQUELETTE DE PROG CICS EN PSEUDO CONVERSATIONNEL   *
       *======================================================*
       * MODIFIER INFNCG, N : NO TP, G : NO GROUPE            *
       *                      --------------------            *
       *======================================================*
       *   I D E N T I F I C A T I O N     D I V I S I O N    *
       *======================================================*
        IDENTIFICATION DIVISION.
        PROGRAM-ID. INFNCG.

       *======================================================*
       *   E N V I R O N M E N T       D I V I S I O N        *
       *======================================================*
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER. IBM-390.
        OBJECT-COMPUTER. IBM-390.

       *======================================================*
       *           D A T A         D I V I S I O N            *
       *======================================================*
        DATA DIVISION.

        WORKING-STORAGE SECTION.

       *------------------------------------------------------*
       *   DESCRIPTION DETAILLEE DE LA ZONE DE COMMUNICATION  *
       *------------------------------------------------------*
        01  WS-COMMAREA.
            05 PROG-PRECEDENT      PIC X(8).
            05 PROG-COURANT        PIC X(8).
            05 PROG-SUIVANT        PIC X(8).
            05 FILLER              PIC X(NN).

        01 C-R                     PIC S9(8) COMP.

        01 MON-PROG                PIC X(8) VALUE 'INFNCG  '.
        01 MA-MAP                  PIC X(8) VALUE 'MAPNCG  '.
        01 MA-TRX                  PIC X(4) VALUE 'TNCG'.
       *------------------------------------------------------*
       *   DESCRIPTION   DE   LA   MAP                        *
       *------------------------------------------------------*
        COPY MAPNCG.

       *------------------------------------------------------*
       *   ZONE DE MESSAGE TAMPON POUR LE SEND FROM           *
       *------------------------------------------------------*
        01  MESSAGE-TXT            PIC X(79).

       *------------------------------------------------------*
       *   DESCRIPTION   DES  TOUCHES   FONCTIONS             *
       *------------------------------------------------------*
        COPY DFHAID.

       *------------------------------------------------------*
       *   DESCRIPTION   DES  ATTRIBUTS                       *
       *------------------------------------------------------*
        COPY DFHBMSCA.

       *======================================================*
       *          L I N K A G E     S E C T I O N             *
       *======================================================*

        LINKAGE SECTION.
        01  DFHCOMMAREA.
            05 LK-COMMAREA            PIC X(NN).

       *======================================================*
       *     P R O C E D U R E     D I V I S I O N            *
       *======================================================*

        PROCEDURE DIVISION.
        00000-INIT-PROGRAMME.
       *---------------------*
             PERFORM  10000-DEBUT-PROGRAMME
             PERFORM  20000-TRAIT-PROGRAMME
             GOBACK.


        10000-DEBUT-PROGRAMME.
       *---------------------*
       *   TEST DE PREMIERE ENTREE DANS LE PROGRAMME
       *   SI NON PROGRAMME  MENU ===>  ARRET  (ACCES INTERDIT)
            IF EIBCALEN = 0
               INITIALIZE      WS-COMMAREA
            ELSE
               MOVE LK-COMMAREA  TO WS-COMMAREA
            END-IF

            MOVE  PROG-COURANT     TO  PROG-PRECEDENT
            MOVE  MON-PROG         TO  PROG-COURANT
            .

        20000-TRAIT-PROGRAMME.
       *---------------------*

            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               PERFORM  21000-TRAIT-CHARGEMENT
               PERFORM  22000-TRAIT-ENVOI
            ELSE
               PERFORM  23000-TRAIT-RECEPTION
            END-IF
            .
       *********************************************************

        21000-TRAIT-CHARGEMENT.
       *----------------------*
       *  CHARGEMENT DE LA MAP AVANT AFFICHAGE
            MOVE LOW-VALUE TO MAPNCGO

       *  SI TRAITEMENT PARTICULIER AVANT AFFICHAGE
            PERFORM  21100-TRAIT-SPECIFIQUE
            .
        21100-TRAIT-SPECIFIQUE.
       *----------------------*
       *    ..............................
       *    ..............................
       *    ..............................
       *    ..............................
            .


        22000-TRAIT-ENVOI.
       *-----------------*
            EXEC CICS SEND MAP    (MA-MAP)
                           ERASE
            END-EXEC

            MOVE PROG-COURANT TO PROG-SUIVANT

            EXEC CICS RETURN TRANSID  (MA-TRX)
                             COMMAREA (WS-COMMAREA)
                             LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23000-TRAIT-RECEPTION.
       *---------------------*

            EVALUATE EIBAID
               WHEN DFHENTER
                    PERFORM  23100-TRAIT-ENTER
               WHEN DFHCLEAR
                    PERFORM  23200-TRAIT-FIN
               WHEN OTHER
                    PERFORM  90000-ERR-TOUCHE
            END-EVALUATE
            .

        23110-PROG-SUIVANT.
       *------------------*
            IF  ......................
               MOVE '?????'   TO  PROG-SUIVANT
            END-IF

            EXEC CICS XCTL  PROGRAM  (PROG-SUIVANT)
                            COMMAREA (WS-COMMAREA)
                            LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .
        23100-TRAIT-ENTER.
       *------------------*
       *    ..........................
            EXEC CICS RECEIVE MAP  ('MAPNCG')
                              RESP (C-R)
            END-EXEC

            EVALUATE C-R
               WHEN DFHRESP(NORMAL)
                    CONTINUE
               WHEN DFHRESP(MAPFAIL)
                    .............
               WHEN OTHER
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE

       *    ..........................
       *    ...  ANALYSE DES CHAMPS    IF  CHI
       *    ..........................
       *    ..........................
       *    ..........................
            .
        23200-TRAIT-FIN.
       *---------------*
            MOVE 'FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS.


        90000-ERR-TOUCHE.
       *----------------*
            MOVE 'TOUCHE DE FONCTION INVALIDE' TO MSGXXO
            PERFORM  22000-TRAIT-ENVOI.


        91000-ERREUR-CICS.
       *-------------------*
            MOVE 'ERREUR CICS !!!  FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS.

        99000-FIN-CICS.
       *--------------*
            EXEC CICS SEND FROM   (MESSAGE-TXT)
                           LENGTH (LENGTH OF MESSAGE-TXT)
                           ERASE
            END-EXEC

            EXEC CICS RETURN END-EXEC
            .
 MEMBER NAME  A00P6A
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00P6A.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 30/11/2023.
       ******************************************************************
       * CALCULER LA QUANTITE TOTALE ET LE SENS DU MOUVEMENT            *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
       * FICHIER MOUVEMENTS
            SELECT FENT       ASSIGN DDENT
                   FILE STATUS IS FS-ENT.

        DATA DIVISION.
        FILE SECTION.
        FD  FENT.
        01  ENR-ENT            PIC X(80).

        WORKING-STORAGE SECTION.
       * DESCRIPTION DES ENREGISTREMENTS MVT A CONTROLER
        01  WSENT-ENR.
            05 WSENT-CODE-PRDT PIC X(4).
            05                 PIC X.
            05 WSENT-TYPE-MVT  PIC X.
               88 TYPE-MVT-VALIDE VALUE 'E' 'S'.
            05                 PIC X.
            05 WSENT-QTE-MVT   PIC 99.
            05                 PIC X(71).

       * FILE STATUS
        77  FS-ENT             PIC XX         VALUE ZEROES.

       * RESERVE POUR TEST DE RUPTURE
        77  RES-CODE-PRDT      PIC X(4)       VALUE SPACES.
        77  RES-TYPE-MVT       PIC X          VALUE SPACES.
        77  RES-QTE            PIC S999       VALUE ZEROES.
        77  RES-QTE-ED         PIC Z(3)       VALUE ZEROES.

       * COMPTEURS
        77  CPT-LUS            PIC 99         VALUE ZEROES.

        PROCEDURE DIVISION.
            PERFORM DEBUT
            PERFORM TRAITEMENT
            PERFORM FIN
            STOP RUN
            .

        DEBUT.
            OPEN INPUT FENT
            IF FS-ENT NOT = ZEROES
               DISPLAY 'ERREUR OPEN FIC ENT, FS : ' FS-ENT
               PERFORM FIN-ERREUR
            END-IF

            PERFORM LIRE-FENT
            IF WSENT-CODE-PRDT = HIGH-VALUE
               DISPLAY 'ERREUR FIC ENT VIDE'
               PERFORM FIN-ERREUR
            END-IF
            .

        TRAITEMENT.
            PERFORM UNTIL WSENT-CODE-PRDT = HIGH-VALUE
              PERFORM INIT-BOUCLE
              PERFORM UNTIL WSENT-CODE-PRDT NOT = RES-CODE-PRDT
                PERFORM TRT-ENR
                PERFORM LIRE-FENT
              END-PERFORM
              PERFORM FIN-BOUCLE
            END-PERFORM
            .

        INIT-BOUCLE.
            MOVE WSENT-CODE-PRDT TO RES-CODE-PRDT
            MOVE ZEROES          TO RES-QTE
            .

        TRT-ENR.
            IF WSENT-TYPE-MVT = 'E'
               ADD      WSENT-QTE-MVT TO   RES-QTE
            ELSE
               SUBTRACT WSENT-QTE-MVT FROM RES-QTE
            END-IF
            .

        FIN-BOUCLE.
            MOVE RES-QTE TO RES-QTE-ED
            IF RES-QTE < ZEROES
               MOVE 'S' TO RES-TYPE-MVT
            ELSE
               MOVE 'E' TO RES-TYPE-MVT
            END-IF
            DISPLAY RES-CODE-PRDT ' '
                    RES-TYPE-MVT  ' '
                    RES-QTE-ED
            .

        LIRE-FENT.
            READ FENT   INTO WSENT-ENR

            EVALUATE FS-ENT
             WHEN ZEROES
              ADD 1 TO CPT-LUS
             WHEN '10'
              MOVE HIGH-VALUE TO WSENT-CODE-PRDT
             WHEN OTHER
              DISPLAY 'ERREUR LECTURE FIC ENT, FS : ' FS-ENT
              PERFORM FIN-ERREUR
            END-EVALUATE
            .

        FIN-ERREUR.
            MOVE 17 TO RETURN-CODE
            STOP RUN
            .

        FIN.
            CLOSE FENT
            DISPLAY 'NB ENR LUS  : ' CPT-LUS
            .
 MEMBER NAME  A00P7
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00P7.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 30/11/2023.
       ******************************************************************
       * APPARIEMENT DE FICHIERS                                        *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
       * FICHIER MOUVEMENTS 1
            SELECT FENT1      ASSIGN DDENT1
                   FILE STATUS IS FS1.
       * FICHIER MOUVEMENTS 2
            SELECT FENT2      ASSIGN DDENT2
                   FILE STATUS IS FS2.
       * FICHIER MOUVEMENTS 3
            SELECT FSOR       ASSIGN DDSOR
                   FILE STATUS IS FS3.

        DATA DIVISION.
        FILE SECTION.
        FD  FENT1.
        01  ENR1               PIC X(80).

        FD  FENT2.
        01  ENR2               PIC X(80).

        FD  FSOR.
        01  ENR3               PIC X(80).

        WORKING-STORAGE SECTION.
       * DESCRIPTION DES ENREGISTREMENTS FIC1
        01  WSENT-ENR1.
            05 ENR1-CODE-PRDT PIC X(4).
            05                PIC X.
            05 ENR1-TYPE-MVT  PIC X.
            05                PIC X.
            05 ENR1-QTE-MVT   PIC 99.
            05                PIC X(71).

       * DESCRIPTION DES ENREGISTREMENTS FIC2
        01  WSENT-ENR2.
            05 ENR2-CODE-PRDT PIC X(4).
            05                PIC X.
            05 ENR2-PRIX      PIC 9(3)V99.
            05                PIC X(70).

       * DESCRIPTION DES ENREGISTREMENTS FIC3
        01  WSENT-ENR3.
            05 ENR3-CODE-PRDT PIC X(4).
            05                PIC X.
            05 ENR3-TYPE-MVT  PIC X.
            05                PIC X.
            05 ENR3-QTE-MVT   PIC 99.
            05                PIC X.
            05 ENR3-PRIX      PIC 9(3)V99.
            05                PIC X(65).

       * FILE STATUS
        77  FS1                PIC XX         VALUE ZEROES.
        77  FS2                PIC XX         VALUE ZEROES.
        77  FS3                PIC XX         VALUE ZEROES.

        PROCEDURE DIVISION.
            PERFORM DEBUT
            PERFORM TRAITEMENT
            PERFORM FIN
            STOP RUN
            .

        DEBUT.
            OPEN INPUT FENT1
            IF FS1    NOT = ZEROES
               DISPLAY 'ERREUR OPEN FIC1, FS : ' FS1
               PERFORM FIN-ERREUR
            END-IF

            OPEN INPUT FENT2
            IF FS2    NOT = ZEROES
               DISPLAY 'ERREUR OPEN FIC2, FS : ' FS2
               PERFORM FIN-ERREUR
            END-IF

            OPEN OUTPUT FSOR
            IF FS3    NOT = ZEROES
               DISPLAY 'ERREUR OPEN FIC3, FS : ' FS3
               PERFORM FIN-ERREUR
            END-IF

            PERFORM LIRE-FENT1
            IF ENR1-CODE-PRDT = HIGH-VALUE
               DISPLAY 'ERREUR FIC1 VIDE'
               PERFORM FIN-ERREUR
            END-IF

            PERFORM LIRE-FENT2
            IF ENR2-CODE-PRDT = HIGH-VALUE
               DISPLAY 'ERREUR FIC2 VIDE'
               PERFORM FIN-ERREUR
            END-IF
            .

        TRAITEMENT.
            PERFORM UNTIL ENR1-CODE-PRDT = HIGH-VALUE
                      AND ENR2-CODE-PRDT = HIGH-VALUE
               PERFORM INIT-ENR3
               EVALUATE TRUE
                WHEN ENR1-CODE-PRDT < ENR2-CODE-PRDT
                 PERFORM ALIM-ENR3-ENR1
                 PERFORM ECRIRE-ENR3
                 PERFORM LIRE-FENT1
                WHEN ENR2-CODE-PRDT < ENR1-CODE-PRDT
                 PERFORM ALIM-ENR3-ENR2
                 PERFORM ECRIRE-ENR3
                 PERFORM LIRE-FENT2
                WHEN OTHER
                 PERFORM ALIM-ENR3-ENR1
                 PERFORM ALIM-ENR3-ENR2
                 PERFORM ECRIRE-ENR3
                 PERFORM LIRE-FENT1
                 PERFORM LIRE-FENT2
               END-EVALUATE
            END-PERFORM
            .

        INIT-ENR3.
            MOVE SPACES TO WSENT-ENR3
            INITIALIZE WSENT-ENR3
            MOVE 'E' TO ENR3-TYPE-MVT
            .

        ALIM-ENR3-ENR1.
            MOVE ENR1-CODE-PRDT TO ENR3-CODE-PRDT
            MOVE ENR1-TYPE-MVT  TO ENR3-TYPE-MVT
            MOVE ENR1-QTE-MVT   TO ENR3-QTE-MVT
            .

        ALIM-ENR3-ENR2.
            MOVE ENR2-CODE-PRDT TO ENR3-CODE-PRDT
            MOVE ENR2-PRIX      TO ENR3-PRIX
            .

        LIRE-FENT1.
            READ FENT1  INTO WSENT-ENR1

            EVALUATE FS1
             WHEN ZEROES
              CONTINUE
             WHEN '10'
              MOVE HIGH-VALUE TO ENR1-CODE-PRDT
             WHEN OTHER
              DISPLAY 'ERREUR LECTURE FIC1, FS : ' FS1
              PERFORM FIN-ERREUR
            END-EVALUATE
            .

        LIRE-FENT2.
            READ FENT2  INTO WSENT-ENR2

            EVALUATE FS2
             WHEN ZEROES
              CONTINUE
             WHEN '10'
              MOVE HIGH-VALUE TO ENR2-CODE-PRDT
             WHEN OTHER
              DISPLAY 'ERREUR LECTURE FIC2, FS : ' FS2
              PERFORM FIN-ERREUR
            END-EVALUATE
            .

        ECRIRE-ENR3.
            WRITE ENR3  FROM WSENT-ENR3

            IF FS3 NOT = ZEROES
              DISPLAY 'ERREUR ECRITURE ENR3, FS : ' FS3
              PERFORM FIN-ERREUR
            END-IF
            .

        FIN-ERREUR.
            MOVE 17 TO RETURN-CODE
            STOP RUN
            .

        FIN.
            CLOSE FENT1 FENT2 FSOR
            .
 MEMBER NAME  A00SP1
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00SP1.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 30/11/2023.
       ******************************************************************
       * SOUS-PROGRAMME QUI RETOURNE LA DATE DU JOUR                    *
       ******************************************************************
        DATA DIVISION.
        LINKAGE SECTION.
        01  Z-SP1.
            05 Z-CHOIX        PIC 9.
       * 1 = DATE DU JOUR
            05 Z-CODRET       PIC 9.
       * 0 = OK, 1 = ERREUR
            05 Z-DATEJOUR     PIC X(8).

        PROCEDURE DIVISION USING Z-SP1.
            IF Z-CHOIX = 1
               MOVE 0 TO Z-CODRET
               MOVE FUNCTION CURRENT-DATE TO Z-DATEJOUR
            ELSE
               MOVE 1 TO Z-CODRET
            END-IF

            GOBACK
            .
 MEMBER NAME  A99SP1
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A99SP1.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 30/11/2023.
       ******************************************************************
       * SOUS-PROGRAMME QUI RETOURNE LA DATE DU JOUR                    *
       ******************************************************************
        DATA DIVISION.
        LINKAGE SECTION.
       ******************************************************************
       * ZONE COMMUNE ENTRE PROGRAMME PRINCIPAL ET CE SOUS-PROGRAMME    *
       * - LE PROGRAMME APPELANT MET 1 DANS Z-CHOIX ET APPELLE LE       *
       *   SOUS-PROGRAMME                                               *
       * - IL RECUPERE EN RETOUR :                                      *
       *      LA DATE DU JOUR AU FORMAT AAAAMMJJ SI CODE RETOUR = ZERO  *
       *      BLANC DANS Z-DATEJOUR SI CODE RETOUR = 1                  *
       ******************************************************************
        01  Z-SP1.
            05 Z-CHOIX        PIC 9.
       * 1 = DEMANDE DATE DU JOUR
            05 Z-CODRET       PIC 9.
       * 0 = OK, 1 = ERREUR
            05 Z-DATEJOUR     PIC X(8).
       * FORMAT AAAAMMJJ, BLANC SI CODE RETOUR = 1

        PROCEDURE DIVISION USING Z-SP1.
            IF Z-CHOIX = 1
               MOVE 0 TO Z-CODRET
               MOVE FUNCTION CURRENT-DATE TO Z-DATEJOUR
            ELSE
               MOVE 1 TO Z-CODRET
               MOVE SPACES TO Z-DATEJOUR
            END-IF

            GOBACK
            .
 MEMBER NAME  A00P8
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00P8.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 30/11/2023.
       ******************************************************************
       * ENREGISTREMENTS DE TYPES DIFFERENTS                            *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
       * FICHIER MOUVEMENTS 1
            SELECT FENT1      ASSIGN DDENT1
                   FILE STATUS IS FS1.

        DATA DIVISION.
        FILE SECTION.
        FD  FENT1.
        01  ENR1               PIC X(80).

        WORKING-STORAGE SECTION.
       * DESCRIPTION DES ENREGISTREMENTS FIC1
        01  WSENT-ENR1.
            05 ENR1-TYPE-ENR  PIC X.
            05                PIC X.
            05 ENR1-CODE-PRDT PIC X(4).
            05                PIC X.
            05 ENR1-VARIABLE.
               10 ENR1-TYPE-MVT  PIC X.
               10                PIC X.
               10 ENR1-QTE-MVT   PIC 99.
               10                PIC X(69).
            05 REDEFINES ENR1-VARIABLE.
               10 ENR1-PRIX      PIC 9(3)V99.
               10                PIC X(58).

       * FILE STATUS
        77  FS1                PIC XX         VALUE ZEROES.

       * INDICATEUR FIN DE FICHIER
        77                     PIC X          VALUE SPACES.
            88 FIN-FICHIER                    VALUE '1'.

       * DESCRIPTION DE L'ENREGISTREMENT AVEC LES INFORMATIONS DES
       * 2 ENREGISTREMENTS EN ENTREE
        01  WSSOR-ENR2.
            05 ENR2-CODE-PRDT PIC X(4).
            05                PIC X.
            05 ENR2-TYPE-MVT  PIC X.
            05                PIC X.
            05 ENR2-QTE-MVT   PIC 99.
            05                PIC X.
            05 ENR2-PRIX      PIC ZZ9,99.

        PROCEDURE DIVISION.
            PERFORM DEBUT
            PERFORM TRAITEMENT
            PERFORM FIN
            STOP RUN
            .

        DEBUT.
            OPEN INPUT FENT1
            IF FS1    NOT = ZEROES
               DISPLAY 'ERREUR OPEN FIC1, FS : ' FS1
               PERFORM FIN-ERREUR
            END-IF

            PERFORM LIRE-FENT1
            IF ENR1-CODE-PRDT = HIGH-VALUE
               DISPLAY 'ERREUR FIC1 VIDE'
               PERFORM FIN-ERREUR
            END-IF
            .

        TRAITEMENT.
            PERFORM UNTIL FIN-FICHIER
               PERFORM TRT-ENR
               PERFORM LIRE-FENT1
            END-PERFORM
            .

        TRT-ENR.
       * TRT TYPE ENR 1
            IF ENR1-TYPE-ENR = '1'
               INITIALIZE WSSOR-ENR2
               MOVE ENR1-CODE-PRDT   TO ENR2-CODE-PRDT
               MOVE ENR1-TYPE-MVT    TO ENR2-TYPE-MVT
               MOVE ENR1-QTE-MVT     TO ENR2-QTE-MVT
            ELSE
       * TRT TYPE ENR 2 ET AFFICHAGE
               MOVE ENR1-PRIX        TO ENR2-PRIX
               DISPLAY 'WSSOR-ENR2 : ' WSSOR-ENR2
            END-IF
            .

        LIRE-FENT1.
            READ FENT1  INTO WSENT-ENR1

            EVALUATE FS1
             WHEN ZEROES
              CONTINUE
             WHEN '10'
              SET FIN-FICHIER TO TRUE
             WHEN OTHER
              DISPLAY 'ERREUR LECTURE FIC1, FS : ' FS1
              PERFORM FIN-ERREUR
            END-EVALUATE
            .

        FIN-ERREUR.
            MOVE 17 TO RETURN-CODE
            STOP RUN
            .

        FIN.
            CLOSE FENT1
            .
 MEMBER NAME  A00SP2
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00SP2.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 30/11/2023.
       ******************************************************************
       * SOUS-PROGRAMME QUI RETOURNE LE NOMBRE DE JOURS ENTRE 2 DATES   *
       ******************************************************************
        DATA DIVISION.
        LINKAGE SECTION.
       ******************************************************************
       * ZONE DE COMMUNICATION A99SP2                                   *
       * EN ENTREE :                                                    *
       *    - Z2-DATE1 AU FORMAT AAAAMMJJ                               *
       *    - Z2-DATE2 AU FORMAT AAAAMMJJ                               *
       * EN SORTIE :                                                    *
       *    - Z2-CODRET : 0 -> OK, 1 -> ERREUR ENTREE                   *
       *    - Z2-NBJOURS   AU FORMAT 9(5)                               *
       ******************************************************************
        01  Z2-SP2.
       * DATE 1 AAAAMMJJ
            05 Z2-DATE1        PIC 9(8).
       * DATE 2 AAAAMMJJ
            05 Z2-DATE2        PIC 9(8).
       * CODE RETOUR : 0 = OK, 1 = ERREUR
            05 Z2-CODRET       PIC 9.
       * NB JOURS ENTRE DATE1 ET DATE2
            05 Z2-NBJOURS      PIC 9(9).

        PROCEDURE DIVISION USING Z2-SP2.
       * CONTROLE DE NUMERICITE DES DATES
            IF Z2-DATE1 NOT NUMERIC
            OR Z2-DATE2 NOT NUMERIC
               MOVE 1 TO Z2-CODRET
            ELSE
       * SI NUMERIQUES, CALCUL PAR FONCTION INTEGER-OF-DATE
               COMPUTE Z2-NBJOURS =
                FUNCTION INTEGER-OF-DATE (Z2-DATE2) -
                FUNCTION INTEGER-OF-DATE (Z2-DATE1)
               MOVE ZERO TO Z2-CODRET
            END-IF

            GOBACK
            .
 MEMBER NAME  A00P9
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00P9.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 30/11/2023.
       ******************************************************************
       * PROGRAMME DE TEST DE A00SP1                                    *
       ******************************************************************
        DATA DIVISION.
        WORKING-STORAGE SECTION.
       * ZONE DE COMMUNICATION AVEC A99SP1
        01  Z-SP1.
            05 Z-CHOIX        PIC 9.
       * 1 = DATE DU JOUR
            05 Z-CODRET       PIC 9.
       * 0 = OK, 1 = ERREUR
            05 Z-DATEJOUR     PIC X(8).

       ******************************************************************
       * ZONE DE COMMUNICATION A99SP2                                   *
       * EN ENTREE :                                                    *
       *    - Z2-DATE1 AU FORMAT AAAAMMJJ                               *
       *    - Z2-DATE2 AU FORMAT AAAAMMJJ                               *
       * EN SORTIE :                                                    *
       *    - Z2-CODRET : 0 -> OK, 1 -> ERREUR ENTREE                   *
       *    - Z2-NBJOURS   AU FORMAT 9(5)                               *
       ******************************************************************
        01  Z2-SP2.
       * DATE 1 AAAAMMJJ
            05 Z2-DATE1        PIC 9(8).
       * DATE 2 AAAAMMJJ
            05 Z2-DATE2        PIC 9(8).
       * CODE RETOUR : 0 = OK, 1 = ERREUR
            05 Z2-CODRET       PIC 9.
       * NB JOURS ENTRE DATE1 ET DATE2
            05 Z2-NBJOURS      PIC 9(9).

       * VARIABLE POUR APPEL DYNAMIQUE
        01  NOM-SOUS-PROG      PIC X(8) VALUE SPACES.

        PROCEDURE DIVISION.
       *    INITIALIZE Z-SP1
       *    MOVE 1 TO Z-CHOIX
       *    CALL 'A99SP1' USING Z-SP1
       *    DISPLAY 'CODRET : ' Z-CODRET
       *    DISPLAY 'DATEJO : ' Z-DATEJOUR

       *    INITIALIZE Z-SP1
       *    MOVE 2 TO Z-CHOIX
       *    CALL 'A99SP1' USING Z-SP1
       *    DISPLAY 'CODRET : ' Z-CODRET
       *    DISPLAY 'DATEJO : ' Z-DATEJOUR

       * APPEL CALCUL NB JOURS ENTRE 2 DATES
            INITIALIZE Z2-SP2
            ACCEPT Z2-DATE1
            ACCEPT Z2-DATE2
            MOVE 'A00SP2' TO NOM-SOUS-PROG
            CALL NOM-SOUS-PROG USING Z2-SP2
            DISPLAY 'DATE1  : ' Z2-DATE1
            DISPLAY 'DATE2  : ' Z2-DATE2
            DISPLAY 'CODRET : ' Z2-CODRET
            DISPLAY 'NBJOURS: ' Z2-NBJOURS

            STOP RUN
            .
 MEMBER NAME  A00P10
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00P10.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 30/11/2023.
       ******************************************************************
       * LECTURE DIRECTE D'UN KSDS                                      *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
       * FICHIER PRODUITS KSDS
            SELECT FENT1      ASSIGN DDENT1
                   ORGANIZATION IS INDEXED
                   ACCESS MODE  IS RANDOM
                   RECORD KEY   IS ENR1-CODE-PRDT
                   FILE STATUS  IS FS1.

        DATA DIVISION.
        FILE SECTION.
        FD  FENT1.
        01  ENR1.
            05 ENR1-CODE-PRDT PIC X(4).
            05                PIC X.
            05 ENR1-TYPE-MVT  PIC X.
            05                PIC X.
            05 ENR1-QTE-MVT   PIC 99.
            05                PIC X.
            05 ENR1-PRIX      PIC 9(3)V99.
            05                PIC X(65).

        WORKING-STORAGE SECTION.
       * FILE STATUS
        77  FS1                PIC XX         VALUE ZEROES.

        PROCEDURE DIVISION.
            OPEN INPUT FENT1
            IF FS1    NOT = ZEROES
               DISPLAY 'ERREUR OPEN FIC1, FS : ' FS1
               STOP RUN
            END-IF

            ACCEPT ENR1-CODE-PRDT
            READ FENT1  KEY IS ENR1-CODE-PRDT
                 INVALID KEY     DISPLAY 'CLE NON TROUVEE : '
                                 ENR1-CODE-PRDT
                 NOT INVALID KEY DISPLAY 'ENR TROUVE : ' ENR1
            END-READ

            IF FS1 NOT = ZEROES AND '23'
              DISPLAY 'ERREUR LECTURE FIC1, FS : ' FS1
            END-IF

            CLOSE FENT1
            STOP RUN
            .
 MEMBER NAME  A00SP3
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00SP3.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 30/11/2023.
       ******************************************************************
       * ACCESSEUR POUR LECTURE DIRECTE D'UN KSDS                       *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
       * FICHIER PRODUITS KSDS
            SELECT FENT1      ASSIGN DDENT1
                   ORGANIZATION IS INDEXED
                   ACCESS MODE  IS RANDOM
                   RECORD KEY   IS ENR1-CODE-PRDT
                   FILE STATUS  IS FS1.

        DATA DIVISION.
        FILE SECTION.
        FD  FENT1.
        01  ENR1.
            05 ENR1-CODE-PRDT PIC X(4).
            05                PIC X.
            05 ENR1-TYPE-MVT  PIC X.
            05                PIC X.
            05 ENR1-QTE-MVT   PIC 99.
            05                PIC X.
            05 ENR1-PRIX      PIC 9(3)V99.
            05                PIC X(65).

        WORKING-STORAGE SECTION.
       * FILE STATUS
        77  FS1                PIC XX         VALUE ZEROES.

        LINKAGE SECTION.
       * ZONE DE COMMUNICATION
        01  Z3-SP3.
       * CODE PRODUIT PAR LE PROGRAMME APPELANT
            05 Z3-CODE-PRDT          PIC X(4).
       *VALEURS DU CODE RETOUR :
       * 0 : ORDRE BIEN EX{CUT{
       * 1 : CL{ NON TROUV{E (FILE STATUS = 23)
       * 9 : AUTRE ERREUR
            05 Z3-CODRET             PIC X.
       * ENREGISTREMENT RETOURNE AU PROGRAMME APPELANT
            05 Z3-ENR                PIC X(80).

        PROCEDURE DIVISION USING Z3-SP3.
            OPEN INPUT FENT1
            IF FS1    NOT = ZEROES
               DISPLAY 'ERREUR OPEN FIC1, FS : ' FS1
               MOVE '9' TO Z3-CODRET
               GOBACK
            END-IF

            MOVE Z3-CODE-PRDT TO ENR1-CODE-PRDT
            READ FENT1  KEY IS ENR1-CODE-PRDT
                 INVALID KEY     MOVE '1'    TO Z3-CODRET
                 NOT INVALID KEY MOVE ZEROES TO Z3-CODRET
                                 MOVE ENR1   TO Z3-ENR
            END-READ

            IF FS1 NOT = ZEROES AND '23'
              DISPLAY 'ERREUR LECTURE FIC1, FS : ' FS1
              MOVE '9' TO Z3-CODRET
            END-IF

            CLOSE FENT1
            GOBACK
            .
 MEMBER NAME  A00SP4
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00SP4.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 30/11/2023.
       ******************************************************************
       * ACCESSEUR POUR ECRITURE D'UN ENREGISTREMENT DANS UN KSDS       *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
       * FICHIER PRODUITS KSDS
            SELECT FENT1      ASSIGN DDENT1
                   ORGANIZATION IS INDEXED
                   ACCESS MODE  IS RANDOM
                   RECORD KEY   IS ENR1-CODE-PRDT
                   FILE STATUS  IS FS1.

        DATA DIVISION.
        FILE SECTION.
        FD  FENT1.
        01  ENR1.
            05 ENR1-CODE-PRDT PIC X(4).
            05                PIC X.
            05 ENR1-TYPE-MVT  PIC X.
            05                PIC X.
            05 ENR1-QTE-MVT   PIC 99.
            05                PIC X.
            05 ENR1-PRIX      PIC 9(3)V99.
            05                PIC X(65).

        WORKING-STORAGE SECTION.
       * FILE STATUS
        77  FS1                PIC XX         VALUE ZEROES.

        LINKAGE SECTION.
       * ZONE DE COMMUNICATION
        01  Z4-SP4.
       *VALEURS DU CODE RETOUR :
       *  0 : ORDRE BIEN EX{CUT{
       *  2 : CL{ EN DOUBLE (FILE STATUS = 22)
       *  9 : AUTRE ERREUR
            05 Z4-CODRET             PIC X.
       *  CONTIENT L'ENREGISTREMENT A CREER
            05 Z4-ENR.
               10 Z4-CODE-PRDT       PIC X(4).
               10 Z4-TYPE-MVT        PIC X.
               10 Z4-QTE-MVT         PIC 99.
               10 Z4-PRIX            PIC 9(3)V99.

        PROCEDURE DIVISION USING Z4-SP4.
            OPEN I-O   FENT1
            IF FS1    NOT = ZEROES
               DISPLAY 'ERREUR OPEN FIC1, FS : ' FS1
               MOVE '9' TO Z4-CODRET
               GOBACK
            END-IF

       * ALIMENTATION DES CHAMPS DE L'ENREGISTREMENT A PARTIR
       * DES VARIABLES DE LA ZONE DE COMMUNICATION (RENSEIGNEE
       * PAR LE PROGRAMME APPELANT)
            MOVE SPACES       TO ENR1
            MOVE Z4-CODE-PRDT TO ENR1-CODE-PRDT
            MOVE Z4-TYPE-MVT  TO ENR1-TYPE-MVT
            MOVE Z4-QTE-MVT   TO ENR1-QTE-MVT
            MOVE Z4-PRIX      TO ENR1-PRIX

            WRITE ENR1
       * INVALID KEY : CLE EN DOUBLE
                 INVALID KEY     MOVE '2'    TO Z4-CODRET
       * NOT INVALID KEY : ORDRE BIEN EXECUTE
                 NOT INVALID KEY MOVE ZEROES TO Z4-CODRET
            END-WRITE

            IF FS1 NOT = ZEROES AND '22'
              DISPLAY 'ERREUR ECRITURE FIC1, FS : ' FS1
              MOVE '9' TO Z4-CODRET
            END-IF

            CLOSE FENT1
            GOBACK
            .
 MEMBER NAME  A00P11
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00P11.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 30/11/2023.
       ******************************************************************
       * LECTURE DIRECTE D'UN KSDS VIA UN ACCESSEUR                     *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
       * ZONE DE COMMUNICATION
        01  Z3-SP3.
       * CODE PRODUIT PAR LE PROGRAMME APPELANT
            05 Z3-CODE-PRDT          PIC X(4).
       *VALEURS DU CODE RETOUR :
       * 0 : ORDRE BIEN EX{CUT{
       * 1 : CL{ NON TROUV{E (FILE STATUS = 23)
       * 9 : AUTRE ERREUR
            05 Z3-CODRET             PIC X.
       * ENREGISTREMENT RETOURNE AU PROGRAMME APPELANT
            05 Z3-ENR                PIC X(80).

       * ZONE DE COMMUNICATION AVEC A00SP4
        01  Z4-SP4.
       *VALEURS DU CODE RETOUR :
       *  0 : ORDRE BIEN EX{CUT{
       *  2 : CL{ EN DOUBLE (FILE STATUS = 22)
       *  9 : AUTRE ERREUR
            05 Z4-CODRET             PIC X.
       *  CONTIENT L'ENREGISTREMENT A CREER
            05 Z4-ENR.
               10 Z4-CODE-PRDT       PIC X(4).
               10 Z4-TYPE-MVT        PIC X.
               10 Z4-QTE-MVT         PIC 99.
               10 Z4-PRIX            PIC 9(3)V99.

        PROCEDURE DIVISION.
       * APPEL A L'ACCESSEUR DE LECTURE
            ACCEPT Z3-CODE-PRDT
            CALL 'A00SP3' USING Z3-SP3
            EVALUATE Z3-CODRET
             WHEN ZEROES
              DISPLAY 'ENR TROUVE : ' Z3-ENR
             WHEN '1'
              DISPLAY 'CLE NON TROUVEE : ' Z3-CODE-PRDT
             WHEN OTHER
              DISPLAY 'ERREUR GRAVE'
            END-EVALUATE

       * APPEL A L'ACCESSEUR DE CREATION
            ACCEPT Z4-ENR
            CALL 'A00SP4' USING Z4-SP4
            EVALUATE Z4-CODRET
             WHEN ZEROES
              DISPLAY 'ENR BIEN CREE'
             WHEN '2'
              DISPLAY 'CLE EN DOUBLE : ' Z4-ENR
             WHEN OTHER
              DISPLAY 'ERREUR GRAVE'
            END-EVALUATE

            STOP RUN
            .
 MEMBER NAME  A00AMAP1
 A00AMAP DFHMSD TYPE=&SYSPARM,MODE=INOUT,LANG=COBOL,EXTATT=YES,         X
                CTRL=(FREEKB,FRSET),STORAGE=AUTO,TIOAPFX=YES
 A00AMAP DFHMDI COLUMN=1,LINE=1,SIZE=(24,80)
         DFHMDF POS=(1,1),ATTRB=ASKIP,LENGTH=04,INITIAL='A00A',         X
                COLOR=TURQUOISE
         DFHMDF POS=(1,23),ATTRB=ASKIP,LENGTH=26,                       X
                INITIAL='GESTION DU FICHIER PRODUIT',COLOR=TURQUOISE
         DFHMDF POS=(1,65),ATTRB=ASKIP,LENGTH=07,INITIAL='A00AMAP',     X
                COLOR=TURQUOISE
         DFHMDF POS=(8,13),ATTRB=(ASKIP,BRT),LENGTH=01,INITIAL='1'
         DFHMDF POS=(8,15),ATTRB=ASKIP,LENGTH=40,COLOR=GREEN,           X
                INITIAL='- CREATION D''UN PRODUIT'
         DFHMDF POS=(10,13),ATTRB=(ASKIP,BRT),LENGTH=01,INITIAL='2'
         DFHMDF POS=(10,15),ATTRB=ASKIP,LENGTH=40,COLOR=GREEN,          X
                INITIAL='- INTERROGATION D''UN PRODUIT'
         DFHMDF POS=(12,13),ATTRB=(ASKIP,BRT),LENGTH=01,INITIAL='3'
         DFHMDF POS=(12,15),ATTRB=ASKIP,LENGTH=40,COLOR=GREEN,          X
                INITIAL='- MODIFICATION D''UN PRODUIT'
         DFHMDF POS=(14,13),ATTRB=(ASKIP,BRT),LENGTH=01,INITIAL='4'
         DFHMDF POS=(14,15),ATTRB=ASKIP,LENGTH=40,COLOR=GREEN,          X
                INITIAL='- SUPPRESSION D''UN PRODUIT'
         DFHMDF POS=(17,25),ATTRB=ASKIP,LENGTH=13,                      X
                INITIAL='VOTRE CHOIX :',COLOR=GREEN
 CHOIX   DFHMDF POS=(17,39),ATTRB=(UNPROT,NUM,IC,FSET),LENGTH=01,       X
                JUSTIFY=(RIGHT,ZERO)
         DFHMDF POS=(17,41),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(23,1),ATTRB=ASKIP,LENGTH=11,INITIAL='CLEAR - FIN', X
                COLOR=TURQUOISE
 MSG     DFHMDF POS=(24,1),ATTRB=(ASKIP,BRT),LENGTH=79
         DFHMSD TYPE=FINAL
         END
 MEMBER NAME  A00P12
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00P12.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 30/11/2023.
       ******************************************************************
       * APPEL A L'ACCESSEUR MULTI FONCTIONS A00SP5                     *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01  Z5-SP5.
            05 Z5-CODE-FONCTION  PIC X.
               88 LECTURE                 VALUE 'L'.
               88 CREATION                VALUE 'C'.
               88 MODIFICATION            VALUE 'M'.
               88 SUPPRESSION             VALUE 'S'.
            05 Z5-CODRET         PIC X.
               88 CORRECT                 VALUE ZEROES.
               88 NON-TROUVE              VALUE '1'.
               88 EN-DOUBLE               VALUE '2'.
               88 ERREUR                  VALUE '9'.
            05 Z5-ENR.
               10 Z5-CODE-PRDT   PIC X(4).
               10 Z5-TYPE-MVT    PIC X.
               10 Z5-QTE-MVT     PIC 99.
               10 Z5-PRIX        PIC 9(3)V99.

        PROCEDURE DIVISION.
       * 1ERE ETAPE : CREATION D'UN ENREGISTREMENT
            DISPLAY SPACES
            DISPLAY '1ERE ETAPE : CREATION A012 E 02 00500'
            INITIALIZE Z5-SP5
            SET CREATION         TO TRUE
            MOVE 'A012'          TO Z5-CODE-PRDT
            MOVE 'E'             TO Z5-TYPE-MVT
            MOVE 2               TO Z5-QTE-MVT
            MOVE 5               TO Z5-PRIX
            DISPLAY 'Z5-SP5 AVANT : ' Z5-SP5
            CALL 'A00SP5' USING Z5-SP5
            DISPLAY 'CODRET       : ' Z5-CODRET

       * 2EME ETAPE : LECTURE DE L'ENREGISTREMENT CREE
            DISPLAY SPACES
            DISPLAY '2EME ETAPE : LECTURE A012'
            INITIALIZE Z5-SP5
            SET LECTURE          TO TRUE
            MOVE 'A012'          TO Z5-CODE-PRDT
            DISPLAY 'Z5-SP5 AVANT : ' Z5-SP5
            CALL 'A00SP5' USING Z5-SP5
            DISPLAY 'CODRET       : ' Z5-CODRET
            DISPLAY 'Z5-ENR       : ' Z5-ENR

       * 3EME ETAPE : MODIF DE CET ENREGISTREMENT
            DISPLAY SPACES
            DISPLAY '3EME ETAPE : MODIF A012 S 10 09989'
            INITIALIZE Z5-SP5
            SET MODIFICATION     TO TRUE
            MOVE 'A012'          TO Z5-CODE-PRDT
            MOVE 'S'             TO Z5-TYPE-MVT
            MOVE 10              TO Z5-QTE-MVT
            MOVE 99,89           TO Z5-PRIX
            DISPLAY 'Z5-SP5 AVANT : ' Z5-SP5
            CALL 'A00SP5' USING Z5-SP5
            DISPLAY 'CODRET       : ' Z5-CODRET

       * 4EME ETAPE : LECTURE DE L'ENREGISTREMENT
            DISPLAY SPACES
            DISPLAY '4EME ETAPE : LECTURE A012'
            INITIALIZE Z5-SP5
            SET LECTURE          TO TRUE
            MOVE 'A012'          TO Z5-CODE-PRDT
            DISPLAY 'Z5-SP5 AVANT : ' Z5-SP5
            CALL 'A00SP5' USING Z5-SP5
            DISPLAY 'CODRET       : ' Z5-CODRET
            DISPLAY 'Z5-ENR       : ' Z5-ENR

       * 5EME ETAPE : CREATION D'UN ENREGISTREMENT
            DISPLAY SPACES
            DISPLAY '5EME ETAPE : CREATION A999 E 02 00500'
            INITIALIZE Z5-SP5
            SET CREATION         TO TRUE
            MOVE 'A999'          TO Z5-CODE-PRDT
            MOVE 'E'             TO Z5-TYPE-MVT
            MOVE 2               TO Z5-QTE-MVT
            MOVE 5               TO Z5-PRIX
            DISPLAY 'Z5-SP5 AVANT : ' Z5-SP5
            CALL 'A00SP5' USING Z5-SP5
            DISPLAY 'CODRET       : ' Z5-CODRET

       * 6EME ETAPE : SUPPRESSION DE CET ENREGISTREMENT
            DISPLAY SPACES
            DISPLAY '6EME ETAPE : SUPPRESSION A999'
            INITIALIZE Z5-SP5
            SET SUPPRESSION      TO TRUE
            MOVE 'A999'          TO Z5-CODE-PRDT
            DISPLAY 'Z5-SP5 AVANT : ' Z5-SP5
            CALL 'A00SP5' USING Z5-SP5
            DISPLAY 'CODRET       : ' Z5-CODRET
            DISPLAY 'Z5-ENR       : ' Z5-ENR

       * 7EME ETAPE : LECTURE DE L'ENREGISTREMENT SUPPRIME
            DISPLAY SPACES
            DISPLAY '7EME ETAPE : LECTURE A999'
            INITIALIZE Z5-SP5
            SET LECTURE          TO TRUE
            MOVE 'A999'          TO Z5-CODE-PRDT
            DISPLAY 'Z5-SP5 AVANT : ' Z5-SP5
            CALL 'A00SP5' USING Z5-SP5
            DISPLAY 'CODRET       : ' Z5-CODRET
            DISPLAY 'Z5-ENR       : ' Z5-ENR

            STOP RUN
            .
 MEMBER NAME  A00SP5
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00SP5.
        AUTHOR. PIERRE.
        DATE-.RITTEN. 30/11/2023.
       ******************************************************************
       * ACCESSEUR MULTI FONCTIONS POUR LE FICHIER DES PRODUITS         *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
       * FICHIER PRODUITS KSDS
            SELECT FENT1      ASSIGN DDENT1
                   ORGANIZATION IS INDEXED
                   ACCESS MODE  IS RANDOM
                   RECORD KEY   IS ENR1-CODE-PRDT
                   FILE STATUS  IS FS1.

        DATA DIVISION.
        FILE SECTION.
        FD  FENT1.
        01  ENR1.
            05 ENR1-CODE-PRDT PIC X(4).
            05                PIC X.
            05 ENR1-TYPE-MVT  PIC X.
            05                PIC X.
            05 ENR1-QTE-MVT   PIC 99.
            05                PIC X.
            05 ENR1-PRIX      PIC 9(3)V99.
            05                PIC X(65).

        WORKING-STORAGE SECTION.
       * FILE STATUS
        77  FS1                PIC XX         VALUE ZEROES.

        LINKAGE SECTION.
        01  Z5-SP5.
            05 Z5-CODE-FONCTION  PIC X.
               88 LECTURE                 VALUE 'L'.
               88 CREATION                VALUE 'C'.
               88 MODIFICATION            VALUE 'M'.
               88 SUPPRESSION             VALUE 'S'.
            05 Z5-CODRET         PIC X.
               88 CORRECT                 VALUE ZEROES.
               88 NON-TROUVE              VALUE '1'.
               88 EN-DOUBLE               VALUE '2'.
               88 ERREUR                  VALUE '9'.
            05 Z5-ENR.
               10 Z5-CODE-PRDT   PIC X(4).
               10 Z5-TYPE-MVT    PIC X.
               10 Z5-QTE-MVT     PIC 99.
               10 Z5-PRIX        PIC 9(3)V99.

        PROCEDURE DIVISION USING Z5-SP5.
            OPEN I-O   FENT1
            IF FS1    NOT = ZEROES
               DISPLAY 'ERREUR OPEN FIC1, FS : ' FS1
               SET ERREUR TO TRUE
               GOBACK
            END-IF

       * VENTILER SELON LA FONCTION DEMANDEE
            EVALUATE TRUE
             WHEN CREATION         PERFORM TRT-CREATION
             WHEN LECTURE          PERFORM TRT-LECTURE
             WHEN MODIFICATION     PERFORM TRT-MODIFICATION
             WHEN SUPPRESSION      PERFORM TRT-SUPPRESSION
             WHEN OTHER
               DISPLAY 'ERREUR CODE FONCTION : ' Z5-CODE-FONCTION
               SET ERREUR TO TRUE
               GOBACK
            END-EVALUATE

            CLOSE FENT1
            GOBACK
            .

        TRT-CREATION.
       * ON RECUPERE LES INFOS DE LA ZONE DE COMM POUR LES METTRE
       * DANS LE BUFFER ET ECRIRE L'ENREGISTREMENT
            MOVE SPACES       TO ENR1
            MOVE Z5-CODE-PRDT TO ENR1-CODE-PRDT
            MOVE Z5-TYPE-MVT  TO ENR1-TYPE-MVT
            MOVE Z5-QTE-MVT   TO ENR1-QTE-MVT
            MOVE Z5-PRIX      TO ENR1-PRIX

            WRITE ENR1
       * INVALID KEY : CLE EN DOUBLE
                 INVALID KEY     SET EN-DOUBLE TO TRUE
       * NOT INVALID KEY : ORDRE BIEN EXECUTE
                 NOT INVALID KEY SET CORRECT   TO TRUE
            END-WRITE

            IF FS1 NOT = ZEROES AND '22'
              DISPLAY 'ERREUR ECRITURE FIC1, FS : ' FS1
              SET ERREUR TO TRUE
            END-IF
            .

        TRT-LECTURE.
       * ON RECUPERE LE CODE PRODUIT ET ON LIT L'ENREGISTREMENT
       * CORRESPONDANT
            MOVE Z5-CODE-PRDT TO ENR1-CODE-PRDT

            READ FENT1 KEY IS ENR1-CODE-PRDT
       * INVALID KEY : CLE NON TROUVEE
                 INVALID KEY
                     SET NON-TROUVE              TO TRUE
       * NOT INVALID KEY : ORDRE BIEN EXECUTE
       * ON ALIMENTE LA ZONE DE COMM AVEC LES INFOS DE L'ENREG
                 NOT INVALID KEY
                     SET CORRECT                 TO TRUE
                     MOVE ENR1-TYPE-MVT          TO Z5-TYPE-MVT
                     MOVE ENR1-QTE-MVT           TO Z5-QTE-MVT
                     MOVE ENR1-PRIX              TO Z5-PRIX
            END-READ

            IF FS1 NOT = ZEROES AND '23'
              DISPLAY 'ERREUR LECTURE FIC1, FS : ' FS1
              SET ERREUR TO TRUE
            END-IF
            .

        TRT-MODIFICATION.
       * FAIRE UNE LECTURE AVANT MISE A JOUR
            MOVE Z5-CODE-PRDT TO ENR1-CODE-PRDT

            READ FENT1 KEY IS ENR1-CODE-PRDT
       * INVALID KEY : CLE NON TROUVEE
                 INVALID KEY
                     SET NON-TROUVE              TO TRUE
       * NOT INVALID KEY : ORDRE BIEN EXECUTE
       * ON RECUPERE LES INFOS DE LA ZONE DE COMM POUR LES METTRE
       * DANS LE BUFFER ET REECRIRE L'ENREGISTREMENT
                 NOT INVALID KEY
                     SET CORRECT       TO TRUE
                     MOVE Z5-TYPE-MVT  TO ENR1-TYPE-MVT
                     MOVE Z5-QTE-MVT   TO ENR1-QTE-MVT
                     MOVE Z5-PRIX      TO ENR1-PRIX
                     REWRITE ENR1
       * NOT INVALID KEY : ORDRE BIEN EXECUTE
                       NOT INVALID KEY SET CORRECT   TO TRUE
                     END-REWRITE
                     IF FS1 NOT = ZEROES
                       DISPLAY 'ERREUR REECRITURE FIC1, FS : ' FS1
                       SET ERREUR TO TRUE
                       GOBACK
                     END-IF
            END-READ

            IF FS1 NOT = ZEROES AND '23'
              DISPLAY 'ERREUR LECTURE FIC1, FS : ' FS1
              SET ERREUR TO TRUE
            END-IF
            .

        TRT-SUPPRESSION.
       * FAIRE UNE LECTURE AVANT SUPPRESSION
            MOVE Z5-CODE-PRDT TO ENR1-CODE-PRDT

            READ FENT1 KEY IS ENR1-CODE-PRDT
       * INVALID KEY : CLE NON TROUVEE
                 INVALID KEY
                     SET NON-TROUVE              TO TRUE
       * NOT INVALID KEY :
       * ON SUPPRIME L'ENREGISTREMENT
                 NOT INVALID KEY
                     DELETE FENT1
                     IF FS1 = ZEROES
                        SET CORRECT              TO TRUE
                     ELSE
                        DISPLAY 'ERREUR SUPPRESSION ENR, FS : ' FS1
                        SET ERREUR TO TRUE
                        GOBACK
                     END-IF
            END-READ

            IF FS1 NOT = ZEROES AND '23'
              DISPLAY 'ERREUR LECTURE FIC1, FS : ' FS1
              SET ERREUR TO TRUE
            END-IF
            .
 MEMBER NAME  A00AMAP
 A00AMAP DFHMSD TYPE=&SYSPARM,MODE=INOUT,LANG=COBOL,EXTATT=YES,         X
                CTRL=(FREEKB,FRSET),STORAGE=AUTO,TIOAPFX=YES
 A00AMAP DFHMDI COLUMN=1,LINE=1,SIZE=(24,80)
         DFHMDF POS=(1,1),ATTRB=ASKIP,LENGTH=04,INITIAL='A00A'
         DFHMDF POS=(1,23),ATTRB=ASKIP,LENGTH=26,                       X
                INITIAL='GESTION DU FICHIER PRODUIT'
         DFHMDF POS=(1,65),ATTRB=ASKIP,LENGTH=07,INITIAL='A00AMAP'
         DFHMDF POS=(2,59),ATTRB=ASKIP,LENGTH=6,INITIAL='DATE :'
 DATEJ   DFHMDF POS=(2,66),ATTRB=(ASKIP,FSET),LENGTH=10
         DFHMDF POS=(8,13),ATTRB=(ASKIP,BRT),LENGTH=01,INITIAL='1'
         DFHMDF POS=(8,15),ATTRB=ASKIP,LENGTH=40,                       X
                INITIAL='- CREATION D''UN PRODUIT'
         DFHMDF POS=(10,13),ATTRB=(ASKIP,BRT),LENGTH=01,INITIAL='2'
         DFHMDF POS=(10,15),ATTRB=ASKIP,LENGTH=40,                      X
                INITIAL='- INTERROGATION D''UN PRODUIT'
         DFHMDF POS=(12,13),ATTRB=(ASKIP,BRT),LENGTH=01,INITIAL='3'
         DFHMDF POS=(12,15),ATTRB=ASKIP,LENGTH=40,                      X
                INITIAL='- MODIFICATION D''UN PRODUIT'
         DFHMDF POS=(14,13),ATTRB=(ASKIP,BRT),LENGTH=01,INITIAL='4'
         DFHMDF POS=(14,15),ATTRB=ASKIP,LENGTH=40,                      X
                INITIAL='- SUPPRESSION D''UN PRODUIT'
         DFHMDF POS=(17,25),ATTRB=ASKIP,LENGTH=13,                      X
                INITIAL='VOTRE CHOIX :'
 CHOIX   DFHMDF POS=(17,39),ATTRB=(UNPROT,NUM,IC,FSET),LENGTH=01,       X
                JUSTIFY=(RIGHT,ZERO)
         DFHMDF POS=(17,41),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(23,1),ATTRB=ASKIP,LENGTH=11,INITIAL='CLEAR - FIN'
 MSG     DFHMDF POS=(24,1),ATTRB=(ASKIP,BRT),LENGTH=79
         DFHMSD TYPE=FINAL
         END
 MEMBER NAME  A00BMAP
 A00BMAP DFHMSD TYPE=&SYSPARM,MODE=INOUT,LANG=COBOL,EXTATT=YES,         X
                CTRL=(FREEKB,FRSET),STORAGE=AUTO,TIOAPFX=YES
 A00BMAP DFHMDI COLUMN=1,LINE=1,SIZE=(24,80)
         DFHMDF POS=(1,1),ATTRB=ASKIP,LENGTH=04,INITIAL='A00B'
         DFHMDF POS=(1,23),ATTRB=ASKIP,LENGTH=26,                       X
                INITIAL='INTERROGATION D''UN PRODUIT'
         DFHMDF POS=(1,65),ATTRB=ASKIP,LENGTH=07,INITIAL='A00BMAP'
         DFHMDF POS=(2,59),ATTRB=ASKIP,LENGTH=6,INITIAL='DATE :'
 DATEJ   DFHMDF POS=(2,66),ATTRB=(ASKIP,FSET),LENGTH=10
         DFHMDF POS=(8,15),ATTRB=ASKIP,LENGTH=22,                       X
                INITIAL='CODE PRODUIT         :'
 CDPRDT  DFHMDF POS=(8,38),ATTRB=(UNPROT,FSET,IC),LENGTH=4
         DFHMDF POS=(8,43),ATTRB=ASKIP
         DFHMDF POS=(10,15),ATTRB=ASKIP,LENGTH=22,                      X
                INITIAL='TYPE MOUVEMENT       :'
 TYPMVT  DFHMDF POS=(10,38),ATTRB=(PROT,FSET),LENGTH=1
         DFHMDF POS=(12,15),ATTRB=ASKIP,LENGTH=22,                      X
                INITIAL='QUANTITE             :'
 QTEMVT  DFHMDF POS=(12,38),ATTRB=(PROT,FSET),LENGTH=2
         DFHMDF POS=(14,15),ATTRB=ASKIP,LENGTH=22,                      X
                INITIAL='PRIX UNITAIRE        :'
 PRIX    DFHMDF POS=(14,38),ATTRB=(PROT,FSET),LENGTH=6
         DFHMDF POS=(23,1),ATTRB=ASKIP,LENGTH=11,INITIAL='CLEAR - FIN'
         DFHMDF POS=(23,18),ATTRB=ASKIP,LENGTH=12,INITIAL='PF3 - RETOUR'
 MSG     DFHMDF POS=(24,1),ATTRB=(ASKIP,BRT),LENGTH=79
         DFHMSD TYPE=FINAL
         END
 MEMBER NAME  A00CMAP
 A00CMAP DFHMSD TYPE=&SYSPARM,MODE=INOUT,LANG=COBOL,EXTATT=YES,         X
                CTRL=(FREEKB,FRSET),STORAGE=AUTO,TIOAPFX=YES
 A00CMAP DFHMDI COLUMN=1,LINE=1,SIZE=(24,80)
         DFHMDF POS=(1,1),ATTRB=ASKIP,LENGTH=04,INITIAL='A00C'
         DFHMDF POS=(1,23),ATTRB=ASKIP,LENGTH=26,                       X
                INITIAL='CREATION D''UN PRODUIT'
         DFHMDF POS=(1,65),ATTRB=ASKIP,LENGTH=07,INITIAL='A00CMAP'
         DFHMDF POS=(2,59),ATTRB=ASKIP,LENGTH=6,INITIAL='DATE :'
 DATEJ   DFHMDF POS=(2,66),ATTRB=(ASKIP,FSET),LENGTH=10
         DFHMDF POS=(8,15),ATTRB=ASKIP,LENGTH=22,                       X
                INITIAL='CODE PRODUIT         :'
 CDPRDT  DFHMDF POS=(8,38),ATTRB=(UNPROT,FSET,IC),LENGTH=4
         DFHMDF POS=(8,43),ATTRB=ASKIP
         DFHMDF POS=(10,15),ATTRB=ASKIP,LENGTH=22,                      X
                INITIAL='TYPE MOUVEMENT       :'
 TYPMVT  DFHMDF POS=(10,38),ATTRB=(UNPROT,FSET),LENGTH=1
         DFHMDF POS=(10,40),ATTRB=ASKIP
         DFHMDF POS=(12,15),ATTRB=ASKIP,LENGTH=22,                      X
                INITIAL='QUANTITE             :'
 QTEMVT  DFHMDF POS=(12,38),ATTRB=(UNPROT,FSET),LENGTH=2
         DFHMDF POS=(12,41),ATTRB=ASKIP
         DFHMDF POS=(14,15),ATTRB=ASKIP,LENGTH=22,                      X
                INITIAL='PRIX UNITAIRE        :'
 PRIX    DFHMDF POS=(14,38),ATTRB=(UNPROT,FSET),LENGTH=6
         DFHMDF POS=(14,45),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(23,1),ATTRB=ASKIP,LENGTH=11,INITIAL='CLEAR - FIN'
         DFHMDF POS=(23,18),ATTRB=ASKIP,LENGTH=12,INITIAL='PF3 - RETOUR'
 MSG     DFHMDF POS=(24,1),ATTRB=(ASKIP,BRT),LENGTH=79
         DFHMSD TYPE=FINAL
         END
 MEMBER NAME  A991PGMT
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A991PGMT.
       ******************************************************************
       *       MODULE DE CONTROLE ET FORMATAGE D'UN NOMBRE EN CICS      *
       ******************************************************************
       * ZONE DE COMMUNICATION                                          *
       *01  ZNUM-COM.                                                   *
       *    05 ZNUM-SIGNE          PIC X(01).                           *
       *    05 ZNUM-NOMBRE-X       PIC X(20).                           *
       *    05 ZNUM-CODRET         PIC X(01).                           *
       *    05 ZNUM-NOMBRE-9       PIC S9(9)V9(9).                      *
       ******************************************************************
       *-----> RENSEIGNER LE SIGNE DANS ZNUM-SIGNE (BLANC SI AUCUN)     *
       *       RENSEIGNER LE NOMBRE A CONTROLER AU FORMAT ALPHA DANS    *
       *       ZNUM-NOMBRE-X                                            *
       *-----> RECUPERER LE NOMBRE AU FORMAT NUM DANS ZNUM-NOMBRE-9     *
       ******************************************************************
       * EXEMPLE :                                                      *
       *    INITIALIZE ZNUM-COM                                         *
       *    MOVE ...... TO ZNUM-NOMBRE-X                                *
       *    EXEC CICS LINK                       OU                     *
       *         PROGRAM('A991PGMT')      CALL 'A991PGMT'               *
       *         COMMAREA(ZNUM-COM)            USING ZNUM-COM           *
       *    END-EXEC                                                    *
       *    IF ZNUM-OK                                                  *
       *       MOVE ZNUM-NOMBRE-9 TO ...                                *
       *    ELSE                                                        *
       *       ...                                                      *
       *    END-IF                                                      *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        DATA DIVISION.
       *
        WORKING-STORAGE SECTION.
        01  NOMBRE-X.
            05 CAR-X               PIC X(01) OCCURS 20.
        01  I                      PIC 99 VALUE ZEROES.

        01  PARTIE-ENTIERE-X       VALUE SPACES.
            05 CAR-XE              PIC X(01) OCCURS 20.
        01  J                      PIC 99 VALUE ZEROES.
        01  J-MAX                  PIC 99 VALUE ZEROES.

        01  PARTIE-DECIMALE-X      VALUE SPACES.
            05 CAR-XD              PIC X(01) OCCURS 20.
        01  K                      PIC 99 VALUE ZEROES.
        01  K-MAX                  PIC 99 VALUE ZEROES.

        01  NOMBRE-9-ED            PIC +(9)9,9(9) VALUE ZEROES.
        01  NOMBRE-9               PIC S9(9)V9(9) VALUE ZEROES.
        01  REDEFINES NOMBRE-9.
            05 PARTIE-ENTIERE-9.
              10 CAR-9E            PIC 9(01) OCCURS 9.
            05 PARTIE-DECIMALE-9.
              10 CAR-9D            PIC 9(01) OCCURS 9.

        01  L                      PIC 99 VALUE ZEROES.
        01  M                      PIC 99 VALUE ZEROES.

        01  CODRET                 PIC X VALUE SPACES.
            88 OK                  VALUE '0'.
            88 ERREUR              VALUE '1'.

        01                         PIC X VALUE SPACES.
            88 PRESENCE-VIRGULE    VALUE '1'.
            88 PAS-DE-VIRGULE      VALUE '0'.

        01  NB-VIRGULES            PIC 99 VALUE ZEROES.

       * ZONE DE COMMUNICATION
        01  ZNUM-COM.
            05 ZNUM-SIGNE          PIC X(01).
               88 ZNUM-POSITIF     VALUE '+' ' '.
               88 ZNUM-NEGATIF     VALUE '-'.
               88 ZNUM-SIGNE-OK    VALUE '+' '-' ' '.
            05 ZNUM-NOMBRE-X       PIC X(20).
            05 ZNUM-CODRET         PIC X(01).
               88 ZNUM-OK          VALUE '0'.
               88 ZNUM-ERREUR      VALUE '1'.
            05 ZNUM-NOMBRE-9       PIC S9(9)V9(9).

        LINKAGE SECTION.
        01  DFHCOMMAREA            PIC X(40).
       *
        PROCEDURE DIVISION USING DFHCOMMAREA.
            PERFORM DEBUT
            PERFORM TRAITEMENT
            PERFORM FIN
            GOBACK
            .

        DEBUT.
       * RECUPERATION DE LA COMMAREA EN WORKING-STORAGE
            MOVE DFHCOMMAREA   TO ZNUM-COM

       * INITIALISATIONS
            SET OK             TO TRUE
            SET PAS-DE-VIRGULE TO TRUE
            MOVE ZEROES        TO NB-VIRGULES I J J-MAX K L M K-MAX
                                  NOMBRE-9 PARTIE-ENTIERE-9
                                  PARTIE-DECIMALE-9
            MOVE SPACES        TO PARTIE-ENTIERE-X PARTIE-DECIMALE-X
                                  NOMBRE-X
            .

        TRAITEMENT.
       * CONTROLE DU SIGNE
            IF NOT ZNUM-SIGNE-OK
               SET ERREUR TO TRUE
               PERFORM FIN
            END-IF

       * MONTANT A ZERO
            IF ZNUM-NOMBRE-X = SPACES
               MOVE ZEROES TO ZNUM-NOMBRE-9
               PERFORM FIN
            END-IF

       * REMPLACEMENT DES BLANCS DU DEBUT PAR DES ZEROS
            MOVE ZNUM-NOMBRE-X TO NOMBRE-X
            INSPECT NOMBRE-X REPLACING LEADING SPACES BY ZEROES

       * DECOMPOSITION ENTRE PARTIE ENTIERE ET PARTIE DECIMALE
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 20 OR ERREUR
             IF CAR-X(I) = ','
                SET PRESENCE-VIRGULE TO TRUE
                ADD 1 TO NB-VIRGULES
             END-IF
             IF NB-VIRGULES > 1
                SET ERREUR TO TRUE
             ELSE
                IF CAR-X(I) = SPACES
                   MOVE 20 TO I
                ELSE
                   IF NOT PRESENCE-VIRGULE
                      ADD 1 TO J-MAX
                      MOVE CAR-X(I) TO CAR-XE(J-MAX)
                   ELSE
                      IF CAR-X(I) NOT = ','
                         ADD 1 TO K-MAX
                         MOVE CAR-X(I) TO CAR-XD(K-MAX)
                      END-IF
                   END-IF
                END-IF
             END-IF
            END-PERFORM

       * CONTROLE NUMERICITE PARTIE ENTIERE ET PARTIE DECIMALE
            IF (J-MAX > 0 AND PARTIE-ENTIERE-X  (1:J-MAX) NOT NUMERIC)
            OR (K-MAX > 0 AND PARTIE-DECIMALE-X (1:K-MAX) NOT NUMERIC)
               SET ERREUR TO TRUE
                PERFORM FIN
            END-IF

       * ALIMENTATION PARTIE ENTIERE
            MOVE 9 TO L
            IF J-MAX > 9
               PERFORM VARYING J FROM J-MAX BY -1 UNTIL J < (J-MAX - 9)
                MOVE CAR-XE(J) TO CAR-9E(L)
                SUBTRACT 1 FROM L
               END-PERFORM
            ELSE
               PERFORM VARYING J FROM J-MAX BY -1 UNTIL J < 1
                MOVE CAR-XE(J) TO CAR-9E(L)
                SUBTRACT 1 FROM L
               END-PERFORM
            END-IF

       * ALIMENTATION PARTIE DECIMALE
            PERFORM VARYING K FROM 1 BY 1 UNTIL K > K-MAX
             MOVE CAR-XD(K) TO CAR-9D(K)
            END-PERFORM

       * ALIMENTATION DU NOMBRE FORMATE ET SIGNE EN RETOUR
            IF ZNUM-NEGATIF
               MULTIPLY NOMBRE-9 BY -1 GIVING NOMBRE-9
            END-IF
            MOVE NOMBRE-9        TO ZNUM-NOMBRE-9
            .

        FIN.
       * ALIMENTATION DE LA COMMAREA
            MOVE CODRET          TO ZNUM-CODRET
            MOVE ZNUM-COM        TO DFHCOMMAREA
            .
 MEMBER NAME  A00CPGMT
       *======================================================*
       *   CREATION D'UN PRODUIT                              *
       *======================================================*

       *======================================================*
       *   I D E N T I F I C A T I O N     D I V I S I O N    *
       *======================================================*
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00CPGMT.

       *======================================================*
       *   E N V I R O N M E N T       D I V I S I O N        *
       *======================================================*
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        SOURCE-COMPUTER. IBM-390.
        OBJECT-COMPUTER. IBM-390.

       *======================================================*
       *           D A T A         D I V I S I O N            *
       *======================================================*
        DATA DIVISION.
        WORKING-STORAGE SECTION.

       * ZONE POUR DATE DU JOUR
        01  WS-DATEJ               PIC X(8) VALUE SPACES.

       * DESCRIPTION DE L'ENREGISTREMENT
        01  ENR1.
            05 ENR1-CODE-PRDT      PIC X(4).
            05                     PIC X.
            05 ENR1-TYPE-MVT       PIC X.
            05                     PIC X.
            05 ENR1-QTE-MVT        PIC 99.
            05                     PIC X.
            05 ENR1-PRIX           PIC 9(3)V99.
            05                     PIC X(65).

       * INDICATEUR D'ERREUR
        01                         PIC X.
            88 OK                  VALUE ZEROES.
            88 ERREUR              VALUE '1'.

       * INDICATEUR D'EXISTENCE DU PRODUIT
        01                         PIC X.
            88 TROUVE              VALUE ZEROES.
            88 NON-TROUVE          VALUE '1'.

       * PICTURES D'EDITION ET ZONES DE RESERVE
        01  WS-PRIX                PIC 9(3)V99 VALUE ZEROES.
        01  WS-PRIX-ED             PIC ZZ9,99  VALUE ZEROES.
        01  WS-QTE-MVT             PIC 99      VALUE ZEROES.
        01  WS-QTE-MVT-ED          PIC Z9      VALUE ZEROES.

       * ZONE DE COMMUNICATION AVEC MODULE DE CONTROLE
       * DE NUMERICITE
        01  ZNUM-COM.
            05 ZNUM-SIGNE          PIC X(01).
               88 ZNUM-POSITIF     VALUE '+' ' '.
               88 ZNUM-NEGATIF     VALUE '-'.
               88 ZNUM-SIGNE-OK    VALUE '+' '-' ' '.
            05 ZNUM-NOMBRE-X       PIC X(20).
            05 ZNUM-CODRET         PIC X(01).
               88 ZNUM-OK          VALUE '0'.
               88 ZNUM-ERREUR      VALUE '1'.
            05 ZNUM-NOMBRE-9       PIC S9(9)V9(9).

       *------------------------------------------------------*
       *   DESCRIPTION DETAILLEE DE LA ZONE DE COMMUNICATION  *
       *------------------------------------------------------*
        01  WS-COMMAREA.
            05 PROG-PRECEDENT      PIC X(8).
            05 PROG-COURANT        PIC X(8).
            05 PROG-SUIVANT        PIC X(8).
            05                     PIC X(26).

        01 C-R                     PIC S9(8) COMP.

        01 MON-PROG                PIC X(8) VALUE 'A00CPGMT'.
        01 MA-MAP                  PIC X(8) VALUE 'A00CMAP '.
        01 MA-TRX                  PIC X(4) VALUE 'A00C'.
       *------------------------------------------------------*
       *   DESCRIPTION   DE   LA   MAP                        *
       *------------------------------------------------------*
        COPY A00CMAP.

       *------------------------------------------------------*
       *   ZONE DE MESSAGE TAMPON POUR LE SEND FROM           *
       *------------------------------------------------------*
        01  MESSAGE-TXT            PIC X(79).

       *------------------------------------------------------*
       *   DESCRIPTION   DES  TOUCHES   FONCTIONS             *
       *------------------------------------------------------*
        COPY DFHAID.

       *------------------------------------------------------*
       *   DESCRIPTION   DES  ATTRIBUTS                       *
       *------------------------------------------------------*
        COPY DFHBMSCA.
        COPY ATTRIBUT.

       *======================================================*
       *          L I N K A G E     S E C T I O N             *
       *======================================================*
        LINKAGE SECTION.
        01  DFHCOMMAREA.
            05 LK-COMMAREA            PIC X(50).

       *======================================================*
       *     P R O C E D U R E     D I V I S I O N            *
       *======================================================*

        PROCEDURE DIVISION.
        00000-INIT-PROGRAMME.
       *---------------------*
             PERFORM  10000-DEBUT-PROGRAMME
             PERFORM  20000-TRAIT-PROGRAMME
             GOBACK
             .

        10000-DEBUT-PROGRAMME.
       *---------------------*
       *   TEST DE PREMIERE ENTREE DANS LE PROGRAMME
       *   SI NON PROGRAMME  MENU --->  ARRET  (ACCES INTERDIT)
            IF EIBCALEN = 0
               INITIALIZE      WS-COMMAREA
            ELSE
               MOVE LK-COMMAREA    TO  WS-COMMAREA
            END-IF

            MOVE  PROG-COURANT     TO  PROG-PRECEDENT
            MOVE  MON-PROG         TO  PROG-COURANT
            .

        20000-TRAIT-PROGRAMME.
       *---------------------*
            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               PERFORM  21000-TRAIT-CHARGEMENT
               PERFORM  22000-TRAIT-ENVOI
            ELSE
               PERFORM  23000-TRAIT-RECEPTION
            END-IF
            .

        21000-TRAIT-CHARGEMENT.
       *----------------------*
       *  CHARGEMENT DE LA MAP AVANT AFFICHAGE
            MOVE LOW-VALUE TO A00CMAPO

       *  SI TRAITEMENT PARTICULIER AVANT AFFICHAGE
       *    PERFORM  21100-TRAIT-SPECIFIQUE
            .

       *21100-TRAIT-SPECIFIQUE.
       *----------------------*
       *    ..............................
       *    ..............................
       *    ..............................
       *    ..............................
       *    .

        22000-TRAIT-ENVOI.
       *-----------------*
       * AFFICHAGE DE LA DATE DU JOUR
            MOVE FUNCTION CURRENT-DATE TO WS-DATEJ
            STRING WS-DATEJ (7 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATEJ (5 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATEJ (1 : 4) DELIMITED BY SIZE
                   INTO DATEJO
            END-STRING

            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               EXEC CICS SEND MAP    ('A00CMAP')
                              ERASE
               END-EXEC
            ELSE
               EXEC CICS SEND MAP    ('A00CMAP')
                              CURSOR
                              ERASE
               END-EXEC
            END-IF

            MOVE PROG-COURANT TO PROG-SUIVANT

            EXEC CICS RETURN TRANSID  (MA-TRX)
                             COMMAREA (WS-COMMAREA)
                             LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23000-TRAIT-RECEPTION.
       *---------------------*
            EVALUATE EIBAID
               WHEN DFHENTER
                    PERFORM  23100-TRAIT-ENTER
               WHEN DFHPF3
                    PERFORM  23105-RETOUR-MENU
               WHEN DFHCLEAR
                    PERFORM  23200-TRAIT-FIN
               WHEN OTHER
                    PERFORM  90000-ERR-TOUCHE
            END-EVALUATE
            .

        23105-RETOUR-MENU.
       *------------------*
            MOVE 'A00APGMT' TO PROG-SUIVANT
            PERFORM 23110-PROG-SUIVANT
            .

        23110-PROG-SUIVANT.
       *------------------*
            EXEC CICS XCTL  PROGRAM  (PROG-SUIVANT)
                            COMMAREA (WS-COMMAREA)
                            LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23100-TRAIT-ENTER.
       *------------------*
            EXEC CICS RECEIVE MAP  ('A00CMAP')
                              RESP (C-R)
            END-EXEC

            EVALUATE C-R
               WHEN DFHRESP(NORMAL)
                    CONTINUE
               WHEN OTHER
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE

       *    ............................
       *    ...  ANALYSE DES CHAMPS  ...
       *    ............................
       * INITIALISATIONS
            SET OK       TO TRUE

       * CONTROLES DE LA SAISIE
            PERFORM CTRL-CODE-PRODUIT
            PERFORM CTRL-TYPE-MVT
            PERFORM CTRL-QTE-MVT
            PERFORM CTRL-PRIX

       * SI PAS D'ERREUR, CREATION DU PRODUIT
            IF OK
               PERFORM  CREATION-PRODUIT
            END-IF

       * ENVOI DE LA MAP ET LIBERATION DES RESSOURCES
            PERFORM  22000-TRAIT-ENVOI
            .

        CTRL-CODE-PRODUIT.
       *----------------*
       * OBLIGATOIRE, NE DOIT PAS EXISTER DANS LE FICHIER
            IF CDPRDTI = SPACES OR LOW-VALUE
               MOVE ATTR-UNPROT-BRT TO CDPRDTA
               IF OK
                  MOVE 'CODE PRODUIT NON RENSEIGNE' TO MSGO
                  MOVE CURSEUR TO CDPRDTL
                  SET  ERREUR  TO TRUE
               END-IF
            ELSE
               PERFORM LECTURE-PRODUIT
               IF TROUVE
       * SI TROUVE, AFFICHAGE DE L'ENREGISTREMENT
                  MOVE ENR1-TYPE-MVT   TO TYPMVTO
                  MOVE ENR1-QTE-MVT    TO WS-QTE-MVT-ED
                  MOVE WS-QTE-MVT-ED   TO QTEMVTO
                  MOVE ENR1-PRIX       TO WS-PRIX-ED
                  MOVE WS-PRIX-ED      TO PRIXO
                  MOVE ATTR-UNPROT-BRT TO CDPRDTA
                  IF OK
                     MOVE 'PRODUIT DEJA EXISTANT'      TO MSGO
                     MOVE CURSEUR TO CDPRDTL
                     SET  ERREUR  TO TRUE
                  END-IF
               END-IF
            END-IF
            .

        CTRL-TYPE-MVT.
       *----------------*
       * OBLIGATOIRE, EGAL A 'E' OU 'S'
            IF TYPMVTI NOT = 'E' AND 'S'
               MOVE ATTR-UNPROT-BRT TO TYPMVTA
               IF OK
                  MOVE 'TYPE MOUVEMENT INVALIDE, E OU S'    TO MSGO
                  MOVE CURSEUR TO TYPMVTL
                  SET  ERREUR  TO TRUE
               END-IF
            END-IF
            .

        CTRL-QTE-MVT.
       *----------------*
       * OBLIGATOIRE, NUMERIQUE, NON NUL
            IF QTEMVTI = SPACES OR LOW-VALUE
               MOVE ATTR-UNPROT-BRT TO QTEMVTA
               IF OK
                  MOVE 'QUANTITE NON RENSEIGNEE'    TO MSGO
                  MOVE CURSEUR TO QTEMVTL
                  SET  ERREUR  TO TRUE
               END-IF
            ELSE
               INITIALIZE ZNUM-COM
               MOVE QTEMVTI TO ZNUM-NOMBRE-X
               EXEC CICS LINK
                    PROGRAM ('A991PGMT')
                    COMMAREA(ZNUM-COM)
               END-EXEC
               IF ZNUM-OK
                  MOVE ZNUM-NOMBRE-9   TO WS-QTE-MVT
                                          WS-QTE-MVT-ED
                  MOVE WS-QTE-MVT-ED   TO QTEMVTO
               ELSE
                  MOVE ATTR-UNPROT-BRT TO QTEMVTA
                  IF OK
                     MOVE 'QUANTITE NON NUMERIQUE'  TO MSGO
                     MOVE CURSEUR TO QTEMVTL
                     SET  ERREUR  TO TRUE
                  END-IF
               END-IF
            END-IF
            .

        CTRL-PRIX.
       *----------*
       * OBLIGATOIRE, NUMERIQUE, NON NUL
            IF PRIXI   = SPACES OR LOW-VALUE
               MOVE ATTR-UNPROT-BRT TO PRIXA
               IF OK
                  MOVE 'PRIX NON RENSEIGNE'         TO MSGO
                  MOVE CURSEUR TO PRIXL
                  SET  ERREUR  TO TRUE
               END-IF
            ELSE
               INITIALIZE ZNUM-COM
               MOVE PRIXI TO ZNUM-NOMBRE-X
               EXEC CICS LINK
                    PROGRAM ('A991PGMT')
                    COMMAREA(ZNUM-COM)
               END-EXEC
               IF ZNUM-OK
                  MOVE ZNUM-NOMBRE-9   TO WS-PRIX
                                          WS-PRIX-ED
                  MOVE WS-PRIX-ED      TO PRIXO
               ELSE
                  MOVE ATTR-UNPROT-BRT TO PRIXA
                  IF OK
                     MOVE 'PRIX NON NUMERIQUE'      TO MSGO
                     MOVE CURSEUR TO PRIXL
                     SET  ERREUR  TO TRUE
                  END-IF
               END-IF
            END-IF
            .

        LECTURE-PRODUIT.
       *----------------*
            MOVE CDPRDTI TO ENR1-CODE-PRDT
            EXEC CICS READ
                 FILE   ('FORA00F1')
                 RIDFLD (ENR1-CODE-PRDT)
                 INTO   (ENR1)
                 RESP   (C-R)
            END-EXEC
            EVALUATE C-R
               WHEN DFHRESP(NORMAL)
                    SET TROUVE         TO TRUE
               WHEN DFHRESP(NOTFND)
                    SET NON-TROUVE     TO TRUE
               WHEN OTHER
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE
            .

        CREATION-PRODUIT.
       *----------------*
            MOVE SPACES      TO ENR1
            MOVE CDPRDTI     TO ENR1-CODE-PRDT
            MOVE TYPMVTI     TO ENR1-TYPE-MVT
            MOVE WS-QTE-MVT  TO ENR1-QTE-MVT
            MOVE WS-PRIX     TO ENR1-PRIX
            EXEC CICS WRITE
                 FILE   ('FORA00F1')
                 RIDFLD (ENR1-CODE-PRDT)
                 FROM   (ENR1)
                 RESP   (C-R)
            END-EXEC
            EVALUATE C-R
               WHEN DFHRESP(NORMAL)
                    MOVE 'CREATION BIEN EFFECTUEE' TO MSGO
                    MOVE CURSEUR TO CDPRDTL
               WHEN OTHER
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE
            .

        23200-TRAIT-FIN.
       *---------------*
            MOVE 'FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        90000-ERR-TOUCHE.
       *----------------*
            MOVE 'TOUCHE DE FONCTION INVALIDE' TO MSGO
            PERFORM  22000-TRAIT-ENVOI
            .

        91000-ERREUR-CICS.
       *-------------------*
            MOVE 'ERREUR CICS !!!  FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        99000-FIN-CICS.
       *--------------*
            EXEC CICS SEND FROM   (MESSAGE-TXT)
                           LENGTH (LENGTH OF MESSAGE-TXT)
                           ERASE
            END-EXEC

            EXEC CICS RETURN END-EXEC
            .
 MEMBER NAME  A00BPGMT
       *======================================================*
       *   MENU DE GESTION DES PRODUITS                       *
       *======================================================*

       *======================================================*
       *   I D E N T I F I C A T I O N     D I V I S I O N    *
       *======================================================*
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00BPGMT.

       *======================================================*
       *   E N V I R O N M E N T       D I V I S I O N        *
       *======================================================*
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER. IBM-390.
        OBJECT-COMPUTER. IBM-390.

       *======================================================*
       *           D A T A         D I V I S I O N            *
       *======================================================*
        DATA DIVISION.
        WORKING-STORAGE SECTION.

       * ZONE POUR DATE DU JOUR
        01  WS-DATEJ               PIC X(8) VALUE SPACES.

       * DESCRIPTION DE L'ENREGISTREMENT
        01  ENR1.
            05 ENR1-CODE-PRDT      PIC X(4).
            05                     PIC X.
            05 ENR1-TYPE-MVT       PIC X.
            05                     PIC X.
            05 ENR1-QTE-MVT        PIC 99.
            05                     PIC X.
            05 ENR1-PRIX           PIC 9(3)V99.
            05                     PIC X(65).

       * PICTURE D'EDITION POUR LE PRIX
        01  WS-PRIX-X.
            05 WS-PRIX-ED          PIC ZZ9,99.

       *------------------------------------------------------*
       *   DESCRIPTION DETAILLEE DE LA ZONE DE COMMUNICATION  *
       *------------------------------------------------------*
        01  WS-COMMAREA.
            05 PROG-PRECEDENT      PIC X(8).
            05 PROG-COURANT        PIC X(8).
            05 PROG-SUIVANT        PIC X(8).
            05                     PIC X(26).

        01 C-R                     PIC S9(8) COMP.

        01 MON-PROG                PIC X(8) VALUE 'A00BPGMT'.
        01 MA-MAP                  PIC X(8) VALUE 'A00BMAP '.
        01 MA-TRX                  PIC X(4) VALUE 'A00B'.
       *------------------------------------------------------*
       *   DESCRIPTION   DE   LA   MAP                        *
       *------------------------------------------------------*
        COPY A00BMAP.

       *------------------------------------------------------*
       *   ZONE DE MESSAGE TAMPON POUR LE SEND FROM           *
       *------------------------------------------------------*
        01  MESSAGE-TXT            PIC X(79).

       *------------------------------------------------------*
       *   DESCRIPTION   DES  TOUCHES   FONCTIONS             *
       *------------------------------------------------------*
        COPY DFHAID.

       *------------------------------------------------------*
       *   DESCRIPTION   DES  ATTRIBUTS                       *
       *------------------------------------------------------*
        COPY DFHBMSCA.

       *======================================================*
       *          L I N K A G E     S E C T I O N             *
       *======================================================*
        LINKAGE SECTION.
        01  DFHCOMMAREA.
            05 LK-COMMAREA            PIC X(50).

       *======================================================*
       *     P R O C E D U R E     D I V I S I O N            *
       *======================================================*

        PROCEDURE DIVISION.
        00000-INIT-PROGRAMME.
       *---------------------*
             PERFORM  10000-DEBUT-PROGRAMME
             PERFORM  20000-TRAIT-PROGRAMME
             GOBACK
             .

        10000-DEBUT-PROGRAMME.
       *---------------------*
       *   TEST DE PREMIERE ENTREE DANS LE PROGRAMME
       *   SI NON PROGRAMME  MENU --->  ARRET  (ACCES INTERDIT)
            IF EIBCALEN = 0
               INITIALIZE      WS-COMMAREA
            ELSE
               MOVE LK-COMMAREA    TO  WS-COMMAREA
            END-IF

            MOVE  PROG-COURANT     TO  PROG-PRECEDENT
            MOVE  MON-PROG         TO  PROG-COURANT
            .

        20000-TRAIT-PROGRAMME.
       *---------------------*
            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               PERFORM  21000-TRAIT-CHARGEMENT
               PERFORM  22000-TRAIT-ENVOI
            ELSE
               PERFORM  23000-TRAIT-RECEPTION
            END-IF
            .

        21000-TRAIT-CHARGEMENT.
       *----------------------*
       *  CHARGEMENT DE LA MAP AVANT AFFICHAGE
            MOVE LOW-VALUE TO A00BMAPO

       *  SI TRAITEMENT PARTICULIER AVANT AFFICHAGE
       *    PERFORM  21100-TRAIT-SPECIFIQUE
            .

       *21100-TRAIT-SPECIFIQUE.
       *----------------------*
       *    ..............................
       *    ..............................
       *    ..............................
       *    ..............................
       *    .

        22000-TRAIT-ENVOI.
       *-----------------*
       * AFFICHAGE DE LA DATE DU JOUR
            MOVE FUNCTION CURRENT-DATE TO WS-DATEJ
            STRING WS-DATEJ (7 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATEJ (5 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATEJ (1 : 4) DELIMITED BY SIZE
                   INTO DATEJO
            END-STRING

            EXEC CICS SEND MAP    ('A00BMAP')
                           ERASE
            END-EXEC

            MOVE PROG-COURANT TO PROG-SUIVANT

            EXEC CICS RETURN TRANSID  (MA-TRX)
                             COMMAREA (WS-COMMAREA)
                             LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23000-TRAIT-RECEPTION.
       *---------------------*
            EVALUATE EIBAID
               WHEN DFHENTER
                    PERFORM  23100-TRAIT-ENTER
               WHEN DFHPF3
                    PERFORM  23105-RETOUR-MENU
               WHEN DFHCLEAR
                    PERFORM  23200-TRAIT-FIN
               WHEN OTHER
                    PERFORM  90000-ERR-TOUCHE
            END-EVALUATE
            .

        23105-RETOUR-MENU.
       *------------------*
            MOVE 'A00APGMT' TO PROG-SUIVANT
            PERFORM 23110-PROG-SUIVANT
            .

        23110-PROG-SUIVANT.
       *------------------*
       *    IF  ......................
       *       MOVE '?????'   TO  PROG-SUIVANT
       *    END-IF

            EXEC CICS XCTL  PROGRAM  (PROG-SUIVANT)
                            COMMAREA (WS-COMMAREA)
                            LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23100-TRAIT-ENTER.
       *------------------*
       *    ..........................
            EXEC CICS RECEIVE MAP  ('A00BMAP')
                              RESP (C-R)
            END-EXEC

            EVALUATE C-R
               WHEN DFHRESP(NORMAL)
                    CONTINUE
       *       WHEN DFHRESP(MAPFAIL)
       *            .............
               WHEN OTHER
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE

       *    ............................
       *    ...  ANALYSE DES CHAMPS  ...
       *    ............................
       *  CONTROLE CODE PRODUIT OBLIGATOIRE
            IF CDPRDTI = SPACES
               MOVE 'CODE PRODUIT NON RENSEIGNE' TO MSGO
               PERFORM  22000-TRAIT-ENVOI
            ELSE
       *  CODE PRODUIT SAISI, CONTROLE D'EXISTENCE DANS LE FICHIER
               MOVE CDPRDTI TO ENR1-CODE-PRDT
               EXEC CICS READ
                    FILE   ('FORA00F1')
                    RIDFLD (ENR1-CODE-PRDT)
                    INTO   (ENR1)
                    RESP   (C-R)
               END-EXEC
               EVALUATE C-R
                  WHEN DFHRESP(NORMAL)
       * ENREGISTREMENT TROUVE, ON RENSEIGNE LES ZONES EN OUTPUT
                       MOVE ENR1-TYPE-MVT TO TYPMVTO
                       MOVE ENR1-QTE-MVT  TO QTEMVTO
                       MOVE ENR1-PRIX     TO WS-PRIX-ED
                       MOVE WS-PRIX-X     TO PRIXO
                       PERFORM  22000-TRAIT-ENVOI
                  WHEN DFHRESP(NOTFND)
       * ENREGISTREMENT NON TROUVE, MSG ERREUR
                       MOVE 'CODE PRODUIT INEXISTANT' TO MSGO
                       MOVE SPACES        TO TYPMVTO
                                             QTEMVTO
                                             PRIXO
                       PERFORM  22000-TRAIT-ENVOI
                  WHEN OTHER
                       PERFORM 91000-ERREUR-CICS
               END-EVALUATE
            END-IF
            .

        23200-TRAIT-FIN.
       *---------------*
            MOVE 'FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        90000-ERR-TOUCHE.
       *----------------*
            MOVE 'TOUCHE DE FONCTION INVALIDE' TO MSGO
            PERFORM  22000-TRAIT-ENVOI
            .

        91000-ERREUR-CICS.
       *-------------------*
            MOVE 'ERREUR CICS !!!  FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        99000-FIN-CICS.
       *--------------*
            EXEC CICS SEND FROM   (MESSAGE-TXT)
                           LENGTH (LENGTH OF MESSAGE-TXT)
                           ERASE
            END-EXEC

            EXEC CICS RETURN END-EXEC
            .
 MEMBER NAME  A00APGMT
       *======================================================*
       *   MENU DE GESTION DES PRODUITS                       *
       *======================================================*

       *======================================================*
       *   I D E N T I F I C A T I O N     D I V I S I O N    *
       *======================================================*
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00APGMT.

       *======================================================*
       *   E N V I R O N M E N T       D I V I S I O N        *
       *======================================================*
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER. IBM-390.
        OBJECT-COMPUTER. IBM-390.

       *======================================================*
       *           D A T A         D I V I S I O N            *
       *======================================================*
        DATA DIVISION.
        WORKING-STORAGE SECTION.

       * ZONE POUR DATE DU JOUR
        01  WS-DATEJ               PIC X(8) VALUE SPACES.

       *------------------------------------------------------*
       *   DESCRIPTION DETAILLEE DE LA ZONE DE COMMUNICATION  *
       *------------------------------------------------------*
        01  WS-COMMAREA.
            05 PROG-PRECEDENT      PIC X(8).
            05 PROG-COURANT        PIC X(8).
            05 PROG-SUIVANT        PIC X(8).
            05                     PIC X(26).

        01 C-R                     PIC S9(8) COMP.

        01 MON-PROG                PIC X(8) VALUE 'A00APGMT'.
        01 MA-MAP                  PIC X(8) VALUE 'A00AMAP '.
        01 MA-TRX                  PIC X(4) VALUE 'A00A'.
       *------------------------------------------------------*
       *   DESCRIPTION   DE   LA   MAP                        *
       *------------------------------------------------------*
        COPY A00AMAP.

       *------------------------------------------------------*
       *   ZONE DE MESSAGE TAMPON POUR LE SEND FROM           *
       *------------------------------------------------------*
        01  MESSAGE-TXT            PIC X(79).

       *------------------------------------------------------*
       *   DESCRIPTION   DES  TOUCHES   FONCTIONS             *
       *------------------------------------------------------*
        COPY DFHAID.

       *------------------------------------------------------*
       *   DESCRIPTION   DES  ATTRIBUTS                       *
       *------------------------------------------------------*
        COPY DFHBMSCA.

       *======================================================*
       *          L I N K A G E     S E C T I O N             *
       *======================================================*
        LINKAGE SECTION.
        01  DFHCOMMAREA.
            05 LK-COMMAREA            PIC X(50).

       *======================================================*
       *     P R O C E D U R E     D I V I S I O N            *
       *======================================================*

        PROCEDURE DIVISION.
        00000-INIT-PROGRAMME.
       *---------------------*
             PERFORM  10000-DEBUT-PROGRAMME
             PERFORM  20000-TRAIT-PROGRAMME
             GOBACK
             .

        10000-DEBUT-PROGRAMME.
       *---------------------*
       *   TEST DE PREMIERE ENTREE DANS LE PROGRAMME
       *   SI NON PROGRAMME  MENU --->  ARRET  (ACCES INTERDIT)
            IF EIBCALEN = 0
               INITIALIZE      WS-COMMAREA
            ELSE
               MOVE LK-COMMAREA    TO  WS-COMMAREA
            END-IF

            MOVE  PROG-COURANT     TO  PROG-PRECEDENT
            MOVE  MON-PROG         TO  PROG-COURANT
            .

        20000-TRAIT-PROGRAMME.
       *---------------------*
            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               PERFORM  21000-TRAIT-CHARGEMENT
               PERFORM  22000-TRAIT-ENVOI
            ELSE
               PERFORM  23000-TRAIT-RECEPTION
            END-IF
            .

        21000-TRAIT-CHARGEMENT.
       *----------------------*
       *  CHARGEMENT DE LA MAP AVANT AFFICHAGE
            MOVE LOW-VALUE TO A00AMAPO

       *  SI TRAITEMENT PARTICULIER AVANT AFFICHAGE
       *    PERFORM  21100-TRAIT-SPECIFIQUE
            .

       *21100-TRAIT-SPECIFIQUE.
       *----------------------*
       *    ..............................
       *    ..............................
       *    ..............................
       *    ..............................
       *    .

        22000-TRAIT-ENVOI.
       *-----------------*
       * AFFICHAGE DE LA DATE DU JOUR
            MOVE FUNCTION CURRENT-DATE TO WS-DATEJ
            STRING WS-DATEJ (7 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATEJ (5 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATEJ (1 : 4) DELIMITED BY SIZE
                   INTO DATEJO
            END-STRING

            EXEC CICS SEND MAP    ('A00AMAP')
                           ERASE
            END-EXEC

            MOVE PROG-COURANT TO PROG-SUIVANT

            EXEC CICS RETURN TRANSID  (MA-TRX)
                             COMMAREA (WS-COMMAREA)
                             LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23000-TRAIT-RECEPTION.
       *---------------------*
            EVALUATE EIBAID
               WHEN DFHENTER
                    PERFORM  23100-TRAIT-ENTER
               WHEN DFHCLEAR
                    PERFORM  23200-TRAIT-FIN
               WHEN OTHER
                    PERFORM  90000-ERR-TOUCHE
            END-EVALUATE
            .

        23110-PROG-SUIVANT.
       *------------------*
       *    IF  ......................
       *       MOVE '?????'   TO  PROG-SUIVANT
       *    END-IF

            EXEC CICS XCTL  PROGRAM  (PROG-SUIVANT)
                            COMMAREA (WS-COMMAREA)
                            LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23100-TRAIT-ENTER.
       *------------------*
       *    ..........................
            EXEC CICS RECEIVE MAP  ('A00AMAP')
                              RESP (C-R)
            END-EXEC

            EVALUATE C-R
               WHEN DFHRESP(NORMAL)
                    CONTINUE
       *       WHEN DFHRESP(MAPFAIL)
       *            .............
               WHEN OTHER
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE

       *    ............................
       *    ...  ANALYSE DES CHAMPS  ...
       *    ............................
            EVALUATE CHOIXI
               WHEN '2'
                 MOVE 'A00BPGMT' TO PROG-SUIVANT
                 PERFORM 23110-PROG-SUIVANT
               WHEN '1'
                 MOVE 'A00CPGMT' TO PROG-SUIVANT
                 PERFORM 23110-PROG-SUIVANT
               WHEN '3'
                 MOVE 'A00DPGMT' TO PROG-SUIVANT
                 PERFORM 23110-PROG-SUIVANT
               WHEN '4'
                 MOVE 'CHOIX ACTUELLEMENT INDISPONIBLE' TO MSGO
                 PERFORM  22000-TRAIT-ENVOI
               WHEN OTHER
                 MOVE 'CHOIX INVALIDE'                  TO MSGO
                 PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        23200-TRAIT-FIN.
       *---------------*
            MOVE 'FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        90000-ERR-TOUCHE.
       *----------------*
            MOVE 'TOUCHE DE FONCTION INVALIDE' TO MSGO
            PERFORM  22000-TRAIT-ENVOI
            .

        91000-ERREUR-CICS.
       *-------------------*
            MOVE 'ERREUR CICS !!!  FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        99000-FIN-CICS.
       *--------------*
            EXEC CICS SEND FROM   (MESSAGE-TXT)
                           LENGTH (LENGTH OF MESSAGE-TXT)
                           ERASE
            END-EXEC

            EXEC CICS RETURN END-EXEC
            .
 MEMBER NAME  A00DPGMT
       *======================================================*
       *   MODIFICATION D'UN   PRODUIT                        *
       *======================================================*

       *======================================================*
       *   I D E N T I F I C A T I O N     D I V I S I O N    *
       *======================================================*
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00DPGMT.

       *======================================================*
       *   E N V I R O N M E N T       D I V I S I O N        *
       *======================================================*
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        SOURCE-COMPUTER. IBM-390.
        OBJECT-COMPUTER. IBM-390.

       *======================================================*
       *           D A T A         D I V I S I O N            *
       *======================================================*
        DATA DIVISION.
        WORKING-STORAGE SECTION.

       * ZONE POUR DATE DU JOUR
        01  WS-DATEJ               PIC X(8) VALUE SPACES.

       *------------------------------------------------------*
       *   DESCRIPTION DETAILLEE DE LA ZONE DE COMMUNICATION  *
       *------------------------------------------------------*
        01  WS-COMMAREA.
            05 PROG-PRECEDENT      PIC X(8).
            05 PROG-COURANT        PIC X(8).
            05 PROG-SUIVANT        PIC X(8).
            05                     PIC X(26).

        01 C-R                     PIC S9(8) COMP.

        01 MON-PROG                PIC X(8) VALUE 'A00DPGMT'.
        01 MA-MAP                  PIC X(8) VALUE 'A00DMAP '.
        01 MA-TRX                  PIC X(4) VALUE 'A00D'.

       *------------------------------------------------------*
       *   DESCRIPTION   DE   L'ENREGISTREMENT                *
       *------------------------------------------------------*
        COPY ENRPRDT REPLACING ==:PREF:== BY ==ENR1==.

       * INDICATEUR DE LECTURE
        77                         PIC X    VALUE SPACES.
            88 TROUVE                       VALUE '0'.
            88 NON-TROUVE                   VALUE '1'.

       * INDICATEUR DE CONTROLE
        77                         PIC X    VALUE SPACES.
            88 OK                           VALUE '0'.
            88 ERREUR                       VALUE '1'.

       * ZONES DE RESERVE
        77  WS-QTE-MVT             PIC 99     VALUE ZEROES.
        77  WS-PRIX                PIC 999V99 VALUE ZEROES.

       * PICTURES D'EDITION
       *77  PRIX-ED                PIC ZZ9,99 VALUE ZEROES.

       *------------------------------------------------------*
       *   DESCRIPTION   DE   LA   ZONE DE COMM POUR CTRL NUM *
       *------------------------------------------------------*
        COPY ZNUM.

       *------------------------------------------------------*
       *   DESCRIPTION   DE   LA   MAP                        *
       *------------------------------------------------------*
        COPY A00DMAP.

       *------------------------------------------------------*
       *   ZONE DE MESSAGE TAMPON POUR LE SEND FROM           *
       *------------------------------------------------------*
        01  MESSAGE-TXT            PIC X(79).

       *------------------------------------------------------*
       *   DESCRIPTION   DES  TOUCHES   FONCTIONS             *
       *------------------------------------------------------*
        COPY DFHAID.

       *------------------------------------------------------*
       *   DESCRIPTION   DES  ATTRIBUTS                       *
       *------------------------------------------------------*
        COPY DFHBMSCA.
        COPY ATTRIBUT.

       *======================================================*
       *          L I N K A G E     S E C T I O N             *
       *======================================================*
        LINKAGE SECTION.
        01  DFHCOMMAREA.
            05 LK-COMMAREA            PIC X(50).

       *======================================================*
       *     P R O C E D U R E     D I V I S I O N            *
       *======================================================*

        PROCEDURE DIVISION.
        00000-INIT-PROGRAMME.
       *---------------------*
             PERFORM  10000-DEBUT-PROGRAMME
             PERFORM  20000-TRAIT-PROGRAMME
             GOBACK
             .

        10000-DEBUT-PROGRAMME.
       *---------------------*
       *   TEST DE PREMIERE ENTREE DANS LE PROGRAMME
       *   SI NON PROGRAMME  MENU --->  ARRET  (ACCES INTERDIT)
            IF EIBCALEN = 0
               INITIALIZE      WS-COMMAREA
            ELSE
               MOVE LK-COMMAREA    TO  WS-COMMAREA
            END-IF

            MOVE  PROG-COURANT     TO  PROG-PRECEDENT
            MOVE  MON-PROG         TO  PROG-COURANT
            .

        20000-TRAIT-PROGRAMME.
       *---------------------*
            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               PERFORM  21000-TRAIT-CHARGEMENT
               PERFORM  22000-TRAIT-ENVOI
            ELSE
               PERFORM  23000-TRAIT-RECEPTION
            END-IF
            .

        21000-TRAIT-CHARGEMENT.
       *----------------------*
       *  CHARGEMENT DE LA MAP AVANT AFFICHAGE
            MOVE LOW-VALUE TO A00DMAPO

       *  SI TRAITEMENT PARTICULIER AVANT AFFICHAGE
       *    PERFORM  21100-TRAIT-SPECIFIQUE
            .

       *21100-TRAIT-SPECIFIQUE.
       *----------------------*
            EXIT
            .

        22000-TRAIT-ENVOI.
       *-----------------*
       * AFFICHAGE DE LA DATE DU JOUR
            MOVE FUNCTION CURRENT-DATE TO WS-DATEJ
            STRING WS-DATEJ (7 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATEJ (5 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATEJ (1 : 4) DELIMITED BY SIZE
                   INTO DATEJO
            END-STRING

            IF ERREUR
               EXEC CICS SEND MAP    ('A00DMAP')
                              ERASE
                              CURSOR
               END-EXEC
            ELSE
               EXEC CICS SEND MAP    ('A00DMAP')
                              ERASE
               END-EXEC
            END-IF

            MOVE PROG-COURANT TO PROG-SUIVANT

            EXEC CICS RETURN TRANSID  (MA-TRX)
                             COMMAREA (WS-COMMAREA)
                             LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23000-TRAIT-RECEPTION.
       *---------------------*
            EVALUATE EIBAID
               WHEN DFHENTER
                    PERFORM  RECEPTION-MAP
                    PERFORM  TRT-CODE-PRODUIT
                    PERFORM  22000-TRAIT-ENVOI
               WHEN DFHPF3
                    PERFORM  RETOUR-MENU
               WHEN DFHPF10
                    PERFORM  RECEPTION-MAP
                    PERFORM  TRT-SAISIE
                    PERFORM  22000-TRAIT-ENVOI
               WHEN DFHCLEAR
                    PERFORM  23200-TRAIT-FIN
               WHEN OTHER
                    PERFORM  90000-ERR-TOUCHE
            END-EVALUATE
            .

        23110-PROG-SUIVANT.
       *------------------*
            EXEC CICS XCTL  PROGRAM  (PROG-SUIVANT)
                            COMMAREA (WS-COMMAREA)
                            LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        RECEPTION-MAP.
       *--------------*
            EXEC CICS RECEIVE MAP  ('A00DMAP')
                              RESP (C-R)
            END-EXEC

            EVALUATE C-R
               WHEN DFHRESP(NORMAL)
                    CONTINUE
               WHEN OTHER
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE
            .

        TRT-CODE-PRODUIT.
       *-----------------*
       *    ............................
       *    ...  ANALYSE DES CHAMPS  ...
       *    ............................
            IF CDPRDTI = SPACES OR LOW-VALUE
               MOVE 'CODE PRODUIT NON RENSEIGNE'      TO MSGO
            ELSE
       * LECTURE DU PRODUIT
               PERFORM LECTURE-PRODUIT
               IF NON-TROUVE
                  MOVE 'CODE PRODUIT INEXISTANT'      TO MSGO
                  MOVE SPACES                         TO TYPMVTO
                  MOVE ZEROES                         TO QTEMVTO
                                                         PRIXO
               ELSE
       * AFFICHAGE DES INFOS
                  MOVE ENR1-TYPE-MVT                  TO TYPMVTO
                  MOVE ENR1-QTE-MVT                   TO QTEMVTO
                  MOVE ENR1-PRIX                      TO PRIXO
                  MOVE 'VOUS POUVEZ MODIFIER'         TO MSGO
               END-IF
            END-IF
            .

        TRT-SAISIE.
       *-----------*
            PERFORM CTRL-CHAMPS
            IF OK
               PERFORM MODIFICATION-PRODUIT
            END-IF
            .

        CTRL-CHAMPS.
       *-----------*
       * INITIALISATION
            SET OK TO TRUE

       * CONTROLE TYPE MVT : E OU F
            IF TYPMVTI NOT = 'E' AND 'S'
               MOVE 'TYPE MOUVEMENT INVALIDE'         TO MSGO
               SET ERREUR                             TO TRUE
               MOVE ATTR-UNPROT-FSET                  TO TYPMVTA
               MOVE CURSEUR                           TO TYPMVTL
            END-IF

       * CONTROLE QUANTITE : NUMERIQUE, NON NULLE
            INITIALIZE ZNUM-COM
            MOVE QTEMVTI          TO ZNUM-NOMBRE-X
            PERFORM APPEL-A991PGMT
            IF ZNUM-ERREUR
               MOVE 'QUANTITE NON NUMERIQUE'          TO MSGO
               SET ERREUR                             TO TRUE
               MOVE ATTR-UNPROT-FSET                  TO QTEMVTA
               MOVE CURSEUR                           TO QTEMVTL
            ELSE
               IF ZNUM-NOMBRE-9 = ZEROES
                  MOVE 'QUANTITE NULLE'               TO MSGO
                  SET ERREUR                          TO TRUE
                  MOVE ATTR-UNPROT-FSET               TO QTEMVTA
                  MOVE CURSEUR                        TO QTEMVTL
               ELSE
                  MOVE ZNUM-NOMBRE-9                  TO WS-QTE-MVT
               END-IF
            END-IF

       * CONTROLE PRIX : NUMERIQUE, NON NULLE
            INITIALIZE ZNUM-COM
            MOVE PRIXI            TO ZNUM-NOMBRE-X
            PERFORM APPEL-A991PGMT
            IF ZNUM-ERREUR
               MOVE 'PRIX NON NUMERIQUE'              TO MSGO
               SET ERREUR                             TO TRUE
               MOVE ATTR-UNPROT-FSET                  TO PRIXA
               MOVE CURSEUR                           TO PRIXL
            ELSE
               MOVE ZNUM-NOMBRE-9                     TO WS-PRIX
            END-IF
            .

        APPEL-A991PGMT.
       *---------------*
            EXEC CICS LINK
                 PROGRAM('A991PGMT')
                 COMMAREA(ZNUM-COM)
                 RESP(C-R)
            END-EXEC
            EVALUATE C-R
               WHEN DFHRESP(NORMAL)
                    CONTINUE
               WHEN OTHER
                    MOVE 'ERREUR APPEL A991PGMT' TO MSGO
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE
            .

        MODIFICATION-PRODUIT.
       *--------------------*
       * LECTURE AVEC OPTION UPDATE
            EXEC CICS READ
                 FILE('FORA00F1')
                 RIDFLD(CDPRDTI)
                 INTO(ENR1-PRDT)
                 UPDATE
                 RESP(C-R)
            END-EXEC

            EVALUATE C-R
              WHEN DFHRESP(NORMAL)
                   SET TROUVE TO TRUE
              WHEN DFHRESP(NOTFND)
                   MOVE 'PRODUIT INEXISTANT'              TO MSGO
                   SET NON-TROUVE TO TRUE
              WHEN OTHER
                   PERFORM 91000-ERREUR-CICS
            END-EVALUATE

            IF TROUVE
               MOVE SPACES TO ENR1-PRDT
               MOVE CDPRDTI           TO ENR1-CODE-PRDT
               MOVE TYPMVTI           TO ENR1-TYPE-MVT
               MOVE WS-QTE-MVT        TO ENR1-QTE-MVT
               MOVE WS-PRIX           TO ENR1-PRIX
               EXEC CICS REWRITE
                    FILE('FORA00F1')
                    FROM(ENR1-PRDT)
                    RESP(C-R)
               END-EXEC
               EVALUATE C-R
                 WHEN DFHRESP(NORMAL)
                      MOVE 'MODIFICATION BIEN EFFECTUEE' TO MSGO
                 WHEN OTHER
                      PERFORM 91000-ERREUR-CICS
               END-EVALUATE
            END-IF
            .

        LECTURE-PRODUIT.
       *---------------*
            EXEC CICS READ
              FILE('FORA00F1')
              RIDFLD(CDPRDTI)
              INTO(ENR1-PRDT)
              RESP(C-R)
            END-EXEC

            EVALUATE C-R
              WHEN DFHRESP(NORMAL)
                   SET TROUVE     TO TRUE
              WHEN DFHRESP(NOTFND)
                   SET NON-TROUVE TO TRUE
              WHEN OTHER
                   PERFORM 91000-ERREUR-CICS
            END-EVALUATE
            .

        RETOUR-MENU.
       *-----------*
            MOVE 'A00APGMT'             TO PROG-SUIVANT
            PERFORM 23110-PROG-SUIVANT
            .

        23200-TRAIT-FIN.
       *---------------*
            MOVE 'FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        90000-ERR-TOUCHE.
       *----------------*
            MOVE 'TOUCHE DE FONCTION INVALIDE' TO MSGO
            PERFORM  22000-TRAIT-ENVOI
            .

        91000-ERREUR-CICS.
       *-------------------*
            MOVE 'ERREUR CICS !!!  FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        99000-FIN-CICS.
       *--------------*
            EXEC CICS SEND FROM   (MESSAGE-TXT)
                           LENGTH (LENGTH OF MESSAGE-TXT)
                           ERASE
            END-EXEC

            EXEC CICS RETURN END-EXEC
            .
 MEMBER NAME  A00DMAP
 A00DMAP DFHMSD TYPE=&SYSPARM,MODE=INOUT,LANG=COBOL,EXTATT=YES,         X
                CTRL=(FREEKB,FRSET),STORAGE=AUTO,TIOAPFX=YES
 A00DMAP DFHMDI COLUMN=1,LINE=1,SIZE=(24,80)
         DFHMDF POS=(1,1),ATTRB=ASKIP,LENGTH=04,INITIAL='A00D'
         DFHMDF POS=(1,23),ATTRB=ASKIP,LENGTH=26,                       X
                INITIAL='MODIFICATION D''UN PRODUIT'
         DFHMDF POS=(1,65),ATTRB=ASKIP,LENGTH=07,INITIAL='A00DMAP'
         DFHMDF POS=(2,59),ATTRB=ASKIP,LENGTH=6,INITIAL='DATE :'
 DATEJ   DFHMDF POS=(2,66),ATTRB=(ASKIP,FSET),LENGTH=10
         DFHMDF POS=(8,15),ATTRB=ASKIP,LENGTH=22,                       X
                INITIAL='CODE PRODUIT         :'
 CDPRDT  DFHMDF POS=(8,38),ATTRB=(UNPROT,FSET,IC),LENGTH=4
         DFHMDF POS=(8,43),ATTRB=ASKIP
         DFHMDF POS=(10,15),ATTRB=ASKIP,LENGTH=22,                      X
                INITIAL='TYPE MOUVEMENT       :'
 TYPMVT  DFHMDF POS=(10,38),ATTRB=(UNPROT,FSET),LENGTH=1
         DFHMDF POS=(10,40),ATTRB=ASKIP
         DFHMDF POS=(12,15),ATTRB=ASKIP,LENGTH=22,                      X
                INITIAL='QUANTITE             :'
 QTEMVT  DFHMDF POS=(12,38),ATTRB=(UNPROT,FSET),LENGTH=2
         DFHMDF POS=(12,41),ATTRB=ASKIP
         DFHMDF POS=(14,15),ATTRB=ASKIP,LENGTH=22,                      X
                INITIAL='PRIX UNITAIRE        :'
 PRIX    DFHMDF POS=(14,38),ATTRB=(UNPROT,FSET),LENGTH=6,               X
                PICOUT='ZZ9,99'
         DFHMDF POS=(14,45),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(23,1),ATTRB=ASKIP,LENGTH=11,INITIAL='CLEAR - FIN'
         DFHMDF POS=(23,18),ATTRB=ASKIP,LENGTH=12,INITIAL='PF3 - RETOUR'
         DFHMDF POS=(23,38),ATTRB=ASKIP,LENGTH=34,                      X
                INITIAL='ENTER - INFOS    PF10 - VALIDATION'
 MSG     DFHMDF POS=(24,1),ATTRB=(ASKIP,BRT),LENGTH=79
         DFHMSD TYPE=FINAL
         END
 MEMBER NAME  A00P13
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00P13.
       ******************************************************************
       * SOUS-PROGRAMME QUI RETOURNE LA LONGUEUR RENSEIGNEE D'UNE ZONE  *
       ******************************************************************
        DATA DIVISION.
        WORKING-STORAGE SECTION.
       * ZONE A ANALYSER
        01 Z-ZONE             PIC X(50).
       * LONGUEUR DE LA ZONE A ANALYSER
        01 Z-LENT             PIC 9(5).
       * LONGUEUR RENSEIGNEE
        01 Z-LSOR             PIC 9(5).
        PROCEDURE DIVISION.
            MOVE 'TRALALA LA LERE' TO Z-ZONE
            MOVE 15 TO Z-LENT
            CALL 'A00SP6' USING Z-ZONE Z-LENT Z-LSOR
            DISPLAY 'Z-LSOR : ' Z-LSOR
            DISPLAY 'Z-ZONE : ' Z-ZONE
            STOP RUN.
 MEMBER NAME  A00SP6
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00SP6.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 30/11/2023.
       ******************************************************************
       * SOUS-PROGRAMME QUI RETOURNE LA LONGUEUR RENSEIGNEE D'UNE ZONE  *
       * RENSEIGNER :                                                   *
       *  - Z-ZONE  : ZONE A ANALYSER                                   *
       *  - Z-LENT  : LONGUEUR DE LA ZONE A ANALYSER                    *
       * EN RETOUR  :                                                   *
       *  - Z-LSOR  : LONGUEUR RENSEIGNEE                               *
       ******************************************************************
        DATA DIVISION.
        LINKAGE SECTION.
       * ZONE A ANALYSER
        01 Z-ZONE.
           05                 PIC X OCCURS 10000 DEPENDING ON Z-LENT.
       * LONGUEUR DE LA ZONE A ANALYSER
        01 Z-LENT             PIC 9(5).
       * LONGUEUR RENSEIGNEE
        01 Z-LSOR             PIC 9(5).

        PROCEDURE DIVISION USING Z-ZONE Z-LENT Z-LSOR.
            MOVE ZEROES TO Z-LSOR
            MOVE FUNCTION REVERSE (Z-ZONE) TO Z-ZONE
            INSPECT Z-ZONE
             TALLYING Z-LSOR FOR LEADING SPACES
            COMPUTE Z-LSOR = Z-LENT - Z-LSOR

            GOBACK
            .
 MEMBER NAME  A00IPGMD
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00IPGMD.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 14/12/2023.
       ******************************************************************
       *         LECTURE DE LA TABLE CHANSON                            *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
       * COMPTEURS
        77  CPT-LUS            PIC 99 VALUE ZEROES.

       * INDICATEUR FIN DE TABLE
        77                     PIC X  VALUE SPACES.
            88 FIN-TABLE              VALUE '1'.

       * PICTURES D'EDITION
        77  SQLCODE-ED         PIC +(8)9 VALUE ZEROES.

       * SQLCA
            EXEC SQL INCLUDE SQLCA   END-EXEC.

       * TABLE CHANSON
            EXEC SQL INCLUDE CHANSON END-EXEC.

       * DECLARATION DU CURSEUR
            EXEC SQL DECLARE CURS CURSOR FOR
             SELECT CODEC, TITREC, VALUE(CODEA, '****')
             FROM CHANSON
             ORDER BY TITREC
            END-EXEC

       * LIGNES D'EDITION
        01  L1.
            05            PIC X(9)   VALUE 'CODEC'.
            05            PIC X(41)  VALUE 'TITRE CHANSON'.
            05            PIC X(5)   VALUE 'CODEA'.

        01  L2.
            05            PIC X(60)  VALUE ALL '-'.

        PROCEDURE DIVISION.
            PERFORM DEBUT
            PERFORM UNTIL FIN-TABLE
               PERFORM AFFICHER-CHANSON
               PERFORM LECTURE-CHANSON
            END-PERFORM
            PERFORM FIN
            STOP RUN
            .

        DEBUT.
            EXEC SQL OPEN CURS END-EXEC
            IF SQLCODE NOT = ZEROES
               MOVE SQLCODE TO SQLCODE-ED
               DISPLAY 'ERREUR OPEN CURS, SQLCODE: ' SQLCODE-ED
               PERFORM FIN-ERREUR
            END-IF

       * 1ERE LECTURE CURS
            PERFORM LECTURE-CHANSON
            IF FIN-TABLE
               DISPLAY 'TABLE CHANSON VIDE'
               PERFORM FIN-ERREUR
            END-IF

            DISPLAY L2
            DISPLAY L1
            DISPLAY L2
            .

        AFFICHER-CHANSON.
            ADD 1 TO CPT-LUS
            DISPLAY CH-CODEC '   '  CH-TITREC ' ' CH-CODEA
            .

        LECTURE-CHANSON.
            INITIALIZE CHANSON
            EXEC SQL FETCH CURS
             INTO :CH-CODEC, :CH-TITREC, :CH-CODEA
            END-EXEC

            EVALUATE SQLCODE
             WHEN ZEROES
              CONTINUE
             WHEN +100
              SET FIN-TABLE TO TRUE
             WHEN OTHER
               MOVE SQLCODE TO SQLCODE-ED
               DISPLAY 'ERREUR FETCH, SQLCODE : ' SQLCODE-ED
               PERFORM FIN-ERREUR
            END-EVALUATE
            .

        FIN-ERREUR.
            MOVE 17 TO RETURN-CODE
            STOP RUN
            .

        FIN.
            EXEC SQL CLOSE CURS END-EXEC

            DISPLAY SPACES
            DISPLAY 'CPT-LUS : ' CPT-LUS
            .
 MEMBER NAME  A00JPGMD
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00JPGMD.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 14/12/2023.
       ******************************************************************
       *         LECTURE DES CONTRATS PAR PERSONNE                      *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
       * COMPTEURS
        77  CPT-LUS            PIC 99 VALUE ZEROES.

       * INDICATEUR FIN DE TABLE
        77                     PIC X  VALUE SPACES.
            88 FIN-TABLE              VALUE '1'.

       * PICTURES D'EDITION
        77  SQLCODE-ED         PIC +(8)9 VALUE ZEROES.

       * SQLCA
            EXEC SQL INCLUDE SQLCA   END-EXEC.

       * TABLE PERSONNE
            EXEC SQL INCLUDE PERSONNE END-EXEC.

       * TABLE CONTRAT
            EXEC SQL INCLUDE CONTRAT  END-EXEC.

       * DECLARATION DU CURSEUR
            EXEC SQL DECLARE CURS CURSOR FOR
            SELECT DISTINCT P.CODEP, IDENTITE, CODEA, SIREN
                   FROM CONTRAT     C
                   JOIN PERSONNE    P ON P.CODEP = C.CODEP
                   ORDER BY P.CODEP, CODEA, SIREN
            END-EXEC

       * LIGNES D'EDITION
        01  L1.
            05            PIC X(9)   VALUE 'CODEP'.
            05            PIC X(26)  VALUE 'IDENTITE'.
            05            PIC X(6)   VALUE 'CODEA'.
            05            PIC X(5)   VALUE 'SIREN'.

        01  L2.
            05            PIC X(60)  VALUE ALL '-'.

        PROCEDURE DIVISION.
            PERFORM DEBUT
            PERFORM UNTIL FIN-TABLE
               PERFORM AFFICHER-LISTE
               PERFORM LECTURE-LISTE
            END-PERFORM
            PERFORM FIN
            STOP RUN
            .

        DEBUT.
            EXEC SQL OPEN CURS END-EXEC
            IF SQLCODE NOT = ZEROES
               MOVE SQLCODE TO SQLCODE-ED
               DISPLAY 'ERREUR OPEN CURS, SQLCODE: ' SQLCODE-ED
               PERFORM FIN-ERREUR
            END-IF

       * 1ERE LECTURE CURS
            PERFORM LECTURE-LISTE
            IF FIN-TABLE
               DISPLAY 'TABLE LISTE VIDE'
               PERFORM FIN-ERREUR
            END-IF

       * AFFICHAGE DE L'ENTETE
            DISPLAY L2
            DISPLAY L1
            DISPLAY L2
            .

        AFFICHER-LISTE.
            ADD 1 TO CPT-LUS
            DISPLAY PE-CODEP '   '  PE-IDENTITE
                    ' ' CT-CODEA '  ' CT-SIREN
            .

        LECTURE-LISTE.
            INITIALIZE PE-PERSONNE
                       CT-CONTRAT
            EXEC SQL FETCH CURS
             INTO :PE-CODEP, :PE-IDENTITE, :CT-CODEA, :CT-SIREN
            END-EXEC

            EVALUATE SQLCODE
             WHEN ZEROES
              CONTINUE
             WHEN +100
              SET FIN-TABLE TO TRUE
             WHEN OTHER
               MOVE SQLCODE TO SQLCODE-ED
               DISPLAY 'ERREUR FETCH, SQLCODE : ' SQLCODE-ED
               PERFORM FIN-ERREUR
            END-EVALUATE
            .

        FIN-ERREUR.
            MOVE 17 TO RETURN-CODE
            STOP RUN
            .

        FIN.
            EXEC SQL CLOSE CURS END-EXEC

            DISPLAY SPACES
            DISPLAY 'CPT-LUS : ' CPT-LUS
            .
 MEMBER NAME  A00LPGMD
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00LPGMD.
        AUTHOR. PIERRE.
       ******************************************************************
       *     EDITION DES VENTES                                         *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
       * FICHIER EDITION
            SELECT FEDIT   ASSIGN TO FEDIT
                   FILE STATUS    IS FS.
        DATA DIVISION.
        FILE SECTION.
        FD  FEDIT
            RECORDING MODE IS F.
        01  ENR-EDIT                   PIC X(132).

        WORKING-STORAGE SECTION.
       * DESCRIPTION DE LA SQLCA
            EXEC SQL INCLUDE SQLCA END-EXEC

       * PICTURES EDITION
        77  SQLCODE-ED                 PIC +(8)9      VALUE ZEROES.
        77  QTE-ED                     PIC ZZ9        VALUE ZEROES.
        77  PRIX-ED                    PIC ZZ9,99     VALUE ZEROES.

       * FILE STATUS
        77  FS                         PIC XX         VALUE ZEROES.

       * COMPTEURS
        77  CPT-LUS                    PIC 99         VALUE ZEROES.

       * INDICATEUR DE FIN DE CURSEUR
        77                             PIC X          VALUE SPACES.
            88 FIN-CURS                               VALUE '1'.

       * DESCRIPTION DE LA TABLE VENTES
            EXEC SQL INCLUDE VENTES END-EXEC

       ******************************************************************
       * DECLARATION DES HOSTS VARIABLES                                *
       ******************************************************************
        01  VE-VENTES.
            10 VE-CODEA                PIC X(4).
            10 VE-DATEVENTE            PIC X(10).
            10 VE-SIREN                PIC X(5).
            10 VE-QTE                  PIC S9(4) USAGE COMP.
            10 VE-PRIX                 PIC S9(6)V9(2) USAGE COMP-3.

       * INDICATEURS DE NULLITE
        01  VE-IND-QTE                 PIC S9(4) COMP VALUE ZEROES.
        01  VE-IND-PRIX                PIC S9(4) COMP VALUE ZEROES.

       * DECLARATION DU CURSEUR
            EXEC SQL DECLARE CURS CURSOR FOR
              SELECT CODEA,
                     DATEVENTE,
                     SIREN,
                     QTE,
                     PRIX
              FROM   VENTES
              ORDER BY CODEA, SIREN, DATEVENTE
            END-EXEC

        PROCEDURE DIVISION.
            PERFORM DEBUT
            PERFORM UNTIL FIN-CURS
               PERFORM TRT-LIGNE
               PERFORM FETCH-CURS
            END-PERFORM
            PERFORM FIN
            STOP RUN
            .

        DEBUT.
       * OUVERTURE DU CURSEUR
            EXEC SQL OPEN CURS END-EXEC

       * OUVERTURE DU FICHIER D'EDITION
            OPEN OUTPUT FEDIT
            IF FS NOT = ZEROES
              DISPLAY 'ERREUR OPEN FEDIT, FS : ' FS
              PERFORM FIN-ERREUR
            END-IF

            EVALUATE SQLCODE
             WHEN ZEROES
              CONTINUE
             WHEN OTHER
              MOVE SQLCODE TO SQLCODE-ED
              DISPLAY 'ERREUR OPEN CURS, SQLCODE : ' SQLCODE-ED
              PERFORM FIN-ERREUR
            END-EVALUATE

       * LECTURE DE LA 1ERE LIGNE
            PERFORM FETCH-CURS
             IF FIN-CURS
              DISPLAY 'PAS DE LIGNE DANS LE CURSEUR'
              PERFORM FIN-ERREUR
            END-IF
            .

        TRT-LIGNE.
            DISPLAY SPACES
            DISPLAY 'LIGNE ' CPT-LUS
       * AFFICHAGE DES HOSTS VARIABLES
            DISPLAY 'CODEA        : ' VE-CODEA
            DISPLAY 'DATEVENTE    : ' VE-DATEVENTE
            DISPLAY 'SIREN        : ' VE-SIREN

       * ECRITURE DANS LE FICHIER D'EDITION
            WRITE ENR-EDIT FROM VE-VENTES
             AFTER ADVANCING 2 LINES
            END-WRITE

       * TEST DE L'INDICATEUR POUR LA QUANTITE
            IF VE-IND-QTE = ZEROES
               MOVE VE-QTE    TO QTE-ED
            ELSE
               MOVE ZEROES    TO QTE-ED
            END-IF
            DISPLAY 'QTE          : ' QTE-ED

       * TEST DE L'INDICATEUR POUR LE PRIX
            IF VE-IND-PRIX = ZEROES
               MOVE VE-PRIX   TO PRIX-ED
            ELSE
               MOVE ZEROES    TO PRIX-ED
            END-IF
            DISPLAY 'PRIX         : ' PRIX-ED
            .

        FETCH-CURS.
            EXEC SQL FETCH CURS INTO
                 :VE-CODEA,
                 :VE-DATEVENTE,
                 :VE-SIREN,
                 :VE-QTE  :VE-IND-QTE,
                 :VE-PRIX :VE-IND-PRIX
            END-EXEC

            EVALUATE SQLCODE
             WHEN ZEROES
              ADD 1 TO CPT-LUS
             WHEN +100
              SET FIN-CURS TO TRUE
             WHEN OTHER
              MOVE SQLCODE TO SQLCODE-ED
              DISPLAY 'ERREUR FETCH CURS, SQLCODE : ' SQLCODE-ED
              PERFORM FIN-ERREUR
            END-EVALUATE
            .

        FIN-ERREUR.
            MOVE 17 TO RETURN-CODE
            DISPLAY 'FIN ANORMALE DU PROGRAMME'
            PERFORM FIN
            .

        FIN.
            DISPLAY 'CPT-LUS : ' CPT-LUS
            CLOSE FEDIT
            EXEC SQL CLOSE CURS END-EXEC
            .
 MEMBER NAME  A00KPGMD
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00KPGMD.
        AUTHOR. PIERRE.
       ******************************************************************
       *     CREATION D'UNE VENTE                                       *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
       * DESCRIPTION DE LA SQLCA
            EXEC SQL INCLUDE SQLCA END-EXEC

       * PICTURE EDITION
        77  SQLCODE-ED                 PIC +(8)9 VALUE ZEROES.

       * AUTRES HOSTS VARIABLES
        01  VE-VENTES.
            10 VE-CODEA                PIC X(4).
            10 VE-DATEVENTE            PIC X(10).
            10 VE-SIREN                PIC X(5).
            10 VE-QTE                  PIC S9(4) USAGE COMP.
            10 VE-PRIX                 PIC S9(6)V9(2) USAGE COMP-3.

       * DESCRIPTION DE LA TABLE VENTES
            EXEC SQL INCLUDE VENTES  END-EXEC

        PROCEDURE DIVISION.
       *CREER LA VENTE DE 200 ALBUMS 'T702' POUR LA MAISON
       *DE DISTRIBUTION '463CQ' EN DATE DU JOUR. LE PRIX EST AUGMENTE DE
       *DE 10% PAR RAPPORT A CELUI DE LA VENTE DU 20.12.1997
       * 1ERE FACON : EN UNE SEULE REQUETE SQL
            EXEC SQL
               INSERT INTO VENTES
                 (CODEA, DATEVENTE, SIREN, QTE, PRIX)
                 VALUES
                 ('T702', CURRENT DATE, '463CQ', 200,
                 (SELECT PRIX FROM VENTES
                 WHERE CODEA = 'T702'
                   AND DATEVENTE = '20.12.1997'
                   AND SIREN = '463CQ') * 1.1)
            END-EXEC
            EXEC SQL ROLLBACK END-EXEC

       * 2EME FACON : EN 2 TEMPS
            EXEC SQL
              SELECT PRIX INTO :VE-PRIX
                 FROM VENTES
                 WHERE CODEA     = 'T702'
                   AND DATEVENTE = '20.12.1997'
                   AND SIREN     = '463CQ'
            END-EXEC
            IF SQLCODE = ZERO
               COMPUTE VE-PRIX = VE-PRIX * 1,1
               EXEC SQL
                  INSERT INTO VENTES
                    (CODEA, DATEVENTE, SIREN, QTE, PRIX)
                    VALUES
                    ('T702', CURRENT DATE, '463CQ', 200, :VE-PRIX)
               END-EXEC
            END-IF

            STOP RUN.
 MEMBER NAME  A99CTDAT
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A99CTDAT.
        AUTHOR. OTEUR.
        DATE-WRITTEN. 29/03/2023.
       ******************************************************************
       *  FONCTION DU SOUS-PROGRAMME: CONTROLE ET FORMATAGE D'UNE DATE  *
       *  230329 : CREATION DU PROGRAMME                                *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
       * DESCRIPTION DE LA TABLE DES MOIS
        01  TAB-MOIS.
            05                 PIC X(11) VALUE '31JANVIER'.
            05                 PIC X(11) VALUE '28FEVRIER'.
            05                 PIC X(11) VALUE '31MARS'.
            05                 PIC X(11) VALUE '30AVRIL'.
            05                 PIC X(11) VALUE '31MAI'.
            05                 PIC X(11) VALUE '30JUIN'.
            05                 PIC X(11) VALUE '31JUILLET'.
            05                 PIC X(11) VALUE '31AOUT'.
            05                 PIC X(11) VALUE '30SEPTEMBRE'.
            05                 PIC X(11) VALUE '31OCTOBRE'.
            05                 PIC X(11) VALUE '30NOVEMBRE'.
            05                 PIC X(11) VALUE '31DECEMBRE'.
        01  REDEFINES TAB-MOIS.
            05 POSTE OCCURS 12.
               10 NB-JOURS     PIC 99.
               10 LIB-MOIS     PIC X(9).

       * ZONES POUR CALCUL ANNEE BISSEXTILE
        01  QUOTIENT           PIC 9(4)  VALUE ZEROES.
        01  RESTE              PIC 9(4)  VALUE ZEROES.

        LINKAGE SECTION.
       * DESCRIPTION DE LA ZONE DE COMMUNICATION AVEC LE PROGRAMME
       * APPELANT
        01  ZCOM.
            05 ZDATE.
               10 ZANNEE       PIC 9(4).
               10 ZMOIS        PIC 9(2).
               10 ZJOUR        PIC 9(2).
            05 ZCDRET          PIC 9.
               88 ZCDRET-OK    VALUE 0.
               88 ZCDRET-KO    VALUE 1.
            05 ZDATE-EDIT      PIC X(17).

        PROCEDURE DIVISION USING ZCOM.
            PERFORM CONTROLE-DATE
            IF ZCDRET-OK
               PERFORM FORMATAGE-DATE
            END-IF

            PERFORM FIN
            .
        CONTROLE-DATE.
            SET ZCDRET-KO TO TRUE

       * CONTROLE DE NUMERICITE DE LA DATE
            IF ZDATE NOT NUMERIC
               PERFORM FIN
            END-IF

       * CONTROLE DU MOIS
            IF ZMOIS < 1 OR > 12
               PERFORM FIN
            END-IF

       * CONTROLE NB JOURS FEVRIER
            IF ZMOIS = 2
               PERFORM ALIM-NB-JOURS-FEVRIER
            END-IF

       * CONTROLE DU JOUR DANS LA TABLE SELON LE MOIS SAISI QUI
       * CORRESPOND AU NUMERO DU POSTE DANS LA TABLE
            IF ZJOUR < 1 OR > NB-JOURS(ZMOIS)
               PERFORM FIN
            END-IF

       * SI PAS D'ERREUR METTRE 0 DANS CODE RETOUR
            SET ZCDRET-OK TO TRUE
            .

        ALIM-NB-JOURS-FEVRIER.
       * - LES ANNEES DIVISIBLES PAR 400 SONT BISSEXTILES

       * - LES CENTENAIRES NE SONT PAS BISSEXTILES
       * - LES ANNEES DIVISIBLES PAR 4 SONT BISSEXTILES
       *    DIVIDE ZANNEE BY 4 GIVING QUOTIENT REMAINDER RESTE

            IF FUNCTION REM(ZANNEE, 400) = ZEROES
               ADD 1 TO NB-JOURS(2)
               DISPLAY '       ' ZANNEE ' BISSEXTILE'
            ELSE
               IF FUNCTION REM(ZANNEE, 100) = ZEROES
                  DISPLAY '       ' ZANNEE ' NON BISSEXTILE'
               ELSE
                  IF FUNCTION REM(ZANNEE, 4) = ZEROES
                     ADD 1 TO NB-JOURS(2)
                     DISPLAY '       ' ZANNEE ' BISSEXTILE'
                  ELSE
                     DISPLAY '       ' ZANNEE ' NON BISSEXTILE'
                  END-IF
               END-IF
            END-IF
            .


        FORMATAGE-DATE.
            STRING ZJOUR           DELIMITED BY SIZE
                   SPACES          DELIMITED BY SIZE
                   LIB-MOIS(ZMOIS) DELIMITED BY SPACES
                   SPACES          DELIMITED BY SIZE
                   ZANNEE          DELIMITED BY SIZE
            INTO ZDATE-EDIT
            .

        FIN.
            GOBACK
            .
 MEMBER NAME  A99PDAT
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A99PDAT.
        AUTHOR. OTEUR.
        DATE-WRITTEN. 28/03/2023.
       ******************************************************************
       *  FONCTION DU PROGRAMME :  PROGRAMME APPELANT                   *
       *  230328 : CREATION DU PROGRAMME                                *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01  A99CTDAT       PIC X(8) VALUE 'A99CTDAT'.

       * DESCRIPTION DE LA ZONE DE COMMUNICATION AVEC LE SOUS-PROGRAMME
       * DE CONTROLE DE LA DATE
        01  ZCOM.
            05 ZDATE.
               10 ZANNEE       PIC 9(4).
               10 ZMOIS        PIC 9(2).
               10 ZJOUR        PIC 9(2).
            05 ZCDRET          PIC 9.
               88 ZCDRET-OK    VALUE 0.
               88 ZCDRET-KO    VALUE 1.
            05 ZDATE-EDIT      PIC X(17).

        PROCEDURE DIVISION.
       * CONSTITUTION DU JEU DE TESTS
       * ---> DATES INVALIDES
            INITIALIZE ZCOM
            MOVE 'ABCDEFGH'       TO ZDATE
            PERFORM APPEL-A99CTDAT

            INITIALIZE ZCOM
            MOVE '21000001'       TO ZDATE
            PERFORM APPEL-A99CTDAT

            INITIALIZE ZCOM
            MOVE '21001301'       TO ZDATE
            PERFORM APPEL-A99CTDAT

            INITIALIZE ZCOM
            MOVE '21000500'       TO ZDATE
            PERFORM APPEL-A99CTDAT

            INITIALIZE ZCOM
            MOVE '21000532'       TO ZDATE
            PERFORM APPEL-A99CTDAT

            INITIALIZE ZCOM
            MOVE '20230229'       TO ZDATE
            PERFORM APPEL-A99CTDAT

            INITIALIZE ZCOM
            MOVE '21000229'       TO ZDATE
            PERFORM APPEL-A99CTDAT

       * ---> DATES VALIDES
            INITIALIZE ZCOM
            MOVE '20230301'       TO ZDATE
            PERFORM APPEL-A99CTDAT

            INITIALIZE ZCOM
            MOVE '20230430'       TO ZDATE
            PERFORM APPEL-A99CTDAT

            INITIALIZE ZCOM
            MOVE '20230228'       TO ZDATE
            PERFORM APPEL-A99CTDAT

            INITIALIZE ZCOM
            MOVE '20000229'       TO ZDATE
            PERFORM APPEL-A99CTDAT

            INITIALIZE ZCOM
            MOVE '20240229'       TO ZDATE
            PERFORM APPEL-A99CTDAT

            STOP RUN
            .

        APPEL-A99CTDAT.
            DISPLAY '-----------------------------------'
            DISPLAY 'ZDATE : ' ZDATE

            CALL A99CTDAT USING ZCOM

            EVALUATE TRUE
             WHEN ZCDRET-OK
                  DISPLAY '       DATE VALIDE'
                  DISPLAY '       ZDATE-EDIT : ' ZDATE-EDIT
             WHEN ZCDRET-KO
                  DISPLAY '       DATE INVALIDE'
            END-EVALUATE

            .
 MEMBER NAME  A00ZPGMD
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00ZPGMD.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 14/12/2023.
       ******************************************************************
       *         REINITIALISATION DE LA BASE                            *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
       * SQLCA
            EXEC SQL INCLUDE SQLCA   END-EXEC.

            EXEC SQL INCLUDE ALBUM    END-EXEC.
            EXEC SQL INCLUDE CHANSON  END-EXEC.
            EXEC SQL INCLUDE PERSONNE END-EXEC.
            EXEC SQL INCLUDE MAISON   END-EXEC.
            EXEC SQL INCLUDE CONTRAT  END-EXEC.
            EXEC SQL INCLUDE VENTES   END-EXEC.
            EXEC SQL INCLUDE CONCERT  END-EXEC.

        PROCEDURE DIVISION.
       *  VIDAGE DES TABLES
            EXEC SQL DELETE FROM CHANSON     END-EXEC
            EXEC SQL DELETE FROM CONTRAT     END-EXEC
            EXEC SQL DELETE FROM VENTES      END-EXEC
            EXEC SQL DELETE FROM CONCERT     END-EXEC
            EXEC SQL DELETE FROM ALBUM       END-EXEC
            EXEC SQL DELETE FROM PERSONNE    END-EXEC
            EXEC SQL DELETE FROM MAISON_DIST END-EXEC

       *  ALIMENTATION DES TABLES
            EXEC SQL
              INSERT INTO ALBUM       (SELECT * FROM SYSDB2.ALBUM)
            END-EXEC
            EXEC SQL
              INSERT INTO CHANSON     (SELECT * FROM SYSDB2.CHANSON)
            END-EXEC
            EXEC SQL
              INSERT INTO PERSONNE    (SELECT * FROM SYSDB2.PERSONNE)
            END-EXEC
            EXEC SQL
              INSERT INTO MAISON_DIST (SELECT * FROM SYSDB2.MAISON_DIST)
            END-EXEC
            EXEC SQL
              INSERT INTO CONTRAT     (SELECT * FROM SYSDB2.CONTRAT)
            END-EXEC
            EXEC SQL
              INSERT INTO VENTES      (SELECT * FROM SYSDB2.VENTES)
            END-EXEC
            EXEC SQL
              INSERT INTO CONCERT     (SELECT * FROM SYSDB2.CONCERT)
            END-EXEC
            STOP RUN.
 MEMBER NAME  A00SP7
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00SP7.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 17/12/2023.
       ******************************************************************
       * SOUS-PROGRAMME DE CREATION D'UN CONTRAT                        *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
       * SQLCA
            EXEC SQL INCLUDE SQLCA    END-EXEC

       * TABLE ALBUM
            EXEC SQL INCLUDE ALBUM    END-EXEC

       * TABLE MAISON
            EXEC SQL INCLUDE MAISON   END-EXEC

       * TABLE PERSONNE
            EXEC SQL INCLUDE PERSONNE END-EXEC

       * TABLE CONTRAT
            EXEC SQL INCLUDE CONTRAT  END-EXEC

       * INDICATEURS
        01                     PIC X VALUE SPACES.
            88 ALBUM-TROUVE          VALUE '0'.
            88 ALBUM-NON-TROUVE      VALUE '1'.

        01                     PIC X VALUE SPACES.
            88 MAISON-TROUVEE        VALUE '0'.
            88 MAISON-NON-TROUVEE    VALUE '1'.

        01                     PIC X VALUE SPACES.
            88 PERSONNE-TROUVEE      VALUE '0'.
            88 PERSONNE-NON-TROUVEE  VALUE '1'.

       * PICTURES D'EDITION
        01  SQLCODE-ED         PIC +(3)9 VALUE ZEROES.

       * TABLE DES ERREURS
        01  TABERR.
            05 PIC X(55) VALUE 'ALBUM NON RENSEIGNE OU INEXISTANT'.
            05 PIC X(55) VALUE 'CODE ALBUM ET TITRE RENSEIGNES'.
            05 PIC X(55) VALUE 'MAISON DIST NON RENSEIGNEE OU INEX'.
            05 PIC X(55) VALUE 'CODE MAISON ET RAISON SOCIALE RENS'.
            05 PIC X(55) VALUE 'PERSONNE NON RENSEIGNE OU INEXISTANTE'.
            05 PIC X(55) VALUE 'CODE PERSONNE ET IDENTITE RENSEIGNES'.
            05 PIC X(55) VALUE 'CONTRAT DEJA EXISTANT'.
            05 PIC X(55) VALUE 'DATE DE SIGNATURE INVALIDE'.
            05 PIC X(55) VALUE 'FONCTION INVALIDE'.
            05 PIC X(55) VALUE 'DROITS INVALIDES'.
            05 PIC X(55) VALUE 'ERREUR TECHNIQUE'.
        01  REDEFINES TABERR.
            05 P-ERR PIC X(55) OCCURS 11.

       * DIVERS
        01  WS-MOYENNE-DROITS  PIC S9(3)V99 COMP-3 VALUE ZEROES.
        01  WS-DROITS-MIN      PIC S9(3)V99 COMP-3 VALUE ZEROES.
        01  WS-DROITS-MAX      PIC S9(3)V99 COMP-3 VALUE ZEROES.
        01  WS-DROITS-MAX-ED   PIC +(3),99         VALUE ZEROES.
        01  WS-DROITS-MIN-ED   PIC +(3),99         VALUE ZEROES.

       * ZONE DE COMMUNICATION AVEC LE MODULE DE CONTROLE DE DATE
            EXEC SQL INCLUDE ZCOMDAT END-EXEC

        LINKAGE SECTION.
       * COPY DE LA ZONE DE COMMUNICATION AVEC A00SP7
            EXEC SQL INCLUDE ZSP7 END-EXEC.

        PROCEDURE DIVISION USING ZSP7.
            PERFORM CONTROLES
            PERFORM CREATION-CONTRAT
            GOBACK
            .

        CONTROLES.
            PERFORM CTRL-ALBUM
            PERFORM CTRL-MAISON
            PERFORM CTRL-PERSONNE
            PERFORM CTRL-FONCTION
            PERFORM CTRL-CONTRAT
            PERFORM CTRL-DROITS
            PERFORM CTRL-DATESIGN
            .

        CTRL-ALBUM.
       * CONTROLE CODEA ET TITREA
       * --> 1 SEUL EST OBLIGATOIRE, DOIT EXISTER EN TABLE
       * GERER LES ERREURS :
       *   1 - ALBUM NON RENSEIGNE OU INEXISTANT
       *   2 - CODE ALBUM ET TITRE RENSEIGNES
            EVALUATE TRUE
              WHEN ZSP7-CODEA = SPACES AND ZSP7-TITREA = SPACES
                MOVE 1 TO ZSP7-CODRET
                PERFORM FIN-ERREUR
              WHEN ZSP7-CODEA NOT = SPACES AND ZSP7-TITREA NOT = SPACES
                MOVE 2 TO ZSP7-CODRET
                PERFORM FIN-ERREUR
              WHEN OTHER
                PERFORM SELECT-ALBUM
                IF ALBUM-NON-TROUVE
                   MOVE 1 TO ZSP7-CODRET
                   PERFORM FIN-ERREUR
                END-IF
            END-EVALUATE
            .

        SELECT-ALBUM.
            MOVE ZSP7-CODEA  TO AL-CODEA
            MOVE ZSP7-TITREA TO AL-TITREA-TEXT
            MOVE +30         TO AL-TITREA-LEN
            EXEC SQL SELECT
                 CODEA INTO :AL-CODEA
                 FROM ALBUM
                 WHERE CODEA  = :AL-CODEA
                    OR TITREA = :AL-TITREA
            END-EXEC
            EVALUATE SQLCODE
              WHEN ZEROES
                SET ALBUM-TROUVE       TO TRUE
              WHEN +100
                SET ALBUM-NON-TROUVE   TO TRUE
              WHEN OTHER
                MOVE SQLCODE TO SQLCODE-ED
                DISPLAY 'ERREUR SELECT ALBUM, SQLCODE : ' SQLCODE-ED
                MOVE 11 TO ZSP7-CODRET
                PERFORM FIN-ERREUR
            END-EVALUATE
            .

        CTRL-MAISON.
       * CONTROLE SIREN ET RAISON SOCIALE
       * --> 1 SEUL EST OBLIGATOIRE, DOIT EXISTER EN TABLE
       * GERER LES ERREURS :
       *   3 - MAISON DIST NON RENSEIGNEE OU INEX
       *   4 - CODE MAISON ET RAISON SOCIALE RENS
            EVALUATE TRUE
              WHEN ZSP7-SIREN = SPACES AND ZSP7-RAISON-SOCIALE = SPACES
                MOVE 3 TO ZSP7-CODRET
                PERFORM FIN-ERREUR
              WHEN ZSP7-SIREN          NOT = SPACES
               AND ZSP7-RAISON-SOCIALE NOT = SPACES
                MOVE 4 TO ZSP7-CODRET
                PERFORM FIN-ERREUR
              WHEN OTHER
                PERFORM SELECT-MAISON
                IF MAISON-NON-TROUVEE
                   MOVE 3 TO ZSP7-CODRET
                   PERFORM FIN-ERREUR
                END-IF
            END-EVALUATE
            .

        SELECT-MAISON.
            MOVE ZSP7-SIREN          TO MD-SIREN
            MOVE ZSP7-RAISON-SOCIALE TO MD-RAISON-SOCIALE
            EXEC SQL SELECT
                 SIREN INTO :MD-SIREN
                 FROM MAISON_DIST
                 WHERE SIREN          = :MD-SIREN
                    OR RAISON_SOCIALE = :MD-RAISON-SOCIALE
            END-EXEC
            EVALUATE SQLCODE
              WHEN ZEROES
                SET MAISON-TROUVEE     TO TRUE
              WHEN +100
                SET MAISON-NON-TROUVEE TO TRUE
              WHEN OTHER
                MOVE SQLCODE TO SQLCODE-ED
                DISPLAY 'ERREUR SELECT MAISON, SQLCODE : ' SQLCODE-ED
                MOVE 11 TO ZSP7-CODRET
                PERFORM FIN-ERREUR
            END-EVALUATE
            .

        CTRL-PERSONNE.
       * CONTROLE CODEP ET IDENTITE
       * --> 1 SEUL EST OBLIGATOIRE, DOIT EXISTER EN TABLE
       * GERER LES ERREURS :
       *   5 - PERSONNE NON RENSEIGNE OU INEXISTANTE
       *   6 - CODE PERSONNE ET IDENTITE RENSEIGNES
            EVALUATE TRUE
              WHEN ZSP7-CODEP = SPACES AND ZSP7-IDENTITE = SPACES
                MOVE 5 TO ZSP7-CODRET
                PERFORM FIN-ERREUR
              WHEN ZSP7-CODEP    NOT = SPACES
               AND ZSP7-IDENTITE NOT = SPACES
                MOVE 6 TO ZSP7-CODRET
                PERFORM FIN-ERREUR
              WHEN OTHER
                PERFORM SELECT-PERSONNE
                IF PERSONNE-NON-TROUVEE
                   MOVE 5 TO ZSP7-CODRET
                   PERFORM FIN-ERREUR
                END-IF
            END-EVALUATE
            .

        SELECT-PERSONNE.
            MOVE ZSP7-CODEP    TO PE-CODEP
            MOVE ZSP7-IDENTITE TO PE-IDENTITE-TEXT
            MOVE +25           TO PE-IDENTITE-LEN
            EXEC SQL SELECT
                 CODEP INTO :PE-CODEP
                 FROM PERSONNE
                 WHERE CODEP    = :PE-CODEP
                    OR IDENTITE = :PE-IDENTITE
            END-EXEC
            EVALUATE SQLCODE
              WHEN ZEROES
                SET PERSONNE-TROUVEE     TO TRUE
              WHEN +100
                SET PERSONNE-NON-TROUVEE TO TRUE
              WHEN OTHER
                MOVE SQLCODE TO SQLCODE-ED
                DISPLAY 'ERREUR SELECT PERSONNE, SQLCODE : ' SQLCODE-ED
                MOVE 11 TO ZSP7-CODRET
                PERFORM FIN-ERREUR
            END-EVALUATE
            .

        CTRL-CONTRAT.
       * CONTROLE EXISTENCE CONTRAT
       * --> NE DOIT PAS EXISTER EN TABLE
       * GERER LES ERREURS :
       *   7 - CONTRAT DEJA EXISTANT
            MOVE AL-CODEA        TO CT-CODEA
            MOVE MD-SIREN        TO CT-SIREN
            MOVE PE-CODEP        TO CT-CODEP
            MOVE ZSP7-FONCTION   TO CT-FONCTION
            EXEC SQL
              SELECT DROITS
              INTO   :CT-DROITS
              FROM   CONTRAT
              WHERE  CODEA     = :CT-CODEA
                AND  SIREN     = :CT-SIREN
                AND  CODEP     = :CT-CODEP
                AND  FONCTION  = :CT-FONCTION
            END-EXEC
            EVALUATE SQLCODE
              WHEN ZEROES
       * CONTRAT TROUVE : ERREUR, CONTRAT DEJA EXISTANT
                MOVE  7 TO ZSP7-CODRET
                PERFORM FIN-ERREUR
              WHEN +100
       * CONTRAT NON TROUVE : ON VA POUVOIR LE CREER
                CONTINUE
              WHEN OTHER
                MOVE SQLCODE TO SQLCODE-ED
                DISPLAY 'ERREUR SELECT CONTRAT, SQLCODE : ' SQLCODE-ED
                MOVE 11 TO ZSP7-CODRET
                PERFORM FIN-ERREUR
            END-EVALUATE
            .

        CTRL-DATESIGN.
       * CONTROLE DATE DE SIGNATURE
       * --> OBLIGATOIRE, NUMERIQUE, COHERENTE, >= DATE JOUR
       * GERER LES ERREURS :
       *   8 - DATE DE SIGNATURE INVALIDE
            INITIALIZE ZCOM
            MOVE ZSP7-DATESIGN TO ZDATE
            CALL 'A99CTDAT' USING ZCOM
            IF ZCDRET-KO
               MOVE  8 TO ZSP7-CODRET
               PERFORM FIN-ERREUR
            END-IF
            .

        CTRL-FONCTION.
       * CONTROLE FONCTION
       * --> OBLIGATOIRE, = I, D, P OU C
       * GERER LES ERREURS :
       *   9 - FONCTION INVALIDE
            IF ZSP7-FONCTION NOT = 'I'
                             AND 'P'
                             AND 'D'
                             AND 'C'
                MOVE  9 TO ZSP7-CODRET
                PERFORM FIN-ERREUR
            END-IF
            .

        CTRL-DROITS.
       * CONTROLE DROITS
       * --> OBLIGATOIRE, NUMERIQUE, > 0, PAS PLUS DE 10%
       * --> D'ECART
       * GERER LES ERREURS :
       *  10 - DROITS INVALIDES
            IF ZSP7-DROITS NOT NUMERIC
            OR ZSP7-DROITS = ZEROES
               MOVE 10 TO ZSP7-CODRET
               PERFORM FIN-ERREUR
            END-IF

       * RECHERCHE DE LA MOYENNE DES DROITS POUR LA PERSONNE ET LA
       * FONCTION
            MOVE PE-CODEP      TO CT-CODEP
            MOVE ZSP7-FONCTION TO CT-FONCTION
            MOVE ZEROES        TO WS-MOYENNE-DROITS
            EXEC SQL
              SELECT AVG(DROITS)
              INTO   :WS-MOYENNE-DROITS
              FROM   CONTRAT
              WHERE  CODEP     = :CT-CODEP
                AND  FONCTION  = :CT-FONCTION
            END-EXEC
            EVALUATE SQLCODE
              WHEN ZEROES
       * MOYENNE TROUVEE ON PASSE AU CALCUL DES 10%
                CONTINUE
              WHEN +100
       * MOYENNE NON TROUVEE: ON VA RECHERCHER LA MOYENNE POUR LA
       * FONCTION
                PERFORM RECH-MOYENNE-FONCTION
              WHEN OTHER
                MOVE SQLCODE TO SQLCODE-ED
                DISPLAY 'ERREUR RECH MOYENNE 1, SQLCODE : ' SQLCODE-ED
                MOVE 11 TO ZSP7-CODRET
                PERFORM FIN-ERREUR
            END-EVALUATE

       * CONTROLE DES 10% PAR RAPPORT A LA MOYENNE
            COMPUTE WS-DROITS-MAX =
                    WS-MOYENNE-DROITS * 1,1
            COMPUTE WS-DROITS-MIN =
                    WS-MOYENNE-DROITS * 0,9

            MOVE WS-DROITS-MIN TO WS-DROITS-MIN-ED
            DISPLAY 'DROITS-MIN : ' WS-DROITS-MIN-ED
            MOVE WS-DROITS-MAX TO WS-DROITS-MAX-ED
            DISPLAY 'DROITS-MAX : ' WS-DROITS-MAX-ED

            IF ZSP7-DROITS > WS-DROITS-MAX
            OR ZSP7-DROITS < WS-DROITS-MIN
               MOVE 10 TO ZSP7-CODRET
               PERFORM FIN-ERREUR
            END-IF
            .

        RECH-MOYENNE-FONCTION.
       * RECHERCHE DE LA MOYENNE DES DROITS POUR LA FONCTION
            MOVE ZSP7-FONCTION TO CT-FONCTION
            MOVE ZEROES        TO WS-MOYENNE-DROITS
            EXEC SQL
              SELECT AVG(DROITS)
              INTO   :WS-MOYENNE-DROITS
              FROM   CONTRAT
              WHERE  FONCTION  = :CT-FONCTION
            END-EXEC
            EVALUATE SQLCODE
              WHEN ZEROES
       * MOYENNE TROUVEE ON PASSE AU CONTROLE DES 10%
                CONTINUE
              WHEN +100
       * MOYENNE NON TROUVEE, ON MET LES DROITS DEMANDES DANS LA MOYENNE
                MOVE ZSP7-DROITS TO WS-MOYENNE-DROITS
              WHEN OTHER
                MOVE SQLCODE TO SQLCODE-ED
                DISPLAY 'ERREUR RECH MOYENNE 2, SQLCODE : ' SQLCODE-ED
                MOVE 11 TO ZSP7-CODRET
                PERFORM FIN-ERREUR
            END-EVALUATE
            .

        CREATION-CONTRAT.
       * CREATION D'UNE LIGNE DANS LA TABLE
            MOVE AL-CODEA         TO CT-CODEA
            MOVE MD-SIREN         TO CT-SIREN
            MOVE PE-CODEP         TO CT-CODEP
            MOVE ZSP7-FONCTION    TO CT-FONCTION
            MOVE ZSP7-DROITS      TO CT-DROITS
            STRING ZSP7-DATESIGN (7:2)
                   '.'
                   ZSP7-DATESIGN (5:2)
                   '.'
                   ZSP7-DATESIGN (1:4) DELIMITED BY SIZE
                                INTO CT-DATESIGN
            END-STRING

            EXEC SQL INSERT INTO CONTRAT VALUES
             (:CT-CODEA,
              :CT-SIREN,
              :CT-CODEP,
              :CT-DROITS,
              :CT-DATESIGN,
              :CT-FONCTION)
            END-EXEC
            IF SQLCODE NOT = ZEROES
               MOVE SQLCODE TO SQLCODE-ED
               DISPLAY 'ERREUR INSERT CONTRAT, SQLCODE : ' SQLCODE-ED
               MOVE 11 TO ZSP7-CODRET
            END-IF

            MOVE ZEROES TO ZSP7-CODRET
            MOVE 'CREATION BIEN EFFECTUEE' TO ZSP7-LIBERR
            .

        FIN-ERREUR.
            MOVE P-ERR(ZSP7-CODRET) TO ZSP7-LIBERR
            GOBACK
            .
 MEMBER NAME  A00MPGMD
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00MPGMD.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 17/12/2023.
       ******************************************************************
       * PROGRAMME DE TEST DE A00SP1                                    *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
       * SQLCA
            EXEC SQL INCLUDE SQLCA END-EXEC

       * COPY DE LA ZONE DE COMMUNICATION AVEC A00SP7
            COPY ZSP7.

       * DIVERS
        01  WS-CAS                      PIC 99       VALUE ZEROES.
        01  WS-RESULTAT-ATTENDU         PIC X(50)    VALUE SPACES.

        PROCEDURE DIVISION.
       * CAS 1
       * CREATION BIEN EFFECTUEE
            INITIALIZE ZSP7
            MOVE 'C109'                    TO ZSP7-CODEA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'P190'                    TO ZSP7-CODEP
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'I'                       TO ZSP7-FONCTION
            MOVE 5,1                       TO ZSP7-DROITS
            MOVE 'CREATION BIEN EFFECTUEE' TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

            EXEC SQL ROLLBACK END-EXEC

       * CAS 2
       * CREATION BIEN EFFECTUEE
            INITIALIZE ZSP7
            MOVE 'COMPILATION 90'          TO ZSP7-TITREA
            MOVE 'MUSIDISQUES'             TO ZSP7-RAISON-SOCIALE
            MOVE 'BRASSENS G.'             TO ZSP7-IDENTITE
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'C'                       TO ZSP7-FONCTION
            MOVE 22                        TO ZSP7-DROITS
            MOVE 'CREATION BIEN EFFECTUEE' TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

            EXEC SQL ROLLBACK END-EXEC

       * CAS 3
       * ALBUM INEXISTANT
            INITIALIZE ZSP7
            MOVE 'AAAA'                    TO ZSP7-CODEA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'P190'                    TO ZSP7-CODEP
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'I'                       TO ZSP7-FONCTION
            MOVE 5,1                       TO ZSP7-DROITS
            MOVE 'ALBUM INEXISTANT'        TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 4
       * ALBUM INEXISTANT
            INITIALIZE ZSP7
            MOVE 'AAAAAAAAAAAAAA'          TO ZSP7-TITREA
            MOVE 'MUSIDISQUES'             TO ZSP7-RAISON-SOCIALE
            MOVE 'BRASSENS G.'             TO ZSP7-IDENTITE
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'C'                       TO ZSP7-FONCTION
            MOVE 5,1                       TO ZSP7-DROITS
            MOVE 'ALBUM INEXISTANT'        TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 5
       * CODE ALBUM ET TITRE RENSEIGNES
            INITIALIZE ZSP7
            MOVE 'C109'                    TO ZSP7-CODEA
            MOVE 'COMPILATION 90'          TO ZSP7-TITREA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'P190'                    TO ZSP7-CODEP
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'I'                       TO ZSP7-FONCTION
            MOVE 5,1                       TO ZSP7-DROITS
            MOVE 'CODE ALBUM ET TITRE RENSEIGNES' TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 6
       * MAISON DE DISTRIBUTION INEXISTANTE
            INITIALIZE ZSP7
            MOVE 'C109'                    TO ZSP7-CODEA
            MOVE 'AAAAA'                   TO ZSP7-SIREN
            MOVE 'P190'                    TO ZSP7-CODEP
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'I'                       TO ZSP7-FONCTION
            MOVE 5,1                       TO ZSP7-DROITS
            MOVE 'MAISON DIST INEXISTANTE' TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 7
       * MAISON DE DISTRIBUTION INEXISTANTE
            INITIALIZE ZSP7
            MOVE 'COMPILATION 90'          TO ZSP7-TITREA
            MOVE 'AAAAAAAAAAA'             TO ZSP7-RAISON-SOCIALE
            MOVE 'BRASSENS G.'             TO ZSP7-IDENTITE
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'C'                       TO ZSP7-FONCTION
            MOVE 5,1                       TO ZSP7-DROITS
            MOVE 'MAISON DIST INEXISTANTE' TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 8
       * CODE MAISON ET RAISON SOCIALE RENSEIGNES
            INITIALIZE ZSP7
            MOVE 'COMPILATION 90'          TO ZSP7-TITREA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'MUSIDISQUES'             TO ZSP7-RAISON-SOCIALE
            MOVE 'BRASSENS G.'             TO ZSP7-IDENTITE
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'C'                       TO ZSP7-FONCTION
            MOVE 5,1                       TO ZSP7-DROITS
            MOVE 'CODE MAISON ET RAISON RENS' TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 9
       * PERSONNE INEXISTANTE
            INITIALIZE ZSP7
            MOVE 'C109'                    TO ZSP7-CODEA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'AAAA'                    TO ZSP7-CODEP
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'I'                       TO ZSP7-FONCTION
            MOVE 5,1                       TO ZSP7-DROITS
            MOVE 'PERSONNE INEXISTANTE'    TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 10
       * PERSONNE INEXISTANTE
            INITIALIZE ZSP7
            MOVE 'COMPILATION 90'          TO ZSP7-TITREA
            MOVE 'MUSIDISQUES'             TO ZSP7-RAISON-SOCIALE
            MOVE 'AAAAAAAAAAA'             TO ZSP7-IDENTITE
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'C'                       TO ZSP7-FONCTION
            MOVE 5,1                       TO ZSP7-DROITS
            MOVE 'PERSONNE INEXISTANTE'    TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 11
       * CODE PERSONNE ET IDENTITE RENSEIGNES
            INITIALIZE ZSP7
            MOVE 'C109'                    TO ZSP7-CODEA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'P190'                    TO ZSP7-CODEP
            MOVE 'BRASSENS G.'             TO ZSP7-IDENTITE
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'I'                       TO ZSP7-FONCTION
            MOVE 5,1                       TO ZSP7-DROITS
            MOVE 'CODE PERSONNE ET IDENTITE RENSEIGNES'
                                           TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 12
       * CONTRAT DEJA EXISTANT
            INITIALIZE ZSP7
            MOVE 'A836'                    TO ZSP7-CODEA
            MOVE '200AJ'                   TO ZSP7-SIREN
            MOVE 'P150'                    TO ZSP7-CODEP
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'D'                       TO ZSP7-FONCTION
            MOVE 5,1                       TO ZSP7-DROITS
            MOVE 'CONTRAT DEJA EXISTANT'   TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 13
       * DATE DE SIGNATURE INVALIDE
            INITIALIZE ZSP7
            MOVE 'C109'                    TO ZSP7-CODEA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'P190'                    TO ZSP7-CODEP
            MOVE 'AAAAAAAA'                TO ZSP7-DATESIGN
            MOVE 'I'                       TO ZSP7-FONCTION
            MOVE 5,1                       TO ZSP7-DROITS
            MOVE 'DATE SIGNATURE INVALIDE' TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 14
       * DATE DE SIGNATURE INVALIDE
            INITIALIZE ZSP7
            MOVE 'C109'                    TO ZSP7-CODEA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'P190'                    TO ZSP7-CODEP
            MOVE '99999999'                TO ZSP7-DATESIGN
            MOVE 'I'                       TO ZSP7-FONCTION
            MOVE 5,1                       TO ZSP7-DROITS
            MOVE 'DATE SIGNATURE INVALIDE' TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 15
       * FONCTION INVALIDE
            INITIALIZE ZSP7
            MOVE 'C109'                    TO ZSP7-CODEA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'P190'                    TO ZSP7-CODEP
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'A'                       TO ZSP7-FONCTION
            MOVE 5,1                       TO ZSP7-DROITS
            MOVE 'FONCTION INVALIDE'       TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 16
       * DROITS INVALIDES
            INITIALIZE ZSP7
            MOVE 'C109'                    TO ZSP7-CODEA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'P190'                    TO ZSP7-CODEP
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'I'                       TO ZSP7-FONCTION
            MOVE ZEROES                    TO ZSP7-DROITS
            MOVE 'DROITS INVALIDES'        TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

       * CAS 17
       * DROITS INVALIDES
            INITIALIZE ZSP7
            MOVE 'C109'                    TO ZSP7-CODEA
            MOVE '950RJ'                   TO ZSP7-SIREN
            MOVE 'P190'                    TO ZSP7-CODEP
            MOVE '20231231'                TO ZSP7-DATESIGN
            MOVE 'I'                       TO ZSP7-FONCTION
            MOVE 7                         TO ZSP7-DROITS
            MOVE 'DROITS INVALIDES'        TO WS-RESULTAT-ATTENDU
            PERFORM APPEL-SSPROG

            STOP RUN
            .

        APPEL-SSPROG.
            DISPLAY SPACES
            ADD 1 TO WS-CAS
            DISPLAY ' CAS : ' WS-CAS
            DISPLAY '   ALBUM   : ' ZSP7-CODEA ', ' ZSP7-TITREA
            DISPLAY '   MAISON  : ' ZSP7-SIREN ', ' ZSP7-RAISON-SOCIALE
            DISPLAY '   PERSONNE: ' ZSP7-CODEP ', ' ZSP7-IDENTITE
            DISPLAY '   DROITS  : ' ZSP7-DROITS
            DISPLAY '   DATESIGN: ' ZSP7-DATESIGN
            DISPLAY '   FONCTION: ' ZSP7-FONCTION
            DISPLAY '   RESULTAT ATTENDU : ' WS-RESULTAT-ATTENDU

            CALL 'A00SP7' USING ZSP7

            DISPLAY '   RESULTAT OBSERVE : ' ZSP7-CODRET ' ' ZSP7-LIBERR
            .
 MEMBER NAME  A00FMAPA
 A00FMAP DFHMSD TYPE=&SYSPARM,MODE=INOUT,LANG=COBOL,EXTATT=YES,         X
                CTRL=(FREEKB,FRSET),STORAGE=AUTO,TIOAPFX=YES
 A00FMAP DFHMDI COLUMN=1,LINE=1,SIZE=(24,80)
         DFHMDF POS=(1,1),ATTRB=ASKIP,LENGTH=04,INITIAL='A00F'
         DFHMDF POS=(1,23),ATTRB=ASKIP,LENGTH=17,                       X
                INITIAL='REPONSE DU JOUEUR'
         DFHMDF POS=(1,65),ATTRB=ASKIP,LENGTH=07,INITIAL='A00FMAP'
         DFHMDF POS=(2,59),ATTRB=ASKIP,LENGTH=6,INITIAL='DATE :'
 DATEJ   DFHMDF POS=(2,66),ATTRB=(ASKIP,FSET),LENGTH=10
         DFHMDF POS=(4,05),ATTRB=ASKIP,LENGTH=12,                       X
                INITIAL='CODE JEU   :'
 CODEJ   DFHMDF POS=(4,18),ATTRB=(UNPROT,FSET,IC),LENGTH=5
         DFHMDF POS=(4,24),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(4,30),ATTRB=ASKIP,LENGTH=19,                       X
                INITIAL='USER DE CREATION  :'
 UCREA   DFHMDF POS=(4,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=8
         DFHMDF POS=(05,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NUM REP    :'
 NOREP   DFHMDF POS=(05,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(05,21),ATTRB=ASKIP,LENGTH=1,INITIAL='/'
 NBREM   DFHMDF POS=(05,23),ATTRB=(ASKIP,BRT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(05,30),ATTRB=ASKIP,LENGTH=19,                      X
                INITIAL='STATUT DU JEU     :'
 STATU   DFHMDF POS=(05,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 LSTATU  DFHMDF POS=(05,52),ATTRB=(ASKIP,BRT,FSET),LENGTH=10
         DFHMDF POS=(06,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='GAGNANT    :'
 GAGNANT DFHMDF POS=(06,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=8
         DFHMDF POS=(06,30),ATTRB=ASKIP,LENGTH=19,                      X
                INITIAL='NB POINTS GAGNES  :'
 NPOIN   DFHMDF POS=(06,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(07,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='BAT TOUCHES:'
 BTOUCH  DFHMDF POS=(07,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
         DFHMDF POS=(07,30),ATTRB=ASKIP,LENGTH=19,                      X
                INITIAL='BAT COULES        :'
 BCOULE  DFHMDF POS=(07,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
         DFHMDF POS=(11,23),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='A B C D E F'
         DFHMDF POS=(12,21),ATTRB=ASKIP,LENGTH=01,INITIAL='1'
 L1A     DFHMDF POS=(12,23),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 L1B     DFHMDF POS=(12,25),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 L1C     DFHMDF POS=(12,27),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 L1D     DFHMDF POS=(12,29),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 L1E     DFHMDF POS=(12,31),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 L1F     DFHMDF POS=(12,33),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
         DFHMDF POS=(13,21),ATTRB=ASKIP,LENGTH=01,INITIAL='2'
 L2A     DFHMDF POS=(13,23),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 L2B     DFHMDF POS=(13,25),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 L2C     DFHMDF POS=(13,27),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 L2D     DFHMDF POS=(13,29),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 L2E     DFHMDF POS=(13,31),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 L2F     DFHMDF POS=(13,33),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
         DFHMDF POS=(14,21),ATTRB=ASKIP,LENGTH=01,INITIAL='3'
 L3A     DFHMDF POS=(14,23),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 L3B     DFHMDF POS=(14,25),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 L3C     DFHMDF POS=(14,27),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 L3D     DFHMDF POS=(14,29),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 L3E     DFHMDF POS=(14,31),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 L3F     DFHMDF POS=(14,33),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
         DFHMDF POS=(15,21),ATTRB=ASKIP,LENGTH=01,INITIAL='4'
 L4A     DFHMDF POS=(15,23),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 L4B     DFHMDF POS=(15,25),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 L4C     DFHMDF POS=(15,27),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 L4D     DFHMDF POS=(15,29),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 L4E     DFHMDF POS=(15,31),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 L4F     DFHMDF POS=(15,33),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
         DFHMDF POS=(16,21),ATTRB=ASKIP,LENGTH=01,INITIAL='5'
 L5A     DFHMDF POS=(16,23),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 L5B     DFHMDF POS=(16,25),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 L5C     DFHMDF POS=(16,27),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 L5D     DFHMDF POS=(16,29),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 L5E     DFHMDF POS=(16,31),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 L5F     DFHMDF POS=(16,33),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
         DFHMDF POS=(17,21),ATTRB=ASKIP,LENGTH=01,INITIAL='6'
 L6A     DFHMDF POS=(17,23),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 L6B     DFHMDF POS=(17,25),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 L6C     DFHMDF POS=(17,27),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 L6D     DFHMDF POS=(17,29),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 L6E     DFHMDF POS=(17,31),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 L6F     DFHMDF POS=(17,33),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
         DFHMDF POS=(21,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='REPONSE    :'
 REPON   DFHMDF POS=(21,18),ATTRB=(UNPROT,FSET),LENGTH=02
         DFHMDF POS=(21,21),ATTRB=ASKIP
         DFHMDF POS=(23,1),ATTRB=ASKIP,LENGTH=11,INITIAL='CLEAR - FIN'
         DFHMDF POS=(23,16),ATTRB=ASKIP,LENGTH=18,                      X
                INITIAL='ENTER - AFFICH JEU'
         DFHMDF POS=(23,38),ATTRB=ASKIP,LENGTH=17,                      X
                INITIAL='PF10 - VALIDATION'
 MSG     DFHMDF POS=(24,1),ATTRB=(ASKIP,BRT),LENGTH=79
         DFHMSD TYPE=FINAL
         END
 MEMBER NAME  A00FPGMU
       *======================================================*
       *   REPONSE JOUEUR                                     *
       *======================================================*

       *======================================================*
       *   I D E N T I F I C A T I O N     D I V I S I O N    *
       *======================================================*
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00FPGMT.

       *======================================================*
       *   E N V I R O N M E N T       D I V I S I O N        *
       *======================================================*
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        SOURCE-COMPUTER. IBM-390.
        OBJECT-COMPUTER. IBM-390.

       *======================================================*
       *           D A T A         D I V I S I O N            *
       *======================================================*
        DATA DIVISION.
        WORKING-STORAGE SECTION.

       * ZONE POUR DATE DU JOUR
        01  WS-DATEJ               PIC X(8) VALUE SPACES.

       * DESCRIPTION DE LA SQLCA
            EXEC SQL INCLUDE SQLCA   END-EXEC

        01  SQLCODE-ED             PIC +(3)9 VALUE ZEROES.

       * DESCRIPTION DE LA TABLE JEU
            EXEC SQL INCLUDE JEU     END-EXEC

       * DESCRIPTION DE LA TABLE JOUEUR
            EXEC SQL INCLUDE JOUEUR  END-EXEC

       * TABLE DE LA SOLUTION DU JEU
        01  TABLE-SOLUT.
            05 CASE-SOLUT          PIC XX OCCURS 11.
        01  I-SOLUT                PIC 99   VALUE ZEROES.

       * TABLE DE LA DERNIERE REPONSE D'UN JOUEUR
        01  TABLE-REPON.
            05 CASE-REPON          PIC XX OCCURS 25.
        01  I-REPON                PIC 99   VALUE ZEROES.

        01                         PIC X    VALUE SPACES.
            88 CASE-TROUVEE                 VALUE ZEROES.
            88 CASE-NON-TROUVEE             VALUE '1'.

       * NOMBRE DE CASES JUSTES POUR DETERMINATION GAGNANT
        01  NB-CASES-JUSTES        PIC 99   VALUE ZEROES.

       * DISPOSITION DES BATEAUX DANS LA COLONNE SOLUTION DE LA TABLE JEU
       * SERT A DETECTER SI UN BATEAU EST TOUCHE OU COULE
        01  TABLE-BAT.
            05 POSTE-BAT           PIC XX   OCCURS 4.
        01  I-BAT                  PIC 99   VALUE ZEROES.
        01  I-BAT-MAX              PIC 99   VALUE ZEROES.
        01  NB-BAT-TOUCHES         PIC 99   VALUE ZEROES.
        01  NB-BAT-COULES          PIC 99   VALUE ZEROES.

       * ZONE POUR CONTROLE DE LA REPONSE SAISIE
        01  WS-REPON.
            05 WS-REPON-1          PIC X    VALUE SPACES.
               88 WS-REPON-1-VALIDE VALUE '1' THRU '6'.
            05 WS-REPON-2          PIC X    VALUE SPACES.
               88 WS-REPON-2-VALIDE VALUE 'A' THRU 'F'.

       * INDICATEUR D'ERREUR
        01                         PIC X.
            88 OK                  VALUE ZEROES.
            88 ERREUR              VALUE '1'.

       * INDICATEURS
        01                         PIC X.
            88 JEU-TROUVE          VALUE ZEROES.
            88 JEU-NON-TROUVE      VALUE '1'.
        01                         PIC X.
            88 JOUEUR-TROUVE       VALUE ZEROES.
            88 JOUEUR-NON-TROUVE   VALUE '1'.
        01                         PIC X.
            88 JOUEUR-GAGNANT      VALUE '1'.

       *------------------------------------------------------*
       *   DESCRIPTION DETAILLEE DE LA ZONE DE COMMUNICATION  *
       *------------------------------------------------------*
        01  WS-COMMAREA.
            05 PROG-PRECEDENT      PIC X(8).
            05 PROG-COURANT        PIC X(8).
            05 PROG-SUIVANT        PIC X(8).
            05                     PIC X(26).

        01 C-R                     PIC S9(8) COMP.

        01 MON-PROG                PIC X(8) VALUE 'A00FPGMT'.
        01 MA-MAP                  PIC X(8) VALUE 'A00FMAP '.
        01 MA-TRX                  PIC X(4) VALUE 'A00F'.

       * USERID
        01  WS-USERID              PIC X(8) VALUE SPACES.

       *------------------------------------------------------*
       *   DESCRIPTION   DE   LA   MAP                        *
       *------------------------------------------------------*
        COPY A00FMAP.
       * REDEFINES POUR AVOIR UNE TABLE
        01  REDEFINES A00FMAPI.
            05                     PIC X(139).
            05 TABLE-MAP.
               10   OCCURS 6.
                 15   OCCURS 6.
                   20              PIC X(7).
                   20  CASE-MAP    PIC X.

       * INDICES D'AFFICHAGE DES CASES DE LA MAP
        01  INDICES-MAP.
            05 I-MAP               PIC 9.
            05 J-MAP               PIC 9.

       *------------------------------------------------------*
       *   ZONE DE MESSAGE TAMPON POUR LE SEND FROM           *
       *------------------------------------------------------*
        01  MESSAGE-TXT            PIC X(79).

       *------------------------------------------------------*
       *   DESCRIPTION   DES  TOUCHES   FONCTIONS             *
       *------------------------------------------------------*
        COPY DFHAID.

       *------------------------------------------------------*
       *   DESCRIPTION   DES  ATTRIBUTS                       *
       *------------------------------------------------------*
        COPY DFHBMSCA.
        COPY ATTRIBUT.

       *======================================================*
       *          L I N K A G E     S E C T I O N             *
       *======================================================*
        LINKAGE SECTION.
        01  DFHCOMMAREA.
            05 LK-COMMAREA            PIC X(50).

       *======================================================*
       *     P R O C E D U R E     D I V I S I O N            *
       *======================================================*

        PROCEDURE DIVISION.
        00000-INIT-PROGRAMME.
       *---------------------*
             PERFORM  10000-DEBUT-PROGRAMME
             PERFORM  20000-TRAIT-PROGRAMME
             GOBACK
             .

        10000-DEBUT-PROGRAMME.
       *---------------------*
       *   TEST DE PREMIERE ENTREE DANS LE PROGRAMME
       *   SI NON PROGRAMME  MENU --->  ARRET  (ACCES INTERDIT)
            IF EIBCALEN = 0
               INITIALIZE      WS-COMMAREA
            ELSE
               MOVE LK-COMMAREA    TO  WS-COMMAREA
            END-IF

            MOVE  PROG-COURANT     TO  PROG-PRECEDENT
            MOVE  MON-PROG         TO  PROG-COURANT

       * RECUPERATION DU USERID
            EXEC CICS ASSIGN USERID (WS-USERID) END-EXEC
            .

        20000-TRAIT-PROGRAMME.
       *---------------------*
            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               PERFORM  21000-TRAIT-CHARGEMENT
               PERFORM  22000-TRAIT-ENVOI
            ELSE
               PERFORM  23000-TRAIT-RECEPTION
            END-IF
            .

        21000-TRAIT-CHARGEMENT.
       *----------------------*
       *  CHARGEMENT DE LA MAP AVANT AFFICHAGE
            MOVE LOW-VALUE TO A00FMAPO

       *  SI TRAITEMENT PARTICULIER AVANT AFFICHAGE
       *    PERFORM  21100-TRAIT-SPECIFIQUE
            .

       *21100-TRAIT-SPECIFIQUE.
       *----------------------*
       *    ..............................
       *    ..............................
       *    ..............................
       *    ..............................
       *    .

        22000-TRAIT-ENVOI.
       *-----------------*
       * AFFICHAGE DE LA DATE DU JOUR
            MOVE FUNCTION CURRENT-DATE TO WS-DATEJ
            STRING WS-DATEJ (7 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATEJ (5 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATEJ (1 : 4) DELIMITED BY SIZE
                   INTO DATEJO
            END-STRING

            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               EXEC CICS SEND MAP    ('A00FMAP')
                              ERASE
               END-EXEC
            ELSE
               EXEC CICS SEND MAP    ('A00FMAP')
                              CURSOR
                              ERASE
               END-EXEC
            END-IF

            MOVE PROG-COURANT TO PROG-SUIVANT

            EXEC CICS RETURN TRANSID  (MA-TRX)
                             COMMAREA (WS-COMMAREA)
                             LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23000-TRAIT-RECEPTION.
       *---------------------*
            EVALUATE EIBAID
       * ENTER = AFFICHAGE DE L'ETAT ACTUEL DU JEU
               WHEN DFHENTER
                    PERFORM  23050-RECEIVE-MAP
                    PERFORM  23100-TRAIT-ENTER
                    PERFORM  22000-TRAIT-ENVOI
       * F10 = CREATION OU MODIFICATION DU JEU
               WHEN DFHPF10
                    PERFORM  23050-RECEIVE-MAP
                    PERFORM  23110-TRAIT-PF10
                    PERFORM  22000-TRAIT-ENVOI
       * CLEAR = FIN DIALOGUE
               WHEN DFHCLEAR
                    PERFORM  23200-TRAIT-FIN
       * AUTRE = ERREUR TOUCHE FONCTION
               WHEN OTHER
                    PERFORM  90000-ERR-TOUCHE
            END-EVALUATE
            .

        23050-RECEIVE-MAP.
       *------------------*
            EXEC CICS RECEIVE MAP  ('A00FMAP')
                              RESP (C-R)
            END-EXEC

            EVALUATE C-R
               WHEN DFHRESP(NORMAL)
                    CONTINUE
               WHEN OTHER
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE
            .

        23100-TRAIT-ENTER.
       *------------------*
       * CONTROLE DU JEU : DOIT EXISTER ET ETRE EN COURS
            PERFORM CTRL-JEU

       * LECTURE DU DERNIER JOUEUR
            IF OK
               PERFORM LECTURE-DERNIER-JOUEUR
            END-IF

       * SI JEU TROUVE, AFFICHAGE DES INFOS ACTUELLES DU JEU
            IF JEU-TROUVE
               PERFORM ALIM-MAP
               IF JOUEUR-GAGNANT
                  MOVE 'BRAVO TU AS GAGNE !!!!'                  TO MSGO
               ELSE
                  MOVE 'SAISIR LA REPONSE PUIS F10 POUR VALIDER' TO MSGO
               END-IF
               MOVE CURSEUR TO REPONL
            ELSE
               PERFORM INIT-MAP
               MOVE 'CODE JEU INEXISTANT' TO MSGO
               MOVE CURSEUR TO CODEJL
               SET  ERREUR  TO TRUE
            END-IF
            .

        CTRL-JEU.
       *---------*
       * INITIALISATIONS
            SET OK       TO TRUE
            MOVE CURSEUR TO CODEJL

       * CONTROLE DU CODE JEU DEMANDE
            PERFORM CTRL-CODE-JEU

       * LECTURE DU JEU
            IF OK
               PERFORM LECTURE-JEU
            END-IF

       * JEU TERMINE
            IF JE-STATU NOT = 'E'
               MOVE ATTR-UNPROT-BRT TO CODEJA
               MOVE 'JEU NON EN COURS, IMPOSSIBLE DE JOUER' TO MSGO
               MOVE CURSEUR TO CODEJL
               SET  ERREUR  TO TRUE
            END-IF
            .

        CTRL-CODE-JEU.
       *--------------*
       * OBLIGATOIRE
            IF CODEJI = SPACES OR LOW-VALUE
               MOVE ATTR-UNPROT-BRT TO CODEJA
               IF OK
                  MOVE 'CODE JEU NON RENSEIGNE' TO MSGO
                  MOVE CURSEUR TO CODEJL
                  SET  ERREUR  TO TRUE
               END-IF
            END-IF
            .

        ALIM-MAP.
       *---------*
       * ALIMENTATION DES INFOS DU JEU
            MOVE JE-CODEJ        TO CODEJO
            MOVE JE-UCREA        TO UCREAO
            MOVE JE-NBREM        TO NBREMO
            MOVE JE-NPOIN        TO NPOINO
            MOVE JE-STATU        TO STATUO
            EVALUATE JE-STATU
             WHEN 'I'   MOVE 'INACTIF'  TO LSTATUO
             WHEN 'E'   MOVE 'EN COURS' TO LSTATUO
             WHEN 'T'   MOVE 'TERMINE'  TO LSTATUO
             WHEN OTHER MOVE ALL '?'    TO LSTATUO
            END-EVALUATE
            MOVE JE-UGAGN        TO GAGNANTO

       * ALIMENTATION DES INFOS DU DERNIER JOUEUR
            IF JOUEUR-TROUVE
               MOVE JO-NOREP     TO NOREPO
               PERFORM AFFICHAGE-TABLEAU
            END-IF
            .

        AFFICHAGE-TABLEAU.
       *------------------*
       * RECUPERATION EN WORKING DE LA SOLUTION DU JEU
            MOVE JE-SOLUT        TO TABLE-SOLUT

       * RECUPERATION EN WORKING DE LA DERNIERE REPONSE JOUEUR
            MOVE JO-REPON        TO TABLE-REPON

       * COMPARAISON DES CASES 'REPONSE JOUEUR' ET 'SOLUTION DU JEU'
            PERFORM VARYING I-REPON FROM 1 BY 1 UNTIL I-REPON > 25
                    OR CASE-REPON(I-REPON) = SPACES
              SET CASE-NON-TROUVEE TO TRUE
              PERFORM VARYING I-SOLUT FROM 1 BY 1 UNTIL I-SOLUT > 11
                IF CASE-REPON(I-REPON) = CASE-SOLUT(I-SOLUT)
                   SET CASE-TROUVEE TO TRUE
                   MOVE 11 TO I-SOLUT
                END-IF
       * TRANSFORMATION DES LETTRES EN CHIFFRES POUR INDICER DANS LA MAP
                MOVE CASE-REPON(I-REPON) TO INDICES-MAP
                INSPECT INDICES-MAP  CONVERTING
                        'ABCDEF'     TO
                        '123456'
                IF CASE-TROUVEE
                   MOVE 'X'          TO CASE-MAP(I-MAP, J-MAP)
                ELSE
                   MOVE '-'          TO CASE-MAP(I-MAP, J-MAP)
                END-IF
              END-PERFORM
            END-PERFORM
            .

        INIT-MAP.
       *---------*
       * INITIALISATION DES CHAMPS DE LA MAP
            MOVE SPACES          TO CODEJO
                                    UCREAO
                                    GAGNANTO
                                    STATUO
            MOVE ZEROES          TO NBREMO
                                    NPOINO
                                    NOREPO
            .

        23110-TRAIT-PF10.
       *-----------------*
       * CONTROLE DU JEU : DOIT EXISTER ET ETRE EN COURS
            PERFORM CTRL-JEU

       * CONTROLE DES AUTRES CHAMPS
            IF OK
               PERFORM CTRL-REPONSE
            END-IF

       * SI PAS D'ERREUR CREER UNE LIGNE DANS LA TABLE JOUEUR
            IF OK
               PERFORM LECTURE-DERNIER-JOUEUR
               PERFORM CREATION-REPONSE-JOUEUR
               PERFORM TRT-GAGNANT
            END-IF

       * ON REFAIT LE TRAITEMENT ENTER POUR RAFRAICHIER
            PERFORM  23100-TRAIT-ENTER
            .

        CTRL-REPONSE.
       *-------------*
       * 1ER  CARACTERE DE LA REPONSE : '1' A '6'
       * 2EME CARACTERE DE LA REPONSE : 'A' A 'F'
            MOVE REPONI TO WS-REPON
            IF NOT (WS-REPON-1-VALIDE AND WS-REPON-2-VALIDE)
               MOVE 'REPONSE INVALIDE' TO MSGO
            END-IF
            .

        LECTURE-JEU.
       *------------*
       * LIRE LE JEU CREE PAR LE MEME USERID
            MOVE CODEJI TO JE-CODEJ

            EXEC SQL
              SELECT
                 CODEJ,
                 UCREA,
                 VALUE (SOLUT, ' '),
                 VALUE (NBREM, 0),
                 VALUE (NPOIN, 0),
                 VALUE (UGAGN, ' '),
                 STATU
              INTO
                 :JE-CODEJ,
                 :JE-UCREA,
                 :JE-SOLUT,
                 :JE-NBREM,
                 :JE-NPOIN,
                 :JE-UGAGN,
                 :JE-STATU
              FROM
                 JEU
              WHERE
                 CODEJ = :JE-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    SET JEU-TROUVE         TO TRUE
               WHEN +100
                    SET JEU-NON-TROUVE     TO TRUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT JEU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        LECTURE-DERNIER-JOUEUR.
       *-----------------------*
       * LIRE LES INFOS DU DERNIER JOUEUR
            MOVE CODEJI TO JO-CODEJ

            EXEC SQL
              SELECT
                 CODEJ,
                 NOREP,
                 UJOUE,
                 VALUE (REPON, ' ')
              INTO
                 :JO-CODEJ,
                 :JO-NOREP,
                 :JO-UJOUE,
                 :JO-REPON
              FROM
                 JOUEUR
              WHERE
                 CODEJ = :JO-CODEJ AND
                 NOREP = (SELECT MAX(NOREP) FROM JOUEUR)
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    SET JOUEUR-TROUVE         TO TRUE
               WHEN +100
                    SET JOUEUR-NON-TROUVE     TO TRUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT DERNIER JOUEUR, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        CREATION-REPONSE-JOUEUR.
       *------------------------*
            ADD  1           TO JO-NOREP
            MOVE WS-USERID   TO JO-UJOUE
            STRING JO-REPON  DELIMITED BY SPACES
                   REPONI    DELIMITED BY SIZE
                           INTO JO-REPON
            END-STRING
            MOVE ZEROES      TO JO-NPOIN

            EXEC SQL INSERT INTO JOUEUR VALUES
              (:JO-CODEJ,
               :JO-NOREP,
               :JO-UJOUE,
               :JO-REPON,
               :JO-NPOIN)
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR INSERT JOUEUR, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        TRT-GAGNANT.
       *------------*
       * ON VERIFIE SI LE JOUEUR A GAGNE

       * RECUPERATION EN WORKING DE LA SOLUTION DU JEU
            MOVE JE-SOLUT        TO TABLE-SOLUT

       * 1ER TRAITEMENT : DETECTION D'UN BATIMENT TOUCHE OU COULE
       * ---> : BATIMENT DE 4 CASES
            MOVE JE-SOLUT(1:8)   TO TABLE-BAT
            MOVE 4               TO I-BAT-MAX
            PERFORM TRT-TOUCHE-COULE

       * ---> : BATIMENT DE 3 CASES
            MOVE JE-SOLUT(9:6)   TO TABLE-BAT
            MOVE 3               TO I-BAT-MAX
            PERFORM TRT-TOUCHE-COULE

       * ---> : BATIMENT DE 2 CASES
            MOVE JE-SOLUT(15:4)  TO TABLE-BAT
            MOVE 2               TO I-BAT-MAX
            PERFORM TRT-TOUCHE-COULE

       * ---> : BATIMENT DE 2 CASES
            MOVE JE-SOLUT(19:4)  TO TABLE-BAT
            MOVE 2               TO I-BAT-MAX
            PERFORM TRT-TOUCHE-COULE

       * 2EME TRAITEMENT : DETECTION TOUS LES BATIMENTS COULES
       * RECUPERATION EN WORKING DE LA DERNIERE REPONSE JOUEUR
            MOVE JO-REPON        TO TABLE-REPON

       * INITIALISATION
            MOVE ZEROES          TO NB-CASES-JUSTES

       * COMPARAISON DES CASES 'REPONSE JOUEUR' ET 'SOLUTION DU JEU'
            PERFORM VARYING I-REPON FROM 1 BY 1 UNTIL I-REPON > 25
                    OR CASE-REPON(I-REPON) = SPACES
              SET CASE-NON-TROUVEE TO TRUE
              PERFORM VARYING I-SOLUT FROM 1 BY 1 UNTIL I-SOLUT > 11
                IF CASE-REPON(I-REPON) = CASE-SOLUT(I-SOLUT)
                   SET CASE-TROUVEE TO TRUE
                   MOVE 11 TO I-SOLUT
                   ADD  1  TO NB-CASES-JUSTES
                END-IF
              END-PERFORM
            END-PERFORM

       * MODIF JEU SI LE JOUEUR EST GAGNANT
            IF NB-CASES-JUSTES = 11
               PERFORM MODIF-GAGNANT
            END-IF
            .

        TRT-TOUCHE-COULE.
       *-----------------*
            PERFORM VARYING I-BAT FROM 1 BY 1 UNTIL I-BAT > I-BAT-MAX
              IF REPONI = BAT1(I-BAT)
                 ADD 1 TO NB-BAT-TOUCHES
              END-IF
            END-PERFORM
            IF NB-BAT-TOUCHES = I-BAT-MAX
               ADD 1 TO NB-BAT-COULES
               SUBTRACT 1 FROM NB-BAT-COULES
            END-IF
            .

        MODIF-GAGNANT.
       *--------------*
       * MODIFICATION DU JEU
            MOVE WS-USERID   TO JE-UGAGN
            MOVE 'T'         TO JE-STATU

            EXEC SQL UPDATE JEU SET
               UGAGN = :JE-UGAGN,
               STATU = :JE-STATU
            WHERE
               CODEJ = :JE-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    SET JOUEUR-GAGNANT TO TRUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR UPDATE JEU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE

       * MODIFICATION DU JOUEUR
            MOVE JE-NPOIN    TO JO-NPOIN

            EXEC SQL UPDATE JOUEUR SET
               NPOIN = :JO-NPOIN
            WHERE
               CODEJ = :JO-CODEJ AND
               NOREP = :JO-NOREP
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    SET JOUEUR-GAGNANT TO TRUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR UPDATE JOUEUR, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        23110-PROG-SUIVANT.
       *------------------*
            EXEC CICS XCTL  PROGRAM  (PROG-SUIVANT)
                            COMMAREA (WS-COMMAREA)
                            LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23200-TRAIT-FIN.
       *---------------*
            MOVE 'FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        90000-ERR-TOUCHE.
       *----------------*
            MOVE 'TOUCHE DE FONCTION INVALIDE' TO MSGO
            PERFORM  22000-TRAIT-ENVOI
            .

        91000-ERREUR-CICS.
       *-------------------*
            MOVE 'ERREUR CICS !!!  FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        99000-FIN-CICS.
       *--------------*
            EXEC CICS SEND FROM   (MESSAGE-TXT)
                           LENGTH (LENGTH OF MESSAGE-TXT)
                           ERASE
            END-EXEC

            EXEC CICS RETURN END-EXEC
            .
 MEMBER NAME  A00FMAP
 A00FMAP DFHMSD TYPE=&SYSPARM,MODE=INOUT,LANG=COBOL,EXTATT=YES,         X
                CTRL=(FREEKB,FRSET),STORAGE=AUTO,TIOAPFX=YES
 A00FMAP DFHMDI COLUMN=1,LINE=1,SIZE=(24,80)
         DFHMDF POS=(1,1),ATTRB=ASKIP,LENGTH=04,INITIAL='A00F'
         DFHMDF POS=(1,23),ATTRB=ASKIP,LENGTH=17,                       X
                INITIAL='REPONSE DU JOUEUR'
         DFHMDF POS=(1,65),ATTRB=ASKIP,LENGTH=07,INITIAL='A00FMAP'
         DFHMDF POS=(2,59),ATTRB=ASKIP,LENGTH=6,INITIAL='DATE :'
 DATEJ   DFHMDF POS=(2,66),ATTRB=(ASKIP,FSET),LENGTH=10
         DFHMDF POS=(4,05),ATTRB=ASKIP,LENGTH=12,                       X
                INITIAL='CODE JEU   :'
 CODEJ   DFHMDF POS=(4,18),ATTRB=(UNPROT,FSET,IC),LENGTH=5
         DFHMDF POS=(4,24),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(4,30),ATTRB=ASKIP,LENGTH=19,                       X
                INITIAL='USERID DE CREATION:'
 UCREA   DFHMDF POS=(4,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=8
 NCREA   DFHMDF POS=(4,59),ATTRB=(ASKIP,BRT,FSET),LENGTH=20
         DFHMDF POS=(05,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NB REP MAX :'
 NBREM   DFHMDF POS=(05,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(05,21),ATTRB=ASKIP
         DFHMDF POS=(05,30),ATTRB=ASKIP,LENGTH=19,                      X
                INITIAL='MODE DU JEU (I/C) :'
 MODEJ   DFHMDF POS=(05,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 LMODEJ  DFHMDF POS=(05,52),ATTRB=(ASKIP,BRT),LENGTH=20
         DFHMDF POS=(06,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NB POINTS  :'
 NPOIN   DFHMDF POS=(06,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(06,21),ATTRB=ASKIP
         DFHMDF POS=(07,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='STATUT     :'
 STATU   DFHMDF POS=(07,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 LSTATU  DFHMDF POS=(07,20),ATTRB=(ASKIP,BRT,FSET),LENGTH=10
         DFHMDF POS=(08,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NUM REPONSE:'
 NOREP   DFHMDF POS=(08,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(08,30),ATTRB=ASKIP,LENGTH=19,                      X
                INITIAL='USERID GAGNANT    :'
 UGAGN   DFHMDF POS=(08,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=8
 NGAGN   DFHMDF POS=(08,59),ATTRB=(ASKIP,BRT,FSET),LENGTH=20
         DFHMDF POS=(11,30),ATTRB=ASKIP,LENGTH=15,                      X
                INITIAL='BATAILLE NAVALE'
         DFHMDF POS=(12,30),ATTRB=ASKIP,LENGTH=15,                      X
                INITIAL='---------------'
         DFHMDF POS=(15,18),ATTRB=ASKIP,LENGTH=16,                      X
                INITIAL='DERNIERE REPONSE'
         DFHMDF POS=(17,05),ATTRB=ASKIP,LENGTH=22,                      X
                INITIAL='NB BATIMENTS TOUCHES :'
 NBATT   DFHMDF POS=(17,28),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
         DFHMDF POS=(19,05),ATTRB=ASKIP,LENGTH=22,                      X
                INITIAL='NB BATIMENTS COULES  :'
 NBATC   DFHMDF POS=(19,28),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
         DFHMDF POS=(21,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='REPONSE    :'
 REPON   DFHMDF POS=(21,18),ATTRB=(UNPROT,FSET),LENGTH=02
         DFHMDF POS=(21,21),ATTRB=ASKIP
         DFHMDF POS=(23,1),ATTRB=ASKIP,LENGTH=11,INITIAL='CLEAR-FIN'
         DFHMDF POS=(23,16),ATTRB=ASKIP,LENGTH=18,                      X
                INITIAL='ENTER-AFFICH JEU'
         DFHMDF POS=(23,38),ATTRB=ASKIP,LENGTH=17,                      X
                INITIAL='PF10-VALIDATION'
 MSG     DFHMDF POS=(24,1),ATTRB=(ASKIP,BRT),LENGTH=79
         DFHMSD TYPE=FINAL
         END
 MEMBER NAME  A00GMAP
 A00GMAP DFHMSD TYPE=&SYSPARM,MODE=INOUT,LANG=COBOL,EXTATT=YES,         X
                CTRL=(FREEKB,FRSET),STORAGE=AUTO,TIOAPFX=YES
 A00GMAP DFHMDI COLUMN=1,LINE=1,SIZE=(24,80)
         DFHMDF POS=(1,1),ATTRB=ASKIP,LENGTH=04,INITIAL='A00G'
         DFHMDF POS=(1,23),ATTRB=ASKIP,LENGTH=32,                       X
                INITIAL='VISU/CREAT/MODIF JEU'
         DFHMDF POS=(1,65),ATTRB=ASKIP,LENGTH=07,INITIAL='A00GMAP'
         DFHMDF POS=(2,59),ATTRB=ASKIP,LENGTH=6,INITIAL='DATE :'
 DATEJ   DFHMDF POS=(2,66),ATTRB=(ASKIP,FSET),LENGTH=10
         DFHMDF POS=(4,05),ATTRB=ASKIP,LENGTH=12,                       X
                INITIAL='CODE JEU   :'
 CODEJ   DFHMDF POS=(4,18),ATTRB=(UNPROT,FSET,IC),LENGTH=5
         DFHMDF POS=(4,24),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(4,30),ATTRB=ASKIP,LENGTH=19,                       X
                INITIAL='USERID DE CREATION:'
 UCREA   DFHMDF POS=(4,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=8
 NCREA   DFHMDF POS=(4,59),ATTRB=(ASKIP,BRT,FSET),LENGTH=20
         DFHMDF POS=(05,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NB REP MAX :'
 NBREM   DFHMDF POS=(05,18),ATTRB=(UNPROT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(05,21),ATTRB=ASKIP
         DFHMDF POS=(05,30),ATTRB=ASKIP,LENGTH=19,                      X
                INITIAL='MODE DU JEU (I/C) :'
 MODEJ   DFHMDF POS=(05,50),ATTRB=(UNPROT,FSET),LENGTH=1
 LMODEJ  DFHMDF POS=(05,52),ATTRB=(ASKIP,BRT,FSET),LENGTH=20
         DFHMDF POS=(06,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NB POINTS  :'
 NPOIN   DFHMDF POS=(06,18),ATTRB=(UNPROT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(06,21),ATTRB=ASKIP
         DFHMDF POS=(07,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='STATUT     :'
 STATU   DFHMDF POS=(07,18),ATTRB=(UNPROT,FSET),LENGTH=1
 LSTATU  DFHMDF POS=(07,20),ATTRB=(ASKIP,BRT,FSET),LENGTH=10
         DFHMDF POS=(08,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NUM REPONSE:'
 NOREP   DFHMDF POS=(08,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(08,30),ATTRB=ASKIP,LENGTH=19,                      X
                INITIAL='USERID GAGNANT    :'
 UGAGN   DFHMDF POS=(08,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=8
 NGAGN   DFHMDF POS=(08,59),ATTRB=(ASKIP,BRT,FSET),LENGTH=20
         DFHMDF POS=(11,30),ATTRB=ASKIP,LENGTH=15,                      X
                INITIAL='JEU DU PENDU'
         DFHMDF POS=(12,30),ATTRB=ASKIP,LENGTH=15,                      X
                INITIAL='------------'
         DFHMDF POS=(14,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NB LETTRES :'
 NBLET   DFHMDF POS=(14,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(14,21),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(14,30),ATTRB=ASKIP,LENGTH=19,                      X
                INITIAL='NB COUPS RESTANTS :'
 NBRES   DFHMDF POS=(14,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(16,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='SOLUTION   :'
 SLET01  DFHMDF POS=(16,18),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET02  DFHMDF POS=(16,20),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET03  DFHMDF POS=(16,22),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET04  DFHMDF POS=(16,24),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET05  DFHMDF POS=(16,26),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET06  DFHMDF POS=(16,28),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET07  DFHMDF POS=(16,30),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET08  DFHMDF POS=(16,32),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET09  DFHMDF POS=(16,34),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET10  DFHMDF POS=(16,36),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET11  DFHMDF POS=(16,38),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET12  DFHMDF POS=(16,40),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET13  DFHMDF POS=(16,42),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET14  DFHMDF POS=(16,44),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET15  DFHMDF POS=(16,46),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET16  DFHMDF POS=(16,48),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET17  DFHMDF POS=(16,50),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET18  DFHMDF POS=(16,52),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET19  DFHMDF POS=(16,54),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET20  DFHMDF POS=(16,56),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
         DFHMDF POS=(16,58),ATTRB=ASKIP
         DFHMDF POS=(18,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='ETAT ACTUEL:'
 RLET01  DFHMDF POS=(18,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET02  DFHMDF POS=(18,20),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET03  DFHMDF POS=(18,22),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET04  DFHMDF POS=(18,24),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET05  DFHMDF POS=(18,26),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET06  DFHMDF POS=(18,28),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET07  DFHMDF POS=(18,30),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET08  DFHMDF POS=(18,32),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET09  DFHMDF POS=(18,34),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET10  DFHMDF POS=(18,36),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET11  DFHMDF POS=(18,38),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET12  DFHMDF POS=(18,40),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET13  DFHMDF POS=(18,42),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET14  DFHMDF POS=(18,44),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET15  DFHMDF POS=(18,46),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET16  DFHMDF POS=(18,48),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET17  DFHMDF POS=(18,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET18  DFHMDF POS=(18,52),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET19  DFHMDF POS=(18,54),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET20  DFHMDF POS=(18,56),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
         DFHMDF POS=(20,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='HISTORIQUE :'
 ULET01  DFHMDF POS=(20,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET02  DFHMDF POS=(20,20),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET03  DFHMDF POS=(20,22),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET04  DFHMDF POS=(20,24),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET05  DFHMDF POS=(20,26),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET06  DFHMDF POS=(20,28),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET07  DFHMDF POS=(20,30),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET08  DFHMDF POS=(20,32),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET09  DFHMDF POS=(20,34),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET10  DFHMDF POS=(20,36),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET11  DFHMDF POS=(20,38),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET12  DFHMDF POS=(20,40),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET13  DFHMDF POS=(20,42),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET14  DFHMDF POS=(20,44),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET15  DFHMDF POS=(20,46),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET16  DFHMDF POS=(20,48),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET17  DFHMDF POS=(20,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET18  DFHMDF POS=(20,52),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET19  DFHMDF POS=(20,54),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET20  DFHMDF POS=(20,56),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
         DFHMDF POS=(23,1),ATTRB=ASKIP,LENGTH=13,INITIAL='CLEAR-FIN'
         DFHMDF POS=(23,15),ATTRB=ASKIP,LENGTH=32,                      X
                INITIAL='PF7-JEU PREC    PF8-JEU SUIV'
         DFHMDF POS=(23,48),ATTRB=ASKIP,LENGTH=15,                      X
                INITIAL='PF10-VALIDATION'
 MSG     DFHMDF POS=(24,1),ATTRB=(ASKIP,BRT),LENGTH=79
         DFHMSD TYPE=FINAL
         END
 MEMBER NAME  A00HMAP
 A00HMAP DFHMSD TYPE=&SYSPARM,MODE=INOUT,LANG=COBOL,EXTATT=YES,         X
                CTRL=(FREEKB,FRSET),STORAGE=AUTO,TIOAPFX=YES
 A00HMAP DFHMDI COLUMN=1,LINE=1,SIZE=(24,80)
         DFHMDF POS=(1,1),ATTRB=ASKIP,LENGTH=04,INITIAL='A00H'
         DFHMDF POS=(1,23),ATTRB=ASKIP,LENGTH=17,                       X
                INITIAL='REPONSE DU JOUEUR'
         DFHMDF POS=(1,65),ATTRB=ASKIP,LENGTH=07,INITIAL='A00HMAP'
         DFHMDF POS=(2,59),ATTRB=ASKIP,LENGTH=6,INITIAL='DATE :'
 DATEJ   DFHMDF POS=(2,66),ATTRB=(ASKIP,FSET),LENGTH=10
         DFHMDF POS=(4,05),ATTRB=ASKIP,LENGTH=12,                       X
                INITIAL='CODE JEU   :'
 CODEJ   DFHMDF POS=(4,18),ATTRB=(UNPROT,FSET,IC),LENGTH=5
         DFHMDF POS=(4,24),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(4,30),ATTRB=ASKIP,LENGTH=19,                       X
                INITIAL='USERID DE CREATION:'
 UCREA   DFHMDF POS=(4,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=8
 NCREA   DFHMDF POS=(4,59),ATTRB=(ASKIP,BRT,FSET),LENGTH=20
         DFHMDF POS=(05,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NB REP MAX :'
 NBREM   DFHMDF POS=(05,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(05,21),ATTRB=ASKIP
         DFHMDF POS=(05,30),ATTRB=ASKIP,LENGTH=19,                      X
                INITIAL='MODE DU JEU (I/C) :'
 MODEJ   DFHMDF POS=(05,50),ATTRB=(ASKIP,FSET),LENGTH=1
 LMODEJ  DFHMDF POS=(05,52),ATTRB=(ASKIP,BRT,FSET),LENGTH=20
         DFHMDF POS=(06,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NB POINTS  :'
 NPOIN   DFHMDF POS=(06,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(06,21),ATTRB=ASKIP
         DFHMDF POS=(07,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='STATUT     :'
 STATU   DFHMDF POS=(07,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 LSTATU  DFHMDF POS=(07,20),ATTRB=(ASKIP,BRT,FSET),LENGTH=10
         DFHMDF POS=(08,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NUM REPONSE:'
 NOREP   DFHMDF POS=(08,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(08,30),ATTRB=ASKIP,LENGTH=19,                      X
                INITIAL='USERID GAGNANT    :'
 UGAGN   DFHMDF POS=(08,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=8
 NGAGN   DFHMDF POS=(08,59),ATTRB=(ASKIP,BRT,FSET),LENGTH=20
         DFHMDF POS=(11,30),ATTRB=(ASKIP,BRT),LENGTH=15,                X
                INITIAL='JEU DU PENDU'
         DFHMDF POS=(12,30),ATTRB=(ASKIP,BRT),LENGTH=15,                X
                INITIAL='------------'
         DFHMDF POS=(14,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NB LETTRES :'
 NBLET   DFHMDF POS=(14,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(14,31),ATTRB=ASKIP,LENGTH=19,                      X
                INITIAL='NB COUPS RESTANTS :'
 NBRES   DFHMDF POS=(14,51),ATTRB=(ASKIP,BRT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(16,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='---> MOT ? :'
 RLET01  DFHMDF POS=(16,18),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET02  DFHMDF POS=(16,20),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET03  DFHMDF POS=(16,22),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET04  DFHMDF POS=(16,24),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET05  DFHMDF POS=(16,26),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET06  DFHMDF POS=(16,28),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET07  DFHMDF POS=(16,30),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET08  DFHMDF POS=(16,32),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET09  DFHMDF POS=(16,34),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET10  DFHMDF POS=(16,36),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET11  DFHMDF POS=(16,38),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET12  DFHMDF POS=(16,40),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET13  DFHMDF POS=(16,42),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET14  DFHMDF POS=(16,44),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET15  DFHMDF POS=(16,46),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET16  DFHMDF POS=(16,48),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET17  DFHMDF POS=(16,50),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET18  DFHMDF POS=(16,52),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET19  DFHMDF POS=(16,54),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET20  DFHMDF POS=(16,56),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
         DFHMDF POS=(16,58),ATTRB=ASKIP
         DFHMDF POS=(18,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='HISTORIQUE :'
 ULET01  DFHMDF POS=(18,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET02  DFHMDF POS=(18,20),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET03  DFHMDF POS=(18,22),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET04  DFHMDF POS=(18,24),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET05  DFHMDF POS=(18,26),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET06  DFHMDF POS=(18,28),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET07  DFHMDF POS=(18,30),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET08  DFHMDF POS=(18,32),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET09  DFHMDF POS=(18,34),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET10  DFHMDF POS=(18,36),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET11  DFHMDF POS=(18,38),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET12  DFHMDF POS=(18,40),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET13  DFHMDF POS=(18,42),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET14  DFHMDF POS=(18,44),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET15  DFHMDF POS=(18,46),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET16  DFHMDF POS=(18,48),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET17  DFHMDF POS=(18,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET18  DFHMDF POS=(18,52),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET19  DFHMDF POS=(18,54),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET20  DFHMDF POS=(18,56),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
         DFHMDF POS=(20,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='-> LETTRE ?:'
 LETTRE  DFHMDF POS=(20,18),ATTRB=(UNPROT,FSET),LENGTH=01
         DFHMDF POS=(20,20),ATTRB=ASKIP
         DFHMDF POS=(23,1),ATTRB=ASKIP,LENGTH=11,INITIAL='CLEAR-FIN'
         DFHMDF POS=(23,16),ATTRB=ASKIP,LENGTH=18,                      X
                INITIAL='ENTER-AFFICH JEU'
         DFHMDF POS=(23,38),ATTRB=ASKIP,LENGTH=17,                      X
                INITIAL='PF10-VALIDATION'
 MSG     DFHMDF POS=(24,1),ATTRB=(ASKIP,BRT),LENGTH=79
         DFHMSD TYPE=FINAL
         END
 MEMBER NAME  A00QPGMD
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00QPGMD.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 28/12/2023.
       ******************************************************************
       *         PREPARATION DU QUIZ                                    *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
       * PICTURES D'EDITION
        77  SQLCODE-ED         PIC +(8)9 VALUE ZEROES.

       * INDICATEUR DE NULLITE
        77  IND-UGAGN          PIC S9(4) COMP VALUE ZEROES.

       * NUMERO DU QUIZ RECUPERE PAR ACCEPT
        01  WS-NUM-QUIZ        PIC X(3)       VALUE SPACES.

       * NOMBRE DE QUESTIONS RECUPERE PAR ACCEPT
        01  WS-NB-QUESTIONS    PIC 99         VALUE ZEROES.

       * LISTE DES REPONSE   RECUPERE PAR ACCEPT
        01  WS-LISTE-REPONSES  PIC X(50)      VALUE SPACES.

       * SQLCA
            EXEC SQL INCLUDE SQLCA   END-EXEC.

       * TABLE JEU
            EXEC SQL INCLUDE JEU     END-EXEC.

       * TABLE QUIZ
            EXEC SQL INCLUDE QUIZ    END-EXEC.

        PROCEDURE DIVISION.
       * RECUPERATION DES INFOS DE LA SYSIN
            ACCEPT WS-NUM-QUIZ
            ACCEPT WS-NB-QUESTIONS
            ACCEPT WS-LISTE-REPONSES

       * CREATION DU JEU DANS LA TABLE JEU
            INITIALIZE JE-JEU
            MOVE WS-NUM-QUIZ          TO JE-CODEJ
            MOVE 'FORA00'             TO JE-UCREA
            MOVE WS-NB-QUESTIONS      TO JE-NBREM  JE-NPOIN
            MOVE 'I'                  TO JE-MODEJ
            MOVE -1                   TO IND-UGAGN
            MOVE ZEROES               TO JE-NOREP
            MOVE 'I'                  TO JE-STATU

            EXEC SQL INSERT INTO JEU VALUES
              (:JE-CODEJ, :JE-UCREA, :JE-NBREM, :JE-MODEJ, :JE-NPOIN,
               :JE-UGAGN :IND-UGAGN, :JE-NOREP, :JE-STATU)
            END-EXEC

            IF SQLCODE NOT = ZEROES
               MOVE SQLCODE TO SQLCODE-ED
               DISPLAY 'ERREUR INSERT JEU, SQLCODE: ' SQLCODE-ED
               PERFORM FIN-ERREUR
            END-IF

       * CREATION DU JEU DANS LA TABLE QUIZ (SOLUTION)
            INITIALIZE QU-QUIZ
            MOVE WS-NUM-QUIZ          TO QU-CODEJ
            MOVE WS-LISTE-REPONSES    TO QU-SOLUT

            EXEC SQL INSERT INTO QUIZ VALUES
              (:QU-CODEJ, :QU-SOLUT)
            END-EXEC

            IF SQLCODE NOT = ZEROES
               MOVE SQLCODE TO SQLCODE-ED
               DISPLAY 'ERREUR INSERT QUIZ, SQLCODE: ' SQLCODE-ED
               PERFORM FIN-ERREUR
            END-IF

            STOP RUN
            .

        FIN-ERREUR.
            MOVE 17 TO RETURN-CODE
            STOP RUN
            .
 MEMBER NAME  A00RPGMD
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00RPGMD.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 28/12/2023.
       ******************************************************************
       *         TRAITEMENT DE LA REPONSE JOUEUR AU QUIZ                *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT FQUIZ   ASSIGN TO FQUIZ
                   FILE STATUS    IS FS.
        DATA DIVISION.
        FILE SECTION.
        FD  FQUIZ
            RECORDING MODE IS F.
            COPY FQUIZ REPLACING ==:PREF:== BY ==FQU==.
        WORKING-STORAGE SECTION.
       * FILE STATUS
        01  FS                       PIC 99 VALUE ZEROES.

       * PICTURE EDITION
        01  SQLCODE-ED               PIC +(5)9 VALUE ZEROES.

       * SQLCA
            EXEC SQL INCLUDE SQLCA   END-EXEC.

       * TABLE JEU
            EXEC SQL INCLUDE JEU     END-EXEC.

       * TABLE QUIZ
            EXEC SQL INCLUDE QUIZ    END-EXEC.

       * TABLE JEU_JOUEUR
            EXEC SQL INCLUDE JEUJOUE END-EXEC.

       * INDICATEUR DE NULLITE
        01  IND-UGAGN                PIC S9(4) COMP VALUE ZEROES.

       * COMPTEURS
        01  CPT-LUS                  PIC 99 VALUE ZEROES.

       * INDICATEUR DE FIN DE FICHIER
        01                           PIC X  VALUE SPACES.
            88 FIN-FICHIER                  VALUE '1'.

       * TABLE DES REPONSES
        01  WS-TAB.
            05 WS-POSTE              PIC X OCCURS 50.
        01  I                        PIC 99 VALUE ZEROES.

       * COMPTEUR DES BONNES REPONSES
        01  CPT-REP-OK               PIC 99 VALUE ZEROES.

       * QUIZ DEMANDE PAR LE JOUEUR DANS LA SYSIN DU JCL
        01  WS-CODEJ                 PIC X(3) VALUE SPACES.

       * USERID RECUPERE DANS LA SYSIN DU JCL
        01  WS-USERID.
            05                       PIC X(4) VALUE SPACES.
            05 NUM-USERID            PIC X(2) VALUE SPACES.

        PROCEDURE DIVISION.
            PERFORM DEBUT
            PERFORM UNTIL FIN-FICHIER
               PERFORM TRT-REPONSE
               PERFORM LECTURE-FQUIZ
            END-PERFORM
            PERFORM FIN
            STOP RUN
            .

        DEBUT.
            OPEN INPUT FQUIZ
            IF FS NOT = ZEROES
               DISPLAY 'ERREUR OUVERTURE FQUIZ, FS : ' FS
               PERFORM FIN-ERREUR
            END-IF

       * LECTURE DU 1ER ENREGISTREMENT POUR TEST FICHIER VIDE
            PERFORM LECTURE-FQUIZ
            IF FIN-FICHIER
               DISPLAY 'FICHIER FQUIZ VIDE'
               PERFORM FIN-ERREUR
            END-IF

       * RECUPERATION DU NOM DU QUIZ
            ACCEPT WS-CODEJ

       * LECTURE DE LA TABLE JEU
            MOVE WS-CODEJ TO JE-CODEJ
            EXEC SQL SELECT
                 CODEJ,
                 UCREA,
                 NBREM,
                 MODEJ,
                 NPOIN,
                 VALUE(UGAGN, ' '),
                 NOREP,
                 STATU
            INTO
                 :JE-CODEJ,
                 :JE-UCREA,
                 :JE-NBREM,
                 :JE-MODEJ,
                 :JE-NPOIN,
                 :JE-UGAGN,
                 :JE-NOREP,
                 :JE-STATU
            FROM JEU
            WHERE CODEJ = :JE-CODEJ
            END-EXEC

            IF SQLCODE NOT = ZEROES
               IF SQLCODE = +100
                  DISPLAY 'QUIZ INEXISTANT EN TABLE JEU'
               ELSE
                  DISPLAY 'ERREUR SELECT JEU, SQLCODE: ' SQLCODE-ED
               END-IF
               MOVE SQLCODE TO SQLCODE-ED
               PERFORM FIN-ERREUR
            END-IF

       * LECTURE DE LA TABLE QUIZ
            MOVE WS-CODEJ TO QU-CODEJ
            EXEC SQL SELECT
                 CODEJ,
                 SOLUT
            INTO
                 :QU-CODEJ,
                 :QU-SOLUT
            FROM QUIZ
            WHERE CODEJ = :QU-CODEJ
            END-EXEC

            IF SQLCODE = ZEROES
               MOVE QU-SOLUT TO WS-TAB
            ELSE
               IF SQLCODE = +100
                  DISPLAY 'QUIZ INEXISTANT EN TABLE QUIZ'
               ELSE
                  DISPLAY 'ERREUR SELECT QUIZ, SQLCODE: ' SQLCODE-ED
               END-IF
               MOVE SQLCODE TO SQLCODE-ED
               PERFORM FIN-ERREUR
            END-IF
            .

        LECTURE-FQUIZ.
            READ FQUIZ
            EVALUATE FS
             WHEN ZEROES
               ADD 1 TO CPT-LUS
             WHEN 10
               SET FIN-FICHIER TO TRUE
             WHEN OTHER
               DISPLAY 'ERREUR LECTURE FQUIZ, FS : ' FS
               PERFORM FIN-ERREUR
            END-EVALUATE
            .

        TRT-REPONSE.
            IF FQU-REPONSE = WS-POSTE(CPT-LUS)
               ADD 1 TO CPT-REP-OK
            END-IF
            .

        FIN-ERREUR.
            MOVE 17 TO RETURN-CODE
            STOP RUN
            .

        FIN.
       * RECUPERATION DU USER
            ACCEPT WS-USERID

       * CREATION DU JEU DANS LA TABLE JEU POUR CE JOUEUR
            STRING JE-CODEJ(1:3)
                   NUM-USERID DELIMITED BY SIZE INTO JE-CODEJ
            END-STRING
            MOVE WS-USERID            TO JE-UCREA
            MOVE -1                   TO IND-UGAGN

            EXEC SQL INSERT INTO JEU VALUES
              (:JE-CODEJ, :JE-UCREA, :JE-NBREM, :JE-MODEJ, :JE-NPOIN,
               :JE-UGAGN :IND-UGAGN, :JE-NOREP, :JE-STATU)
            END-EXEC

            IF SQLCODE NOT = ZEROES
               MOVE SQLCODE TO SQLCODE-ED
               DISPLAY 'ERREUR INSERT JEU2, SQLCODE: ' SQLCODE-ED
               PERFORM FIN-ERREUR
            END-IF

       * CREATION DU JEU DANS LA TABLE JEU_JOUEUR
            INITIALIZE JJ-JEU-JOUEUR
            MOVE WS-USERID            TO JJ-UJOUE
            MOVE JE-CODEJ             TO JJ-CODEJ
            MOVE CPT-REP-OK           TO JJ-NPOIN

            EXEC SQL INSERT INTO JEU_JOUEUR VALUES
              (:JJ-UJOUE, :JJ-CODEJ, :JJ-NPOIN)
            END-EXEC

            IF SQLCODE NOT = ZEROES
               MOVE SQLCODE TO SQLCODE-ED
               DISPLAY 'ERREUR INSERT JEU_JOUEUR, SQLCODE: ' SQLCODE-ED
               PERFORM FIN-ERREUR
            END-IF

            DISPLAY 'CPT-LUS : ' CPT-LUS
            CLOSE FQUIZ
            .
 MEMBER NAME  A99QPGMD
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A99QPGMD.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 28/12/2023.
       ******************************************************************
       *         PREPARATION DU QUIZ                                    *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
       * PICTURES D'EDITION
        77  SQLCODE-ED         PIC +(8)9 VALUE ZEROES.

       * INDICATEUR DE NULLITE
        77  IND-UGAGN          PIC S9(4) COMP VALUE ZEROES.

       * NUMERO DU QUIZ RECUPERE PAR ACCEPT
        01  WS-NUM-QUIZ        PIC X(3)       VALUE SPACES.

       * NOMBRE DE QUESTIONS RECUPERE PAR ACCEPT
        01  WS-NB-QUESTIONS    PIC 99         VALUE ZEROES.

       * LISTE DES REPONSE   RECUPERE PAR ACCEPT
        01  WS-LISTE-REPONSES  PIC X(50)      VALUE SPACES.

       * SQLCA
            EXEC SQL INCLUDE SQLCA   END-EXEC.

       * TABLE JEU
            EXEC SQL INCLUDE JEU     END-EXEC.

       * TABLE QUIZ
            EXEC SQL INCLUDE QUIZ    END-EXEC.

        PROCEDURE DIVISION.
            EXEC SQL SET SCHEMA FORA99 END-EXEC

       * RECUPERATION DES INFOS DE LA SYSIN
            ACCEPT WS-NUM-QUIZ
            ACCEPT WS-NB-QUESTIONS
            ACCEPT WS-LISTE-REPONSES

       * CREATION DU JEU DANS LA TABLE JEU
            INITIALIZE JE-JEU
            MOVE WS-NUM-QUIZ          TO JE-CODEJ
            MOVE 'FORA99'             TO JE-UCREA
            MOVE WS-NB-QUESTIONS      TO JE-NBREM  JE-NPOIN
            MOVE 'I'                  TO JE-MODEJ
            MOVE -1                   TO IND-UGAGN
            MOVE ZEROES               TO JE-NOREP
            MOVE 'I'                  TO JE-STATU

            EXEC SQL INSERT INTO JEU VALUES
              (:JE-CODEJ, :JE-UCREA, :JE-NBREM, :JE-MODEJ, :JE-NPOIN,
               :JE-UGAGN :IND-UGAGN, :JE-NOREP, :JE-STATU)
            END-EXEC

            IF SQLCODE NOT = ZEROES
               MOVE SQLCODE TO SQLCODE-ED
               DISPLAY 'ERREUR INSERT JEU, SQLCODE: ' SQLCODE-ED
               PERFORM FIN-ERREUR
            END-IF

       * CREATION DU JEU DANS LA TABLE QUIZ (SOLUTION)
            INITIALIZE QU-QUIZ
            MOVE WS-NUM-QUIZ          TO QU-CODEJ
            MOVE WS-LISTE-REPONSES    TO QU-SOLUT

            EXEC SQL INSERT INTO QUIZ VALUES
              (:QU-CODEJ, :QU-SOLUT)
            END-EXEC

            IF SQLCODE NOT = ZEROES
               MOVE SQLCODE TO SQLCODE-ED
               DISPLAY 'ERREUR INSERT QUIZ, SQLCODE: ' SQLCODE-ED
               PERFORM FIN-ERREUR
            END-IF

            STOP RUN
            .

        FIN-ERREUR.
            MOVE 17 TO RETURN-CODE
            STOP RUN
            .
 MEMBER NAME  A99RPGMD
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A99RPGMD.
        AUTHOR. PIERRE.
        DATE-WRITTEN. 28/12/2023.
       ******************************************************************
       *         TRAITEMENT DE LA REPONSE JOUEUR AU QUIZ                *
       ******************************************************************
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        INPUT-OUTPUT SECTION.
        FILE-CONTROL.
            SELECT FQUIZ   ASSIGN TO FQUIZ
                   FILE STATUS    IS FS.
        DATA DIVISION.
        FILE SECTION.
        FD  FQUIZ
            RECORDING MODE IS F.
            COPY FQUIZ REPLACING ==:PREF:== BY ==FQU==.
        WORKING-STORAGE SECTION.
       * FILE STATUS
        01  FS                       PIC 99 VALUE ZEROES.

       * PICTURE EDITION
        01  SQLCODE-ED               PIC +(5)9 VALUE ZEROES.

       * SQLCA
            EXEC SQL INCLUDE SQLCA   END-EXEC.

       * TABLE JEU
            EXEC SQL INCLUDE JEU     END-EXEC.

       * TABLE QUIZ
            EXEC SQL INCLUDE QUIZ    END-EXEC.

       * TABLE JEU_JOUEUR
            EXEC SQL INCLUDE JEUJOUE END-EXEC.

       * INDICATEUR DE NULLITE
        01  IND-UGAGN                PIC S9(4) COMP VALUE ZEROES.

       * COMPTEURS
        01  CPT-LUS                  PIC 99 VALUE ZEROES.

       * INDICATEUR DE FIN DE FICHIER
        01                           PIC X  VALUE SPACES.
            88 FIN-FICHIER                  VALUE '1'.

       * TABLE DES REPONSES
        01  WS-TAB.
            05 WS-POSTE              PIC X OCCURS 50.
        01  I                        PIC 99 VALUE ZEROES.

       * COMPTEUR DES BONNES REPONSES
        01  CPT-REP-OK               PIC 99 VALUE ZEROES.

       * QUIZ DEMANDE PAR LE JOUEUR DANS LA SYSIN DU JCL
        01  WS-CODEJ                 PIC X(3) VALUE SPACES.

       * USERID RECUPERE DANS LA SYSIN DU JCL
        01  WS-USERID.
            05                       PIC X(4) VALUE SPACES.
            05 NUM-USERID            PIC X(2) VALUE SPACES.

        PROCEDURE DIVISION.
            PERFORM DEBUT
            PERFORM UNTIL FIN-FICHIER
               PERFORM TRT-REPONSE
               PERFORM LECTURE-FQUIZ
            END-PERFORM
            PERFORM FIN
            STOP RUN
            .

        DEBUT.
            EXEC SQL SET SCHEMA FORA99 END-EXEC

            OPEN INPUT FQUIZ
            IF FS NOT = ZEROES
               DISPLAY 'ERREUR OUVERTURE FQUIZ, FS : ' FS
               PERFORM FIN-ERREUR
            END-IF

       * LECTURE DU 1ER ENREGISTREMENT POUR TEST FICHIER VIDE
            PERFORM LECTURE-FQUIZ
            IF FIN-FICHIER
               DISPLAY 'FICHIER FQUIZ VIDE'
               PERFORM FIN-ERREUR
            END-IF

       * RECUPERATION DU NOM DU QUIZ
            ACCEPT WS-CODEJ

       * LECTURE DE LA TABLE JEU
            MOVE WS-CODEJ TO JE-CODEJ
            EXEC SQL SELECT
                 CODEJ,
                 UCREA,
                 NBREM,
                 MODEJ,
                 NPOIN,
                 VALUE(UGAGN, ' '),
                 NOREP,
                 STATU
            INTO
                 :JE-CODEJ,
                 :JE-UCREA,
                 :JE-NBREM,
                 :JE-MODEJ,
                 :JE-NPOIN,
                 :JE-UGAGN,
                 :JE-NOREP,
                 :JE-STATU
            FROM JEU
            WHERE CODEJ = :JE-CODEJ
            END-EXEC

            IF SQLCODE NOT = ZEROES
               IF SQLCODE = +100
                  DISPLAY 'QUIZ INEXISTANT EN TABLE JEU'
               ELSE
                  DISPLAY 'ERREUR SELECT JEU, SQLCODE: ' SQLCODE-ED
               END-IF
               MOVE SQLCODE TO SQLCODE-ED
               PERFORM FIN-ERREUR
            END-IF

       * LECTURE DE LA TABLE QUIZ
            MOVE WS-CODEJ TO QU-CODEJ
            EXEC SQL SELECT
                 CODEJ,
                 SOLUT
            INTO
                 :QU-CODEJ,
                 :QU-SOLUT
            FROM QUIZ
            WHERE CODEJ = :QU-CODEJ
            END-EXEC

            IF SQLCODE = ZEROES
               MOVE QU-SOLUT TO WS-TAB
            ELSE
               IF SQLCODE = +100
                  DISPLAY 'QUIZ INEXISTANT EN TABLE QUIZ'
               ELSE
                  DISPLAY 'ERREUR SELECT QUIZ, SQLCODE: ' SQLCODE-ED
               END-IF
               MOVE SQLCODE TO SQLCODE-ED
               PERFORM FIN-ERREUR
            END-IF
            .

        LECTURE-FQUIZ.
            READ FQUIZ
            EVALUATE FS
             WHEN ZEROES
               ADD 1 TO CPT-LUS
             WHEN 10
               SET FIN-FICHIER TO TRUE
             WHEN OTHER
               DISPLAY 'ERREUR LECTURE FQUIZ, FS : ' FS
               PERFORM FIN-ERREUR
            END-EVALUATE
            .

        TRT-REPONSE.
            IF FQU-REPONSE = WS-POSTE(CPT-LUS)
               ADD 1 TO CPT-REP-OK
            END-IF
            .

        FIN-ERREUR.
            MOVE 17 TO RETURN-CODE
            STOP RUN
            .

        FIN.
       * RECUPERATION DU USER
            ACCEPT WS-USERID

       * CREATION DU JEU DANS LA TABLE JEU POUR CE JOUEUR
            STRING JE-CODEJ(1:3)
                   NUM-USERID DELIMITED BY SIZE INTO JE-CODEJ
            END-STRING
            MOVE WS-USERID            TO JE-UCREA
            MOVE -1                   TO IND-UGAGN

            EXEC SQL INSERT INTO JEU VALUES
              (:JE-CODEJ, :JE-UCREA, :JE-NBREM, :JE-MODEJ, :JE-NPOIN,
               :JE-UGAGN :IND-UGAGN, :JE-NOREP, :JE-STATU)
            END-EXEC

            IF SQLCODE NOT = ZEROES
               MOVE SQLCODE TO SQLCODE-ED
               DISPLAY 'ERREUR INSERT JEU2, SQLCODE: ' SQLCODE-ED
               PERFORM FIN-ERREUR
            END-IF

       * CREATION DU JEU DANS LA TABLE JEU_JOUEUR
            INITIALIZE JJ-JEU-JOUEUR
            MOVE WS-USERID            TO JJ-UJOUE
            MOVE JE-CODEJ             TO JJ-CODEJ
            MOVE CPT-REP-OK           TO JJ-NPOIN

            EXEC SQL INSERT INTO JEU_JOUEUR VALUES
              (:JJ-UJOUE, :JJ-CODEJ, :JJ-NPOIN)
            END-EXEC

            IF SQLCODE NOT = ZEROES
               MOVE SQLCODE TO SQLCODE-ED
               DISPLAY 'ERREUR INSERT JEU_JOUEUR, SQLCODE: ' SQLCODE-ED
               PERFORM FIN-ERREUR
            END-IF

            DISPLAY 'CPT-LUS : ' CPT-LUS
            CLOSE FQUIZ
            .
 MEMBER NAME  A99EMAP
 A99EMAP DFHMSD TYPE=&SYSPARM,MODE=INOUT,LANG=COBOL,EXTATT=YES,         X
                CTRL=(FREEKB,FRSET),STORAGE=AUTO,TIOAPFX=YES
 A99EMAP DFHMDI COLUMN=1,LINE=1,SIZE=(24,80)
         DFHMDF POS=(1,1),ATTRB=ASKIP,LENGTH=04,INITIAL='A99E'
         DFHMDF POS=(1,23),ATTRB=ASKIP,LENGTH=32,                       X
                INITIAL='VISU/CREAT/MODIF JEU'
         DFHMDF POS=(1,65),ATTRB=ASKIP,LENGTH=07,INITIAL='A99EMAP'
         DFHMDF POS=(2,59),ATTRB=ASKIP,LENGTH=6,INITIAL='DATE :'
 DATEJ   DFHMDF POS=(2,66),ATTRB=(ASKIP,FSET),LENGTH=10
         DFHMDF POS=(4,05),ATTRB=ASKIP,LENGTH=12,                       X
                INITIAL='CODE JEU   :'
 CODEJ   DFHMDF POS=(4,18),ATTRB=(UNPROT,FSET,IC),LENGTH=5
         DFHMDF POS=(4,24),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(4,30),ATTRB=ASKIP,LENGTH=19,                       X
                INITIAL='USERID DE CREATION:'
 UCREA   DFHMDF POS=(4,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=8
 NCREA   DFHMDF POS=(4,59),ATTRB=(ASKIP,BRT,FSET),LENGTH=20
         DFHMDF POS=(05,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NB REP MAX :'
 NBREM   DFHMDF POS=(05,18),ATTRB=(UNPROT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(05,21),ATTRB=ASKIP
         DFHMDF POS=(05,30),ATTRB=ASKIP,LENGTH=19,                      X
                INITIAL='MODE DU JEU (I/C) :'
 MODEJ   DFHMDF POS=(05,50),ATTRB=(UNPROT,FSET),LENGTH=1
 LMODEJ  DFHMDF POS=(05,52),ATTRB=(ASKIP,BRT,FSET),LENGTH=20
         DFHMDF POS=(06,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NB POINTS  :'
 NPOIN   DFHMDF POS=(06,18),ATTRB=(UNPROT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(06,21),ATTRB=ASKIP
         DFHMDF POS=(07,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='STATUT     :'
 STATU   DFHMDF POS=(07,18),ATTRB=(UNPROT,FSET),LENGTH=1
 LSTATU  DFHMDF POS=(07,20),ATTRB=(ASKIP,BRT,FSET),LENGTH=10
         DFHMDF POS=(08,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NUM REPONSE:'
 NOREP   DFHMDF POS=(08,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(08,30),ATTRB=ASKIP,LENGTH=19,                      X
                INITIAL='USERID GAGNANT    :'
 UGAGN   DFHMDF POS=(08,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=8
 NGAGN   DFHMDF POS=(08,59),ATTRB=(ASKIP,BRT,FSET),LENGTH=20
         DFHMDF POS=(11,30),ATTRB=ASKIP,LENGTH=15,                      X
                INITIAL='BATAILLE NAVALE'
         DFHMDF POS=(12,30),ATTRB=ASKIP,LENGTH=15,                      X
                INITIAL='---------------'
         DFHMDF POS=(13,18),ATTRB=ASKIP,LENGTH=08,                      X
                INITIAL='SOLUTION'
         DFHMDF POS=(13,50),ATTRB=ASKIP,LENGTH=16,                      X
                INITIAL='DERNIERE REPONSE'
         DFHMDF POS=(15,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='BATIMENT 1 :'
 SBAT1A  DFHMDF POS=(15,18),ATTRB=(UNPROT,BRT,FSET),LENGTH=2
 SBAT1B  DFHMDF POS=(15,21),ATTRB=(UNPROT,BRT,FSET),LENGTH=2
 SBAT1C  DFHMDF POS=(15,24),ATTRB=(UNPROT,BRT,FSET),LENGTH=2
 SBAT1D  DFHMDF POS=(15,27),ATTRB=(UNPROT,BRT,FSET),LENGTH=2
 RBAT1A  DFHMDF POS=(15,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 RBAT1B  DFHMDF POS=(15,53),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 RBAT1C  DFHMDF POS=(15,56),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 RBAT1D  DFHMDF POS=(15,59),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
         DFHMDF POS=(16,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='BATIMENT 2 :'
 SBAT2A  DFHMDF POS=(16,18),ATTRB=(UNPROT,BRT,FSET),LENGTH=2
 SBAT2B  DFHMDF POS=(16,21),ATTRB=(UNPROT,BRT,FSET),LENGTH=2
 SBAT2C  DFHMDF POS=(16,24),ATTRB=(UNPROT,BRT,FSET),LENGTH=2
 RBAT2A  DFHMDF POS=(16,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 RBAT2B  DFHMDF POS=(16,53),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 RBAT2C  DFHMDF POS=(16,56),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
         DFHMDF POS=(17,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='BATIMENT 3 :'
 SBAT3A  DFHMDF POS=(17,18),ATTRB=(UNPROT,BRT,FSET),LENGTH=2
 SBAT3B  DFHMDF POS=(17,21),ATTRB=(UNPROT,BRT,FSET),LENGTH=2
 RBAT3A  DFHMDF POS=(17,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 RBAT3B  DFHMDF POS=(17,53),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
         DFHMDF POS=(18,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='BATIMENT 4 :'
 SBAT4A  DFHMDF POS=(18,18),ATTRB=(UNPROT,BRT,FSET),LENGTH=2
 SBAT4B  DFHMDF POS=(18,21),ATTRB=(UNPROT,BRT,FSET),LENGTH=2
 RBAT4A  DFHMDF POS=(18,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 RBAT4B  DFHMDF POS=(18,53),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
         DFHMDF POS=(23,1),ATTRB=ASKIP,LENGTH=13,INITIAL='CLEAR-FIN'
         DFHMDF POS=(23,15),ATTRB=ASKIP,LENGTH=32,                      X
                INITIAL='PF7-JEU PREC    PF8-JEU SUIV'
         DFHMDF POS=(23,48),ATTRB=ASKIP,LENGTH=15,                      X
                INITIAL='PF10-VALIDATION'
 MSG     DFHMDF POS=(24,1),ATTRB=(ASKIP,BRT),LENGTH=79
         DFHMSD TYPE=FINAL
         END
 MEMBER NAME  A99EPGMT
       *======================================================*
       *   VISU/CREA/MODIF D'UN JEU                           *
       *======================================================*

       *======================================================*
       *   I D E N T I F I C A T I O N     D I V I S I O N    *
       *======================================================*
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A99EPGMT.

       *======================================================*
       *   E N V I R O N M E N T       D I V I S I O N        *
       *======================================================*
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        SOURCE-COMPUTER. IBM-390.
        OBJECT-COMPUTER. IBM-390.

       *======================================================*
       *           D A T A         D I V I S I O N            *
       *======================================================*
        DATA DIVISION.
        WORKING-STORAGE SECTION.

       * ZONE POUR DATE DU JOUR
        01  WS-DATEJ               PIC X(8) VALUE SPACES.

       * DESCRIPTION DE LA SQLCA
            EXEC SQL INCLUDE SQLCA   END-EXEC

        01  SQLCODE-ED             PIC +(3)9 VALUE ZEROES.

       * DESCRIPTION DE LA TABLE JOUEUR
            EXEC SQL INCLUDE JOUEUR   END-EXEC

       * DESCRIPTION DE LA TABLE JEU
            EXEC SQL INCLUDE JEU      END-EXEC

       * DESCRIPTION DE LA TABLE BATAILLE NAVALE
            EXEC SQL INCLUDE BATAILLE END-EXEC

       * HOSTS VARIABLES JOUEUR DE CREATION DU JEU
        01  WS-NCREA               PIC X(20) VALUE SPACES.
       * HOSTS VARIABLES JOUEUR GAGNANT
        01  WS-NGAGN               PIC X(20) VALUE SPACES.

       * INDICATEUR D'ERREUR
        01                         PIC X.
            88 OK                  VALUE ZEROES.
            88 ERREUR              VALUE '1'.

       * INDICATEUR D'EXISTENCE DU JEU
        01                         PIC X.
            88 TROUVE              VALUE ZEROES.
            88 NON-TROUVE          VALUE '1'.

       *------------------------------------------------------*
       *   DESCRIPTION DETAILLEE DE LA ZONE DE COMMUNICATION  *
       *------------------------------------------------------*
        01  WS-COMMAREA.
            05 PROG-PRECEDENT      PIC X(8).
            05 PROG-COURANT        PIC X(8).
            05 PROG-SUIVANT        PIC X(8).
            05                     PIC X(26).

        01 C-R                     PIC S9(8) COMP.

        01 MON-PROG                PIC X(8) VALUE 'A99EPGMT'.
        01 MA-MAP                  PIC X(8) VALUE 'A99EMAP '.
        01 MA-TRX                  PIC X(4) VALUE 'A99E'.

       * USERID
        01  WS-USERID              PIC X(8) VALUE SPACES.

       *------------------------------------------------------*
       *   DESCRIPTION   DE   LA   MAP                        *
       *------------------------------------------------------*
        COPY A99EMAP.

       *------------------------------------------------------*
       *   ZONE DE MESSAGE TAMPON POUR LE SEND FROM           *
       *------------------------------------------------------*
        01  MESSAGE-TXT            PIC X(79).

       *------------------------------------------------------*
       *   DESCRIPTION   DES  TOUCHES   FONCTIONS             *
       *------------------------------------------------------*
        COPY DFHAID.

       *------------------------------------------------------*
       *   DESCRIPTION   DES  ATTRIBUTS                       *
       *------------------------------------------------------*
        COPY DFHBMSCA.
        COPY ATTRIBUT.

       *======================================================*
       *          L I N K A G E     S E C T I O N             *
       *======================================================*
        LINKAGE SECTION.
        01  DFHCOMMAREA.
            05 LK-COMMAREA            PIC X(50).

       *======================================================*
       *     P R O C E D U R E     D I V I S I O N            *
       *======================================================*

        PROCEDURE DIVISION.
        00000-INIT-PROGRAMME.
       *---------------------*
             PERFORM  10000-DEBUT-PROGRAMME
             PERFORM  20000-TRAIT-PROGRAMME
             GOBACK
             .

        10000-DEBUT-PROGRAMME.
       *---------------------*
       *   TEST DE PREMIERE ENTREE DANS LE PROGRAMME
       *   SI NON PROGRAMME  MENU --->  ARRET  (ACCES INTERDIT)
            IF EIBCALEN = 0
               INITIALIZE      WS-COMMAREA
            ELSE
               MOVE LK-COMMAREA    TO  WS-COMMAREA
            END-IF

            MOVE  PROG-COURANT     TO  PROG-PRECEDENT
            MOVE  MON-PROG         TO  PROG-COURANT

       * RECUPERATION DU USERID
            EXEC CICS ASSIGN USERID (WS-USERID) END-EXEC
            .

        20000-TRAIT-PROGRAMME.
       *---------------------*
            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               PERFORM  21000-TRAIT-CHARGEMENT
               PERFORM  22000-TRAIT-ENVOI
            ELSE
               PERFORM  23000-TRAIT-RECEPTION
            END-IF
            .

        21000-TRAIT-CHARGEMENT.
       *----------------------*
       *  CHARGEMENT DE LA MAP AVANT AFFICHAGE
            MOVE LOW-VALUE TO A99EMAPO

       *  SI TRAITEMENT PARTICULIER AVANT AFFICHAGE
       *    PERFORM  21100-TRAIT-SPECIFIQUE
            .

       *21100-TRAIT-SPECIFIQUE.
       *----------------------*
       *    ..............................
       *    ..............................
       *    ..............................
       *    ..............................
       *    .

        22000-TRAIT-ENVOI.
       *-----------------*
       * AFFICHAGE DE LA DATE DU JOUR
            MOVE FUNCTION CURRENT-DATE TO WS-DATEJ
            STRING WS-DATEJ (7 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATEJ (5 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATEJ (1 : 4) DELIMITED BY SIZE
                   INTO DATEJO
            END-STRING

            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               EXEC CICS SEND MAP    ('A99EMAP')
                              ERASE
               END-EXEC
            ELSE
               EXEC CICS SEND MAP    ('A99EMAP')
                              CURSOR
                              ERASE
               END-EXEC
            END-IF

            MOVE PROG-COURANT TO PROG-SUIVANT

            EXEC CICS RETURN TRANSID  (MA-TRX)
                             COMMAREA (WS-COMMAREA)
                             LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23000-TRAIT-RECEPTION.
       *---------------------*
            EVALUATE EIBAID
       * ENTER = AFFICHAGE DU JEU
               WHEN DFHENTER
                    PERFORM  INIT-MAP
                    PERFORM  23050-RECEIVE-MAP
                    PERFORM  23100-TRAIT-ENTER
                    PERFORM  22000-TRAIT-ENVOI
       * F3 = RETOUR AU MENU
       *       WHEN DFHPF3
       *            PERFORM  23105-RETOUR-MENU
       * F7 = AFFICHAGE JEU PRECEDENT
               WHEN DFHPF7
                    PERFORM  INIT-MAP
                    PERFORM  23050-RECEIVE-MAP
                    PERFORM  23106-JEU-PREC
                    PERFORM  ALIM-MAP
                    PERFORM  22000-TRAIT-ENVOI
       * F8 = AFFICHAGE JEU SUIVANT
               WHEN DFHPF8
                    PERFORM  INIT-MAP
                    PERFORM  23050-RECEIVE-MAP
                    PERFORM  23107-JEU-SUIV
                    PERFORM  ALIM-MAP
                    PERFORM  22000-TRAIT-ENVOI
       * F10 = CREATION OU MODIFICATION DU JEU
               WHEN DFHPF10
                    PERFORM  23050-RECEIVE-MAP
                    PERFORM  23110-TRAIT-PF10
                    PERFORM  22000-TRAIT-ENVOI
       * CLEAR = FIN DIALOGUE
               WHEN DFHCLEAR
                    PERFORM  23200-TRAIT-FIN
       * AUTRE = ERREUR TOUCHE FONCTION
               WHEN OTHER
                    PERFORM  90000-ERR-TOUCHE
            END-EVALUATE
            .

        23050-RECEIVE-MAP.
       *------------------*
            EXEC CICS RECEIVE MAP  ('A99EMAP')
                              RESP (C-R)
            END-EXEC

            EVALUATE C-R
               WHEN DFHRESP(NORMAL)
                    CONTINUE
               WHEN OTHER
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE
            .

        23055-CTRL-USERID.
       *------------------*
            EXEC CICS ASSIGN USERID (JE-UCREA) END-EXEC
            .

        23100-TRAIT-ENTER.
       *------------------*
       *    ....................................
       *    ...  AFFICHAGE DES INFOS DU JEU  ...
       *    ....................................
       * INITIALISATIONS
            SET OK       TO TRUE
            MOVE CURSEUR TO CODEJL

       * CONTROLE DU CODE JEU DEMANDE
            PERFORM CTRL-CODE-JEU

       * LECTURE DU JEU
            IF OK
               PERFORM LECTURE-JEU
            END-IF

       * SI TROUVE, AFFICHAGE DES INFOS DU JEU
            IF TROUVE
               PERFORM ALIM-MAP
               MOVE 'JEU TROUVE, MODIFIER PUIS VALIDER PAR F10' TO MSGO
               MOVE CURSEUR TO NBREML
            ELSE
               MOVE 'CODE JEU INEXISTANT' TO MSGO
               MOVE CURSEUR TO CODEJL
               SET  ERREUR  TO TRUE
            END-IF
            .

        CTRL-CODE-JEU.
       *--------------*
       * OBLIGATOIRE
            IF CODEJI = SPACES OR LOW-VALUE
               MOVE ATTR-UNPROT-BRT TO CODEJA
               IF OK
                  MOVE 'CODE JEU NON RENSEIGNE' TO MSGO
                  MOVE CURSEUR TO CODEJL
                  SET  ERREUR  TO TRUE
               END-IF
            END-IF
            .

        ALIM-MAP.
       *---------*
       * ALIMENTATION DES CHAMPS DE LA MAP A PARTIR DES HOST VARIABLES
            MOVE JE-CODEJ        TO CODEJO
            MOVE JE-UCREA        TO UCREAO
            MOVE WS-NCREA        TO NCREAO
            MOVE JE-NBREM        TO NBREMO
            MOVE JE-MODEJ        TO MODEJO
            EVALUATE JE-MODEJ
             WHEN 'I'      MOVE 'INDIVIDUEL'  TO LMODEJO
             WHEN 'C'      MOVE 'COLLECTIF'   TO LMODEJO
             WHEN OTHER    MOVE ALL '?'       TO LMODEJO
            END-EVALUATE
            MOVE JE-NPOIN        TO NPOINO
            MOVE JE-UGAGN        TO UGAGNO
            MOVE WS-NGAGN        TO NGAGNO
            MOVE JE-NOREP        TO NOREPO
            MOVE JE-STATU        TO STATUO
            EVALUATE JE-STATU
             WHEN 'A'      MOVE 'ACTIF'    TO LSTATUO
             WHEN 'I'      MOVE 'INACTIF'  TO LSTATUO
             WHEN 'T'      MOVE 'TERMINE'  TO LSTATUO
             WHEN OTHER    MOVE ALL '?'    TO LSTATUO
            END-EVALUATE

       * ALIMENTATION SPECIFIQUE AU JEU
            PERFORM ALIM-SPECIFIQUE
            .

        INIT-MAP.
       *---------*
       * INITIALISATION DES CHAMPS DE LA MAP
            MOVE SPACES          TO CODEJO
                                    UCREAO
                                    NCREAO
                                    UGAGNO
                                    NGAGNO
                                    MODEJO
                                    LMODEJO
                                    STATUO
                                    LSTATUO
            MOVE ZEROES          TO NBREMO
                                    NOREPO
                                    NPOINO

       * INITIALISATION SPECIFIQUE AU JEU
            PERFORM INIT-SPECIFIQUE
            .

        ALIM-SPECIFIQUE.
       *----------------*
       * ALIMENTATION BATAILLE NAVALE
            MOVE JE-CODEJ TO BN-CODEJ

            EXEC SQL
              SELECT
                 CODEJ,
                 SBAT1,
                 SBAT2,
                 SBAT3,
                 SBAT4,
                 VALUE(RBAT1, ' '),
                 VALUE(RBAT2, ' '),
                 VALUE(RBAT3, ' '),
                 VALUE(RBAT4, ' ')
              INTO
                 :BN-CODEJ,
                 :BN-SBAT1,
                 :BN-SBAT2,
                 :BN-SBAT3,
                 :BN-SBAT4,
                 :BN-RBAT1,
                 :BN-RBAT2,
                 :BN-RBAT3,
                 :BN-RBAT4
              FROM BATAILLE_NAVALE
              WHERE
                 CODEJ = :BN-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN +100
                    PERFORM INIT-SPECIFIQUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT BATAILLE_NAVALE, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE

            MOVE BN-SBAT1(1:2)    TO SBAT1AO
            MOVE BN-SBAT1(3:2)    TO SBAT1BO
            MOVE BN-SBAT1(5:2)    TO SBAT1CO
            MOVE BN-SBAT1(7:2)    TO SBAT1DO
            MOVE BN-SBAT2(1:2)    TO SBAT2AO
            MOVE BN-SBAT2(3:2)    TO SBAT2BO
            MOVE BN-SBAT2(5:2)    TO SBAT2CO
            MOVE BN-SBAT3(1:2)    TO SBAT3AO
            MOVE BN-SBAT3(3:2)    TO SBAT3BO
            MOVE BN-SBAT4(1:2)    TO SBAT4AO
            MOVE BN-SBAT4(3:2)    TO SBAT4BO

            MOVE BN-RBAT1(1:2)    TO RBAT1AO
            MOVE BN-RBAT1(3:2)    TO RBAT1BO
            MOVE BN-RBAT1(5:2)    TO RBAT1CO
            MOVE BN-RBAT1(7:2)    TO RBAT1DO
            MOVE BN-RBAT2(1:2)    TO RBAT2AO
            MOVE BN-RBAT2(3:2)    TO RBAT2BO
            MOVE BN-RBAT2(5:2)    TO RBAT2CO
            MOVE BN-RBAT3(1:2)    TO RBAT3AO
            MOVE BN-RBAT3(3:2)    TO RBAT3BO
            MOVE BN-RBAT4(1:2)    TO RBAT4AO
            MOVE BN-RBAT4(3:2)    TO RBAT4BO
            .

        INIT-SPECIFIQUE.
       *----------------*
       * INITIALISATION CHAMPS DE LA MAP POUR LA BATAILLE NAVALE
            MOVE SPACES TO SBAT1AO SBAT1BO SBAT1CO SBAT1DO
            MOVE SPACES TO SBAT2AO SBAT2BO SBAT2CO
            MOVE SPACES TO SBAT3AO SBAT3BO
            MOVE SPACES TO SBAT4AO SBAT4BO
            MOVE SPACES TO RBAT1AO RBAT1BO RBAT1CO RBAT1DO
            MOVE SPACES TO RBAT2AO RBAT2BO RBAT2CO
            MOVE SPACES TO RBAT3AO RBAT3BO
            MOVE SPACES TO RBAT4AO RBAT4BO
            .

        23110-TRAIT-PF10.
       *-----------------*
       *    ........................................
       *    ...  CONTROLE DE LA SAISIE PUIS      ...
       *    ...  CREATION OU MODIFICATION DU JEU ...
       *    ........................................
       * INITIALISATIONS
            SET OK       TO TRUE
            MOVE CURSEUR TO CODEJL

       * LECTURE DU JEU
            IF OK
               PERFORM LECTURE-JEU
            END-IF

       * CONTROLE DES AUTRES CHAMPS
            PERFORM CTRL-NB-REPONSES-MAX
            PERFORM CTRL-NB-POINTS
            PERFORM CTRL-STATUT

       * SI PAS D'ERREUR ET TROUVE --> CREATION DU JEU
       * SI PAS D'ERREUR ET NON TROUVE --> MODIFICATION DU JEU
            IF OK
               IF NON-TROUVE
                  PERFORM  CREATION-JEU
               ELSE
                  PERFORM  MODIFICATION-JEU
               END-IF
            END-IF
            .

        CTRL-NB-REPONSES-MAX.
       *---------------------*
       * NUMERIQUE, NON NUL
            IF NBREMI NOT NUMERIC OR NBREMI = ZEROES
               MOVE ATTR-UNPROT-BRT TO NBREMA
               IF OK
                  MOVE 'NOMBRE REPONSES MAX INVALIDE'    TO MSGO
                  MOVE CURSEUR TO NBREML
                  SET  ERREUR  TO TRUE
               END-IF
            END-IF
            .

        CTRL-NB-POINTS.
       *---------------*
       * NUMERIQUE, NON NUL
            IF NPOINI NOT NUMERIC OR NPOINI = ZEROES
               MOVE ATTR-UNPROT-BRT TO NPOINA
               IF OK
                  MOVE 'NOMBRE DE POINTS INVALIDE'    TO MSGO
                  MOVE CURSEUR TO NPOINL
                  SET  ERREUR  TO TRUE
               END-IF
            END-IF
            .

        CTRL-STATUT.
       *-----------*
       * OBLIGATOIRE, = I, E OU T
            IF STATUI NOT = 'I' AND 'A' AND 'T'
               MOVE ATTR-UNPROT-BRT TO STATUA
               IF OK
                  MOVE 'STATUT INVALIDE, VALEURS I, E OU T'    TO MSGO
                  MOVE CURSEUR TO STATUL
                  SET  ERREUR  TO TRUE
               END-IF
            END-IF
            .

        LECTURE-JEU.
       *------------*
       * LIRE LE JEU CREE PAR LE MEME USERID
            MOVE CODEJI TO JE-CODEJ

            EXEC SQL
              SELECT
                 CODEJ,
                 UCREA,
                 C.NJOUE,
                 NBREM,
                 MODEJ,
                 E.NPOIN,
                 VALUE(UGAGN, ' '),
                 VALUE(G.NJOUE, ' '),
                 VALUE(NOREP, 0),
                 STATU
              INTO
                 :JE-CODEJ,
                 :JE-UCREA,
                 :WS-NCREA,
                 :JE-NBREM,
                 :JE-MODEJ,
                 :JE-NPOIN,
                 :JE-UGAGN,
                 :WS-NGAGN,
                 :JE-NOREP,
                 :JE-STATU
              FROM JEU    E
              LEFT OUTER JOIN JOUEUR C ON UCREA = C.UJOUE
              LEFT OUTER JOIN JOUEUR G ON UGAGN = G.UJOUE
              WHERE
                 CODEJ = :JE-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
       * CONTROLE : AFFICHAGE AUTORISE SI USERID = USER DE CREATION
                    IF JE-UCREA = WS-USERID
                       SET TROUVE TO TRUE
                    ELSE
                       STRING 'USER NON AUTORISE, JEU CREE PAR '
                              JE-UCREA DELIMITED BY SIZE
                           INTO MSGO
                       END-STRING
                       PERFORM  22000-TRAIT-ENVOI
                    END-IF
               WHEN +100
                    SET NON-TROUVE     TO TRUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT JEU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        CREATION-JEU.
       *-------------*
            INITIALIZE JE-JEU
            MOVE CODEJI      TO JE-CODEJ
            MOVE WS-USERID   TO JE-UCREA
            MOVE NBREMI      TO JE-NBREM
            MOVE MODEJI      TO JE-MODEJ
            MOVE NPOINI      TO JE-NPOIN
            MOVE STATUI      TO JE-STATU

            EXEC SQL INSERT INTO JEU VALUES
              (:JE-CODEJ,
               :JE-UCREA,
               :JE-NBREM,
               :JE-MODEJ,
               :JE-NPOIN,
               NULL,
               NULL,
               :JE-STATU)
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR INSERT JEU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE

       * CREATION DANS LA TABLE SPECIFIQUE
            INITIALIZE BN-BATAILLE-NAVALE
            MOVE CODEJI      TO BN-CODEJ
            STRING SBAT1AI SBAT1BI SBAT1CI SBAT1DI DELIMITED BY SIZE
              INTO BN-SBAT1
            END-STRING
            STRING SBAT2AI SBAT2BI SBAT2CI         DELIMITED BY SIZE
              INTO BN-SBAT2
            END-STRING
            STRING SBAT3AI SBAT3BI                 DELIMITED BY SIZE
              INTO BN-SBAT3
            END-STRING
            STRING SBAT4AI SBAT4BI                 DELIMITED BY SIZE
              INTO BN-SBAT4
            END-STRING

            EXEC SQL INSERT INTO BATAILLE_NAVALE VALUES
              (:BN-CODEJ,
               :BN-SBAT1,
               :BN-SBAT2,
               :BN-SBAT3,
               :BN-SBAT4,
               NULL,
               NULL,
               NULL,
               NULL)
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    MOVE 'CREATION BIEN EFFECTUEE' TO MSGO
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR INSERT BATAILLE_NAVALE, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        MODIFICATION-JEU.
       *-----------------*
            INITIALIZE JE-JEU
            MOVE CODEJI      TO JE-CODEJ
            MOVE NBREMI      TO JE-NBREM
            MOVE MODEJI      TO JE-MODEJ
            MOVE NPOINI      TO JE-NPOIN
            MOVE STATUI      TO JE-STATU

            EXEC SQL UPDATE JEU SET
               NBREM = :JE-NBREM,
               MODEJ = :JE-MODEJ,
               NPOIN = :JE-NPOIN,
               STATU = :JE-STATU
            WHERE
               CODEJ = :JE-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR UPDATE JEU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE

       * MODIFICATION DANS LA TABLE SPECIFIQUE
            INITIALIZE BN-BATAILLE-NAVALE
            MOVE CODEJI      TO BN-CODEJ
            STRING SBAT1AI SBAT1BI SBAT1CI SBAT1DI DELIMITED BY SIZE
              INTO BN-SBAT1
            END-STRING
            STRING SBAT2AI SBAT2BI SBAT2CI         DELIMITED BY SIZE
              INTO BN-SBAT2
            END-STRING
            STRING SBAT3AI SBAT3BI                 DELIMITED BY SIZE
              INTO BN-SBAT3
            END-STRING
            STRING SBAT4AI SBAT4BI                 DELIMITED BY SIZE
              INTO BN-SBAT4
            END-STRING

            EXEC SQL UPDATE BATAILLE_NAVALE SET
               SBAT1 = :BN-SBAT1,
               SBAT2 = :BN-SBAT2,
               SBAT3 = :BN-SBAT3,
               SBAT4 = :BN-SBAT4
            WHERE
               CODEJ = :BN-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    MOVE 'CREATION BIEN EFFECTUEE' TO MSGO
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR UPDATE BATAILLE_NAVALE, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        23105-RETOUR-MENU.
       *------------------*
            MOVE 'A99APGMT' TO PROG-SUIVANT
            PERFORM 23110-PROG-SUIVANT
            .

        23106-JEU-PREC.
       *---------------*
       * AFFICHER LE JEU PRECEDENT CREE PAR LE MEME USERID
            MOVE CODEJI TO JE-CODEJ

            EXEC SQL
              SELECT
                 CODEJ,
                 UCREA,
                 C.NJOUE,
                 NBREM,
                 MODEJ,
                 E.NPOIN,
                 VALUE(UGAGN, ' '),
                 VALUE(G.NJOUE, ' '),
                 VALUE(NOREP, 0),
                 STATU
              INTO
                 :JE-CODEJ,
                 :JE-UCREA,
                 :WS-NCREA,
                 :JE-NBREM,
                 :JE-MODEJ,
                 :JE-NPOIN,
                 :JE-UGAGN,
                 :WS-NGAGN,
                 :JE-NOREP,
                 :JE-STATU
              FROM JEU    E
              LEFT OUTER JOIN JOUEUR C ON UCREA = C.UJOUE
              LEFT OUTER JOIN JOUEUR G ON UGAGN = G.UJOUE
              WHERE
                  CODEJ LIKE 'BN%'
              AND CODEJ < :JE-CODEJ
              AND UCREA = :WS-USERID
              ORDER BY CODEJ DESC
              FETCH FIRST 1 ROW ONLY
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    PERFORM ALIM-MAP
               WHEN +100
                    MOVE 'PAS DE JEU PRECEDENT' TO MSGO
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT JEU PREC, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        23107-JEU-SUIV.
       *---------------*
       * AFFICHER LE JEU SUIVANT CREE PAR LE MEME USERID
            MOVE CODEJI TO JE-CODEJ

            EXEC SQL
              SELECT
                 CODEJ,
                 UCREA,
                 C.NJOUE,
                 NBREM,
                 MODEJ,
                 E.NPOIN,
                 VALUE(UGAGN, ' '),
                 VALUE(G.NJOUE, ' '),
                 VALUE(NOREP, 0),
                 STATU
              INTO
                 :JE-CODEJ,
                 :JE-UCREA,
                 :WS-NCREA,
                 :JE-NBREM,
                 :JE-MODEJ,
                 :JE-NPOIN,
                 :JE-UGAGN,
                 :WS-NGAGN,
                 :JE-NOREP,
                 :JE-STATU
              FROM JEU    E
              LEFT OUTER JOIN JOUEUR C ON UCREA = C.UJOUE
              LEFT OUTER JOIN JOUEUR G ON UGAGN = G.UJOUE
              WHERE
                  CODEJ LIKE 'BN%'
              AND CODEJ > :JE-CODEJ
              AND UCREA = :WS-USERID
              ORDER BY CODEJ
              FETCH FIRST 1 ROW ONLY
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    PERFORM ALIM-MAP
               WHEN +100
                    MOVE 'PAS DE JEU SUIVANT'   TO MSGO
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT JEU SUIV, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        23110-PROG-SUIVANT.
       *------------------*
            EXEC CICS XCTL  PROGRAM  (PROG-SUIVANT)
                            COMMAREA (WS-COMMAREA)
                            LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23200-TRAIT-FIN.
       *---------------*
            MOVE 'FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        90000-ERR-TOUCHE.
       *----------------*
            MOVE 'TOUCHE DE FONCTION INVALIDE' TO MSGO
            PERFORM  22000-TRAIT-ENVOI
            .

        91000-ERREUR-CICS.
       *-------------------*
            MOVE 'ERREUR CICS !!!  FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        99000-FIN-CICS.
       *--------------*
            EXEC CICS SEND FROM   (MESSAGE-TXT)
                           LENGTH (LENGTH OF MESSAGE-TXT)
                           ERASE
            END-EXEC

            EXEC CICS RETURN END-EXEC
            .
 MEMBER NAME  A99FMAP
 A99FMAP DFHMSD TYPE=&SYSPARM,MODE=INOUT,LANG=COBOL,EXTATT=YES,         X
                CTRL=(FREEKB,FRSET),STORAGE=AUTO,TIOAPFX=YES
 A99FMAP DFHMDI COLUMN=1,LINE=1,SIZE=(24,80)
         DFHMDF POS=(1,1),ATTRB=ASKIP,LENGTH=04,INITIAL='A99F'
         DFHMDF POS=(1,23),ATTRB=ASKIP,LENGTH=17,                       X
                INITIAL='REPONSE DU JOUEUR'
         DFHMDF POS=(1,65),ATTRB=ASKIP,LENGTH=07,INITIAL='A99FMAP'
         DFHMDF POS=(2,59),ATTRB=ASKIP,LENGTH=6,INITIAL='DATE :'
 DATEJ   DFHMDF POS=(2,66),ATTRB=(ASKIP,FSET),LENGTH=10
         DFHMDF POS=(4,05),ATTRB=ASKIP,LENGTH=12,                       X
                INITIAL='CODE JEU   :'
 CODEJ   DFHMDF POS=(4,18),ATTRB=(UNPROT,FSET,IC),LENGTH=5
         DFHMDF POS=(4,24),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(4,30),ATTRB=ASKIP,LENGTH=19,                       X
                INITIAL='USERID DE CREATION:'
 UCREA   DFHMDF POS=(4,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=8
 NCREA   DFHMDF POS=(4,59),ATTRB=(ASKIP,BRT,FSET),LENGTH=20
         DFHMDF POS=(05,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NB REP MAX :'
 NBREM   DFHMDF POS=(05,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(05,21),ATTRB=ASKIP
         DFHMDF POS=(05,30),ATTRB=ASKIP,LENGTH=19,                      X
                INITIAL='MODE DU JEU (I/C) :'
 MODEJ   DFHMDF POS=(05,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 LMODEJ  DFHMDF POS=(05,52),ATTRB=(ASKIP,BRT),LENGTH=20
         DFHMDF POS=(06,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NB POINTS  :'
 NPOIN   DFHMDF POS=(06,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(06,21),ATTRB=ASKIP
         DFHMDF POS=(07,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='STATUT     :'
 STATU   DFHMDF POS=(07,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 LSTATU  DFHMDF POS=(07,20),ATTRB=(ASKIP,BRT,FSET),LENGTH=10
         DFHMDF POS=(08,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NUM REPONSE:'
 NOREP   DFHMDF POS=(08,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(08,30),ATTRB=ASKIP,LENGTH=19,                      X
                INITIAL='USERID GAGNANT    :'
 UGAGN   DFHMDF POS=(08,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=8
 NGAGN   DFHMDF POS=(08,59),ATTRB=(ASKIP,BRT,FSET),LENGTH=20
         DFHMDF POS=(11,30),ATTRB=ASKIP,LENGTH=15,                      X
                INITIAL='BATAILLE NAVALE'
         DFHMDF POS=(12,30),ATTRB=ASKIP,LENGTH=15,                      X
                INITIAL='---------------'
         DFHMDF POS=(15,18),ATTRB=ASKIP,LENGTH=16,                      X
                INITIAL='DERNIERE REPONSE'
         DFHMDF POS=(17,05),ATTRB=ASKIP,LENGTH=22,                      X
                INITIAL='NB BATIMENTS TOUCHES :'
 NBATT   DFHMDF POS=(17,28),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
         DFHMDF POS=(19,05),ATTRB=ASKIP,LENGTH=22,                      X
                INITIAL='NB BATIMENTS COULES  :'
 NBATC   DFHMDF POS=(19,28),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
         DFHMDF POS=(21,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='REPONSE    :'
 REPON   DFHMDF POS=(21,18),ATTRB=(UNPROT,FSET),LENGTH=02
         DFHMDF POS=(21,21),ATTRB=ASKIP
         DFHMDF POS=(23,1),ATTRB=ASKIP,LENGTH=11,INITIAL='CLEAR-FIN'
         DFHMDF POS=(23,16),ATTRB=ASKIP,LENGTH=18,                      X
                INITIAL='ENTER-AFFICH JEU'
         DFHMDF POS=(23,38),ATTRB=ASKIP,LENGTH=17,                      X
                INITIAL='PF10-VALIDATION'
 MSG     DFHMDF POS=(24,1),ATTRB=(ASKIP,BRT),LENGTH=79
         DFHMSD TYPE=FINAL
         END
 MEMBER NAME  A99FPGMT
       *======================================================*
       *   REPONSE JOUEUR                                     *
       *======================================================*

       *======================================================*
       *   I D E N T I F I C A T I O N     D I V I S I O N    *
       *======================================================*
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A99FPGMT.

       *======================================================*
       *   E N V I R O N M E N T       D I V I S I O N        *
       *======================================================*
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        SOURCE-COMPUTER. IBM-390.
        OBJECT-COMPUTER. IBM-390.

       *======================================================*
       *           D A T A         D I V I S I O N            *
       *======================================================*
        DATA DIVISION.
        WORKING-STORAGE SECTION.

       * ZONE POUR DATE DU JOUR
        01  WS-DATEJ               PIC X(8) VALUE SPACES.

       * DESCRIPTION DE LA SQLCA
            EXEC SQL INCLUDE SQLCA   END-EXEC

        01  SQLCODE-ED             PIC +(3)9 VALUE ZEROES.

       * DESCRIPTION DE LA TABLE JEU
            EXEC SQL INCLUDE JEU      END-EXEC

       * DESCRIPTION DE LA TABLE JOUEUR
            EXEC SQL INCLUDE JOUEUR   END-EXEC

       * DESCRIPTION DE LA TABLE JEU JOUEUR
            EXEC SQL INCLUDE JEUJOUE  END-EXEC

       * DESCRIPTION DE LA TABLE BATAILLE NAVALE
            EXEC SQL INCLUDE BATAILLE END-EXEC

       * HOSTS VARIABLES JOUEUR DE CREATION DU JEU
        01  WS-NCREA               PIC X(20) VALUE SPACES.
       * HOSTS VARIABLES JOUEUR GAGNANT
        01  WS-NGAGN               PIC X(20) VALUE SPACES.
        01  IND-UGAGN              PIC S9(4) COMP VALUE ZEROES.

       * COMPTEURS
        01  NB-BAT-TOUCHES         PIC 9    VALUE ZEROES.
        01  NB-BAT-COULES          PIC 9    VALUE ZEROES.
        01  NB-BLANCS              PIC 9    VALUE ZEROES.
        01  I                      PIC 9    VALUE ZEROES.
        01  NUM-BAT-TOUCHE         PIC 9    VALUE ZEROES.
        01  NUM-BAT-COULE          PIC 9    VALUE ZEROES.

       * ZONE POUR CONTROLE DE LA REPONSE SAISIE
        01  WS-REPON.
            05 WS-REPON-1          PIC X    VALUE SPACES.
               88 WS-REPON-1-VALIDE VALUE '1' THRU '6'.
            05 WS-REPON-2          PIC X    VALUE SPACES.
               88 WS-REPON-2-VALIDE VALUE 'A' THRU 'F'.

       * INDICATEURS
        01                         PIC X.
            88 OK                           VALUE ZEROES.
            88 ERREUR                       VALUE '1'.
        01                         PIC X.
            88 BAT-TOUCHE                   VALUE ZEROES.
            88 BAT-COULE                    VALUE '2'.
            88 BAT-NON-TOUCHE               VALUE '3'.
        01                         PIC X.
            88 JEU-TROUVE                   VALUE ZEROES.
            88 JEU-NON-TROUVE               VALUE '1'.
        01                         PIC X.
            88 BATAILLE-NAVALE-TROUVEE      VALUE ZEROES.
            88 BATAILLE-NAVALE-NON-TROUVEE  VALUE '1'.
        01                         PIC X.
            88 JEU-JOUEUR-TROUVE            VALUE ZEROES.
            88 JEU-JOUEUR-NON-TROUVE        VALUE '1'.
        01                         PIC X.
            88 JOUEUR-GAGNANT               VALUE '1'.

       *------------------------------------------------------*
       *   DESCRIPTION DETAILLEE DE LA ZONE DE COMMUNICATION  *
       *------------------------------------------------------*
        01  WS-COMMAREA.
            05 PROG-PRECEDENT      PIC X(8).
            05 PROG-COURANT        PIC X(8).
            05 PROG-SUIVANT        PIC X(8).
            05                     PIC X(26).

        01 C-R                     PIC S9(8) COMP.

        01 MON-PROG                PIC X(8) VALUE 'A99FPGMT'.
        01 MA-MAP                  PIC X(8) VALUE 'A99FMAP '.
        01 MA-TRX                  PIC X(4) VALUE 'A99F'.

       * USERID
        01  WS-USERID              PIC X(8) VALUE SPACES.

       *------------------------------------------------------*
       *   DESCRIPTION   DE   LA   MAP                        *
       *------------------------------------------------------*
        COPY A99FMAP.

       *------------------------------------------------------*
       *   ZONE DE MESSAGE TAMPON POUR LE SEND FROM           *
       *------------------------------------------------------*
        01  MESSAGE-TXT            PIC X(79).

       *------------------------------------------------------*
       *   DESCRIPTION   DES  TOUCHES   FONCTIONS             *
       *------------------------------------------------------*
        COPY DFHAID.

       *------------------------------------------------------*
       *   DESCRIPTION   DES  ATTRIBUTS                       *
       *------------------------------------------------------*
        COPY DFHBMSCA.
        COPY ATTRIBUT.

       *======================================================*
       *          L I N K A G E     S E C T I O N             *
       *======================================================*
        LINKAGE SECTION.
        01  DFHCOMMAREA.
            05 LK-COMMAREA            PIC X(50).

       *======================================================*
       *     P R O C E D U R E     D I V I S I O N            *
       *======================================================*

        PROCEDURE DIVISION.
        00000-INIT-PROGRAMME.
       *---------------------*
             PERFORM  10000-DEBUT-PROGRAMME
             PERFORM  20000-TRAIT-PROGRAMME
             GOBACK
             .

        10000-DEBUT-PROGRAMME.
       *---------------------*
       *   TEST DE PREMIERE ENTREE DANS LE PROGRAMME
       *   SI NON PROGRAMME  MENU --->  ARRET  (ACCES INTERDIT)
            IF EIBCALEN = 0
               INITIALIZE      WS-COMMAREA
            ELSE
               MOVE LK-COMMAREA    TO  WS-COMMAREA
            END-IF

            MOVE  PROG-COURANT     TO  PROG-PRECEDENT
            MOVE  MON-PROG         TO  PROG-COURANT

       * RECUPERATION DU USERID
            EXEC CICS ASSIGN USERID (WS-USERID) END-EXEC
            .

        20000-TRAIT-PROGRAMME.
       *---------------------*
            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               PERFORM  21000-TRAIT-CHARGEMENT
               PERFORM  22000-TRAIT-ENVOI
            ELSE
               PERFORM  23000-TRAIT-RECEPTION
            END-IF
            .

        21000-TRAIT-CHARGEMENT.
       *----------------------*
       *  CHARGEMENT DE LA MAP AVANT AFFICHAGE
            MOVE LOW-VALUE TO A99FMAPO

       *  SI TRAITEMENT PARTICULIER AVANT AFFICHAGE
       *    PERFORM  21100-TRAIT-SPECIFIQUE
            .

       *21100-TRAIT-SPECIFIQUE.
       *----------------------*
       *    ..............................
       *    ..............................
       *    ..............................
       *    ..............................
       *    .

        22000-TRAIT-ENVOI.
       *-----------------*
       * AFFICHAGE DE LA DATE DU JOUR
            MOVE FUNCTION CURRENT-DATE TO WS-DATEJ
            STRING WS-DATEJ (7 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATEJ (5 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATEJ (1 : 4) DELIMITED BY SIZE
                   INTO DATEJO
            END-STRING

            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               EXEC CICS SEND MAP    ('A99FMAP')
                              ERASE
               END-EXEC
            ELSE
               EXEC CICS SEND MAP    ('A99FMAP')
                              CURSOR
                              ERASE
               END-EXEC
            END-IF

            MOVE PROG-COURANT TO PROG-SUIVANT

            EXEC CICS RETURN TRANSID  (MA-TRX)
                             COMMAREA (WS-COMMAREA)
                             LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23000-TRAIT-RECEPTION.
       *---------------------*
            EVALUATE EIBAID
       * ENTER = AFFICHAGE DE L'ETAT ACTUEL DU JEU
               WHEN DFHENTER
                    PERFORM  23050-RECEIVE-MAP
                    PERFORM  INITIALISATIONS
                    PERFORM  23100-TRAIT-ENTER
                    PERFORM  22000-TRAIT-ENVOI
       * F10 = CREATION OU MODIFICATION DU JEU
               WHEN DFHPF10
                    PERFORM  23050-RECEIVE-MAP
                    PERFORM  23110-TRAIT-PF10
                    PERFORM  22000-TRAIT-ENVOI
       * CLEAR = FIN DIALOGUE
               WHEN DFHCLEAR
                    PERFORM  23200-TRAIT-FIN
       * AUTRE = ERREUR TOUCHE FONCTION
               WHEN OTHER
                    PERFORM  90000-ERR-TOUCHE
            END-EVALUATE
            .

        23050-RECEIVE-MAP.
       *------------------*
            EXEC CICS RECEIVE MAP  ('A99FMAP')
                              RESP (C-R)
            END-EXEC

            EVALUATE C-R
               WHEN DFHRESP(NORMAL)
                    CONTINUE
               WHEN OTHER
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE
            .

        INITIALISATIONS.
       *------------------*
            SET OK TO TRUE
            .

        23100-TRAIT-ENTER.
       *------------------*
       *    ....................................
       *    ...  AFFICHAGE DES INFOS DU JEU  ...
       *    ....................................
       * CONTROLE DU JEU DEMANDE
            PERFORM CTRL-JEU

       * SI JEU TROUVE, AFFICHAGE DES INFOS DU JEU
            IF OK
               PERFORM ALIM-BANDEAU
               PERFORM ALIM-SPECIFIQUE
               MOVE 'SAISIR LA REPONSE PUIS F10 POUR VALIDER'  TO MSGO
               MOVE CURSEUR TO REPONL
            END-IF
            .

        CTRL-JEU.
       *---------*
       * INITIALISATIONS
       *    SET OK       TO TRUE

       * CONTROLE DU CODE JEU DEMANDE
            PERFORM CTRL-CODE-JEU

       * LECTURE DU JEU
            IF OK
               PERFORM LECTURE-JEU
               IF JEU-NON-TROUVE
                  MOVE 'CODE JEU INEXISTANT' TO MSGO
                  MOVE CURSEUR TO CODEJL
                  SET  ERREUR  TO TRUE
               END-IF
            END-IF

       * CONTROLE DU STATUT
            IF OK
               PERFORM CTRL-STATUT
            END-IF

       * CONTROLE DU MODE
            IF OK
               PERFORM CTRL-MODE-JEU
            END-IF
            .

        CTRL-CODE-JEU.
       *--------------*
       * OBLIGATOIRE
            IF CODEJI = SPACES OR LOW-VALUE
               MOVE ATTR-UNPROT-BRT TO CODEJA
               IF OK
                  MOVE 'CODE JEU NON RENSEIGNE' TO MSGO
                  MOVE CURSEUR TO CODEJL
                  SET  ERREUR  TO TRUE
               END-IF
            END-IF
            .

        CTRL-STATUT.
       *------------*
       * DOIT ETRE EGAL A 'A'
            IF JE-STATU NOT = 'A'
               MOVE 'STATUT INVALIDE, IMPOSSIBLE DE JOUER'     TO MSGO
               MOVE CURSEUR TO CODEJL
               SET  ERREUR  TO TRUE
            END-IF
            .

        CTRL-MODE-JEU.
       *--------------*
       * SI MODE INDIVIDUEL ET QU'IL EXISTE DEJA UN JOUEUR ALORS ERREUR
            IF JE-MODEJ = 'I'
               MOVE CODEJI      TO JJ-CODEJ
               EXEC SQL
                 SELECT
                    UJOUE,
                    CODEJ,
                    NPOIN
                 INTO
                    :JJ-UJOUE,
                    :JJ-CODEJ,
                    :JJ-NPOIN
                 FROM JEU_JOUEUR
                 WHERE
                     CODEJ = :JJ-CODEJ
               END-EXEC
               EVALUATE SQLCODE
                  WHEN ZEROES
                  WHEN -811
                     IF JJ-UJOUE NOT = WS-USERID
                     MOVE 'MODE INDIVIDUEL ET IL EXISTE DEJA UN JOUEUR'
                        TO MSGO
                        MOVE CURSEUR TO CODEJL
                        SET  ERREUR  TO TRUE
                     END-IF
                  WHEN +100
                       CONTINUE
                  WHEN OTHER
                       MOVE SQLCODE TO SQLCODE-ED
                       STRING 'ERREUR SELECT1 JEU_JOUEUR, SQLCODE : '
                              SQLCODE-ED DELIMITED BY SIZE
                              INTO MSGO
                       END-STRING
                       PERFORM  22000-TRAIT-ENVOI
               END-EVALUATE
            END-IF
            .

        ALIM-BANDEAU.
       *-------------*
       * ALIMENTATION DES CHAMPS DE LA MAP A PARTIR DES HOST VARIABLES
            MOVE JE-CODEJ        TO CODEJO
            MOVE JE-UCREA        TO UCREAO
            MOVE WS-NCREA        TO NCREAO
            MOVE JE-NBREM        TO NBREMO
            MOVE JE-MODEJ        TO MODEJO
            EVALUATE JE-MODEJ
             WHEN 'C'      MOVE 'COLLECTIF'  TO LMODEJO
             WHEN 'I'      MOVE 'INDIVIDUEL' TO LMODEJO
             WHEN OTHER    MOVE ALL '?'      TO LMODEJO
            END-EVALUATE
            MOVE JE-NPOIN        TO NPOINO
            MOVE JE-UGAGN        TO UGAGNO
            MOVE WS-NGAGN        TO NGAGNO
            MOVE JE-NOREP        TO NOREPO
            MOVE JE-STATU        TO STATUO
            EVALUATE JE-STATU
             WHEN 'A'      MOVE 'ACTIF'    TO LSTATUO
             WHEN 'I'      MOVE 'INACTIF'  TO LSTATUO
             WHEN 'T'      MOVE 'TERMINE'  TO LSTATUO
             WHEN OTHER    MOVE ALL '?'    TO LSTATUO
            END-EVALUATE
            .

        INIT-MAP.
       *---------*
       * INITIALISATION DES CHAMPS DE LA MAP
            MOVE SPACES          TO CODEJO
                                    UCREAO
                                    NCREAO
                                    UGAGNO
                                    NGAGNO
                                    STATUO
                                    LSTATUO
                                    MODEJO
                                    MODEJO
            MOVE ZEROES          TO NBREMO
                                    NOREPO
                                    NPOINO

       * INITIALISATION SPECIFIQUE AU JEU
            PERFORM INIT-SPECIFIQUE
            .

        ALIM-SPECIFIQUE.
       *----------------*
       * LECTURE DE LA TABLE BATAILLE NAVALE
            PERFORM LECTURE-BATAILLE-NAVALE

       * SI NON TROUVE, INITIALISATION DES ZONES DE LA MAP
            IF BATAILLE-NAVALE-NON-TROUVEE
               PERFORM INIT-SPECIFIQUE
       * SI TROUVE, ALIMENTATION DES ZONES DE LA MAP
            ELSE
               PERFORM TRT-TOUCHE-COULE
               MOVE NB-BAT-TOUCHES TO NBATTO
               MOVE NB-BAT-COULES  TO NBATCO
            END-IF
               .

        TRT-TOUCHE-COULE.
       *-----------------*
       * DETERMINATION DES BATEAUX COULES ET TOUCHES
            MOVE ZEROES TO NB-BAT-TOUCHES NB-BAT-COULES

            MOVE ZEROES TO I
            INSPECT BN-RBAT1 TALLYING I FOR ALL SPACES
            IF I = ZEROES
                 ADD 1 TO NB-BAT-COULES
            ELSE
                IF I < 8
                   ADD 1 TO NB-BAT-TOUCHES
               END-IF
            END-IF

            MOVE ZEROES TO I
            INSPECT BN-RBAT2 TALLYING I FOR ALL SPACES
            IF I = ZEROES
                 ADD 1 TO NB-BAT-COULES
            ELSE
                IF I < 6
                   ADD 1 TO NB-BAT-TOUCHES
               END-IF
            END-IF

            MOVE ZEROES TO I
            INSPECT BN-RBAT3 TALLYING I FOR ALL SPACES
            IF I = ZEROES
                 ADD 1 TO NB-BAT-COULES
            ELSE
                IF I < 4
                   ADD 1 TO NB-BAT-TOUCHES
               END-IF
            END-IF

            MOVE ZEROES TO I
            INSPECT BN-RBAT4 TALLYING I FOR ALL SPACES
            IF I = ZEROES
                 ADD 1 TO NB-BAT-COULES
            ELSE
                IF I < 4
                   ADD 1 TO NB-BAT-TOUCHES
               END-IF
            END-IF
            .

        INIT-SPECIFIQUE.
       *----------------*
       * INITIALISATION CHAMPS DE LA MAP POUR LA BATAILLE NAVALE
            MOVE ZEROES TO NBATTO NBATCO
            .

        23110-TRAIT-PF10.
       *-----------------*
       * CONTROLE DU JEU : DOIT EXISTER ET ETRE EN COURS
            PERFORM CTRL-JEU

       * RECUPERATION DES INFOS DE LA TABLE BATAILLE NAVALE
            IF OK
               PERFORM LECTURE-BATAILLE-NAVALE
            END-IF

       * CONTROLE NOMBRE LIMITE DE REPONSES ATTEINT
            IF OK
               PERFORM CTRL-NB-REP-MAX
            END-IF

       * CONTROLE DE LA REPONSE
            IF OK
               PERFORM CTRL-REPONSE
            END-IF

       * TRAITEMENT DES BATIMENTS TOUCHES ET COULES
            IF OK
               PERFORM TRT-BAT-TOUCHE-COULE
               PERFORM AFFICH-NB-TOUCHE-COULE
            END-IF

       * SI PAS D'ERREUR METTRE A JOUR LES TABLES JEU, JEU_JOUEUR
       * ET FAIRE LE TRAITEMENT DU GAGNANT SI GAGNANT
            IF OK
               PERFORM CRE-MAJ-JEU-JOUEUR
               PERFORM MAJ-BATAILLE-NAVALE
               PERFORM TRT-GAGNANT
               PERFORM MAJ-JEU
               PERFORM ALIM-BANDEAU
            END-IF

       * ON REFAIT LE TRAITEMENT ENTER POUR RAFRAICHIR L'ECRAN
       *    PERFORM  23100-TRAIT-ENTER
            .

        CTRL-NB-REP-MAX.
       *----------------*
            IF JE-NOREP = JE-NBREM
               MOVE 'NOMBRE REPONSES LIMITE ATTEINT' TO MSGO
               MOVE CURSEUR TO REPONL
               SET  ERREUR  TO TRUE
            END-IF
            .

        CTRL-REPONSE.
       *-------------*
       * 1ER  CARACTERE DE LA REPONSE : '1' A '6'
       * 2EME CARACTERE DE LA REPONSE : 'A' A 'F'
            MOVE REPONI TO WS-REPON
            IF NOT (WS-REPON-1-VALIDE AND WS-REPON-2-VALIDE)
               SET ERREUR TO TRUE
               MOVE 'REPONSE INVALIDE' TO MSGO
            END-IF
            .

        TRT-BAT-TOUCHE-COULE.
       *--------------------*
       * INITIALISATIONS
            MOVE ZEROES TO NUM-BAT-TOUCHE
                           NUM-BAT-COULE
            SET BAT-NON-TOUCHE TO TRUE

       * DETERMINATION SI 1 BATEAU A ETE TOUCHE OU COULE ET LEQUEL
            PERFORM TRT-BAT1-TOUCHE-COULE

            IF BAT-NON-TOUCHE
               PERFORM TRT-BAT2-TOUCHE-COULE
            END-IF

            IF BAT-NON-TOUCHE
               PERFORM TRT-BAT3-TOUCHE-COULE
            END-IF

            IF BAT-NON-TOUCHE
               PERFORM TRT-BAT4-TOUCHE-COULE
            END-IF
            .

        TRT-BAT1-TOUCHE-COULE.
       *---------------------*
       * BATIMENT 1 TOUCHE, COULE ?
            EVALUATE REPONI
             WHEN BN-SBAT1 (1:2)
                  MOVE REPONI TO BN-RBAT1(1:2)
                  SET BAT-TOUCHE TO TRUE
             WHEN BN-SBAT1 (3:2)
                  MOVE REPONI TO BN-RBAT1(3:2)
                  SET BAT-TOUCHE TO TRUE
             WHEN BN-SBAT1 (5:2)
                  MOVE REPONI TO BN-RBAT1(5:2)
                  SET BAT-TOUCHE TO TRUE
             WHEN BN-SBAT1 (7:2)
                  MOVE REPONI TO BN-RBAT1(7:2)
                  SET BAT-TOUCHE TO TRUE
            END-EVALUATE

            IF BAT-TOUCHE
               MOVE 1 TO NUM-BAT-TOUCHE
            END-IF

            MOVE ZEROES TO I
            INSPECT BN-RBAT1 TALLYING I FOR ALL SPACES
            IF BAT-TOUCHE AND I = ZEROES
               SET BAT-COULE TO TRUE
               MOVE 1 TO NUM-BAT-COULE
               MOVE ZEROES TO NUM-BAT-TOUCHE
            END-IF
            .

        TRT-BAT2-TOUCHE-COULE.
       *---------------------*
       * BATIMENT 2 TOUCHE, COULE ?
            EVALUATE REPONI
             WHEN BN-SBAT2 (1:2)
                  MOVE REPONI TO BN-RBAT2(1:2)
                  SET BAT-TOUCHE TO TRUE
             WHEN BN-SBAT2 (3:2)
                  MOVE REPONI TO BN-RBAT2(3:2)
                  SET BAT-TOUCHE TO TRUE
             WHEN BN-SBAT2 (5:2)
                  MOVE REPONI TO BN-RBAT2(5:2)
                  SET BAT-TOUCHE TO TRUE
            END-EVALUATE

            IF BAT-TOUCHE
               MOVE 2 TO NUM-BAT-TOUCHE
            END-IF

            MOVE ZEROES TO I
            INSPECT BN-RBAT2 TALLYING I FOR ALL SPACES
            IF BAT-TOUCHE AND I = ZEROES
               SET BAT-COULE TO TRUE
               MOVE 2 TO NUM-BAT-COULE
               MOVE ZEROES TO NUM-BAT-TOUCHE
            END-IF
            .

        TRT-BAT3-TOUCHE-COULE.
       *---------------------*
       * BATIMENT 3 TOUCHE, COULE ?
            EVALUATE REPONI
             WHEN BN-SBAT3 (1:2)
                  MOVE REPONI TO BN-RBAT3(1:2)
                  SET BAT-TOUCHE TO TRUE
             WHEN BN-SBAT3 (3:2)
                  MOVE REPONI TO BN-RBAT3(3:2)
                  SET BAT-TOUCHE TO TRUE
            END-EVALUATE

            IF BAT-TOUCHE
               MOVE 3 TO NUM-BAT-TOUCHE
            END-IF

            MOVE ZEROES TO I
            INSPECT BN-RBAT3 TALLYING I FOR ALL SPACES
            IF BAT-TOUCHE AND I = ZEROES
               SET BAT-COULE TO TRUE
               MOVE 3 TO NUM-BAT-COULE
               MOVE ZEROES TO NUM-BAT-TOUCHE
            END-IF
            .

        TRT-BAT4-TOUCHE-COULE.
       *---------------------*
       * BATIMENT 3 TOUCHE, COULE ?
            EVALUATE REPONI
             WHEN BN-SBAT4 (1:2)
                  MOVE REPONI TO BN-RBAT4(1:2)
                  SET BAT-TOUCHE TO TRUE
             WHEN BN-SBAT4 (3:2)
                  MOVE REPONI TO BN-RBAT4(3:2)
                  SET BAT-TOUCHE TO TRUE
            END-EVALUATE

            IF BAT-TOUCHE
               MOVE 4 TO NUM-BAT-TOUCHE
            END-IF

            MOVE ZEROES TO I
            INSPECT BN-RBAT4 TALLYING I FOR ALL SPACES
            IF BAT-TOUCHE AND I = ZEROES
               SET BAT-COULE TO TRUE
               MOVE 4 TO NUM-BAT-COULE
               MOVE ZEROES TO NUM-BAT-TOUCHE
            END-IF
            .

        AFFICH-NB-TOUCHE-COULE.
       *-----------------------*
       * INITIALISATION DES COMPTEURS
            MOVE ZEROES TO NB-BAT-COULES
                           NB-BAT-TOUCHES

       * DETERMINER LE NOMBRE DE BATIMENTS TOUCHES ET COULES
            MOVE ZEROES TO NB-BLANCS
            INSPECT BN-RBAT1 TALLYING NB-BLANCS
               FOR ALL SPACES
            EVALUATE TRUE
               WHEN NB-BLANCS = ZEROES
                    ADD 1 TO NB-BAT-COULES
               WHEN NB-BLANCS < 8
                    ADD 1 TO NB-BAT-TOUCHES
            END-EVALUATE

            MOVE ZEROES TO NB-BLANCS
            INSPECT BN-RBAT2 TALLYING NB-BLANCS
               FOR ALL SPACES
            EVALUATE TRUE
               WHEN NB-BLANCS = ZEROES
                    ADD 1 TO NB-BAT-COULES
               WHEN NB-BLANCS < 6
                    ADD 1 TO NB-BAT-TOUCHES
            END-EVALUATE

            MOVE ZEROES TO NB-BLANCS
            INSPECT BN-RBAT3 TALLYING NB-BLANCS
               FOR ALL SPACES
            EVALUATE TRUE
               WHEN NB-BLANCS = ZEROES
                    ADD 1 TO NB-BAT-COULES
               WHEN NB-BLANCS < 4
                    ADD 1 TO NB-BAT-TOUCHES
            END-EVALUATE

            MOVE ZEROES TO NB-BLANCS
            INSPECT BN-RBAT4 TALLYING NB-BLANCS
               FOR ALL SPACES
            EVALUATE TRUE
               WHEN NB-BLANCS = ZEROES
                    ADD 1 TO NB-BAT-COULES
               WHEN NB-BLANCS < 4
                    ADD 1 TO NB-BAT-TOUCHES
            END-EVALUATE

            MOVE NB-BAT-TOUCHES TO NBATTO
            MOVE NB-BAT-COULES  TO NBATCO

            EVALUATE TRUE
                WHEN BAT-TOUCHE
                  MOVE 'BATIMENT TOUCHE !!!'                      TO MSGO
                WHEN BAT-COULE
                  MOVE 'BATIMENT COULE  !!!'                      TO MSGO
                WHEN OTHER
                  MOVE 'COUP PERDU !'                             TO MSGO
            END-EVALUATE
            MOVE CURSEUR TO REPONL
            .

        LECTURE-JEU.
       *------------*
       * LIRE LE JEU CREE PAR LE MEME USERID
            MOVE CODEJI TO JE-CODEJ

            EXEC SQL
              SELECT
                 CODEJ,
                 UCREA,
                 C.NJOUE,
                 NBREM,
                 MODEJ,
                 E.NPOIN,
                 VALUE(UGAGN, ' '),
                 VALUE(G.NJOUE, ' '),
                 VALUE(NOREP, 0),
                 STATU
              INTO
                 :JE-CODEJ,
                 :JE-UCREA,
                 :WS-NCREA,
                 :JE-NBREM,
                 :JE-MODEJ,
                 :JE-NPOIN,
                 :JE-UGAGN,
                 :WS-NGAGN,
                 :JE-NOREP,
                 :JE-STATU
              FROM JEU    E
              LEFT OUTER JOIN JOUEUR C ON UCREA = C.UJOUE
              LEFT OUTER JOIN JOUEUR G ON UGAGN = G.UJOUE
              WHERE
                 CODEJ = :JE-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    SET JEU-TROUVE TO TRUE
               WHEN +100
                    SET JEU-NON-TROUVE     TO TRUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT JEU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        LECTURE-BATAILLE-NAVALE.
       *------------------------*
            MOVE JE-CODEJ TO BN-CODEJ

            EXEC SQL
              SELECT
                 CODEJ,
                 SBAT1,
                 SBAT2,
                 SBAT3,
                 SBAT4,
                 VALUE(RBAT1, ' '),
                 VALUE(RBAT2, ' '),
                 VALUE(RBAT3, ' '),
                 VALUE(RBAT4, ' ')
              INTO
                 :BN-CODEJ,
                 :BN-SBAT1,
                 :BN-SBAT2,
                 :BN-SBAT3,
                 :BN-SBAT4,
                 :BN-RBAT1,
                 :BN-RBAT2,
                 :BN-RBAT3,
                 :BN-RBAT4
              FROM BATAILLE_NAVALE
              WHERE
                 CODEJ = :BN-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    SET BATAILLE-NAVALE-TROUVEE     TO TRUE
               WHEN +100
                    SET BATAILLE-NAVALE-NON-TROUVEE TO TRUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT BATAILLE_NAVALE, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        TRT-GAGNANT.
       *------------*
       * ON VERIFIE SI LE JOUEUR A GAGNE
            IF NB-BAT-COULES = 4
               SET JOUEUR-GAGNANT TO TRUE
               MOVE 'BRAVO TU AS GAGNE !!!!' TO MSGO
               PERFORM MAJ-JEU-JOUEUR
            END-IF
            .

        MAJ-BATAILLE-NAVALE.
       *-------------------*
            MOVE JE-CODEJ    TO BN-CODEJ

            EXEC SQL UPDATE BATAILLE_NAVALE SET
               RBAT1 = :BN-RBAT1,
               RBAT2 = :BN-RBAT2,
               RBAT3 = :BN-RBAT3,
               RBAT4 = :BN-RBAT4
               WHERE CODEJ = :JJ-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR UPDATE JEU_JOUEUR, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        MAJ-JEU-JOUEUR.
       *----------------*
       * AJOUT DES POINTS SI GAGNANT
       * NB POINTS GAGNANTS = 36 - NB REPONSES
            MOVE WS-USERID   TO JJ-UJOUE
            MOVE JE-CODEJ    TO JJ-CODEJ
            IF JOUEUR-GAGNANT
               COMPUTE JJ-NPOIN = 36 - JE-NOREP
            ELSE
               MOVE ZEROES   TO JJ-NPOIN
            END-IF

            EXEC SQL UPDATE JEU_JOUEUR SET
               NPOIN = :JJ-NPOIN
               WHERE UJOUE = :JJ-UJOUE
                 AND CODEJ = :JJ-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR UPDATE JEU_JOUEUR, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        MAJ-JEU.
       *--------*
       * INCREMENTER LE NOMBRE DE REPONSES
            ADD 1         TO JE-NOREP
       * RENSEIGNER LE GAGNANT
            IF JOUEUR-GAGNANT
               MOVE 'T'       TO JE-STATU
               MOVE WS-USERID TO JE-UGAGN
               MOVE JJ-NPOIN  TO JE-NPOIN
               MOVE ZERO      TO IND-UGAGN
            ELSE
               MOVE -1        TO IND-UGAGN
            END-IF

            EXEC SQL UPDATE JEU  SET
               NOREP = :JE-NOREP,
               STATU = :JE-STATU,
               NPOIN = :JE-NPOIN,
               UGAGN = :JE-UGAGN :IND-UGAGN
               WHERE CODEJ = :JE-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR UPDATE JEU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE

       * AFFICHAGE DU NOMBRE DE REPONSES
            MOVE JE-NOREP TO NOREPO
            .

        CRE-MAJ-JEU-JOUEUR.
       *------------------*
            PERFORM LECTURE-JEU-JOUEUR
            IF JEU-JOUEUR-NON-TROUVE
               PERFORM CREAT-JEU-JOUEUR
            END-IF
            .

        LECTURE-JEU-JOUEUR.
       *------------------*
            MOVE WS-USERID   TO JJ-UJOUE
            MOVE CODEJI      TO JJ-CODEJ

            EXEC SQL
              SELECT
                 UJOUE,
                 CODEJ,
                 NPOIN
              INTO
                 :JJ-UJOUE,
                 :JJ-CODEJ,
                 :JJ-NPOIN
              FROM JEU_JOUEUR
              WHERE
                  UJOUE = :JJ-UJOUE
              AND CODEJ = :JJ-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    SET JEU-JOUEUR-TROUVE TO TRUE
               WHEN +100
                    SET JEU-JOUEUR-NON-TROUVE     TO TRUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT JEU_JOUEUR, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        CREAT-JEU-JOUEUR.
       *----------------*
       * CREATION DU JOUEUR DANS LA TABLE JEU_JOUEUR
            MOVE WS-USERID   TO JJ-UJOUE
            MOVE JE-CODEJ    TO JJ-CODEJ
            MOVE ZEROES      TO JJ-NPOIN

            EXEC SQL INSERT INTO JEU_JOUEUR VALUES
              (:JJ-UJOUE,
               :JJ-CODEJ,
               :JJ-NPOIN)
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR INSERT JEU_JOUEUR, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        23110-PROG-SUIVANT.
       *------------------*
            EXEC CICS XCTL  PROGRAM  (PROG-SUIVANT)
                            COMMAREA (WS-COMMAREA)
                            LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23200-TRAIT-FIN.
       *---------------*
            MOVE 'FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        90000-ERR-TOUCHE.
       *----------------*
            MOVE 'TOUCHE DE FONCTION INVALIDE' TO MSGO
            PERFORM  22000-TRAIT-ENVOI
            .

        91000-ERREUR-CICS.
       *-------------------*
            MOVE 'ERREUR CICS !!!  FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        99000-FIN-CICS.
       *--------------*
            EXEC CICS SEND FROM   (MESSAGE-TXT)
                           LENGTH (LENGTH OF MESSAGE-TXT)
                           ERASE
            END-EXEC

            EXEC CICS RETURN END-EXEC
            .
 MEMBER NAME  A99GMAP
 A99GMAP DFHMSD TYPE=&SYSPARM,MODE=INOUT,LANG=COBOL,EXTATT=YES,         X
                CTRL=(FREEKB,FRSET),STORAGE=AUTO,TIOAPFX=YES
 A99GMAP DFHMDI COLUMN=1,LINE=1,SIZE=(24,80)
         DFHMDF POS=(1,1),ATTRB=ASKIP,LENGTH=04,INITIAL='A99G'
         DFHMDF POS=(1,23),ATTRB=ASKIP,LENGTH=32,                       X
                INITIAL='VISU/CREAT/MODIF JEU'
         DFHMDF POS=(1,65),ATTRB=ASKIP,LENGTH=07,INITIAL='A99GMAP'
         DFHMDF POS=(2,59),ATTRB=ASKIP,LENGTH=6,INITIAL='DATE :'
 DATEJ   DFHMDF POS=(2,66),ATTRB=(ASKIP,FSET),LENGTH=10
         DFHMDF POS=(4,05),ATTRB=ASKIP,LENGTH=12,                       X
                INITIAL='CODE JEU   :'
 CODEJ   DFHMDF POS=(4,18),ATTRB=(UNPROT,FSET,IC),LENGTH=5
         DFHMDF POS=(4,24),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(4,30),ATTRB=ASKIP,LENGTH=19,                       X
                INITIAL='USERID DE CREATION:'
 UCREA   DFHMDF POS=(4,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=8
 NCREA   DFHMDF POS=(4,59),ATTRB=(ASKIP,BRT,FSET),LENGTH=20
         DFHMDF POS=(05,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NB REP MAX :'
 NBREM   DFHMDF POS=(05,18),ATTRB=(UNPROT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(05,21),ATTRB=ASKIP
         DFHMDF POS=(05,30),ATTRB=ASKIP,LENGTH=19,                      X
                INITIAL='MODE DU JEU (I/C) :'
 MODEJ   DFHMDF POS=(05,50),ATTRB=(UNPROT,FSET),LENGTH=1
 LMODEJ  DFHMDF POS=(05,52),ATTRB=(ASKIP,BRT,FSET),LENGTH=20
         DFHMDF POS=(06,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NB POINTS  :'
 NPOIN   DFHMDF POS=(06,18),ATTRB=(UNPROT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(06,21),ATTRB=ASKIP
         DFHMDF POS=(07,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='STATUT     :'
 STATU   DFHMDF POS=(07,18),ATTRB=(UNPROT,FSET),LENGTH=1
 LSTATU  DFHMDF POS=(07,20),ATTRB=(ASKIP,BRT,FSET),LENGTH=10
         DFHMDF POS=(08,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NUM REPONSE:'
 NOREP   DFHMDF POS=(08,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(08,30),ATTRB=ASKIP,LENGTH=19,                      X
                INITIAL='USERID GAGNANT    :'
 UGAGN   DFHMDF POS=(08,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=8
 NGAGN   DFHMDF POS=(08,59),ATTRB=(ASKIP,BRT,FSET),LENGTH=20
         DFHMDF POS=(11,30),ATTRB=ASKIP,LENGTH=15,                      X
                INITIAL='JEU DU PENDU'
         DFHMDF POS=(12,30),ATTRB=ASKIP,LENGTH=15,                      X
                INITIAL='------------'
         DFHMDF POS=(14,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NB LETTRES :'
 NBLET   DFHMDF POS=(14,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(14,21),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(14,30),ATTRB=ASKIP,LENGTH=19,                      X
                INITIAL='NB COUPS RESTANTS :'
 NBRES   DFHMDF POS=(14,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(16,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='SOLUTION   :'
 SLET01  DFHMDF POS=(16,18),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET02  DFHMDF POS=(16,20),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET03  DFHMDF POS=(16,22),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET04  DFHMDF POS=(16,24),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET05  DFHMDF POS=(16,26),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET06  DFHMDF POS=(16,28),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET07  DFHMDF POS=(16,30),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET08  DFHMDF POS=(16,32),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET09  DFHMDF POS=(16,34),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET10  DFHMDF POS=(16,36),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET11  DFHMDF POS=(16,38),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET12  DFHMDF POS=(16,40),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET13  DFHMDF POS=(16,42),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET14  DFHMDF POS=(16,44),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET15  DFHMDF POS=(16,46),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET16  DFHMDF POS=(16,48),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET17  DFHMDF POS=(16,50),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET18  DFHMDF POS=(16,52),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET19  DFHMDF POS=(16,54),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 SLET20  DFHMDF POS=(16,56),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
         DFHMDF POS=(16,58),ATTRB=ASKIP
         DFHMDF POS=(18,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='ETAT ACTUEL:'
 RLET01  DFHMDF POS=(18,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET02  DFHMDF POS=(18,20),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET03  DFHMDF POS=(18,22),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET04  DFHMDF POS=(18,24),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET05  DFHMDF POS=(18,26),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET06  DFHMDF POS=(18,28),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET07  DFHMDF POS=(18,30),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET08  DFHMDF POS=(18,32),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET09  DFHMDF POS=(18,34),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET10  DFHMDF POS=(18,36),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET11  DFHMDF POS=(18,38),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET12  DFHMDF POS=(18,40),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET13  DFHMDF POS=(18,42),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET14  DFHMDF POS=(18,44),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET15  DFHMDF POS=(18,46),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET16  DFHMDF POS=(18,48),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET17  DFHMDF POS=(18,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET18  DFHMDF POS=(18,52),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET19  DFHMDF POS=(18,54),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 RLET20  DFHMDF POS=(18,56),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
         DFHMDF POS=(20,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='HISTORIQUE :'
 ULET01  DFHMDF POS=(20,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET02  DFHMDF POS=(20,20),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET03  DFHMDF POS=(20,22),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET04  DFHMDF POS=(20,24),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET05  DFHMDF POS=(20,26),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET06  DFHMDF POS=(20,28),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET07  DFHMDF POS=(20,30),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET08  DFHMDF POS=(20,32),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET09  DFHMDF POS=(20,34),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET10  DFHMDF POS=(20,36),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET11  DFHMDF POS=(20,38),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET12  DFHMDF POS=(20,40),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET13  DFHMDF POS=(20,42),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET14  DFHMDF POS=(20,44),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET15  DFHMDF POS=(20,46),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET16  DFHMDF POS=(20,48),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET17  DFHMDF POS=(20,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET18  DFHMDF POS=(20,52),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET19  DFHMDF POS=(20,54),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET20  DFHMDF POS=(20,56),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
         DFHMDF POS=(23,1),ATTRB=ASKIP,LENGTH=13,INITIAL='CLEAR-FIN'
         DFHMDF POS=(23,15),ATTRB=ASKIP,LENGTH=32,                      X
                INITIAL='PF7-JEU PREC    PF8-JEU SUIV'
         DFHMDF POS=(23,48),ATTRB=ASKIP,LENGTH=15,                      X
                INITIAL='PF10-VALIDATION'
 MSG     DFHMDF POS=(24,1),ATTRB=(ASKIP,BRT),LENGTH=79
         DFHMSD TYPE=FINAL
         END
 MEMBER NAME  A99HMAP
 A99HMAP DFHMSD TYPE=&SYSPARM,MODE=INOUT,LANG=COBOL,EXTATT=YES,         X
                CTRL=(FREEKB,FRSET),STORAGE=AUTO,TIOAPFX=YES
 A99HMAP DFHMDI COLUMN=1,LINE=1,SIZE=(24,80)
         DFHMDF POS=(1,1),ATTRB=ASKIP,LENGTH=04,INITIAL='A99H'
         DFHMDF POS=(1,23),ATTRB=ASKIP,LENGTH=17,                       X
                INITIAL='REPONSE DU JOUEUR'
         DFHMDF POS=(1,65),ATTRB=ASKIP,LENGTH=07,INITIAL='A99HMAP'
         DFHMDF POS=(2,59),ATTRB=ASKIP,LENGTH=6,INITIAL='DATE :'
 DATEJ   DFHMDF POS=(2,66),ATTRB=(ASKIP,FSET),LENGTH=10
         DFHMDF POS=(4,05),ATTRB=ASKIP,LENGTH=12,                       X
                INITIAL='CODE JEU   :'
 CODEJ   DFHMDF POS=(4,18),ATTRB=(UNPROT,FSET,IC),LENGTH=5
         DFHMDF POS=(4,24),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(4,30),ATTRB=ASKIP,LENGTH=19,                       X
                INITIAL='USERID DE CREATION:'
 UCREA   DFHMDF POS=(4,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=8
 NCREA   DFHMDF POS=(4,59),ATTRB=(ASKIP,BRT,FSET),LENGTH=20
         DFHMDF POS=(05,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NB REP MAX :'
 NBREM   DFHMDF POS=(05,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(05,21),ATTRB=ASKIP
         DFHMDF POS=(05,30),ATTRB=ASKIP,LENGTH=19,                      X
                INITIAL='MODE DU JEU (I/C) :'
 MODEJ   DFHMDF POS=(05,50),ATTRB=(ASKIP,FSET),LENGTH=1
 LMODEJ  DFHMDF POS=(05,52),ATTRB=(ASKIP,BRT,FSET),LENGTH=20
         DFHMDF POS=(06,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NB POINTS  :'
 NPOIN   DFHMDF POS=(06,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(06,21),ATTRB=ASKIP
         DFHMDF POS=(07,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='STATUT     :'
 STATU   DFHMDF POS=(07,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 LSTATU  DFHMDF POS=(07,20),ATTRB=(ASKIP,BRT,FSET),LENGTH=10
         DFHMDF POS=(08,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NUM REPONSE:'
 NOREP   DFHMDF POS=(08,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(08,30),ATTRB=ASKIP,LENGTH=19,                      X
                INITIAL='USERID GAGNANT    :'
 UGAGN   DFHMDF POS=(08,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=8
 NGAGN   DFHMDF POS=(08,59),ATTRB=(ASKIP,BRT,FSET),LENGTH=20
         DFHMDF POS=(11,30),ATTRB=(ASKIP,BRT),LENGTH=15,                X
                INITIAL='JEU DU PENDU'
         DFHMDF POS=(12,30),ATTRB=(ASKIP,BRT),LENGTH=15,                X
                INITIAL='------------'
         DFHMDF POS=(14,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NB LETTRES :'
 NBLET   DFHMDF POS=(14,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(14,31),ATTRB=ASKIP,LENGTH=19,                      X
                INITIAL='NB COUPS RESTANTS :'
 NBRES   DFHMDF POS=(14,51),ATTRB=(ASKIP,BRT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(16,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='---> MOT ? :'
 RLET01  DFHMDF POS=(16,18),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET02  DFHMDF POS=(16,20),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET03  DFHMDF POS=(16,22),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET04  DFHMDF POS=(16,24),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET05  DFHMDF POS=(16,26),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET06  DFHMDF POS=(16,28),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET07  DFHMDF POS=(16,30),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET08  DFHMDF POS=(16,32),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET09  DFHMDF POS=(16,34),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET10  DFHMDF POS=(16,36),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET11  DFHMDF POS=(16,38),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET12  DFHMDF POS=(16,40),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET13  DFHMDF POS=(16,42),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET14  DFHMDF POS=(16,44),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET15  DFHMDF POS=(16,46),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET16  DFHMDF POS=(16,48),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET17  DFHMDF POS=(16,50),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET18  DFHMDF POS=(16,52),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET19  DFHMDF POS=(16,54),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
 RLET20  DFHMDF POS=(16,56),ATTRB=(UNPROT,BRT,FSET),LENGTH=1
         DFHMDF POS=(16,58),ATTRB=ASKIP
         DFHMDF POS=(18,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='HISTORIQUE :'
 ULET01  DFHMDF POS=(18,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET02  DFHMDF POS=(18,20),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET03  DFHMDF POS=(18,22),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET04  DFHMDF POS=(18,24),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET05  DFHMDF POS=(18,26),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET06  DFHMDF POS=(18,28),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET07  DFHMDF POS=(18,30),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET08  DFHMDF POS=(18,32),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET09  DFHMDF POS=(18,34),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET10  DFHMDF POS=(18,36),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET11  DFHMDF POS=(18,38),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET12  DFHMDF POS=(18,40),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET13  DFHMDF POS=(18,42),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET14  DFHMDF POS=(18,44),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET15  DFHMDF POS=(18,46),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET16  DFHMDF POS=(18,48),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET17  DFHMDF POS=(18,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET18  DFHMDF POS=(18,52),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET19  DFHMDF POS=(18,54),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
 ULET20  DFHMDF POS=(18,56),ATTRB=(ASKIP,BRT,FSET),LENGTH=1
         DFHMDF POS=(20,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='-> LETTRE ?:'
 LETTRE  DFHMDF POS=(20,18),ATTRB=(UNPROT,FSET),LENGTH=01
         DFHMDF POS=(20,20),ATTRB=ASKIP
         DFHMDF POS=(23,1),ATTRB=ASKIP,LENGTH=11,INITIAL='CLEAR-FIN'
         DFHMDF POS=(23,16),ATTRB=ASKIP,LENGTH=18,                      X
                INITIAL='ENTER-AFFICH JEU'
         DFHMDF POS=(23,38),ATTRB=ASKIP,LENGTH=17,                      X
                INITIAL='PF10-VALIDATION'
 MSG     DFHMDF POS=(24,1),ATTRB=(ASKIP,BRT),LENGTH=79
         DFHMSD TYPE=FINAL
         END
 MEMBER NAME  A99HPGMT
       *======================================================*
       *   REPONSE JOUEUR POUR LE JEU DU PENDU                *
       *======================================================*

       *======================================================*
       *   I D E N T I F I C A T I O N     D I V I S I O N    *
       *======================================================*
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A99HPGMT.

       *======================================================*
       *   E N V I R O N M E N T       D I V I S I O N        *
       *======================================================*
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        SOURCE-COMPUTER. IBM-390.
        OBJECT-COMPUTER. IBM-390.

       *======================================================*
       *           D A T A         D I V I S I O N            *
       *======================================================*
        DATA DIVISION.
        WORKING-STORAGE SECTION.

       * ZONE POUR DATE DU JOUR
        01  WS-DATEJ               PIC X(8) VALUE SPACES.

       * DESCRIPTION DE LA SQLCA
            EXEC SQL INCLUDE SQLCA   END-EXEC

        01  SQLCODE-ED             PIC +(3)9 VALUE ZEROES.

       * DESCRIPTION DE LA TABLE JEU
            EXEC SQL INCLUDE JEU      END-EXEC

       * DESCRIPTION DE LA TABLE JOUEUR
            EXEC SQL INCLUDE JOUEUR   END-EXEC

       * DESCRIPTION DE LA TABLE JEU JOUEUR
            EXEC SQL INCLUDE JEUJOUE  END-EXEC

       * DESCRIPTION DE LA TABLE PENDU
            EXEC SQL INCLUDE PENDU END-EXEC

       * HOSTS VARIABLES JOUEUR DE CREATION DU JEU
        01  WS-NCREA               PIC X(20) VALUE SPACES.
       * HOSTS VARIABLES JOUEUR GAGNANT
        01  WS-NGAGN               PIC X(20) VALUE SPACES.
        01  IND-UGAGN              PIC S9(4) COMP VALUE ZEROES.

       * NOMBRE DE COUPS RESTANTS
        01  WS-RESTANT             PIC 99    VALUE ZEROES.

       * COMPTEUR POUR CONTROLE SAISIE D'UN DOUBLON
        01  CPT-DOUBLE             PIC 99    VALUE ZEROES.

       * INDICATEURS
        01                         PIC X.
            88 OK                           VALUE ZEROES.
            88 ERREUR                       VALUE '1'.
        01                         PIC X.
            88 LETTRE-SAISIE                VALUE 'L'.
            88 MOT-SAISI                    VALUE 'M'.
        01                         PIC X.
            88 LETTRE-INEXISTANTE           VALUE 'I'.
            88 LETTRE-EXISTANTE             VALUE 'E'.
        01                         PIC X.
            88 MOT-NON-TROUVE               VALUE 'N'.
            88 MOT-TROUVE                   VALUE 'Z'.
        01                         PIC X.
            88 JEU-TROUVE                   VALUE ZEROES.
            88 JEU-NON-TROUVE               VALUE '1'.
        01                         PIC X.
            88 PENDU-TROUVE                 VALUE ZEROES.
            88 PENDU-NON-TROUVE             VALUE '1'.
        01                         PIC X.
            88 JEU-JOUEUR-TROUVE            VALUE ZEROES.
            88 JEU-JOUEUR-NON-TROUVE        VALUE '1'.
        01                         PIC X.
            88 JOUEUR-GAGNANT               VALUE '1'.

       *------------------------------------------------------*
       *   DESCRIPTION DETAILLEE DE LA ZONE DE COMMUNICATION  *
       *------------------------------------------------------*
        01  WS-COMMAREA.
            05 PROG-PRECEDENT      PIC X(8).
            05 PROG-COURANT        PIC X(8).
            05 PROG-SUIVANT        PIC X(8).
            05                     PIC X(26).

        01 C-R                     PIC S9(8) COMP.

        01 MON-PROG                PIC X(8) VALUE 'A99HPGMT'.
        01 MA-MAP                  PIC X(8) VALUE 'A99HMAP '.
        01 MA-TRX                  PIC X(4) VALUE 'A99H'.

       * USERID
        01  WS-USERID              PIC X(8) VALUE SPACES.

       *------------------------------------------------------*
       *   DESCRIPTION   DE   LA   MAP                        *
       *------------------------------------------------------*
        COPY A99HMAP.
        01  REDEFINES A99HMAPO.
            05               PIC X(230).
            05 TAB-RMOT.
              10 OCCURS 20.
                15             PIC X(7).
                15 POSTE-RMOT  PIC X.
            05 TAB-ULETT.
              10 OCCURS 20.
                15             PIC X(7).
                15 POSTE-ULETT PIC X.

        01  WS-TAB.
            05 WS-POSTE PIC X OCCURS 20.

        01  WS-TAB2.
            05 WS-POSTE2 PIC X OCCURS 20.

        01  I PIC 99 VALUE ZEROES.

       *------------------------------------------------------*
       *   ZONE DE MESSAGE TAMPON POUR LE SEND FROM           *
       *------------------------------------------------------*
        01  MESSAGE-TXT            PIC X(79).

       *------------------------------------------------------*
       *   DESCRIPTION   DES  TOUCHES   FONCTIONS             *
       *------------------------------------------------------*
        COPY DFHAID.

       *------------------------------------------------------*
       *   DESCRIPTION   DES  ATTRIBUTS                       *
       *------------------------------------------------------*
        COPY DFHBMSCA.
        COPY ATTRIBUT.

       *======================================================*
       *          L I N K A G E     S E C T I O N             *
       *======================================================*
        LINKAGE SECTION.
        01  DFHCOMMAREA.
            05 LK-COMMAREA            PIC X(50).

       *======================================================*
       *     P R O C E D U R E     D I V I S I O N            *
       *======================================================*

        PROCEDURE DIVISION.
        00000-INIT-PROGRAMME.
       *---------------------*
             EXEC SQL SET SCHEMA FORA99 END-EXEC

             PERFORM  10000-DEBUT-PROGRAMME
             PERFORM  20000-TRAIT-PROGRAMME
             GOBACK
             .

        10000-DEBUT-PROGRAMME.
       *---------------------*
       *   TEST DE PREMIERE ENTREE DANS LE PROGRAMME
       *   SI NON PROGRAMME  MENU --->  ARRET  (ACCES INTERDIT)
            IF EIBCALEN = 0
               INITIALIZE      WS-COMMAREA
            ELSE
               MOVE LK-COMMAREA    TO  WS-COMMAREA
            END-IF

            MOVE  PROG-COURANT     TO  PROG-PRECEDENT
            MOVE  MON-PROG         TO  PROG-COURANT

       * RECUPERATION DU USERID
            EXEC CICS ASSIGN USERID (WS-USERID) END-EXEC
            .

        20000-TRAIT-PROGRAMME.
       *---------------------*
            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               PERFORM  21000-TRAIT-CHARGEMENT
               PERFORM  22000-TRAIT-ENVOI
            ELSE
               PERFORM  23000-TRAIT-RECEPTION
            END-IF
            .

        21000-TRAIT-CHARGEMENT.
       *----------------------*
       *  CHARGEMENT DE LA MAP AVANT AFFICHAGE
            MOVE LOW-VALUE TO A99HMAPO

       *  SI TRAITEMENT PARTICULIER AVANT AFFICHAGE
       *    PERFORM  21100-TRAIT-SPECIFIQUE
            .

       *21100-TRAIT-SPECIFIQUE.
       *----------------------*
       *    ..............................
       *    ..............................
       *    ..............................
       *    ..............................
       *    .

        22000-TRAIT-ENVOI.
       *-----------------*
       * AFFICHAGE DE LA DATE DU JOUR
            MOVE FUNCTION CURRENT-DATE TO WS-DATEJ
            STRING WS-DATEJ (7 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATEJ (5 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATEJ (1 : 4) DELIMITED BY SIZE
                   INTO DATEJO
            END-STRING

            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               EXEC CICS SEND MAP    ('A99HMAP')
                              ERASE
               END-EXEC
            ELSE
               EXEC CICS SEND MAP    ('A99HMAP')
                              CURSOR
                              ERASE
               END-EXEC
            END-IF

            MOVE PROG-COURANT TO PROG-SUIVANT

            EXEC CICS RETURN TRANSID  (MA-TRX)
                             COMMAREA (WS-COMMAREA)
                             LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23000-TRAIT-RECEPTION.
       *---------------------*
            EVALUATE EIBAID
       * ENTER = AFFICHAGE DE L'ETAT ACTUEL DU JEU
               WHEN DFHENTER
                    PERFORM  23050-RECEIVE-MAP
                    PERFORM  INITIALISATIONS
                    PERFORM  23100-TRAIT-ENTER
                    PERFORM  22000-TRAIT-ENVOI
       * F10 = CREATION OU MODIFICATION DU JEU
               WHEN DFHPF10
                    PERFORM  23050-RECEIVE-MAP
                    PERFORM  23110-TRAIT-PF10
                    PERFORM  22000-TRAIT-ENVOI
       * CLEAR = FIN DIALOGUE
               WHEN DFHCLEAR
                    PERFORM  23200-TRAIT-FIN
       * AUTRE = ERREUR TOUCHE FONCTION
               WHEN OTHER
                    PERFORM  90000-ERR-TOUCHE
            END-EVALUATE
            .

        23050-RECEIVE-MAP.
       *------------------*
            EXEC CICS RECEIVE MAP  ('A99HMAP')
                              RESP (C-R)
            END-EXEC

            EVALUATE C-R
               WHEN DFHRESP(NORMAL)
                    CONTINUE
               WHEN OTHER
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE
            .

        INITIALISATIONS.
       *------------------*
            SET OK TO TRUE
            .

        23100-TRAIT-ENTER.
       *------------------*
       *    ....................................
       *    ...  AFFICHAGE DES INFOS DU JEU  ...
       *    ....................................
       * CONTROLE DU JEU DEMANDE
            PERFORM CTRL-JEU

       * SI JEU TROUVE, AFFICHAGE DES INFOS DU JEU
            IF OK
               PERFORM ALIM-BANDEAU
               PERFORM ALIM-SPECIFIQUE
               MOVE 'SAISIR LA REPONSE PUIS F10 POUR VALIDER'  TO MSGO
               MOVE CURSEUR TO LETTREL
            END-IF
            .

        CTRL-JEU.
       *---------*
       * INITIALISATIONS
       *    SET OK       TO TRUE

       * CONTROLE DU CODE JEU DEMANDE
            PERFORM CTRL-CODE-JEU

       * LECTURE DU JEU
            IF OK
               PERFORM LECTURE-JEU
               IF JEU-NON-TROUVE
                  MOVE 'CODE JEU INEXISTANT' TO MSGO
                  MOVE CURSEUR TO CODEJL
                  SET  ERREUR  TO TRUE
               END-IF
            END-IF

       * CONTROLE DU STATUT
            IF OK
               PERFORM CTRL-STATUT
            END-IF

       * CONTROLE DU MODE
            IF OK
               PERFORM CTRL-MODE-JEU
            END-IF
            .

        CTRL-CODE-JEU.
       *--------------*
       * OBLIGATOIRE
            IF CODEJI = SPACES OR LOW-VALUE
               MOVE ATTR-UNPROT-BRT TO CODEJA
               IF OK
                  MOVE 'CODE JEU NON RENSEIGNE' TO MSGO
                  MOVE CURSEUR TO CODEJL
                  SET  ERREUR  TO TRUE
               END-IF
            END-IF
            .

        CTRL-STATUT.
       *------------*
       * DOIT ETRE EGAL A 'A'
            IF JE-STATU NOT = 'A'
               MOVE 'STATUT INVALIDE, IMPOSSIBLE DE JOUER'     TO MSGO
               MOVE CURSEUR TO CODEJL
               SET  ERREUR  TO TRUE
            END-IF
            .

        CTRL-MODE-JEU.
       *--------------*
       * SI MODE INDIVIDUEL ET QU'IL EXISTE DEJA UN JOUEUR ALORS ERREUR
            IF JE-MODEJ = 'I'
               MOVE CODEJI      TO JJ-CODEJ
               EXEC SQL
                 SELECT
                    UJOUE,
                    CODEJ,
                    NPOIN
                 INTO
                    :JJ-UJOUE,
                    :JJ-CODEJ,
                    :JJ-NPOIN
                 FROM JEU_JOUEUR
                 WHERE
                     CODEJ = :JJ-CODEJ
               END-EXEC
               EVALUATE SQLCODE
                  WHEN ZEROES
                  WHEN -811
                     IF JJ-UJOUE NOT = WS-USERID
                     MOVE 'MODE INDIVIDUEL ET IL EXISTE DEJA UN JOUEUR'
                        TO MSGO
                        MOVE CURSEUR TO CODEJL
                        SET  ERREUR  TO TRUE
                     END-IF
                  WHEN +100
                       CONTINUE
                  WHEN OTHER
                       MOVE SQLCODE TO SQLCODE-ED
                       STRING 'ERREUR SELECT1 JEU_JOUEUR, SQLCODE : '
                              SQLCODE-ED DELIMITED BY SIZE
                              INTO MSGO
                       END-STRING
                       PERFORM  22000-TRAIT-ENVOI
               END-EVALUATE
            END-IF
            .

        ALIM-BANDEAU.
       *-------------*
       * ALIMENTATION DES CHAMPS DE LA MAP A PARTIR DES HOST VARIABLES
            MOVE JE-CODEJ        TO CODEJO
            MOVE JE-UCREA        TO UCREAO
            MOVE WS-NCREA        TO NCREAO
            MOVE JE-NBREM        TO NBREMO
            MOVE JE-MODEJ        TO MODEJO
            EVALUATE JE-MODEJ
             WHEN 'C'      MOVE 'COLLECTIF'  TO LMODEJO
             WHEN 'I'      MOVE 'INDIVIDUEL' TO LMODEJO
             WHEN OTHER    MOVE ALL '?'      TO LMODEJO
            END-EVALUATE
            MOVE JE-NPOIN        TO NPOINO
            MOVE JE-UGAGN        TO UGAGNO
            MOVE WS-NGAGN        TO NGAGNO
            MOVE JE-NOREP        TO NOREPO
            MOVE JE-STATU        TO STATUO
            EVALUATE JE-STATU
             WHEN 'A'      MOVE 'ACTIF'    TO LSTATUO
             WHEN 'I'      MOVE 'INACTIF'  TO LSTATUO
             WHEN 'T'      MOVE 'TERMINE'  TO LSTATUO
             WHEN OTHER    MOVE ALL '?'    TO LSTATUO
            END-EVALUATE
            .

        INIT-MAP.
       *---------*
       * INITIALISATION DES CHAMPS DE LA MAP
            MOVE SPACES          TO CODEJO
                                    UCREAO
                                    NCREAO
                                    UGAGNO
                                    NGAGNO
                                    STATUO
                                    LSTATUO
                                    MODEJO
                                    MODEJO
            MOVE ZEROES          TO NBREMO
                                    NOREPO
                                    NPOINO

       * INITIALISATION SPECIFIQUE AU JEU
            PERFORM INIT-SPECIFIQUE
            .

        ALIM-SPECIFIQUE.
       *----------------*
       * ALIMENTATION MAP PENDU
            MOVE JE-CODEJ TO PE-CODEJ

            EXEC SQL
              SELECT
                 CODEJ,
                 NBLET,
                 SMOT,
                 RMOT,
                 ULETT
              INTO
                 :PE-CODEJ,
                 :PE-NBLET,
                 :PE-SMOT,
                 :PE-RMOT,
                 :PE-ULETT
              FROM PENDU
              WHERE
                 CODEJ = :PE-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN +100
                    PERFORM INIT-SPECIFIQUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT PENDU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE

            MOVE PE-NBLET         TO NBLETO
            SUBTRACT JE-NOREP FROM JE-NBREM GIVING WS-RESTANT
            MOVE WS-RESTANT       TO NBRESO

            MOVE PE-RMOT          TO WS-TAB
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 20
              MOVE WS-POSTE(I)    TO POSTE-RMOT(I)
            END-PERFORM

            MOVE PE-ULETT         TO WS-TAB
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 20
              MOVE WS-POSTE(I)    TO POSTE-ULETT(I)
            END-PERFORM
            .

        INIT-SPECIFIQUE.
       *----------------*
       * INITIALISATION CHAMPS DE LA MAP POUR LE JEU DU PENDU
            MOVE ZEROES           TO NBLETO
                                     NBRESO
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 20
              MOVE SPACES         TO POSTE-RMOT(I)
                                     POSTE-ULETT(I)
            END-PERFORM
            .

        23110-TRAIT-PF10.
       *-----------------*
       * CONTROLE DU JEU : DOIT EXISTER ET ETRE EN COURS
            PERFORM CTRL-JEU

       * RECUPERATION DES INFOS DE LA TABLE PENDU
            IF OK
               PERFORM LECTURE-PENDU
            END-IF

       * CONTROLE NOMBRE LIMITE DE REPONSES ATTEINT
            IF OK
               PERFORM CTRL-NB-REP-MAX
            END-IF

       * CONTROLE DE LA REPONSE
            IF OK
               PERFORM CTRL-REPONSE
            END-IF

       * TRAITEMENT DE LA REPONSE : LETTRE SAISIE OU MOT SAISI
            IF OK
               IF LETTRE-SAISIE
                  PERFORM TRT-LETTRE
               ELSE
                  PERFORM TRT-MOT
               END-IF
            END-IF

       * SI PAS D'ERREUR METTRE A JOUR LES TABLES JEU, JEU_JOUEUR
       * ET FAIRE LE TRAITEMENT DU GAGNANT SI GAGNANT
            IF OK
               PERFORM CRE-MAJ-JEU-JOUEUR
               PERFORM MAJ-PENDU
               PERFORM TRT-GAGNANT
               PERFORM MAJ-JEU
               PERFORM LECTURE-JEU
               PERFORM ALIM-BANDEAU
               PERFORM ALIM-SPECIFIQUE
               MOVE SPACES TO LETTREO
               MOVE CURSEUR TO LETTREL
            END-IF
            .

        CTRL-NB-REP-MAX.
       *----------------*
            IF JE-NOREP = JE-NBREM
               MOVE 'NOMBRE REPONSES LIMITE ATTEINT' TO MSGO
               MOVE CURSEUR TO LETTREL
               SET  ERREUR  TO TRUE
            END-IF
            .

        CTRL-REPONSE.
       *-------------*
       * SI LA LETTRE EST SAISIE, ALORS ON CONTROLE LA LETTRE SINON
       * ON CONTROLE LE MOT SAISI
            IF LETTREI NOT = LOW-VALUE AND SPACES
               PERFORM CTRL-LETTRE
            ELSE
               PERFORM CTRL-MOT
            END-IF
            .

        CTRL-LETTRE.
       *------------*
       * LA LETTRE SAISIE DOIT ETRE DIFFERENTE D'UNE DEJA SAISIE
            SET LETTRE-SAISIE TO TRUE
            MOVE ZEROES TO CPT-DOUBLE
            INSPECT PE-ULETT TALLYING CPT-DOUBLE FOR ALL LETTREI
            IF CPT-DOUBLE > ZEROES
               MOVE 'LETTRE DEJA SAISIE' TO MSGO
               MOVE CURSEUR TO LETTREL
               SET  ERREUR  TO TRUE
            END-IF
            .

        CTRL-MOT.
       *---------*
            SET MOT-SAISI TO TRUE
            .

        TRT-LETTRE.
       *----------*
       * RECHERCHER LA LETTRE DANS LE MOT A DEVINER :
       * SI ELLE EXISTE L'INSCRIRE DANS LES EMPLACEMENTS CORRESPONDANTS
       * DANS LE MOT DE LA REPONSE
            SET LETTRE-INEXISTANTE TO TRUE
            MOVE PE-SMOT TO WS-TAB
            MOVE PE-RMOT TO WS-TAB2
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > PE-NBLET
               IF LETTREI = WS-POSTE(I)
                  MOVE LETTREI TO WS-POSTE2(I)
                  SET LETTRE-EXISTANTE TO TRUE
               END-IF
            END-PERFORM
            MOVE WS-TAB2 TO PE-RMOT

       * INSCRIRE LA LETTRE DANS L'HISTORIQUE
            MOVE PE-ULETT TO WS-TAB
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 20
               IF WS-POSTE(I) = SPACES OR LOW-VALUE
                  MOVE LETTREI TO WS-POSTE(I)
                  MOVE 20 TO I
               END-IF
            END-PERFORM
            MOVE WS-TAB TO PE-ULETT

            IF LETTRE-INEXISTANTE
               MOVE 'COUP PERDU !' TO MSGO
            ELSE
               MOVE 'BIEN JOUE !'  TO MSGO
            END-IF
            .

        TRT-MOT.
       *--------*
       * SI LE MOT SAISI CORRESPOND AU MOT A DEVINER C'EST GAGNE !!
            MOVE SPACES TO WS-TAB
            SET MOT-NON-TROUVE     TO TRUE
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > PE-NBLET
               MOVE POSTE-RMOT (I) TO WS-POSTE(I)
            END-PERFORM
            IF WS-TAB = PE-SMOT
               SET MOT-TROUVE TO TRUE
               MOVE PE-SMOT TO PE-RMOT
            END-IF
            .

        LECTURE-JEU.
       *------------*
       * LIRE LE JEU CREE PAR LE MEME USERID
            MOVE CODEJI TO JE-CODEJ

            EXEC SQL
              SELECT
                 CODEJ,
                 UCREA,
                 C.NJOUE,
                 NBREM,
                 MODEJ,
                 E.NPOIN,
                 VALUE(UGAGN, ' '),
                 VALUE(G.NJOUE, ' '),
                 VALUE(NOREP, 0),
                 STATU
              INTO
                 :JE-CODEJ,
                 :JE-UCREA,
                 :WS-NCREA,
                 :JE-NBREM,
                 :JE-MODEJ,
                 :JE-NPOIN,
                 :JE-UGAGN,
                 :WS-NGAGN,
                 :JE-NOREP,
                 :JE-STATU
              FROM JEU    E
              LEFT OUTER JOIN JOUEUR C ON UCREA = C.UJOUE
              LEFT OUTER JOIN JOUEUR G ON UGAGN = G.UJOUE
              WHERE
                 CODEJ = :JE-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    SET JEU-TROUVE TO TRUE
               WHEN +100
                    SET JEU-NON-TROUVE     TO TRUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT JEU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        LECTURE-PENDU.
       *--------------*
            MOVE JE-CODEJ TO PE-CODEJ

            EXEC SQL
              SELECT
                 CODEJ,
                 NBLET,
                 SMOT,
                 RMOT,
                 ULETT
              INTO
                 :PE-CODEJ,
                 :PE-NBLET,
                 :PE-SMOT,
                 :PE-RMOT,
                 :PE-ULETT
              FROM PENDU
              WHERE
                 CODEJ = :PE-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    SET PENDU-TROUVE                TO TRUE
               WHEN +100
                    SET PENDU-NON-TROUVE TO TRUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT PENDU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        TRT-GAGNANT.
       *------------*
       * ON VERIFIE SI LE JOUEUR A GAGNE
            IF MOT-TROUVE
               SET JOUEUR-GAGNANT TO TRUE
               MOVE 'BRAVO TU AS GAGNE !!!!' TO MSGO
               PERFORM MAJ-JEU-JOUEUR
            END-IF
            .

        MAJ-PENDU.
       *----------*
            MOVE JE-CODEJ    TO PE-CODEJ

            EXEC SQL UPDATE PENDU SET
               RMOT  = :PE-RMOT,
               ULETT = :PE-ULETT
               WHERE CODEJ = :JJ-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR UPDATE PENDU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        MAJ-JEU-JOUEUR.
       *----------------*
       * AJOUT DES POINTS SI GAGNANT
       * NB POINTS GAGNANTS = 36 - NB REPONSES
            MOVE WS-USERID   TO JJ-UJOUE
            MOVE JE-CODEJ    TO JJ-CODEJ
            IF JOUEUR-GAGNANT
               MOVE JE-NPOIN TO JJ-NPOIN
            ELSE
               MOVE ZEROES   TO JJ-NPOIN
            END-IF

            EXEC SQL UPDATE JEU_JOUEUR SET
               NPOIN = :JJ-NPOIN
               WHERE UJOUE = :JJ-UJOUE
                 AND CODEJ = :JJ-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR UPDATE JEU_JOUEUR, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        MAJ-JEU.
       *--------*
       * INCREMENTER LE NOMBRE DE REPONSES
            ADD 1         TO JE-NOREP
       * RENSEIGNER LE GAGNANT
            IF JOUEUR-GAGNANT
               MOVE 'T'       TO JE-STATU
               MOVE WS-USERID TO JE-UGAGN
               MOVE ZERO      TO IND-UGAGN
            ELSE
               MOVE -1        TO IND-UGAGN
            END-IF

            EXEC SQL UPDATE JEU  SET
               NOREP = :JE-NOREP,
               STATU = :JE-STATU,
               UGAGN = :JE-UGAGN :IND-UGAGN
               WHERE CODEJ = :JE-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR UPDATE JEU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE

       * AFFICHAGE DU NOMBRE DE REPONSES
            MOVE JE-NOREP TO NOREPO
            .

        CRE-MAJ-JEU-JOUEUR.
       *------------------*
            PERFORM LECTURE-JEU-JOUEUR
            IF JEU-JOUEUR-NON-TROUVE
               PERFORM CREAT-JEU-JOUEUR
            END-IF
            .

        LECTURE-JEU-JOUEUR.
       *------------------*
            MOVE WS-USERID   TO JJ-UJOUE
            MOVE CODEJI      TO JJ-CODEJ

            EXEC SQL
              SELECT
                 UJOUE,
                 CODEJ,
                 NPOIN
              INTO
                 :JJ-UJOUE,
                 :JJ-CODEJ,
                 :JJ-NPOIN
              FROM JEU_JOUEUR
              WHERE
                  UJOUE = :JJ-UJOUE
              AND CODEJ = :JJ-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    SET JEU-JOUEUR-TROUVE TO TRUE
               WHEN +100
                    SET JEU-JOUEUR-NON-TROUVE     TO TRUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT JEU_JOUEUR, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        CREAT-JEU-JOUEUR.
       *----------------*
       * CREATION DU JOUEUR DANS LA TABLE JEU_JOUEUR
            MOVE WS-USERID   TO JJ-UJOUE
            MOVE JE-CODEJ    TO JJ-CODEJ
            MOVE ZEROES      TO JJ-NPOIN

            EXEC SQL INSERT INTO JEU_JOUEUR VALUES
              (:JJ-UJOUE,
               :JJ-CODEJ,
               :JJ-NPOIN)
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR INSERT JEU_JOUEUR, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        23110-PROG-SUIVANT.
       *------------------*
            EXEC CICS XCTL  PROGRAM  (PROG-SUIVANT)
                            COMMAREA (WS-COMMAREA)
                            LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23200-TRAIT-FIN.
       *---------------*
            MOVE 'FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        90000-ERR-TOUCHE.
       *----------------*
            MOVE 'TOUCHE DE FONCTION INVALIDE' TO MSGO
            PERFORM  22000-TRAIT-ENVOI
            .

        91000-ERREUR-CICS.
       *-------------------*
            MOVE 'ERREUR CICS !!!  FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        99000-FIN-CICS.
       *--------------*
            EXEC CICS SEND FROM   (MESSAGE-TXT)
                           LENGTH (LENGTH OF MESSAGE-TXT)
                           ERASE
            END-EXEC

            EXEC CICS RETURN END-EXEC
            .
 MEMBER NAME  A99GPGMT
       *======================================================*
       *   VISU/CREA/MODIF DU JEU DU PENDU                    *
       *======================================================*

       *======================================================*
       *   I D E N T I F I C A T I O N     D I V I S I O N    *
       *======================================================*
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A99GPGMT.

       *======================================================*
       *   E N V I R O N M E N T       D I V I S I O N        *
       *======================================================*
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        SOURCE-COMPUTER. IBM-390.
        OBJECT-COMPUTER. IBM-390.

       *======================================================*
       *           D A T A         D I V I S I O N            *
       *======================================================*
        DATA DIVISION.
        WORKING-STORAGE SECTION.

       * ZONE POUR DATE DU JOUR
        01  WS-DATEJ               PIC X(8) VALUE SPACES.

       * DESCRIPTION DE LA SQLCA
            EXEC SQL INCLUDE SQLCA   END-EXEC

        01  SQLCODE-ED             PIC +(3)9 VALUE ZEROES.

       * DESCRIPTION DE LA TABLE JOUEUR
            EXEC SQL INCLUDE JOUEUR   END-EXEC

       * DESCRIPTION DE LA TABLE JEU
            EXEC SQL INCLUDE JEU      END-EXEC

       * DESCRIPTION DE LA TABLE PENDU
            EXEC SQL INCLUDE PENDU    END-EXEC

       * HOSTS VARIABLES JOUEUR DE CREATION DU JEU
        01  WS-NCREA               PIC X(20) VALUE SPACES.
       * HOSTS VARIABLES JOUEUR GAGNANT
        01  WS-NGAGN               PIC X(20) VALUE SPACES.

       * NOMBRE DE COUPS RESTANTS
        01  WS-RESTANT             PIC 99    VALUE ZEROES.

       * INDICATEUR D'ERREUR
        01                         PIC X.
            88 OK                  VALUE ZEROES.
            88 ERREUR              VALUE '1'.

       * INDICATEUR D'EXISTENCE DU JEU
        01                         PIC X.
            88 TROUVE              VALUE ZEROES.
            88 NON-TROUVE          VALUE '1'.

       *------------------------------------------------------*
       *   DESCRIPTION DETAILLEE DE LA ZONE DE COMMUNICATION  *
       *------------------------------------------------------*
        01  WS-COMMAREA.
            05 PROG-PRECEDENT      PIC X(8).
            05 PROG-COURANT        PIC X(8).
            05 PROG-SUIVANT        PIC X(8).
            05                     PIC X(26).

        01 C-R                     PIC S9(8) COMP.

        01 MON-PROG                PIC X(8) VALUE 'A99GPGMT'.
        01 MA-MAP                  PIC X(8) VALUE 'A99GMAP '.
        01 MA-TRX                  PIC X(4) VALUE 'A99G'.

       * USERID
        01  WS-USERID              PIC X(8) VALUE SPACES.

       *------------------------------------------------------*
       *   DESCRIPTION   DE   LA   MAP                        *
       *------------------------------------------------------*
        COPY A99GMAP.
        01  REDEFINES A99GMAPO.
            05               PIC X(230).
            05 TAB-SMOT.
              10 OCCURS 20.
                15             PIC X(7).
                15 POSTE-SMOT  PIC X.
            05 TAB-RMOT.
              10 OCCURS 20.
                15             PIC X(7).
                15 POSTE-RMOT  PIC X.
            05 TAB-ULETT.
              10 OCCURS 20.
                15             PIC X(7).
                15 POSTE-ULETT PIC X.

        01  WS-TAB.
            05 WS-POSTE PIC X OCCURS 20.

        01  I PIC 99 VALUE ZEROES.
       *------------------------------------------------------*
       *   ZONE DE MESSAGE TAMPON POUR LE SEND FROM           *
       *------------------------------------------------------*
        01  MESSAGE-TXT            PIC X(79).

       *------------------------------------------------------*
       *   DESCRIPTION   DES  TOUCHES   FONCTIONS             *
       *------------------------------------------------------*
        COPY DFHAID.

       *------------------------------------------------------*
       *   DESCRIPTION   DES  ATTRIBUTS                       *
       *------------------------------------------------------*
        COPY DFHBMSCA.
        COPY ATTRIBUT.

       *======================================================*
       *          L I N K A G E     S E C T I O N             *
       *======================================================*
        LINKAGE SECTION.
        01  DFHCOMMAREA.
            05 LK-COMMAREA            PIC X(50).

       *======================================================*
       *     P R O C E D U R E     D I V I S I O N            *
       *======================================================*

        PROCEDURE DIVISION.
        00000-INIT-PROGRAMME.
       *---------------------*
             EXEC SQL SET SCHEMA FORA99 END-EXEC

             PERFORM  10000-DEBUT-PROGRAMME
             PERFORM  20000-TRAIT-PROGRAMME
             GOBACK
             .

        10000-DEBUT-PROGRAMME.
       *---------------------*
       *   TEST DE PREMIERE ENTREE DANS LE PROGRAMME
       *   SI NON PROGRAMME  MENU --->  ARRET  (ACCES INTERDIT)
            IF EIBCALEN = 0
               INITIALIZE      WS-COMMAREA
            ELSE
               MOVE LK-COMMAREA    TO  WS-COMMAREA
            END-IF

            MOVE  PROG-COURANT     TO  PROG-PRECEDENT
            MOVE  MON-PROG         TO  PROG-COURANT

       * RECUPERATION DU USERID
            EXEC CICS ASSIGN USERID (WS-USERID) END-EXEC
            .

        20000-TRAIT-PROGRAMME.
       *---------------------*
            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               PERFORM  21000-TRAIT-CHARGEMENT
               PERFORM  22000-TRAIT-ENVOI
            ELSE
               PERFORM  23000-TRAIT-RECEPTION
            END-IF
            .

        21000-TRAIT-CHARGEMENT.
       *----------------------*
       *  CHARGEMENT DE LA MAP AVANT AFFICHAGE
            MOVE LOW-VALUE TO A99GMAPO

       *  SI TRAITEMENT PARTICULIER AVANT AFFICHAGE
       *    PERFORM  21100-TRAIT-SPECIFIQUE
            .

       *21100-TRAIT-SPECIFIQUE.
       *----------------------*
       *    ..............................
       *    ..............................
       *    ..............................
       *    ..............................
       *    .

        22000-TRAIT-ENVOI.
       *-----------------*
       * AFFICHAGE DE LA DATE DU JOUR
            MOVE FUNCTION CURRENT-DATE TO WS-DATEJ
            STRING WS-DATEJ (7 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATEJ (5 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATEJ (1 : 4) DELIMITED BY SIZE
                   INTO DATEJO
            END-STRING

            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               EXEC CICS SEND MAP    ('A99GMAP')
                              ERASE
               END-EXEC
            ELSE
               EXEC CICS SEND MAP    ('A99GMAP')
                              CURSOR
                              ERASE
               END-EXEC
            END-IF

            MOVE PROG-COURANT TO PROG-SUIVANT

            EXEC CICS RETURN TRANSID  (MA-TRX)
                             COMMAREA (WS-COMMAREA)
                             LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23000-TRAIT-RECEPTION.
       *---------------------*
            EVALUATE EIBAID
       * ENTER = AFFICHAGE DU JEU
               WHEN DFHENTER
                    PERFORM  INIT-MAP
                    PERFORM  23050-RECEIVE-MAP
                    PERFORM  23100-TRAIT-ENTER
                    PERFORM  22000-TRAIT-ENVOI
       * F3 = RETOUR AU MENU
       *       WHEN DFHPF3
       *            PERFORM  23105-RETOUR-MENU
       * F7 = AFFICHAGE JEU PRECEDENT
               WHEN DFHPF7
                    PERFORM  INIT-MAP
                    PERFORM  23050-RECEIVE-MAP
                    PERFORM  23106-JEU-PREC
                    PERFORM  ALIM-MAP
                    PERFORM  22000-TRAIT-ENVOI
       * F8 = AFFICHAGE JEU SUIVANT
               WHEN DFHPF8
                    PERFORM  INIT-MAP
                    PERFORM  23050-RECEIVE-MAP
                    PERFORM  23107-JEU-SUIV
                    PERFORM  ALIM-MAP
                    PERFORM  22000-TRAIT-ENVOI
       * F10 = CREATION OU MODIFICATION DU JEU
               WHEN DFHPF10
                    PERFORM  23050-RECEIVE-MAP
                    PERFORM  23110-TRAIT-PF10
                    PERFORM  22000-TRAIT-ENVOI
       * CLEAR = FIN DIALOGUE
               WHEN DFHCLEAR
                    PERFORM  23200-TRAIT-FIN
       * AUTRE = ERREUR TOUCHE FONCTION
               WHEN OTHER
                    PERFORM  90000-ERR-TOUCHE
            END-EVALUATE
            .

        23050-RECEIVE-MAP.
       *------------------*
            EXEC CICS RECEIVE MAP  ('A99GMAP')
                              RESP (C-R)
            END-EXEC

            EVALUATE C-R
               WHEN DFHRESP(NORMAL)
                    CONTINUE
               WHEN OTHER
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE
            .

        23055-CTRL-USERID.
       *------------------*
            EXEC CICS ASSIGN USERID (JE-UCREA) END-EXEC
            .

        23100-TRAIT-ENTER.
       *------------------*
       *    ....................................
       *    ...  AFFICHAGE DES INFOS DU JEU  ...
       *    ....................................
       * INITIALISATIONS
            SET OK       TO TRUE
            MOVE CURSEUR TO CODEJL

       * CONTROLE DU CODE JEU DEMANDE
            PERFORM CTRL-CODE-JEU

       * LECTURE DU JEU
            IF OK
               PERFORM LECTURE-JEU
            END-IF

       * SI TROUVE, AFFICHAGE DES INFOS DU JEU
            IF TROUVE
               PERFORM ALIM-MAP
               MOVE 'JEU TROUVE, MODIFIER PUIS VALIDER PAR F10' TO MSGO
               MOVE CURSEUR TO NBREML
            ELSE
               MOVE 'CODE JEU INEXISTANT' TO MSGO
               MOVE CURSEUR TO CODEJL
               SET  ERREUR  TO TRUE
            END-IF
            .

        CTRL-CODE-JEU.
       *--------------*
       * OBLIGATOIRE
            IF CODEJI = SPACES OR LOW-VALUE
               MOVE ATTR-UNPROT-BRT TO CODEJA
               IF OK
                  MOVE 'CODE JEU NON RENSEIGNE' TO MSGO
                  MOVE CURSEUR TO CODEJL
                  SET  ERREUR  TO TRUE
               END-IF
            END-IF
            .

        ALIM-MAP.
       *---------*
       * ALIMENTATION DES CHAMPS DE LA MAP A PARTIR DES HOST VARIABLES
            MOVE JE-CODEJ        TO CODEJO
            MOVE JE-UCREA        TO UCREAO
            MOVE WS-NCREA        TO NCREAO
            MOVE JE-NBREM        TO NBREMO
            MOVE JE-MODEJ        TO MODEJO
            EVALUATE JE-MODEJ
             WHEN 'I'      MOVE 'INDIVIDUEL'  TO LMODEJO
             WHEN 'C'      MOVE 'COLLECTIF'   TO LMODEJO
             WHEN OTHER    MOVE ALL '?'       TO LMODEJO
            END-EVALUATE
            MOVE JE-NPOIN        TO NPOINO
            MOVE JE-UGAGN        TO UGAGNO
            MOVE WS-NGAGN        TO NGAGNO
            MOVE JE-NOREP        TO NOREPO
            MOVE JE-STATU        TO STATUO
            EVALUATE JE-STATU
             WHEN 'A'      MOVE 'ACTIF'    TO LSTATUO
             WHEN 'I'      MOVE 'INACTIF'  TO LSTATUO
             WHEN 'T'      MOVE 'TERMINE'  TO LSTATUO
             WHEN OTHER    MOVE ALL '?'    TO LSTATUO
            END-EVALUATE

       * ALIMENTATION SPECIFIQUE AU JEU
            PERFORM ALIM-SPECIFIQUE
            .

        INIT-MAP.
       *---------*
       * INITIALISATION DES CHAMPS DE LA MAP
            MOVE SPACES          TO CODEJO
                                    UCREAO
                                    NCREAO
                                    UGAGNO
                                    NGAGNO
                                    MODEJO
                                    LMODEJO
                                    STATUO
                                    LSTATUO
            MOVE ZEROES          TO NBREMO
                                    NOREPO
                                    NPOINO

       * INITIALISATION SPECIFIQUE AU JEU
            PERFORM INIT-SPECIFIQUE
            .

        ALIM-SPECIFIQUE.
       *----------------*
       * ALIMENTATION MAP PENDU
            MOVE JE-CODEJ TO PE-CODEJ

            EXEC SQL
              SELECT
                 CODEJ,
                 NBLET,
                 SMOT,
                 RMOT,
                 ULETT
              INTO
                 :PE-CODEJ,
                 :PE-NBLET,
                 :PE-SMOT,
                 :PE-RMOT,
                 :PE-ULETT
              FROM PENDU
              WHERE
                 CODEJ = :PE-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN +100
                    PERFORM INIT-SPECIFIQUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT PENDU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE

            MOVE PE-NBLET         TO NBLETO
            SUBTRACT JE-NOREP FROM JE-NBREM GIVING WS-RESTANT
            MOVE WS-RESTANT       TO NBRESO

            MOVE PE-SMOT          TO WS-TAB
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 20
              MOVE WS-POSTE(I)    TO POSTE-SMOT(I)
            END-PERFORM

            MOVE PE-RMOT          TO WS-TAB
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 20
              MOVE WS-POSTE(I)    TO POSTE-RMOT(I)
            END-PERFORM

            MOVE PE-ULETT         TO WS-TAB
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 20
              MOVE WS-POSTE(I)    TO POSTE-ULETT(I)
            END-PERFORM
            .

        INIT-SPECIFIQUE.
       *----------------*
       * INITIALISATION CHAMPS DE LA MAP POUR LE JEU DU PENDU
            MOVE ZEROES           TO NBLETO
                                     NBRESO
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 20
              MOVE SPACES         TO POSTE-SMOT(I)
                                     POSTE-RMOT(I)
                                     POSTE-ULETT(I)
            END-PERFORM
            .

        23110-TRAIT-PF10.
       *-----------------*
       *    ........................................
       *    ...  CONTROLE DE LA SAISIE PUIS      ...
       *    ...  CREATION OU MODIFICATION DU JEU ...
       *    ........................................
       * INITIALISATIONS
            SET OK       TO TRUE
            MOVE CURSEUR TO CODEJL

       * LECTURE DU JEU
            IF OK
               PERFORM LECTURE-JEU
            END-IF

       * CONTROLE DES AUTRES CHAMPS
            PERFORM CTRL-NB-REPONSES-MAX
            PERFORM CTRL-NB-POINTS
            PERFORM CTRL-STATUT

       * SI PAS D'ERREUR ET TROUVE --> CREATION DU JEU
       * SI PAS D'ERREUR ET NON TROUVE --> MODIFICATION DU JEU
            IF OK
               IF NON-TROUVE
                  PERFORM  CREATION-JEU
               ELSE
                  PERFORM  MODIFICATION-JEU
               END-IF
            END-IF
            MOVE PE-NBLET TO NBLETO
            .

        CTRL-NB-REPONSES-MAX.
       *---------------------*
       * NUMERIQUE, NON NUL
            IF NBREMI NOT NUMERIC OR NBREMI = ZEROES
               MOVE ATTR-UNPROT-BRT TO NBREMA
               IF OK
                  MOVE 'NOMBRE REPONSES MAX INVALIDE'    TO MSGO
                  MOVE CURSEUR TO NBREML
                  SET  ERREUR  TO TRUE
               END-IF
            END-IF
            .

        CTRL-NB-POINTS.
       *---------------*
       * NUMERIQUE, NON NUL
            IF NPOINI NOT NUMERIC OR NPOINI = ZEROES
               MOVE ATTR-UNPROT-BRT TO NPOINA
               IF OK
                  MOVE 'NOMBRE DE POINTS INVALIDE'    TO MSGO
                  MOVE CURSEUR TO NPOINL
                  SET  ERREUR  TO TRUE
               END-IF
            END-IF
            .

        CTRL-STATUT.
       *-----------*
       * OBLIGATOIRE, = I, E OU T
            IF STATUI NOT = 'I' AND 'A' AND 'T'
               MOVE ATTR-UNPROT-BRT TO STATUA
               IF OK
                  MOVE 'STATUT INVALIDE, VALEURS I, E OU T'    TO MSGO
                  MOVE CURSEUR TO STATUL
                  SET  ERREUR  TO TRUE
               END-IF
            END-IF
            .

        LECTURE-JEU.
       *------------*
       * LIRE LE JEU CREE PAR LE MEME USERID
            MOVE CODEJI TO JE-CODEJ

            EXEC SQL
              SELECT
                 CODEJ,
                 UCREA,
                 C.NJOUE,
                 NBREM,
                 MODEJ,
                 E.NPOIN,
                 VALUE(UGAGN, ' '),
                 VALUE(G.NJOUE, ' '),
                 VALUE(NOREP, 0),
                 STATU
              INTO
                 :JE-CODEJ,
                 :JE-UCREA,
                 :WS-NCREA,
                 :JE-NBREM,
                 :JE-MODEJ,
                 :JE-NPOIN,
                 :JE-UGAGN,
                 :WS-NGAGN,
                 :JE-NOREP,
                 :JE-STATU
              FROM JEU    E
              LEFT OUTER JOIN JOUEUR C ON UCREA = C.UJOUE
              LEFT OUTER JOIN JOUEUR G ON UGAGN = G.UJOUE
              WHERE
                 CODEJ = :JE-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
       * CONTROLE : AFFICHAGE AUTORISE SI USERID = USER DE CREATION
                    IF JE-UCREA = WS-USERID
                       SET TROUVE TO TRUE
                    ELSE
                       STRING 'USER NON AUTORISE, JEU CREE PAR '
                              JE-UCREA DELIMITED BY SIZE
                           INTO MSGO
                       END-STRING
                       PERFORM  22000-TRAIT-ENVOI
                    END-IF
               WHEN +100
                    SET NON-TROUVE     TO TRUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT JEU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        CREATION-JEU.
       *-------------*
            INITIALIZE JE-JEU
            MOVE CODEJI      TO JE-CODEJ
            MOVE WS-USERID   TO JE-UCREA
            MOVE NBREMI      TO JE-NBREM
            MOVE MODEJI      TO JE-MODEJ
            MOVE NPOINI      TO JE-NPOIN
            MOVE STATUI      TO JE-STATU

            EXEC SQL INSERT INTO JEU VALUES
              (:JE-CODEJ,
               :JE-UCREA,
               :JE-NBREM,
               :JE-MODEJ,
               :JE-NPOIN,
               NULL,
               NULL,
               :JE-STATU)
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR INSERT JEU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE

       * CREATION DANS LA TABLE SPECIFIQUE
            INITIALIZE PE-PENDU
            MOVE CODEJI      TO PE-CODEJ
            MOVE ZEROES      TO PE-NBLET

            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 20
              MOVE POSTE-SMOT(I)    TO WS-POSTE(I)
              IF WS-POSTE(I) = LOW-VALUE OR SPACES
                 MOVE SPACE         TO WS-POSTE(I)
              ELSE
                 ADD 1              TO PE-NBLET
              END-IF
            END-PERFORM
            MOVE WS-TAB      TO PE-SMOT
            MOVE SPACES      TO PE-RMOT
                                PE-ULETT

            EXEC SQL INSERT INTO PENDU VALUES
              (:PE-CODEJ,
               :PE-NBLET,
               :PE-SMOT,
               :PE-RMOT,
               :PE-ULETT)
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    MOVE 'CREATION BIEN EFFECTUEE' TO MSGO
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR INSERT PENDU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        MODIFICATION-JEU.
       *-----------------*
            INITIALIZE JE-JEU
            MOVE CODEJI      TO JE-CODEJ
            MOVE NBREMI      TO JE-NBREM
            MOVE MODEJI      TO JE-MODEJ
            MOVE NPOINI      TO JE-NPOIN
            MOVE STATUI      TO JE-STATU

            EXEC SQL UPDATE JEU SET
               NBREM = :JE-NBREM,
               MODEJ = :JE-MODEJ,
               NPOIN = :JE-NPOIN,
               STATU = :JE-STATU
            WHERE
               CODEJ = :JE-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR UPDATE JEU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE

       * MODIFICATION DANS LA TABLE SPECIFIQUE
            INITIALIZE PE-PENDU
            MOVE CODEJI      TO PE-CODEJ
            MOVE ZEROES      TO PE-NBLET

            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 20
              MOVE POSTE-SMOT(I)    TO WS-POSTE(I)
              IF WS-POSTE(I) = LOW-VALUE OR SPACES
                 MOVE SPACE         TO WS-POSTE(I)
              ELSE
                 ADD 1              TO PE-NBLET
              END-IF
            END-PERFORM
            MOVE WS-TAB      TO PE-SMOT

            EXEC SQL UPDATE PENDU SET
               SMOT  = :PE-SMOT,
               NBLET = :PE-NBLET
            WHERE
               CODEJ = :PE-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    MOVE 'MODIFICATION BIEN EFFECTUEE' TO MSGO
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR UPDATE PENDU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        23105-RETOUR-MENU.
       *------------------*
            MOVE 'A99APGMT' TO PROG-SUIVANT
            PERFORM 23110-PROG-SUIVANT
            .

        23106-JEU-PREC.
       *---------------*
       * AFFICHER LE JEU PRECEDENT CREE PAR LE MEME USERID
            MOVE CODEJI TO JE-CODEJ

            EXEC SQL
              SELECT
                 CODEJ,
                 UCREA,
                 C.NJOUE,
                 NBREM,
                 MODEJ,
                 E.NPOIN,
                 VALUE(UGAGN, ' '),
                 VALUE(G.NJOUE, ' '),
                 VALUE(NOREP, 0),
                 STATU
              INTO
                 :JE-CODEJ,
                 :JE-UCREA,
                 :WS-NCREA,
                 :JE-NBREM,
                 :JE-MODEJ,
                 :JE-NPOIN,
                 :JE-UGAGN,
                 :WS-NGAGN,
                 :JE-NOREP,
                 :JE-STATU
              FROM JEU    E
              LEFT OUTER JOIN JOUEUR C ON UCREA = C.UJOUE
              LEFT OUTER JOIN JOUEUR G ON UGAGN = G.UJOUE
              WHERE
                  CODEJ LIKE 'PE%'
              AND CODEJ < :JE-CODEJ
              AND UCREA = :WS-USERID
              ORDER BY CODEJ DESC
              FETCH FIRST 1 ROW ONLY
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    PERFORM ALIM-MAP
               WHEN +100
                    MOVE 'PAS DE JEU PRECEDENT' TO MSGO
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT JEU PREC, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        23107-JEU-SUIV.
       *---------------*
       * AFFICHER LE JEU SUIVANT CREE PAR LE MEME USERID
            MOVE CODEJI TO JE-CODEJ

            EXEC SQL
              SELECT
                 CODEJ,
                 UCREA,
                 C.NJOUE,
                 NBREM,
                 MODEJ,
                 E.NPOIN,
                 VALUE(UGAGN, ' '),
                 VALUE(G.NJOUE, ' '),
                 VALUE(NOREP, 0),
                 STATU
              INTO
                 :JE-CODEJ,
                 :JE-UCREA,
                 :WS-NCREA,
                 :JE-NBREM,
                 :JE-MODEJ,
                 :JE-NPOIN,
                 :JE-UGAGN,
                 :WS-NGAGN,
                 :JE-NOREP,
                 :JE-STATU
              FROM JEU    E
              LEFT OUTER JOIN JOUEUR C ON UCREA = C.UJOUE
              LEFT OUTER JOIN JOUEUR G ON UGAGN = G.UJOUE
              WHERE
                  CODEJ LIKE 'PE%'
              AND CODEJ > :JE-CODEJ
              AND UCREA = :WS-USERID
              ORDER BY CODEJ
              FETCH FIRST 1 ROW ONLY
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    PERFORM ALIM-MAP
               WHEN +100
                    MOVE 'PAS DE JEU SUIVANT'   TO MSGO
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT JEU SUIV, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        23110-PROG-SUIVANT.
       *------------------*
            EXEC CICS XCTL  PROGRAM  (PROG-SUIVANT)
                            COMMAREA (WS-COMMAREA)
                            LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23200-TRAIT-FIN.
       *---------------*
            MOVE 'FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        90000-ERR-TOUCHE.
       *----------------*
            MOVE 'TOUCHE DE FONCTION INVALIDE' TO MSGO
            PERFORM  22000-TRAIT-ENVOI
            .

        91000-ERREUR-CICS.
       *-------------------*
            MOVE 'ERREUR CICS !!!  FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        99000-FIN-CICS.
       *--------------*
            EXEC CICS SEND FROM   (MESSAGE-TXT)
                           LENGTH (LENGTH OF MESSAGE-TXT)
                           ERASE
            END-EXEC

            EXEC CICS RETURN END-EXEC
            .
 MEMBER NAME  A00EMAP
 A00EMAP DFHMSD TYPE=&SYSPARM,MODE=INOUT,LANG=COBOL,EXTATT=YES,         X
                CTRL=(FREEKB,FRSET),STORAGE=AUTO,TIOAPFX=YES
 A00EMAP DFHMDI COLUMN=1,LINE=1,SIZE=(24,80)
         DFHMDF POS=(1,1),ATTRB=ASKIP,LENGTH=04,INITIAL='A00E'
         DFHMDF POS=(1,23),ATTRB=ASKIP,LENGTH=32,                       X
                INITIAL='VISU/CREAT/MODIF JEU'
         DFHMDF POS=(1,65),ATTRB=ASKIP,LENGTH=07,INITIAL='A00EMAP'
         DFHMDF POS=(2,59),ATTRB=ASKIP,LENGTH=6,INITIAL='DATE :'
 DATEJ   DFHMDF POS=(2,66),ATTRB=(ASKIP,FSET),LENGTH=10
         DFHMDF POS=(4,05),ATTRB=ASKIP,LENGTH=12,                       X
                INITIAL='CODE JEU   :'
 CODEJ   DFHMDF POS=(4,18),ATTRB=(UNPROT,FSET,IC),LENGTH=5
         DFHMDF POS=(4,24),ATTRB=ASKIP,LENGTH=1
         DFHMDF POS=(4,30),ATTRB=ASKIP,LENGTH=19,                       X
                INITIAL='USERID DE CREATION:'
 UCREA   DFHMDF POS=(4,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=8
 NCREA   DFHMDF POS=(4,59),ATTRB=(ASKIP,BRT,FSET),LENGTH=20
         DFHMDF POS=(05,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NB REP MAX :'
 NBREM   DFHMDF POS=(05,18),ATTRB=(UNPROT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(05,21),ATTRB=ASKIP
         DFHMDF POS=(05,30),ATTRB=ASKIP,LENGTH=19,                      X
                INITIAL='MODE DU JEU (I/C) :'
 MODEJ   DFHMDF POS=(05,50),ATTRB=(UNPROT,FSET),LENGTH=1
 LMODEJ  DFHMDF POS=(05,52),ATTRB=(ASKIP,BRT,FSET),LENGTH=20
         DFHMDF POS=(06,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NB POINTS  :'
 NPOIN   DFHMDF POS=(06,18),ATTRB=(UNPROT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(06,21),ATTRB=ASKIP
         DFHMDF POS=(07,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='STATUT     :'
 STATU   DFHMDF POS=(07,18),ATTRB=(UNPROT,FSET),LENGTH=1
 LSTATU  DFHMDF POS=(07,20),ATTRB=(ASKIP,BRT,FSET),LENGTH=10
         DFHMDF POS=(08,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='NUM REPONSE:'
 NOREP   DFHMDF POS=(08,18),ATTRB=(ASKIP,BRT,FSET),LENGTH=2,PICOUT='Z9'
         DFHMDF POS=(08,30),ATTRB=ASKIP,LENGTH=19,                      X
                INITIAL='USERID GAGNANT    :'
 UGAGN   DFHMDF POS=(08,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=8
 NGAGN   DFHMDF POS=(08,59),ATTRB=(ASKIP,BRT,FSET),LENGTH=20
         DFHMDF POS=(11,30),ATTRB=ASKIP,LENGTH=15,                      X
                INITIAL='BATAILLE NAVALE'
         DFHMDF POS=(12,30),ATTRB=ASKIP,LENGTH=15,                      X
                INITIAL='---------------'
         DFHMDF POS=(13,18),ATTRB=ASKIP,LENGTH=08,                      X
                INITIAL='SOLUTION'
         DFHMDF POS=(13,50),ATTRB=ASKIP,LENGTH=16,                      X
                INITIAL='DERNIERE REPONSE'
         DFHMDF POS=(15,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='BATIMENT 1 :'
 SBAT1A  DFHMDF POS=(15,18),ATTRB=(UNPROT,BRT,FSET),LENGTH=2
 SBAT1B  DFHMDF POS=(15,21),ATTRB=(UNPROT,BRT,FSET),LENGTH=2
 SBAT1C  DFHMDF POS=(15,24),ATTRB=(UNPROT,BRT,FSET),LENGTH=2
 SBAT1D  DFHMDF POS=(15,27),ATTRB=(UNPROT,BRT,FSET),LENGTH=2
         DFHMDF POS=(15,30),ATTRB=ASKIP,LENGTH=1
 RBAT1A  DFHMDF POS=(15,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 RBAT1B  DFHMDF POS=(15,53),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 RBAT1C  DFHMDF POS=(15,56),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 RBAT1D  DFHMDF POS=(15,59),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
         DFHMDF POS=(16,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='BATIMENT 2 :'
 SBAT2A  DFHMDF POS=(16,18),ATTRB=(UNPROT,BRT,FSET),LENGTH=2
 SBAT2B  DFHMDF POS=(16,21),ATTRB=(UNPROT,BRT,FSET),LENGTH=2
 SBAT2C  DFHMDF POS=(16,24),ATTRB=(UNPROT,BRT,FSET),LENGTH=2
         DFHMDF POS=(16,27),ATTRB=ASKIP,LENGTH=1
 RBAT2A  DFHMDF POS=(16,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 RBAT2B  DFHMDF POS=(16,53),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 RBAT2C  DFHMDF POS=(16,56),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
         DFHMDF POS=(17,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='BATIMENT 3 :'
 SBAT3A  DFHMDF POS=(17,18),ATTRB=(UNPROT,BRT,FSET),LENGTH=2
 SBAT3B  DFHMDF POS=(17,21),ATTRB=(UNPROT,BRT,FSET),LENGTH=2
         DFHMDF POS=(17,24),ATTRB=ASKIP,LENGTH=1
 RBAT3A  DFHMDF POS=(17,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 RBAT3B  DFHMDF POS=(17,53),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
         DFHMDF POS=(18,05),ATTRB=ASKIP,LENGTH=12,                      X
                INITIAL='BATIMENT 4 :'
 SBAT4A  DFHMDF POS=(18,18),ATTRB=(UNPROT,BRT,FSET),LENGTH=2
 SBAT4B  DFHMDF POS=(18,21),ATTRB=(UNPROT,BRT,FSET),LENGTH=2
         DFHMDF POS=(18,24),ATTRB=ASKIP,LENGTH=1
 RBAT4A  DFHMDF POS=(18,50),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
 RBAT4B  DFHMDF POS=(18,53),ATTRB=(ASKIP,BRT,FSET),LENGTH=2
         DFHMDF POS=(23,1),ATTRB=ASKIP,LENGTH=13,INITIAL='CLEAR-FIN'
         DFHMDF POS=(23,15),ATTRB=ASKIP,LENGTH=32,                      X
                INITIAL='PF7-JEU PREC    PF8-JEU SUIV'
         DFHMDF POS=(23,48),ATTRB=ASKIP,LENGTH=15,                      X
                INITIAL='PF10-VALIDATION'
 MSG     DFHMDF POS=(24,1),ATTRB=(ASKIP,BRT),LENGTH=79
         DFHMSD TYPE=FINAL
         END
 MEMBER NAME  A00EPGMT
       *======================================================*
       *   VISU/CREA/MODIF D'UN JEU                           *
       *======================================================*

       *======================================================*
       *   I D E N T I F I C A T I O N     D I V I S I O N    *
       *======================================================*
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00EPGMT.

       *======================================================*
       *   E N V I R O N M E N T       D I V I S I O N        *
       *======================================================*
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        SOURCE-COMPUTER. IBM-390.
        OBJECT-COMPUTER. IBM-390.

       *======================================================*
       *           D A T A         D I V I S I O N            *
       *======================================================*
        DATA DIVISION.
        WORKING-STORAGE SECTION.

       * ZONE POUR DATE DU JOUR
        01  WS-DATEJ               PIC X(8) VALUE SPACES.

       * DESCRIPTION DE LA SQLCA
            EXEC SQL INCLUDE SQLCA   END-EXEC

        01  SQLCODE-ED             PIC +(3)9 VALUE ZEROES.

       * DESCRIPTION DE LA TABLE JOUEUR
       *    EXEC SQL INCLUDE JOUEUR   END-EXEC
            EXEC SQL INCLUDE JOUEUR99 END-EXEC

       * DESCRIPTION DE LA TABLE JEU
       *    EXEC SQL INCLUDE JEU      END-EXEC
            EXEC SQL INCLUDE JEU99    END-EXEC

       * DESCRIPTION DE LA TABLE BATAILLE NAVALE
       *    EXEC SQL INCLUDE BATAIL99 END-EXEC
            EXEC SQL INCLUDE BATAIL99 END-EXEC

       * HOSTS VARIABLES JOUEUR DE CREATION DU JEU
        01  WS-NCREA               PIC X(20) VALUE SPACES.
       * HOSTS VARIABLES JOUEUR GAGNANT
        01  WS-NGAGN               PIC X(20) VALUE SPACES.

       * INDICATEUR D'ERREUR
        01                         PIC X.
            88 OK                  VALUE ZEROES.
            88 ERREUR              VALUE '1'.

       * INDICATEUR D'EXISTENCE DU JEU
        01                         PIC X.
            88 TROUVE              VALUE ZEROES.
            88 NON-TROUVE          VALUE '1'.

       *------------------------------------------------------*
       *   DESCRIPTION DETAILLEE DE LA ZONE DE COMMUNICATION  *
       *------------------------------------------------------*
        01  WS-COMMAREA.
            05 PROG-PRECEDENT      PIC X(8).
            05 PROG-COURANT        PIC X(8).
            05 PROG-SUIVANT        PIC X(8).
            05                     PIC X(26).

        01 C-R                     PIC S9(8) COMP.

        01 MON-PROG                PIC X(8) VALUE 'A00EPGMT'.
        01 MA-MAP                  PIC X(8) VALUE 'A00EMAP '.
        01 MA-TRX                  PIC X(4) VALUE 'A00E'.

       * USERID
        01  WS-USERID              PIC X(8) VALUE SPACES.

       *------------------------------------------------------*
       *   DESCRIPTION   DE   LA   MAP                        *
       *------------------------------------------------------*
        COPY A00EMAP.

       *------------------------------------------------------*
       *   ZONE DE MESSAGE TAMPON POUR LE SEND FROM           *
       *------------------------------------------------------*
        01  MESSAGE-TXT            PIC X(79).

       *------------------------------------------------------*
       *   DESCRIPTION   DES  TOUCHES   FONCTIONS             *
       *------------------------------------------------------*
        COPY DFHAID.

       *------------------------------------------------------*
       *   DESCRIPTION   DES  ATTRIBUTS                       *
       *------------------------------------------------------*
        COPY DFHBMSCA.
        COPY ATTRIBUT.

       *======================================================*
       *          L I N K A G E     S E C T I O N             *
       *======================================================*
        LINKAGE SECTION.
        01  DFHCOMMAREA.
            05 LK-COMMAREA            PIC X(50).

       *======================================================*
       *     P R O C E D U R E     D I V I S I O N            *
       *======================================================*

        PROCEDURE DIVISION.
        00000-INIT-PROGRAMME.
       *---------------------*
       *     EXEC SQL SET SCHEMA FORA99 END-EXEC

             PERFORM  10000-DEBUT-PROGRAMME
             PERFORM  20000-TRAIT-PROGRAMME
             GOBACK
             .

        10000-DEBUT-PROGRAMME.
       *---------------------*
       *   TEST DE PREMIERE ENTREE DANS LE PROGRAMME
       *   SI NON PROGRAMME  MENU --->  ARRET  (ACCES INTERDIT)
            IF EIBCALEN = 0
               INITIALIZE      WS-COMMAREA
            ELSE
               MOVE LK-COMMAREA    TO  WS-COMMAREA
            END-IF

            MOVE  PROG-COURANT     TO  PROG-PRECEDENT
            MOVE  MON-PROG         TO  PROG-COURANT

       * RECUPERATION DU USERID
            EXEC CICS ASSIGN USERID (WS-USERID) END-EXEC
            .

        20000-TRAIT-PROGRAMME.
       *---------------------*
            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               PERFORM  21000-TRAIT-CHARGEMENT
               PERFORM  22000-TRAIT-ENVOI
            ELSE
               PERFORM  23000-TRAIT-RECEPTION
            END-IF
            .

        21000-TRAIT-CHARGEMENT.
       *----------------------*
       *  CHARGEMENT DE LA MAP AVANT AFFICHAGE
            MOVE LOW-VALUE TO A00EMAPO

       *  SI TRAITEMENT PARTICULIER AVANT AFFICHAGE
       *    PERFORM  21100-TRAIT-SPECIFIQUE
            .

       *21100-TRAIT-SPECIFIQUE.
       *----------------------*
       *    ..............................
       *    ..............................
       *    ..............................
       *    ..............................
       *    .

        22000-TRAIT-ENVOI.
       *-----------------*
       * AFFICHAGE DE LA DATE DU JOUR
            MOVE FUNCTION CURRENT-DATE TO WS-DATEJ
            STRING WS-DATEJ (7 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATEJ (5 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATEJ (1 : 4) DELIMITED BY SIZE
                   INTO DATEJO
            END-STRING

            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               EXEC CICS SEND MAP    ('A00EMAP')
                              ERASE
               END-EXEC
            ELSE
               EXEC CICS SEND MAP    ('A00EMAP')
                              CURSOR
                              ERASE
               END-EXEC
            END-IF

            MOVE PROG-COURANT TO PROG-SUIVANT

            EXEC CICS RETURN TRANSID  (MA-TRX)
                             COMMAREA (WS-COMMAREA)
                             LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23000-TRAIT-RECEPTION.
       *---------------------*
            EVALUATE EIBAID
       * ENTER = AFFICHAGE DU JEU
               WHEN DFHENTER
                    PERFORM  INIT-MAP
                    PERFORM  23050-RECEIVE-MAP
                    PERFORM  23100-TRAIT-ENTER
                    PERFORM  22000-TRAIT-ENVOI
       * F3 = RETOUR AU MENU
       *       WHEN DFHPF3
       *            PERFORM  23105-RETOUR-MENU
       * F7 = AFFICHAGE JEU PRECEDENT
               WHEN DFHPF7
                    PERFORM  INIT-MAP
                    PERFORM  23050-RECEIVE-MAP
                    PERFORM  23106-JEU-PREC
                    PERFORM  ALIM-MAP
                    PERFORM  22000-TRAIT-ENVOI
       * F8 = AFFICHAGE JEU SUIVANT
               WHEN DFHPF8
                    PERFORM  INIT-MAP
                    PERFORM  23050-RECEIVE-MAP
                    PERFORM  23107-JEU-SUIV
                    PERFORM  ALIM-MAP
                    PERFORM  22000-TRAIT-ENVOI
       * F10 = CREATION OU MODIFICATION DU JEU
               WHEN DFHPF10
                    PERFORM  23050-RECEIVE-MAP
                    PERFORM  23110-TRAIT-PF10
                    PERFORM  22000-TRAIT-ENVOI
       * CLEAR = FIN DIALOGUE
               WHEN DFHCLEAR
                    PERFORM  23200-TRAIT-FIN
       * AUTRE = ERREUR TOUCHE FONCTION
               WHEN OTHER
                    PERFORM  90000-ERR-TOUCHE
            END-EVALUATE
            .

        23050-RECEIVE-MAP.
       *------------------*
            EXEC CICS RECEIVE MAP  ('A00EMAP')
                              RESP (C-R)
            END-EXEC

            EVALUATE C-R
               WHEN DFHRESP(NORMAL)
                    CONTINUE
               WHEN OTHER
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE
            .

        23055-CTRL-USERID.
       *------------------*
            EXEC CICS ASSIGN USERID (JE-UCREA) END-EXEC
            .

        23100-TRAIT-ENTER.
       *------------------*
       *    ....................................
       *    ...  AFFICHAGE DES INFOS DU JEU  ...
       *    ....................................
       * INITIALISATIONS
            SET OK       TO TRUE
            MOVE CURSEUR TO CODEJL

       * CONTROLE DU CODE JEU DEMANDE
            PERFORM CTRL-CODE-JEU

       * LECTURE DU JEU
            IF OK
               PERFORM LECTURE-JEU
            END-IF

       * SI TROUVE, AFFICHAGE DES INFOS DU JEU
            IF TROUVE
               PERFORM ALIM-MAP
               MOVE 'JEU TROUVE, MODIFIER PUIS VALIDER PAR F10' TO MSGO
               MOVE CURSEUR TO NBREML
            ELSE
               MOVE 'CODE JEU INEXISTANT' TO MSGO
               MOVE CURSEUR TO CODEJL
               SET  ERREUR  TO TRUE
            END-IF
            .

        CTRL-CODE-JEU.
       *--------------*
       * OBLIGATOIRE
            IF CODEJI = SPACES OR LOW-VALUE
               MOVE ATTR-UNPROT-BRT TO CODEJA
               IF OK
                  MOVE 'CODE JEU NON RENSEIGNE' TO MSGO
                  MOVE CURSEUR TO CODEJL
                  SET  ERREUR  TO TRUE
               END-IF
            END-IF
            .

        ALIM-MAP.
       *---------*
       * ALIMENTATION DES CHAMPS DE LA MAP A PARTIR DES HOST VARIABLES
            MOVE JE-CODEJ        TO CODEJO
            MOVE JE-UCREA        TO UCREAO
            MOVE WS-NCREA        TO NCREAO
            MOVE JE-NBREM        TO NBREMO
            MOVE JE-MODEJ        TO MODEJO
            EVALUATE JE-MODEJ
             WHEN 'I'      MOVE 'INDIVIDUEL'  TO LMODEJO
             WHEN 'C'      MOVE 'COLLECTIF'   TO LMODEJO
             WHEN OTHER    MOVE ALL '?'       TO LMODEJO
            END-EVALUATE
            MOVE JE-NPOIN        TO NPOINO
            MOVE JE-UGAGN        TO UGAGNO
            MOVE WS-NGAGN        TO NGAGNO
            MOVE JE-NOREP        TO NOREPO
            MOVE JE-STATU        TO STATUO
            EVALUATE JE-STATU
             WHEN 'A'      MOVE 'ACTIF'    TO LSTATUO
             WHEN 'I'      MOVE 'INACTIF'  TO LSTATUO
             WHEN 'T'      MOVE 'TERMINE'  TO LSTATUO
             WHEN OTHER    MOVE ALL '?'    TO LSTATUO
            END-EVALUATE

       * ALIMENTATION SPECIFIQUE AU JEU
            PERFORM ALIM-SPECIFIQUE
            .

        INIT-MAP.
       *---------*
       * INITIALISATION DES CHAMPS DE LA MAP
            MOVE SPACES          TO CODEJO
                                    UCREAO
                                    NCREAO
                                    UGAGNO
                                    NGAGNO
                                    MODEJO
                                    LMODEJO
                                    STATUO
                                    LSTATUO
            MOVE ZEROES          TO NBREMO
                                    NOREPO
                                    NPOINO

       * INITIALISATION SPECIFIQUE AU JEU
            PERFORM INIT-SPECIFIQUE
            .

        ALIM-SPECIFIQUE.
       *----------------*
       * ALIMENTATION BATAILLE NAVALE
            MOVE JE-CODEJ TO BN-CODEJ

            EXEC SQL
              SELECT
                 CODEJ,
                 SBAT1,
                 SBAT2,
                 SBAT3,
                 SBAT4,
                 VALUE(RBAT1, ' '),
                 VALUE(RBAT2, ' '),
                 VALUE(RBAT3, ' '),
                 VALUE(RBAT4, ' ')
              INTO
                 :BN-CODEJ,
                 :BN-SBAT1,
                 :BN-SBAT2,
                 :BN-SBAT3,
                 :BN-SBAT4,
                 :BN-RBAT1,
                 :BN-RBAT2,
                 :BN-RBAT3,
                 :BN-RBAT4
              FROM FORA99.BATAILLE_NAVALE
              WHERE
                 CODEJ = :BN-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN +100
                    PERFORM INIT-SPECIFIQUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT BATAILLE_NAVALE, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE

            MOVE BN-SBAT1(1:2)    TO SBAT1AO
            MOVE BN-SBAT1(3:2)    TO SBAT1BO
            MOVE BN-SBAT1(5:2)    TO SBAT1CO
            MOVE BN-SBAT1(7:2)    TO SBAT1DO
            MOVE BN-SBAT2(1:2)    TO SBAT2AO
            MOVE BN-SBAT2(3:2)    TO SBAT2BO
            MOVE BN-SBAT2(5:2)    TO SBAT2CO
            MOVE BN-SBAT3(1:2)    TO SBAT3AO
            MOVE BN-SBAT3(3:2)    TO SBAT3BO
            MOVE BN-SBAT4(1:2)    TO SBAT4AO
            MOVE BN-SBAT4(3:2)    TO SBAT4BO

            MOVE BN-RBAT1(1:2)    TO RBAT1AO
            MOVE BN-RBAT1(3:2)    TO RBAT1BO
            MOVE BN-RBAT1(5:2)    TO RBAT1CO
            MOVE BN-RBAT1(7:2)    TO RBAT1DO
            MOVE BN-RBAT2(1:2)    TO RBAT2AO
            MOVE BN-RBAT2(3:2)    TO RBAT2BO
            MOVE BN-RBAT2(5:2)    TO RBAT2CO
            MOVE BN-RBAT3(1:2)    TO RBAT3AO
            MOVE BN-RBAT3(3:2)    TO RBAT3BO
            MOVE BN-RBAT4(1:2)    TO RBAT4AO
            MOVE BN-RBAT4(3:2)    TO RBAT4BO
            .

        INIT-SPECIFIQUE.
       *----------------*
       * INITIALISATION CHAMPS DE LA MAP POUR LA BATAILLE NAVALE
            MOVE SPACES TO SBAT1AO SBAT1BO SBAT1CO SBAT1DO
            MOVE SPACES TO SBAT2AO SBAT2BO SBAT2CO
            MOVE SPACES TO SBAT3AO SBAT3BO
            MOVE SPACES TO SBAT4AO SBAT4BO
            MOVE SPACES TO RBAT1AO RBAT1BO RBAT1CO RBAT1DO
            MOVE SPACES TO RBAT2AO RBAT2BO RBAT2CO
            MOVE SPACES TO RBAT3AO RBAT3BO
            MOVE SPACES TO RBAT4AO RBAT4BO
            .

        23110-TRAIT-PF10.
       *-----------------*
       *    ........................................
       *    ...  CONTROLE DE LA SAISIE PUIS      ...
       *    ...  CREATION OU MODIFICATION DU JEU ...
       *    ........................................
       * INITIALISATIONS
            SET OK       TO TRUE
            MOVE CURSEUR TO CODEJL

       * LECTURE DU JEU
            IF OK
               PERFORM LECTURE-JEU
            END-IF

       * CONTROLE DES AUTRES CHAMPS
            PERFORM CTRL-NB-REPONSES-MAX
            PERFORM CTRL-NB-POINTS
            PERFORM CTRL-STATUT

       * SI PAS D'ERREUR ET TROUVE --> CREATION DU JEU
       * SI PAS D'ERREUR ET NON TROUVE --> MODIFICATION DU JEU
            IF OK
               IF NON-TROUVE
                  PERFORM  CREATION-JEU
               ELSE
                  PERFORM  MODIFICATION-JEU
               END-IF
            END-IF
            .

        CTRL-NB-REPONSES-MAX.
       *---------------------*
       * NUMERIQUE, NON NUL
            IF NBREMI NOT NUMERIC OR NBREMI = ZEROES
               MOVE ATTR-UNPROT-BRT TO NBREMA
               IF OK
                  MOVE 'NOMBRE REPONSES MAX INVALIDE'    TO MSGO
                  MOVE CURSEUR TO NBREML
                  SET  ERREUR  TO TRUE
               END-IF
            END-IF
            .

        CTRL-NB-POINTS.
       *---------------*
       * NUMERIQUE, NON NUL
            IF NPOINI NOT NUMERIC OR NPOINI = ZEROES
               MOVE ATTR-UNPROT-BRT TO NPOINA
               IF OK
                  MOVE 'NOMBRE DE POINTS INVALIDE'    TO MSGO
                  MOVE CURSEUR TO NPOINL
                  SET  ERREUR  TO TRUE
               END-IF
            END-IF
            .

        CTRL-STATUT.
       *-----------*
       * OBLIGATOIRE, = I, E OU T
            IF STATUI NOT = 'I' AND 'A' AND 'T'
               MOVE ATTR-UNPROT-BRT TO STATUA
               IF OK
                  MOVE 'STATUT INVALIDE, VALEURS I, E OU T'    TO MSGO
                  MOVE CURSEUR TO STATUL
                  SET  ERREUR  TO TRUE
               END-IF
            END-IF
            .

        LECTURE-JEU.
       *------------*
       * LIRE LE JEU CREE PAR LE MEME USERID
            MOVE CODEJI TO JE-CODEJ

            EXEC SQL
              SELECT
                 CODEJ,
                 UCREA,
                 C.NJOUE,
                 NBREM,
                 MODEJ,
                 E.NPOIN,
                 VALUE(UGAGN, ' '),
                 VALUE(G.NJOUE, ' '),
                 VALUE(NOREP, 0),
                 STATU
              INTO
                 :JE-CODEJ,
                 :JE-UCREA,
                 :WS-NCREA,
                 :JE-NBREM,
                 :JE-MODEJ,
                 :JE-NPOIN,
                 :JE-UGAGN,
                 :WS-NGAGN,
                 :JE-NOREP,
                 :JE-STATU
              FROM FORA99.JEU    E
              LEFT OUTER JOIN FORA99.JOUEUR C ON UCREA = C.UJOUE
              LEFT OUTER JOIN FORA99.JOUEUR G ON UGAGN = G.UJOUE
              WHERE
                 CODEJ = :JE-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
       * CONTROLE : AFFICHAGE AUTORISE SI USERID = USER DE CREATION
                    IF JE-UCREA = WS-USERID
                       SET TROUVE TO TRUE
                    ELSE
                       STRING 'USER NON AUTORISE, JEU CREE PAR '
                              JE-UCREA DELIMITED BY SIZE
                           INTO MSGO
                       END-STRING
                       PERFORM  22000-TRAIT-ENVOI
                    END-IF
               WHEN +100
                    SET NON-TROUVE     TO TRUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT JEU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        CREATION-JEU.
       *-------------*
            INITIALIZE JE-JEU
            MOVE CODEJI      TO JE-CODEJ
            MOVE WS-USERID   TO JE-UCREA
            MOVE NBREMI      TO JE-NBREM
            MOVE MODEJI      TO JE-MODEJ
            MOVE NPOINI      TO JE-NPOIN
            MOVE STATUI      TO JE-STATU

            EXEC SQL INSERT INTO FORA99.JEU VALUES
              (:JE-CODEJ,
               :JE-UCREA,
               :JE-NBREM,
               :JE-MODEJ,
               :JE-NPOIN,
               NULL,
               NULL,
               :JE-STATU)
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR INSERT JEU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE

       * CREATION DANS LA TABLE SPECIFIQUE
            INITIALIZE BN-BATAILLE-NAVALE
            MOVE CODEJI      TO BN-CODEJ
            STRING SBAT1AI SBAT1BI SBAT1CI SBAT1DI DELIMITED BY SIZE
              INTO BN-SBAT1
            END-STRING
            STRING SBAT2AI SBAT2BI SBAT2CI         DELIMITED BY SIZE
              INTO BN-SBAT2
            END-STRING
            STRING SBAT3AI SBAT3BI                 DELIMITED BY SIZE
              INTO BN-SBAT3
            END-STRING
            STRING SBAT4AI SBAT4BI                 DELIMITED BY SIZE
              INTO BN-SBAT4
            END-STRING

            EXEC SQL INSERT INTO FORA99.BATAILLE_NAVALE VALUES
              (:BN-CODEJ,
               :BN-SBAT1,
               :BN-SBAT2,
               :BN-SBAT3,
               :BN-SBAT4,
               NULL,
               NULL,
               NULL,
               NULL)
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    MOVE 'CREATION BIEN EFFECTUEE' TO MSGO
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR INSERT BATAILLE_NAVALE, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        MODIFICATION-JEU.
       *-----------------*
            INITIALIZE JE-JEU
            MOVE CODEJI      TO JE-CODEJ
            MOVE NBREMI      TO JE-NBREM
            MOVE MODEJI      TO JE-MODEJ
            MOVE NPOINI      TO JE-NPOIN
            MOVE STATUI      TO JE-STATU

            EXEC SQL UPDATE FORA99.JEU SET
               NBREM = :JE-NBREM,
               MODEJ = :JE-MODEJ,
               NPOIN = :JE-NPOIN,
               STATU = :JE-STATU
            WHERE
               CODEJ = :JE-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR UPDATE JEU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE

       * MODIFICATION DANS LA TABLE SPECIFIQUE
            INITIALIZE BN-BATAILLE-NAVALE
            MOVE CODEJI      TO BN-CODEJ
            STRING SBAT1AI SBAT1BI SBAT1CI SBAT1DI DELIMITED BY SIZE
              INTO BN-SBAT1
            END-STRING
            STRING SBAT2AI SBAT2BI SBAT2CI         DELIMITED BY SIZE
              INTO BN-SBAT2
            END-STRING
            STRING SBAT3AI SBAT3BI                 DELIMITED BY SIZE
              INTO BN-SBAT3
            END-STRING
            STRING SBAT4AI SBAT4BI                 DELIMITED BY SIZE
              INTO BN-SBAT4
            END-STRING

            EXEC SQL UPDATE FORA99.BATAILLE_NAVALE SET
               SBAT1 = :BN-SBAT1,
               SBAT2 = :BN-SBAT2,
               SBAT3 = :BN-SBAT3,
               SBAT4 = :BN-SBAT4
            WHERE
               CODEJ = :BN-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    MOVE 'CREATION BIEN EFFECTUEE' TO MSGO
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR UPDATE BATAILLE_NAVALE, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        23105-RETOUR-MENU.
       *------------------*
            MOVE 'A00APGMT' TO PROG-SUIVANT
            PERFORM 23110-PROG-SUIVANT
            .

        23106-JEU-PREC.
       *---------------*
       * AFFICHER LE JEU PRECEDENT CREE PAR LE MEME USERID
            MOVE CODEJI TO JE-CODEJ

            EXEC SQL
              SELECT
                 CODEJ,
                 UCREA,
                 C.NJOUE,
                 NBREM,
                 MODEJ,
                 E.NPOIN,
                 VALUE(UGAGN, ' '),
                 VALUE(G.NJOUE, ' '),
                 VALUE(NOREP, 0),
                 STATU
              INTO
                 :JE-CODEJ,
                 :JE-UCREA,
                 :WS-NCREA,
                 :JE-NBREM,
                 :JE-MODEJ,
                 :JE-NPOIN,
                 :JE-UGAGN,
                 :WS-NGAGN,
                 :JE-NOREP,
                 :JE-STATU
              FROM FORA99.JEU    E
              LEFT OUTER JOIN FORA99.JOUEUR C ON UCREA = C.UJOUE
              LEFT OUTER JOIN FORA99.JOUEUR G ON UGAGN = G.UJOUE
              WHERE
                  CODEJ LIKE 'BN%'
              AND CODEJ < :JE-CODEJ
              AND UCREA = :WS-USERID
              ORDER BY CODEJ DESC
              FETCH FIRST 1 ROW ONLY
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    PERFORM ALIM-MAP
               WHEN +100
                    MOVE 'PAS DE JEU PRECEDENT' TO MSGO
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT JEU PREC, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        23107-JEU-SUIV.
       *---------------*
       * AFFICHER LE JEU SUIVANT CREE PAR LE MEME USERID
            MOVE CODEJI TO JE-CODEJ

            EXEC SQL
              SELECT
                 CODEJ,
                 UCREA,
                 C.NJOUE,
                 NBREM,
                 MODEJ,
                 E.NPOIN,
                 VALUE(UGAGN, ' '),
                 VALUE(G.NJOUE, ' '),
                 VALUE(NOREP, 0),
                 STATU
              INTO
                 :JE-CODEJ,
                 :JE-UCREA,
                 :WS-NCREA,
                 :JE-NBREM,
                 :JE-MODEJ,
                 :JE-NPOIN,
                 :JE-UGAGN,
                 :WS-NGAGN,
                 :JE-NOREP,
                 :JE-STATU
              FROM FORA99.JEU    E
              LEFT OUTER JOIN FORA99.JOUEUR C ON UCREA = C.UJOUE
              LEFT OUTER JOIN FORA99.JOUEUR G ON UGAGN = G.UJOUE
              WHERE
                  CODEJ LIKE 'BN%'
              AND CODEJ > :JE-CODEJ
              AND UCREA = :WS-USERID
              ORDER BY CODEJ
              FETCH FIRST 1 ROW ONLY
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    PERFORM ALIM-MAP
               WHEN +100
                    MOVE 'PAS DE JEU SUIVANT'   TO MSGO
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT JEU SUIV, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        23110-PROG-SUIVANT.
       *------------------*
            EXEC CICS XCTL  PROGRAM  (PROG-SUIVANT)
                            COMMAREA (WS-COMMAREA)
                            LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23200-TRAIT-FIN.
       *---------------*
            MOVE 'FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        90000-ERR-TOUCHE.
       *----------------*
            MOVE 'TOUCHE DE FONCTION INVALIDE' TO MSGO
            PERFORM  22000-TRAIT-ENVOI
            .

        91000-ERREUR-CICS.
       *-------------------*
            MOVE 'ERREUR CICS !!!  FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        99000-FIN-CICS.
       *--------------*
            EXEC CICS SEND FROM   (MESSAGE-TXT)
                           LENGTH (LENGTH OF MESSAGE-TXT)
                           ERASE
            END-EXEC

            EXEC CICS RETURN END-EXEC
            .
 MEMBER NAME  A00GPGMT
       *======================================================*
       *   VISU/CREA/MODIF DU JEU DU PENDU                    *
       *======================================================*

       *======================================================*
       *   I D E N T I F I C A T I O N     D I V I S I O N    *
       *======================================================*
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00GPGMT.

       *======================================================*
       *   E N V I R O N M E N T       D I V I S I O N        *
       *======================================================*
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        SOURCE-COMPUTER. IBM-390.
        OBJECT-COMPUTER. IBM-390.

       *======================================================*
       *           D A T A         D I V I S I O N            *
       *======================================================*
        DATA DIVISION.
        WORKING-STORAGE SECTION.

       * ZONE POUR DATE DU JOUR
        01  WS-DATEJ               PIC X(8) VALUE SPACES.

       * DESCRIPTION DE LA SQLCA
            EXEC SQL INCLUDE SQLCA   END-EXEC

        01  SQLCODE-ED             PIC +(3)9 VALUE ZEROES.

       * DESCRIPTION DE LA TABLE JOUEUR
       *    EXEC SQL INCLUDE JOUEUR   END-EXEC
            EXEC SQL INCLUDE JOUEUR99 END-EXEC

       * DESCRIPTION DE LA TABLE JEU
       *    EXEC SQL INCLUDE JEU      END-EXEC
            EXEC SQL INCLUDE JEU99    END-EXEC

       * DESCRIPTION DE LA TABLE PENDU
       *    EXEC SQL INCLUDE PENDU    END-EXEC
            EXEC SQL INCLUDE PENDU99  END-EXEC

       * HOSTS VARIABLES JOUEUR DE CREATION DU JEU
        01  WS-NCREA               PIC X(20) VALUE SPACES.
       * HOSTS VARIABLES JOUEUR GAGNANT
        01  WS-NGAGN               PIC X(20) VALUE SPACES.

       * NOMBRE DE COUPS RESTANTS
        01  WS-RESTANT             PIC 99    VALUE ZEROES.

       * INDICATEUR D'ERREUR
        01                         PIC X.
            88 OK                  VALUE ZEROES.
            88 ERREUR              VALUE '1'.

       * INDICATEUR D'EXISTENCE DU JEU
        01                         PIC X.
            88 TROUVE              VALUE ZEROES.
            88 NON-TROUVE          VALUE '1'.

       *------------------------------------------------------*
       *   DESCRIPTION DETAILLEE DE LA ZONE DE COMMUNICATION  *
       *------------------------------------------------------*
        01  WS-COMMAREA.
            05 PROG-PRECEDENT      PIC X(8).
            05 PROG-COURANT        PIC X(8).
            05 PROG-SUIVANT        PIC X(8).
            05                     PIC X(26).

        01 C-R                     PIC S9(8) COMP.

        01 MON-PROG                PIC X(8) VALUE 'A00GPGMT'.
        01 MA-MAP                  PIC X(8) VALUE 'A00GMAP '.
        01 MA-TRX                  PIC X(4) VALUE 'A00G'.

       * USERID
        01  WS-USERID              PIC X(8) VALUE SPACES.

       *------------------------------------------------------*
       *   DESCRIPTION   DE   LA   MAP                        *
       *------------------------------------------------------*
        COPY A00GMAP.
        01  REDEFINES A00GMAPO.
            05               PIC X(230).
            05 TAB-SMOT.
              10 OCCURS 20.
                15             PIC X(7).
                15 POSTE-SMOT  PIC X.
            05 TAB-RMOT.
              10 OCCURS 20.
                15             PIC X(7).
                15 POSTE-RMOT  PIC X.
            05 TAB-ULETT.
              10 OCCURS 20.
                15             PIC X(7).
                15 POSTE-ULETT PIC X.

        01  WS-TAB.
            05 WS-POSTE PIC X OCCURS 20.

        01  I PIC 99 VALUE ZEROES.
       *------------------------------------------------------*
       *   ZONE DE MESSAGE TAMPON POUR LE SEND FROM           *
       *------------------------------------------------------*
        01  MESSAGE-TXT            PIC X(79).

       *------------------------------------------------------*
       *   DESCRIPTION   DES  TOUCHES   FONCTIONS             *
       *------------------------------------------------------*
        COPY DFHAID.

       *------------------------------------------------------*
       *   DESCRIPTION   DES  ATTRIBUTS                       *
       *------------------------------------------------------*
        COPY DFHBMSCA.
        COPY ATTRIBUT.

       *======================================================*
       *          L I N K A G E     S E C T I O N             *
       *======================================================*
        LINKAGE SECTION.
        01  DFHCOMMAREA.
            05 LK-COMMAREA            PIC X(50).

       *======================================================*
       *     P R O C E D U R E     D I V I S I O N            *
       *======================================================*

        PROCEDURE DIVISION.
        00000-INIT-PROGRAMME.
       *---------------------*
             EXEC SQL SET SCHEMA FORA99 END-EXEC

             PERFORM  10000-DEBUT-PROGRAMME
             PERFORM  20000-TRAIT-PROGRAMME
             GOBACK
             .

        10000-DEBUT-PROGRAMME.
       *---------------------*
       *   TEST DE PREMIERE ENTREE DANS LE PROGRAMME
       *   SI NON PROGRAMME  MENU --->  ARRET  (ACCES INTERDIT)
            IF EIBCALEN = 0
               INITIALIZE      WS-COMMAREA
            ELSE
               MOVE LK-COMMAREA    TO  WS-COMMAREA
            END-IF

            MOVE  PROG-COURANT     TO  PROG-PRECEDENT
            MOVE  MON-PROG         TO  PROG-COURANT

       * RECUPERATION DU USERID
            EXEC CICS ASSIGN USERID (WS-USERID) END-EXEC
            .

        20000-TRAIT-PROGRAMME.
       *---------------------*
            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               PERFORM  21000-TRAIT-CHARGEMENT
               PERFORM  22000-TRAIT-ENVOI
            ELSE
               PERFORM  23000-TRAIT-RECEPTION
            END-IF
            .

        21000-TRAIT-CHARGEMENT.
       *----------------------*
       *  CHARGEMENT DE LA MAP AVANT AFFICHAGE
            MOVE LOW-VALUE TO A00GMAPO

       *  SI TRAITEMENT PARTICULIER AVANT AFFICHAGE
       *    PERFORM  21100-TRAIT-SPECIFIQUE
            .

       *21100-TRAIT-SPECIFIQUE.
       *----------------------*
       *    ..............................
       *    ..............................
       *    ..............................
       *    ..............................
       *    .

        22000-TRAIT-ENVOI.
       *-----------------*
       * AFFICHAGE DE LA DATE DU JOUR
            MOVE FUNCTION CURRENT-DATE TO WS-DATEJ
            STRING WS-DATEJ (7 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATEJ (5 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATEJ (1 : 4) DELIMITED BY SIZE
                   INTO DATEJO
            END-STRING

            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               EXEC CICS SEND MAP    ('A00GMAP')
                              ERASE
               END-EXEC
            ELSE
               EXEC CICS SEND MAP    ('A00GMAP')
                              CURSOR
                              ERASE
               END-EXEC
            END-IF

            MOVE PROG-COURANT TO PROG-SUIVANT

            EXEC CICS RETURN TRANSID  (MA-TRX)
                             COMMAREA (WS-COMMAREA)
                             LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23000-TRAIT-RECEPTION.
       *---------------------*
            EVALUATE EIBAID
       * ENTER = AFFICHAGE DU JEU
               WHEN DFHENTER
                    PERFORM  INIT-MAP
                    PERFORM  23050-RECEIVE-MAP
                    PERFORM  23100-TRAIT-ENTER
                    PERFORM  22000-TRAIT-ENVOI
       * F3 = RETOUR AU MENU
       *       WHEN DFHPF3
       *            PERFORM  23105-RETOUR-MENU
       * F7 = AFFICHAGE JEU PRECEDENT
               WHEN DFHPF7
                    PERFORM  INIT-MAP
                    PERFORM  23050-RECEIVE-MAP
                    PERFORM  23106-JEU-PREC
                    PERFORM  ALIM-MAP
                    PERFORM  22000-TRAIT-ENVOI
       * F8 = AFFICHAGE JEU SUIVANT
               WHEN DFHPF8
                    PERFORM  INIT-MAP
                    PERFORM  23050-RECEIVE-MAP
                    PERFORM  23107-JEU-SUIV
                    PERFORM  ALIM-MAP
                    PERFORM  22000-TRAIT-ENVOI
       * F10 = CREATION OU MODIFICATION DU JEU
               WHEN DFHPF10
                    PERFORM  23050-RECEIVE-MAP
                    PERFORM  23110-TRAIT-PF10
                    PERFORM  22000-TRAIT-ENVOI
       * CLEAR = FIN DIALOGUE
               WHEN DFHCLEAR
                    PERFORM  23200-TRAIT-FIN
       * AUTRE = ERREUR TOUCHE FONCTION
               WHEN OTHER
                    PERFORM  90000-ERR-TOUCHE
            END-EVALUATE
            .

        23050-RECEIVE-MAP.
       *------------------*
            EXEC CICS RECEIVE MAP  ('A00GMAP')
                              RESP (C-R)
            END-EXEC

            EVALUATE C-R
               WHEN DFHRESP(NORMAL)
                    CONTINUE
               WHEN OTHER
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE
            .

        23055-CTRL-USERID.
       *------------------*
            EXEC CICS ASSIGN USERID (JE-UCREA) END-EXEC
            .

        23100-TRAIT-ENTER.
       *------------------*
       *    ....................................
       *    ...  AFFICHAGE DES INFOS DU JEU  ...
       *    ....................................
       * INITIALISATIONS
            SET OK       TO TRUE
            MOVE CURSEUR TO CODEJL

       * CONTROLE DU CODE JEU DEMANDE
            PERFORM CTRL-CODE-JEU

       * LECTURE DU JEU
            IF OK
               PERFORM LECTURE-JEU
            END-IF

       * SI TROUVE, AFFICHAGE DES INFOS DU JEU
            IF TROUVE
               PERFORM ALIM-MAP
               MOVE 'JEU TROUVE, MODIFIER PUIS VALIDER PAR F10' TO MSGO
               MOVE CURSEUR TO NBREML
            ELSE
               MOVE 'CODE JEU INEXISTANT' TO MSGO
               MOVE CURSEUR TO CODEJL
               SET  ERREUR  TO TRUE
            END-IF
            .

        CTRL-CODE-JEU.
       *--------------*
       * OBLIGATOIRE
            IF CODEJI = SPACES OR LOW-VALUE
               MOVE ATTR-UNPROT-BRT TO CODEJA
               IF OK
                  MOVE 'CODE JEU NON RENSEIGNE' TO MSGO
                  MOVE CURSEUR TO CODEJL
                  SET  ERREUR  TO TRUE
               END-IF
            END-IF
            .

        ALIM-MAP.
       *---------*
       * ALIMENTATION DES CHAMPS DE LA MAP A PARTIR DES HOST VARIABLES
            MOVE JE-CODEJ        TO CODEJO
            MOVE JE-UCREA        TO UCREAO
            MOVE WS-NCREA        TO NCREAO
            MOVE JE-NBREM        TO NBREMO
            MOVE JE-MODEJ        TO MODEJO
            EVALUATE JE-MODEJ
             WHEN 'I'      MOVE 'INDIVIDUEL'  TO LMODEJO
             WHEN 'C'      MOVE 'COLLECTIF'   TO LMODEJO
             WHEN OTHER    MOVE ALL '?'       TO LMODEJO
            END-EVALUATE
            MOVE JE-NPOIN        TO NPOINO
            MOVE JE-UGAGN        TO UGAGNO
            MOVE WS-NGAGN        TO NGAGNO
            MOVE JE-NOREP        TO NOREPO
            MOVE JE-STATU        TO STATUO
            EVALUATE JE-STATU
             WHEN 'A'      MOVE 'ACTIF'    TO LSTATUO
             WHEN 'I'      MOVE 'INACTIF'  TO LSTATUO
             WHEN 'T'      MOVE 'TERMINE'  TO LSTATUO
             WHEN OTHER    MOVE ALL '?'    TO LSTATUO
            END-EVALUATE

       * ALIMENTATION SPECIFIQUE AU JEU
            PERFORM ALIM-SPECIFIQUE
            .

        INIT-MAP.
       *---------*
       * INITIALISATION DES CHAMPS DE LA MAP
            MOVE SPACES          TO CODEJO
                                    UCREAO
                                    NCREAO
                                    UGAGNO
                                    NGAGNO
                                    MODEJO
                                    LMODEJO
                                    STATUO
                                    LSTATUO
            MOVE ZEROES          TO NBREMO
                                    NOREPO
                                    NPOINO

       * INITIALISATION SPECIFIQUE AU JEU
            PERFORM INIT-SPECIFIQUE
            .

        ALIM-SPECIFIQUE.
       *----------------*
       * ALIMENTATION MAP PENDU
            MOVE JE-CODEJ TO PE-CODEJ

            EXEC SQL
              SELECT
                 CODEJ,
                 NBLET,
                 SMOT,
                 RMOT,
                 ULETT
              INTO
                 :PE-CODEJ,
                 :PE-NBLET,
                 :PE-SMOT,
                 :PE-RMOT,
                 :PE-ULETT
              FROM FORA99.PENDU
              WHERE
                 CODEJ = :PE-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN +100
                    PERFORM INIT-SPECIFIQUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT PENDU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE

            MOVE PE-NBLET         TO NBLETO
            SUBTRACT JE-NOREP FROM JE-NBREM GIVING WS-RESTANT
            MOVE WS-RESTANT       TO NBRESO

            MOVE PE-SMOT          TO WS-TAB
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 20
              MOVE WS-POSTE(I)    TO POSTE-SMOT(I)
            END-PERFORM

            MOVE PE-RMOT          TO WS-TAB
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 20
              MOVE WS-POSTE(I)    TO POSTE-RMOT(I)
            END-PERFORM

            MOVE PE-ULETT         TO WS-TAB
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 20
              MOVE WS-POSTE(I)    TO POSTE-ULETT(I)
            END-PERFORM
            .

        INIT-SPECIFIQUE.
       *----------------*
       * INITIALISATION CHAMPS DE LA MAP POUR LE JEU DU PENDU
            MOVE ZEROES           TO NBLETO
                                     NBRESO
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 20
              MOVE SPACES         TO POSTE-SMOT(I)
                                     POSTE-RMOT(I)
                                     POSTE-ULETT(I)
            END-PERFORM
            .

        23110-TRAIT-PF10.
       *-----------------*
       *    ........................................
       *    ...  CONTROLE DE LA SAISIE PUIS      ...
       *    ...  CREATION OU MODIFICATION DU JEU ...
       *    ........................................
       * INITIALISATIONS
            SET OK       TO TRUE
            MOVE CURSEUR TO CODEJL

       * LECTURE DU JEU
            IF OK
               PERFORM LECTURE-JEU
            END-IF

       * CONTROLE DES AUTRES CHAMPS
            PERFORM CTRL-NB-REPONSES-MAX
            PERFORM CTRL-NB-POINTS
            PERFORM CTRL-STATUT

       * SI PAS D'ERREUR ET TROUVE --> CREATION DU JEU
       * SI PAS D'ERREUR ET NON TROUVE --> MODIFICATION DU JEU
            IF OK
               IF NON-TROUVE
                  PERFORM  CREATION-JEU
               ELSE
                  PERFORM  MODIFICATION-JEU
               END-IF
            END-IF
            MOVE PE-NBLET TO NBLETO
            .

        CTRL-NB-REPONSES-MAX.
       *---------------------*
       * NUMERIQUE, NON NUL
            IF NBREMI NOT NUMERIC OR NBREMI = ZEROES
               MOVE ATTR-UNPROT-BRT TO NBREMA
               IF OK
                  MOVE 'NOMBRE REPONSES MAX INVALIDE'    TO MSGO
                  MOVE CURSEUR TO NBREML
                  SET  ERREUR  TO TRUE
               END-IF
            END-IF
            .

        CTRL-NB-POINTS.
       *---------------*
       * NUMERIQUE, NON NUL
            IF NPOINI NOT NUMERIC OR NPOINI = ZEROES
               MOVE ATTR-UNPROT-BRT TO NPOINA
               IF OK
                  MOVE 'NOMBRE DE POINTS INVALIDE'    TO MSGO
                  MOVE CURSEUR TO NPOINL
                  SET  ERREUR  TO TRUE
               END-IF
            END-IF
            .

        CTRL-STATUT.
       *-----------*
       * OBLIGATOIRE, = I, E OU T
            IF STATUI NOT = 'I' AND 'A' AND 'T'
               MOVE ATTR-UNPROT-BRT TO STATUA
               IF OK
                  MOVE 'STATUT INVALIDE, VALEURS I, E OU T'    TO MSGO
                  MOVE CURSEUR TO STATUL
                  SET  ERREUR  TO TRUE
               END-IF
            END-IF
            .

        LECTURE-JEU.
       *------------*
       * LIRE LE JEU CREE PAR LE MEME USERID
            MOVE CODEJI TO JE-CODEJ

            EXEC SQL
              SELECT
                 CODEJ,
                 UCREA,
                 C.NJOUE,
                 NBREM,
                 MODEJ,
                 E.NPOIN,
                 VALUE(UGAGN, ' '),
                 VALUE(G.NJOUE, ' '),
                 VALUE(NOREP, 0),
                 STATU
              INTO
                 :JE-CODEJ,
                 :JE-UCREA,
                 :WS-NCREA,
                 :JE-NBREM,
                 :JE-MODEJ,
                 :JE-NPOIN,
                 :JE-UGAGN,
                 :WS-NGAGN,
                 :JE-NOREP,
                 :JE-STATU
              FROM FORA99.JEU    E
              LEFT OUTER JOIN FORA99.JOUEUR C ON UCREA = C.UJOUE
              LEFT OUTER JOIN FORA99.JOUEUR G ON UGAGN = G.UJOUE
              WHERE
                 CODEJ = :JE-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
       * CONTROLE : AFFICHAGE AUTORISE SI USERID = USER DE CREATION
                    IF JE-UCREA = WS-USERID
                       SET TROUVE TO TRUE
                    ELSE
                       STRING 'USER NON AUTORISE, JEU CREE PAR '
                              JE-UCREA DELIMITED BY SIZE
                           INTO MSGO
                       END-STRING
                       PERFORM  22000-TRAIT-ENVOI
                    END-IF
               WHEN +100
                    SET NON-TROUVE     TO TRUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT JEU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        CREATION-JEU.
       *-------------*
            INITIALIZE JE-JEU
            MOVE CODEJI      TO JE-CODEJ
            MOVE WS-USERID   TO JE-UCREA
            MOVE NBREMI      TO JE-NBREM
            MOVE MODEJI      TO JE-MODEJ
            MOVE NPOINI      TO JE-NPOIN
            MOVE STATUI      TO JE-STATU

            EXEC SQL INSERT INTO FORA99.JEU VALUES
              (:JE-CODEJ,
               :JE-UCREA,
               :JE-NBREM,
               :JE-MODEJ,
               :JE-NPOIN,
               NULL,
               NULL,
               :JE-STATU)
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR INSERT JEU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE

       * CREATION DANS LA TABLE SPECIFIQUE
            INITIALIZE PE-PENDU
            MOVE CODEJI      TO PE-CODEJ
            MOVE ZEROES      TO PE-NBLET

            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 20
              MOVE POSTE-SMOT(I)    TO WS-POSTE(I)
              IF WS-POSTE(I) = LOW-VALUE OR SPACES
                 MOVE SPACE         TO WS-POSTE(I)
              ELSE
                 ADD 1              TO PE-NBLET
              END-IF
            END-PERFORM
            MOVE WS-TAB      TO PE-SMOT
            MOVE SPACES      TO PE-RMOT
                                PE-ULETT

            EXEC SQL INSERT INTO FORA99.PENDU VALUES
              (:PE-CODEJ,
               :PE-NBLET,
               :PE-SMOT,
               :PE-RMOT,
               :PE-ULETT)
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    MOVE 'CREATION BIEN EFFECTUEE' TO MSGO
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR INSERT PENDU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        MODIFICATION-JEU.
       *-----------------*
            INITIALIZE JE-JEU
            MOVE CODEJI      TO JE-CODEJ
            MOVE NBREMI      TO JE-NBREM
            MOVE MODEJI      TO JE-MODEJ
            MOVE NPOINI      TO JE-NPOIN
            MOVE STATUI      TO JE-STATU

            EXEC SQL UPDATE FORA99.JEU SET
               NBREM = :JE-NBREM,
               MODEJ = :JE-MODEJ,
               NPOIN = :JE-NPOIN,
               STATU = :JE-STATU
            WHERE
               CODEJ = :JE-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR UPDATE JEU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE

       * MODIFICATION DANS LA TABLE SPECIFIQUE
            INITIALIZE PE-PENDU
            MOVE CODEJI      TO PE-CODEJ
            MOVE ZEROES      TO PE-NBLET

            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 20
              MOVE POSTE-SMOT(I)    TO WS-POSTE(I)
              IF WS-POSTE(I) = LOW-VALUE OR SPACES
                 MOVE SPACE         TO WS-POSTE(I)
              ELSE
                 ADD 1              TO PE-NBLET
              END-IF
            END-PERFORM
            MOVE WS-TAB      TO PE-SMOT

            EXEC SQL UPDATE FORA99.PENDU SET
               SMOT  = :PE-SMOT,
               NBLET = :PE-NBLET
            WHERE
               CODEJ = :PE-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    MOVE 'MODIFICATION BIEN EFFECTUEE' TO MSGO
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR UPDATE PENDU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        23105-RETOUR-MENU.
       *------------------*
            MOVE 'A00APGMT' TO PROG-SUIVANT
            PERFORM 23110-PROG-SUIVANT
            .

        23106-JEU-PREC.
       *---------------*
       * AFFICHER LE JEU PRECEDENT CREE PAR LE MEME USERID
            MOVE CODEJI TO JE-CODEJ

            EXEC SQL
              SELECT
                 CODEJ,
                 UCREA,
                 C.NJOUE,
                 NBREM,
                 MODEJ,
                 E.NPOIN,
                 VALUE(UGAGN, ' '),
                 VALUE(G.NJOUE, ' '),
                 VALUE(NOREP, 0),
                 STATU
              INTO
                 :JE-CODEJ,
                 :JE-UCREA,
                 :WS-NCREA,
                 :JE-NBREM,
                 :JE-MODEJ,
                 :JE-NPOIN,
                 :JE-UGAGN,
                 :WS-NGAGN,
                 :JE-NOREP,
                 :JE-STATU
              FROM FORA99.JEU    E
              LEFT OUTER JOIN FORA99.JOUEUR C ON UCREA = C.UJOUE
              LEFT OUTER JOIN FORA99.JOUEUR G ON UGAGN = G.UJOUE
              WHERE
                  CODEJ LIKE 'PE%'
              AND CODEJ < :JE-CODEJ
              AND UCREA = :WS-USERID
              ORDER BY CODEJ DESC
              FETCH FIRST 1 ROW ONLY
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    PERFORM ALIM-MAP
               WHEN +100
                    MOVE 'PAS DE JEU PRECEDENT' TO MSGO
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT JEU PREC, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        23107-JEU-SUIV.
       *---------------*
       * AFFICHER LE JEU SUIVANT CREE PAR LE MEME USERID
            MOVE CODEJI TO JE-CODEJ

            EXEC SQL
              SELECT
                 CODEJ,
                 UCREA,
                 C.NJOUE,
                 NBREM,
                 MODEJ,
                 E.NPOIN,
                 VALUE(UGAGN, ' '),
                 VALUE(G.NJOUE, ' '),
                 VALUE(NOREP, 0),
                 STATU
              INTO
                 :JE-CODEJ,
                 :JE-UCREA,
                 :WS-NCREA,
                 :JE-NBREM,
                 :JE-MODEJ,
                 :JE-NPOIN,
                 :JE-UGAGN,
                 :WS-NGAGN,
                 :JE-NOREP,
                 :JE-STATU
              FROM FORA99.JEU    E
              LEFT OUTER JOIN FORA99.JOUEUR C ON UCREA = C.UJOUE
              LEFT OUTER JOIN FORA99.JOUEUR G ON UGAGN = G.UJOUE
              WHERE
                  CODEJ LIKE 'PE%'
              AND CODEJ > :JE-CODEJ
              AND UCREA = :WS-USERID
              ORDER BY CODEJ
              FETCH FIRST 1 ROW ONLY
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    PERFORM ALIM-MAP
               WHEN +100
                    MOVE 'PAS DE JEU SUIVANT'   TO MSGO
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT JEU SUIV, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        23110-PROG-SUIVANT.
       *------------------*
            EXEC CICS XCTL  PROGRAM  (PROG-SUIVANT)
                            COMMAREA (WS-COMMAREA)
                            LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23200-TRAIT-FIN.
       *---------------*
            MOVE 'FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        90000-ERR-TOUCHE.
       *----------------*
            MOVE 'TOUCHE DE FONCTION INVALIDE' TO MSGO
            PERFORM  22000-TRAIT-ENVOI
            .

        91000-ERREUR-CICS.
       *-------------------*
            MOVE 'ERREUR CICS !!!  FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        99000-FIN-CICS.
       *--------------*
            EXEC CICS SEND FROM   (MESSAGE-TXT)
                           LENGTH (LENGTH OF MESSAGE-TXT)
                           ERASE
            END-EXEC

            EXEC CICS RETURN END-EXEC
            .
 MEMBER NAME  A00HPGMT
       *======================================================*
       *   REPONSE JOUEUR POUR LE JEU DU PENDU                *
       *======================================================*

       *======================================================*
       *   I D E N T I F I C A T I O N     D I V I S I O N    *
       *======================================================*
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00HPGMT.

       *======================================================*
       *   E N V I R O N M E N T       D I V I S I O N        *
       *======================================================*
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        SOURCE-COMPUTER. IBM-390.
        OBJECT-COMPUTER. IBM-390.

       *======================================================*
       *           D A T A         D I V I S I O N            *
       *======================================================*
        DATA DIVISION.
        WORKING-STORAGE SECTION.

       * ZONE POUR DATE DU JOUR
        01  WS-DATEJ               PIC X(8) VALUE SPACES.

       * DESCRIPTION DE LA SQLCA
            EXEC SQL INCLUDE SQLCA   END-EXEC

        01  SQLCODE-ED             PIC +(3)9 VALUE ZEROES.

       * DESCRIPTION DE LA TABLE JEU
       *    EXEC SQL INCLUDE JEU      END-EXEC
            EXEC SQL INCLUDE JEU99    END-EXEC

       * DESCRIPTION DE LA TABLE JOUEUR
       *    EXEC SQL INCLUDE JOUEUR   END-EXEC
            EXEC SQL INCLUDE JOUEUR99 END-EXEC

       * DESCRIPTION DE LA TABLE JEU JOUEUR
       *    EXEC SQL INCLUDE JEUJOUE  END-EXEC
            EXEC SQL INCLUDE JEUJOU99 END-EXEC

       * DESCRIPTION DE LA TABLE PENDU
       *    EXEC SQL INCLUDE PENDU    END-EXEC
            EXEC SQL INCLUDE PENDU99  END-EXEC

       * HOSTS VARIABLES JOUEUR DE CREATION DU JEU
        01  WS-NCREA               PIC X(20) VALUE SPACES.
       * HOSTS VARIABLES JOUEUR GAGNANT
        01  WS-NGAGN               PIC X(20) VALUE SPACES.
        01  IND-UGAGN              PIC S9(4) COMP VALUE ZEROES.

       * NOMBRE DE COUPS RESTANTS
        01  WS-RESTANT             PIC 99    VALUE ZEROES.

       * COMPTEUR POUR CONTROLE SAISIE D'UN DOUBLON
        01  CPT-DOUBLE             PIC 99    VALUE ZEROES.

       * INDICATEURS
        01                         PIC X.
            88 OK                           VALUE ZEROES.
            88 ERREUR                       VALUE '1'.
        01                         PIC X.
            88 LETTRE-SAISIE                VALUE 'L'.
            88 MOT-SAISI                    VALUE 'M'.
        01                         PIC X.
            88 LETTRE-INEXISTANTE           VALUE 'I'.
            88 LETTRE-EXISTANTE             VALUE 'E'.
        01                         PIC X.
            88 MOT-NON-TROUVE               VALUE 'N'.
            88 MOT-TROUVE                   VALUE 'Z'.
        01                         PIC X.
            88 JEU-TROUVE                   VALUE ZEROES.
            88 JEU-NON-TROUVE               VALUE '1'.
        01                         PIC X.
            88 PENDU-TROUVE                 VALUE ZEROES.
            88 PENDU-NON-TROUVE             VALUE '1'.
        01                         PIC X.
            88 JEU-JOUEUR-TROUVE            VALUE ZEROES.
            88 JEU-JOUEUR-NON-TROUVE        VALUE '1'.
        01                         PIC X.
            88 JOUEUR-GAGNANT               VALUE '1'.

       *------------------------------------------------------*
       *   DESCRIPTION DETAILLEE DE LA ZONE DE COMMUNICATION  *
       *------------------------------------------------------*
        01  WS-COMMAREA.
            05 PROG-PRECEDENT      PIC X(8).
            05 PROG-COURANT        PIC X(8).
            05 PROG-SUIVANT        PIC X(8).
            05                     PIC X(26).

        01 C-R                     PIC S9(8) COMP.

        01 MON-PROG                PIC X(8) VALUE 'A00HPGMT'.
        01 MA-MAP                  PIC X(8) VALUE 'A00HMAP '.
        01 MA-TRX                  PIC X(4) VALUE 'A00H'.

       * USERID
        01  WS-USERID              PIC X(8) VALUE SPACES.

       *------------------------------------------------------*
       *   DESCRIPTION   DE   LA   MAP                        *
       *------------------------------------------------------*
        COPY A00HMAP.
        01  REDEFINES A00HMAPO.
            05               PIC X(230).
            05 TAB-RMOT.
              10 OCCURS 20.
                15             PIC X(7).
                15 POSTE-RMOT  PIC X.
            05 TAB-ULETT.
              10 OCCURS 20.
                15             PIC X(7).
                15 POSTE-ULETT PIC X.

        01  WS-TAB.
            05 WS-POSTE PIC X OCCURS 20.

        01  WS-TAB2.
            05 WS-POSTE2 PIC X OCCURS 20.

        01  I PIC 99 VALUE ZEROES.

       *------------------------------------------------------*
       *   ZONE DE MESSAGE TAMPON POUR LE SEND FROM           *
       *------------------------------------------------------*
        01  MESSAGE-TXT            PIC X(79).

       *------------------------------------------------------*
       *   DESCRIPTION   DES  TOUCHES   FONCTIONS             *
       *------------------------------------------------------*
        COPY DFHAID.

       *------------------------------------------------------*
       *   DESCRIPTION   DES  ATTRIBUTS                       *
       *------------------------------------------------------*
        COPY DFHBMSCA.
        COPY ATTRIBUT.

       *======================================================*
       *          L I N K A G E     S E C T I O N             *
       *======================================================*
        LINKAGE SECTION.
        01  DFHCOMMAREA.
            05 LK-COMMAREA            PIC X(50).

       *======================================================*
       *     P R O C E D U R E     D I V I S I O N            *
       *======================================================*

        PROCEDURE DIVISION.
        00000-INIT-PROGRAMME.
       *---------------------*
             EXEC SQL SET SCHEMA FORA99 END-EXEC

             PERFORM  10000-DEBUT-PROGRAMME
             PERFORM  20000-TRAIT-PROGRAMME
             GOBACK
             .

        10000-DEBUT-PROGRAMME.
       *---------------------*
       *   TEST DE PREMIERE ENTREE DANS LE PROGRAMME
       *   SI NON PROGRAMME  MENU --->  ARRET  (ACCES INTERDIT)
            IF EIBCALEN = 0
               INITIALIZE      WS-COMMAREA
            ELSE
               MOVE LK-COMMAREA    TO  WS-COMMAREA
            END-IF

            MOVE  PROG-COURANT     TO  PROG-PRECEDENT
            MOVE  MON-PROG         TO  PROG-COURANT

       * RECUPERATION DU USERID
            EXEC CICS ASSIGN USERID (WS-USERID) END-EXEC
            .

        20000-TRAIT-PROGRAMME.
       *---------------------*
            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               PERFORM  21000-TRAIT-CHARGEMENT
               PERFORM  22000-TRAIT-ENVOI
            ELSE
               PERFORM  23000-TRAIT-RECEPTION
            END-IF
            .

        21000-TRAIT-CHARGEMENT.
       *----------------------*
       *  CHARGEMENT DE LA MAP AVANT AFFICHAGE
            MOVE LOW-VALUE TO A00HMAPO

       *  SI TRAITEMENT PARTICULIER AVANT AFFICHAGE
       *    PERFORM  21100-TRAIT-SPECIFIQUE
            .

       *21100-TRAIT-SPECIFIQUE.
       *----------------------*
       *    ..............................
       *    ..............................
       *    ..............................
       *    ..............................
       *    .

        22000-TRAIT-ENVOI.
       *-----------------*
       * AFFICHAGE DE LA DATE DU JOUR
            MOVE FUNCTION CURRENT-DATE TO WS-DATEJ
            STRING WS-DATEJ (7 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATEJ (5 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATEJ (1 : 4) DELIMITED BY SIZE
                   INTO DATEJO
            END-STRING

            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               EXEC CICS SEND MAP    ('A00HMAP')
                              ERASE
               END-EXEC
            ELSE
               EXEC CICS SEND MAP    ('A00HMAP')
                              CURSOR
                              ERASE
               END-EXEC
            END-IF

            MOVE PROG-COURANT TO PROG-SUIVANT

            EXEC CICS RETURN TRANSID  (MA-TRX)
                             COMMAREA (WS-COMMAREA)
                             LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23000-TRAIT-RECEPTION.
       *---------------------*
            EVALUATE EIBAID
       * ENTER = AFFICHAGE DE L'ETAT ACTUEL DU JEU
               WHEN DFHENTER
                    PERFORM  23050-RECEIVE-MAP
                    PERFORM  INITIALISATIONS
                    PERFORM  23100-TRAIT-ENTER
                    PERFORM  22000-TRAIT-ENVOI
       * F10 = CREATION OU MODIFICATION DU JEU
               WHEN DFHPF10
                    PERFORM  23050-RECEIVE-MAP
                    PERFORM  23110-TRAIT-PF10
                    PERFORM  22000-TRAIT-ENVOI
       * CLEAR = FIN DIALOGUE
               WHEN DFHCLEAR
                    PERFORM  23200-TRAIT-FIN
       * AUTRE = ERREUR TOUCHE FONCTION
               WHEN OTHER
                    PERFORM  90000-ERR-TOUCHE
            END-EVALUATE
            .

        23050-RECEIVE-MAP.
       *------------------*
            EXEC CICS RECEIVE MAP  ('A00HMAP')
                              RESP (C-R)
            END-EXEC

            EVALUATE C-R
               WHEN DFHRESP(NORMAL)
                    CONTINUE
               WHEN OTHER
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE
            .

        INITIALISATIONS.
       *------------------*
            SET OK TO TRUE
            .

        23100-TRAIT-ENTER.
       *------------------*
       *    ....................................
       *    ...  AFFICHAGE DES INFOS DU JEU  ...
       *    ....................................
       * CONTROLE DU JEU DEMANDE
            PERFORM CTRL-JEU

       * SI JEU TROUVE, AFFICHAGE DES INFOS DU JEU
            IF OK
               PERFORM ALIM-BANDEAU
               PERFORM ALIM-SPECIFIQUE
               MOVE 'SAISIR LA REPONSE PUIS F10 POUR VALIDER'  TO MSGO
               MOVE CURSEUR TO LETTREL
            END-IF
            .

        CTRL-JEU.
       *---------*
       * INITIALISATIONS
       *    SET OK       TO TRUE

       * CONTROLE DU CODE JEU DEMANDE
            PERFORM CTRL-CODE-JEU

       * LECTURE DU JEU
            IF OK
               PERFORM LECTURE-JEU
               IF JEU-NON-TROUVE
                  MOVE 'CODE JEU INEXISTANT' TO MSGO
                  MOVE CURSEUR TO CODEJL
                  SET  ERREUR  TO TRUE
               END-IF
            END-IF

       * CONTROLE DU STATUT
            IF OK
               PERFORM CTRL-STATUT
            END-IF

       * CONTROLE DU MODE
            IF OK
               PERFORM CTRL-MODE-JEU
            END-IF
            .

        CTRL-CODE-JEU.
       *--------------*
       * OBLIGATOIRE
            IF CODEJI = SPACES OR LOW-VALUE
               MOVE ATTR-UNPROT-BRT TO CODEJA
               IF OK
                  MOVE 'CODE JEU NON RENSEIGNE' TO MSGO
                  MOVE CURSEUR TO CODEJL
                  SET  ERREUR  TO TRUE
               END-IF
            END-IF
            .

        CTRL-STATUT.
       *------------*
       * DOIT ETRE EGAL A 'A'
            IF JE-STATU NOT = 'A'
               MOVE 'STATUT INVALIDE, IMPOSSIBLE DE JOUER'     TO MSGO
               MOVE CURSEUR TO CODEJL
               SET  ERREUR  TO TRUE
            END-IF
            .

        CTRL-MODE-JEU.
       *--------------*
       * SI MODE INDIVIDUEL ET QU'IL EXISTE DEJA UN JOUEUR ALORS ERREUR
            IF JE-MODEJ = 'I'
               MOVE CODEJI      TO JJ-CODEJ
               EXEC SQL
                 SELECT
                    UJOUE,
                    CODEJ,
                    NPOIN
                 INTO
                    :JJ-UJOUE,
                    :JJ-CODEJ,
                    :JJ-NPOIN
                 FROM FORA99.JEU_JOUEUR
                 WHERE
                     CODEJ = :JJ-CODEJ
               END-EXEC
               EVALUATE SQLCODE
                  WHEN ZEROES
                  WHEN -811
                     IF JJ-UJOUE NOT = WS-USERID
                     MOVE 'MODE INDIVIDUEL ET IL EXISTE DEJA UN JOUEUR'
                        TO MSGO
                        MOVE CURSEUR TO CODEJL
                        SET  ERREUR  TO TRUE
                     END-IF
                  WHEN +100
                       CONTINUE
                  WHEN OTHER
                       MOVE SQLCODE TO SQLCODE-ED
                       STRING 'ERREUR SELECT1 JEU_JOUEUR, SQLCODE : '
                              SQLCODE-ED DELIMITED BY SIZE
                              INTO MSGO
                       END-STRING
                       PERFORM  22000-TRAIT-ENVOI
               END-EVALUATE
            END-IF
            .

        ALIM-BANDEAU.
       *-------------*
       * ALIMENTATION DES CHAMPS DE LA MAP A PARTIR DES HOST VARIABLES
            MOVE JE-CODEJ        TO CODEJO
            MOVE JE-UCREA        TO UCREAO
            MOVE WS-NCREA        TO NCREAO
            MOVE JE-NBREM        TO NBREMO
            MOVE JE-MODEJ        TO MODEJO
            EVALUATE JE-MODEJ
             WHEN 'C'      MOVE 'COLLECTIF'  TO LMODEJO
             WHEN 'I'      MOVE 'INDIVIDUEL' TO LMODEJO
             WHEN OTHER    MOVE ALL '?'      TO LMODEJO
            END-EVALUATE
            MOVE JE-NPOIN        TO NPOINO
            MOVE JE-UGAGN        TO UGAGNO
            MOVE WS-NGAGN        TO NGAGNO
            MOVE JE-NOREP        TO NOREPO
            MOVE JE-STATU        TO STATUO
            EVALUATE JE-STATU
             WHEN 'A'      MOVE 'ACTIF'    TO LSTATUO
             WHEN 'I'      MOVE 'INACTIF'  TO LSTATUO
             WHEN 'T'      MOVE 'TERMINE'  TO LSTATUO
             WHEN OTHER    MOVE ALL '?'    TO LSTATUO
            END-EVALUATE
            .

        INIT-MAP.
       *---------*
       * INITIALISATION DES CHAMPS DE LA MAP
            MOVE SPACES          TO CODEJO
                                    UCREAO
                                    NCREAO
                                    UGAGNO
                                    NGAGNO
                                    STATUO
                                    LSTATUO
                                    MODEJO
                                    MODEJO
            MOVE ZEROES          TO NBREMO
                                    NOREPO
                                    NPOINO

       * INITIALISATION SPECIFIQUE AU JEU
            PERFORM INIT-SPECIFIQUE
            .

        ALIM-SPECIFIQUE.
       *----------------*
       * ALIMENTATION MAP PENDU
            MOVE JE-CODEJ TO PE-CODEJ

            EXEC SQL
              SELECT
                 CODEJ,
                 NBLET,
                 SMOT,
                 RMOT,
                 ULETT
              INTO
                 :PE-CODEJ,
                 :PE-NBLET,
                 :PE-SMOT,
                 :PE-RMOT,
                 :PE-ULETT
              FROM FORA99.PENDU
              WHERE
                 CODEJ = :PE-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN +100
                    PERFORM INIT-SPECIFIQUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT PENDU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE

            MOVE PE-NBLET         TO NBLETO
            SUBTRACT JE-NOREP FROM JE-NBREM GIVING WS-RESTANT
            MOVE WS-RESTANT       TO NBRESO

            MOVE PE-RMOT          TO WS-TAB
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 20
              MOVE WS-POSTE(I)    TO POSTE-RMOT(I)
            END-PERFORM

            MOVE PE-ULETT         TO WS-TAB
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 20
              MOVE WS-POSTE(I)    TO POSTE-ULETT(I)
            END-PERFORM
            .

        INIT-SPECIFIQUE.
       *----------------*
       * INITIALISATION CHAMPS DE LA MAP POUR LE JEU DU PENDU
            MOVE ZEROES           TO NBLETO
                                     NBRESO
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 20
              MOVE SPACES         TO POSTE-RMOT(I)
                                     POSTE-ULETT(I)
            END-PERFORM
            .

        23110-TRAIT-PF10.
       *-----------------*
       * CONTROLE DU JEU : DOIT EXISTER ET ETRE EN COURS
            PERFORM CTRL-JEU

       * RECUPERATION DES INFOS DE LA TABLE PENDU
            IF OK
               PERFORM LECTURE-PENDU
            END-IF

       * CONTROLE NOMBRE LIMITE DE REPONSES ATTEINT
            IF OK
               PERFORM CTRL-NB-REP-MAX
            END-IF

       * CONTROLE DE LA REPONSE
            IF OK
               PERFORM CTRL-REPONSE
            END-IF

       * TRAITEMENT DE LA REPONSE : LETTRE SAISIE OU MOT SAISI
            IF OK
               IF LETTRE-SAISIE
                  PERFORM TRT-LETTRE
               ELSE
                  PERFORM TRT-MOT
               END-IF
            END-IF

       * SI PAS D'ERREUR METTRE A JOUR LES TABLES JEU, JEU_JOUEUR
       * ET FAIRE LE TRAITEMENT DU GAGNANT SI GAGNANT
            IF OK
               PERFORM CRE-MAJ-JEU-JOUEUR
               PERFORM MAJ-PENDU
               PERFORM TRT-GAGNANT
               PERFORM MAJ-JEU
               PERFORM LECTURE-JEU
               PERFORM ALIM-BANDEAU
               PERFORM ALIM-SPECIFIQUE
               MOVE SPACES TO LETTREO
               MOVE CURSEUR TO LETTREL
            END-IF
            .

        CTRL-NB-REP-MAX.
       *----------------*
            IF JE-NOREP = JE-NBREM
               MOVE 'NOMBRE REPONSES LIMITE ATTEINT' TO MSGO
               MOVE CURSEUR TO LETTREL
               SET  ERREUR  TO TRUE
            END-IF
            .

        CTRL-REPONSE.
       *-------------*
       * SI LA LETTRE EST SAISIE, ALORS ON CONTROLE LA LETTRE SINON
       * ON CONTROLE LE MOT SAISI
            IF LETTREI NOT = LOW-VALUE AND SPACES
               PERFORM CTRL-LETTRE
            ELSE
               PERFORM CTRL-MOT
            END-IF
            .

        CTRL-LETTRE.
       *------------*
       * LA LETTRE SAISIE DOIT ETRE DIFFERENTE D'UNE DEJA SAISIE
            SET LETTRE-SAISIE TO TRUE
            MOVE ZEROES TO CPT-DOUBLE
            INSPECT PE-ULETT TALLYING CPT-DOUBLE FOR ALL LETTREI
            IF CPT-DOUBLE > ZEROES
               MOVE 'LETTRE DEJA SAISIE' TO MSGO
               MOVE CURSEUR TO LETTREL
               SET  ERREUR  TO TRUE
            END-IF
            .

        CTRL-MOT.
       *---------*
            SET MOT-SAISI TO TRUE
            .

        TRT-LETTRE.
       *----------*
       * RECHERCHER LA LETTRE DANS LE MOT A DEVINER :
       * SI ELLE EXISTE L'INSCRIRE DANS LES EMPLACEMENTS CORRESPONDANTS
       * DANS LE MOT DE LA REPONSE
            SET LETTRE-INEXISTANTE TO TRUE
            MOVE PE-SMOT TO WS-TAB
            MOVE PE-RMOT TO WS-TAB2
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > PE-NBLET
               IF LETTREI = WS-POSTE(I)
                  MOVE LETTREI TO WS-POSTE2(I)
                  SET LETTRE-EXISTANTE TO TRUE
               END-IF
            END-PERFORM
            MOVE WS-TAB2 TO PE-RMOT

       * INSCRIRE LA LETTRE DANS L'HISTORIQUE
            MOVE PE-ULETT TO WS-TAB
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > 20
               IF WS-POSTE(I) = SPACES OR LOW-VALUE
                  MOVE LETTREI TO WS-POSTE(I)
                  MOVE 20 TO I
               END-IF
            END-PERFORM
            MOVE WS-TAB TO PE-ULETT

            IF LETTRE-INEXISTANTE
               MOVE 'COUP PERDU !' TO MSGO
            ELSE
               MOVE 'BIEN JOUE !'  TO MSGO
            END-IF
            .

        TRT-MOT.
       *--------*
       * SI LE MOT SAISI CORRESPOND AU MOT A DEVINER C'EST GAGNE !!
            MOVE SPACES TO WS-TAB
            SET MOT-NON-TROUVE     TO TRUE
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > PE-NBLET
               MOVE POSTE-RMOT (I) TO WS-POSTE(I)
            END-PERFORM
            IF WS-TAB = PE-SMOT
               SET MOT-TROUVE TO TRUE
               MOVE PE-SMOT TO PE-RMOT
            END-IF
            .

        LECTURE-JEU.
       *------------*
       * LIRE LE JEU CREE PAR LE MEME USERID
            MOVE CODEJI TO JE-CODEJ

            EXEC SQL
              SELECT
                 CODEJ,
                 UCREA,
                 C.NJOUE,
                 NBREM,
                 MODEJ,
                 E.NPOIN,
                 VALUE(UGAGN, ' '),
                 VALUE(G.NJOUE, ' '),
                 VALUE(NOREP, 0),
                 STATU
              INTO
                 :JE-CODEJ,
                 :JE-UCREA,
                 :WS-NCREA,
                 :JE-NBREM,
                 :JE-MODEJ,
                 :JE-NPOIN,
                 :JE-UGAGN,
                 :WS-NGAGN,
                 :JE-NOREP,
                 :JE-STATU
              FROM FORA99.JEU    E
              LEFT OUTER JOIN FORA99.JOUEUR C ON UCREA = C.UJOUE
              LEFT OUTER JOIN FORA99.JOUEUR G ON UGAGN = G.UJOUE
              WHERE
                 CODEJ = :JE-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    SET JEU-TROUVE TO TRUE
               WHEN +100
                    SET JEU-NON-TROUVE     TO TRUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT JEU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        LECTURE-PENDU.
       *--------------*
            MOVE JE-CODEJ TO PE-CODEJ

            EXEC SQL
              SELECT
                 CODEJ,
                 NBLET,
                 SMOT,
                 RMOT,
                 ULETT
              INTO
                 :PE-CODEJ,
                 :PE-NBLET,
                 :PE-SMOT,
                 :PE-RMOT,
                 :PE-ULETT
              FROM FORA99.PENDU
              WHERE
                 CODEJ = :PE-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    SET PENDU-TROUVE                TO TRUE
               WHEN +100
                    SET PENDU-NON-TROUVE TO TRUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT PENDU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        TRT-GAGNANT.
       *------------*
       * ON VERIFIE SI LE JOUEUR A GAGNE
            IF MOT-TROUVE
               SET JOUEUR-GAGNANT TO TRUE
               MOVE 'BRAVO TU AS GAGNE !!!!' TO MSGO
               PERFORM MAJ-JEU-JOUEUR
            END-IF
            .

        MAJ-PENDU.
       *----------*
            MOVE JE-CODEJ    TO PE-CODEJ

            EXEC SQL UPDATE FORA99.PENDU SET
               RMOT  = :PE-RMOT,
               ULETT = :PE-ULETT
               WHERE CODEJ = :JJ-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR UPDATE PENDU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        MAJ-JEU-JOUEUR.
       *----------------*
       * AJOUT DES POINTS SI GAGNANT
       * NB POINTS GAGNANTS = 36 - NB REPONSES
            MOVE WS-USERID   TO JJ-UJOUE
            MOVE JE-CODEJ    TO JJ-CODEJ
            IF JOUEUR-GAGNANT
               MOVE JE-NPOIN TO JJ-NPOIN
            ELSE
               MOVE ZEROES   TO JJ-NPOIN
            END-IF

            EXEC SQL UPDATE FORA99.JEU_JOUEUR SET
               NPOIN = :JJ-NPOIN
               WHERE UJOUE = :JJ-UJOUE
                 AND CODEJ = :JJ-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR UPDATE JEU_JOUEUR, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        MAJ-JEU.
       *--------*
       * INCREMENTER LE NOMBRE DE REPONSES
            ADD 1         TO JE-NOREP
       * RENSEIGNER LE GAGNANT
            IF JOUEUR-GAGNANT
               MOVE 'T'       TO JE-STATU
               MOVE WS-USERID TO JE-UGAGN
               MOVE ZERO      TO IND-UGAGN
            ELSE
               MOVE -1        TO IND-UGAGN
            END-IF

            EXEC SQL UPDATE FORA99.JEU  SET
               NOREP = :JE-NOREP,
               STATU = :JE-STATU,
               UGAGN = :JE-UGAGN :IND-UGAGN
               WHERE CODEJ = :JE-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR UPDATE JEU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE

       * AFFICHAGE DU NOMBRE DE REPONSES
            MOVE JE-NOREP TO NOREPO
            .

        CRE-MAJ-JEU-JOUEUR.
       *------------------*
            PERFORM LECTURE-JEU-JOUEUR
            IF JEU-JOUEUR-NON-TROUVE
               PERFORM CREAT-JEU-JOUEUR
            END-IF
            .

        LECTURE-JEU-JOUEUR.
       *------------------*
            MOVE WS-USERID   TO JJ-UJOUE
            MOVE CODEJI      TO JJ-CODEJ

            EXEC SQL
              SELECT
                 UJOUE,
                 CODEJ,
                 NPOIN
              INTO
                 :JJ-UJOUE,
                 :JJ-CODEJ,
                 :JJ-NPOIN
              FROM FORA99.JEU_JOUEUR
              WHERE
                  UJOUE = :JJ-UJOUE
              AND CODEJ = :JJ-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    SET JEU-JOUEUR-TROUVE TO TRUE
               WHEN +100
                    SET JEU-JOUEUR-NON-TROUVE     TO TRUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT JEU_JOUEUR, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        CREAT-JEU-JOUEUR.
       *----------------*
       * CREATION DU JOUEUR DANS LA TABLE JEU_JOUEUR
            MOVE WS-USERID   TO JJ-UJOUE
            MOVE JE-CODEJ    TO JJ-CODEJ
            MOVE ZEROES      TO JJ-NPOIN

            EXEC SQL INSERT INTO FORA99.JEU_JOUEUR VALUES
              (:JJ-UJOUE,
               :JJ-CODEJ,
               :JJ-NPOIN)
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR INSERT JEU_JOUEUR, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        23110-PROG-SUIVANT.
       *------------------*
            EXEC CICS XCTL  PROGRAM  (PROG-SUIVANT)
                            COMMAREA (WS-COMMAREA)
                            LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23200-TRAIT-FIN.
       *---------------*
            MOVE 'FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        90000-ERR-TOUCHE.
       *----------------*
            MOVE 'TOUCHE DE FONCTION INVALIDE' TO MSGO
            PERFORM  22000-TRAIT-ENVOI
            .

        91000-ERREUR-CICS.
       *-------------------*
            MOVE 'ERREUR CICS !!!  FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        99000-FIN-CICS.
       *--------------*
            EXEC CICS SEND FROM   (MESSAGE-TXT)
                           LENGTH (LENGTH OF MESSAGE-TXT)
                           ERASE
            END-EXEC

            EXEC CICS RETURN END-EXEC
            .
 MEMBER NAME  A00FPGMT
       *======================================================*
       *   REPONSE JOUEUR                                     *
       *======================================================*

       *======================================================*
       *   I D E N T I F I C A T I O N     D I V I S I O N    *
       *======================================================*
        IDENTIFICATION DIVISION.
        PROGRAM-ID. A00FPGMT.

       *======================================================*
       *   E N V I R O N M E N T       D I V I S I O N        *
       *======================================================*
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
        SOURCE-COMPUTER. IBM-390.
        OBJECT-COMPUTER. IBM-390.

       *======================================================*
       *           D A T A         D I V I S I O N            *
       *======================================================*
        DATA DIVISION.
        WORKING-STORAGE SECTION.

       * ZONE POUR DATE DU JOUR
        01  WS-DATEJ               PIC X(8) VALUE SPACES.

       * DESCRIPTION DE LA SQLCA
            EXEC SQL INCLUDE SQLCA   END-EXEC

        01  SQLCODE-ED             PIC +(3)9 VALUE ZEROES.

       * DESCRIPTION DE LA TABLE JEU
       *    EXEC SQL INCLUDE JEU      END-EXEC
            EXEC SQL INCLUDE JEU99    END-EXEC

       * DESCRIPTION DE LA TABLE JOUEUR
       *    EXEC SQL INCLUDE JOUEUR   END-EXEC
            EXEC SQL INCLUDE JOUEUR99 END-EXEC

       * DESCRIPTION DE LA TABLE JEU JOUEUR
       *    EXEC SQL INCLUDE JEUJOUE  END-EXEC
            EXEC SQL INCLUDE JEUJOU99 END-EXEC

       * DESCRIPTION DE LA TABLE BATAILLE NAVALE
       *    EXEC SQL INCLUDE BATAILLE END-EXEC
            EXEC SQL INCLUDE BATAIL99 END-EXEC

       * HOSTS VARIABLES JOUEUR DE CREATION DU JEU
        01  WS-NCREA               PIC X(20) VALUE SPACES.
       * HOSTS VARIABLES JOUEUR GAGNANT
        01  WS-NGAGN               PIC X(20) VALUE SPACES.
        01  IND-UGAGN              PIC S9(4) COMP VALUE ZEROES.

       * COMPTEURS
        01  NB-BAT-TOUCHES         PIC 9    VALUE ZEROES.
        01  NB-BAT-COULES          PIC 9    VALUE ZEROES.
        01  NB-BLANCS              PIC 9    VALUE ZEROES.
        01  I                      PIC 9    VALUE ZEROES.
        01  NUM-BAT-TOUCHE         PIC 9    VALUE ZEROES.
        01  NUM-BAT-COULE          PIC 9    VALUE ZEROES.

       * ZONE POUR CONTROLE DE LA REPONSE SAISIE
        01  WS-REPON.
            05 WS-REPON-1          PIC X    VALUE SPACES.
               88 WS-REPON-1-VALIDE VALUE '1' THRU '6'.
            05 WS-REPON-2          PIC X    VALUE SPACES.
               88 WS-REPON-2-VALIDE VALUE 'A' THRU 'F'.

       * INDICATEURS
        01                         PIC X.
            88 OK                           VALUE ZEROES.
            88 ERREUR                       VALUE '1'.
        01                         PIC X.
            88 BAT-TOUCHE                   VALUE ZEROES.
            88 BAT-COULE                    VALUE '2'.
            88 BAT-NON-TOUCHE               VALUE '3'.
        01                         PIC X.
            88 JEU-TROUVE                   VALUE ZEROES.
            88 JEU-NON-TROUVE               VALUE '1'.
        01                         PIC X.
            88 BATAILLE-NAVALE-TROUVEE      VALUE ZEROES.
            88 BATAILLE-NAVALE-NON-TROUVEE  VALUE '1'.
        01                         PIC X.
            88 JEU-JOUEUR-TROUVE            VALUE ZEROES.
            88 JEU-JOUEUR-NON-TROUVE        VALUE '1'.
        01                         PIC X.
            88 JOUEUR-GAGNANT               VALUE '1'.

       *------------------------------------------------------*
       *   DESCRIPTION DETAILLEE DE LA ZONE DE COMMUNICATION  *
       *------------------------------------------------------*
        01  WS-COMMAREA.
            05 PROG-PRECEDENT      PIC X(8).
            05 PROG-COURANT        PIC X(8).
            05 PROG-SUIVANT        PIC X(8).
            05                     PIC X(26).

        01 C-R                     PIC S9(8) COMP.

        01 MON-PROG                PIC X(8) VALUE 'A00FPGMT'.
        01 MA-MAP                  PIC X(8) VALUE 'A00FMAP '.
        01 MA-TRX                  PIC X(4) VALUE 'A00F'.

       * USERID
        01  WS-USERID              PIC X(8) VALUE SPACES.

       *------------------------------------------------------*
       *   DESCRIPTION   DE   LA   MAP                        *
       *------------------------------------------------------*
        COPY A00FMAP.

       *------------------------------------------------------*
       *   ZONE DE MESSAGE TAMPON POUR LE SEND FROM           *
       *------------------------------------------------------*
        01  MESSAGE-TXT            PIC X(79).

       *------------------------------------------------------*
       *   DESCRIPTION   DES  TOUCHES   FONCTIONS             *
       *------------------------------------------------------*
        COPY DFHAID.

       *------------------------------------------------------*
       *   DESCRIPTION   DES  ATTRIBUTS                       *
       *------------------------------------------------------*
        COPY DFHBMSCA.
        COPY ATTRIBUT.

       *======================================================*
       *          L I N K A G E     S E C T I O N             *
       *======================================================*
        LINKAGE SECTION.
        01  DFHCOMMAREA.
            05 LK-COMMAREA            PIC X(50).

       *======================================================*
       *     P R O C E D U R E     D I V I S I O N            *
       *======================================================*

        PROCEDURE DIVISION.
        00000-INIT-PROGRAMME.
       *---------------------*
             EXEC SQL SET SCHEMA FORA99 END-EXEC

             PERFORM  10000-DEBUT-PROGRAMME
             PERFORM  20000-TRAIT-PROGRAMME
             GOBACK
             .

        10000-DEBUT-PROGRAMME.
       *---------------------*
       *   TEST DE PREMIERE ENTREE DANS LE PROGRAMME
       *   SI NON PROGRAMME  MENU --->  ARRET  (ACCES INTERDIT)
            IF EIBCALEN = 0
               INITIALIZE      WS-COMMAREA
            ELSE
               MOVE LK-COMMAREA    TO  WS-COMMAREA
            END-IF

            MOVE  PROG-COURANT     TO  PROG-PRECEDENT
            MOVE  MON-PROG         TO  PROG-COURANT

       * RECUPERATION DU USERID
            EXEC CICS ASSIGN USERID (WS-USERID) END-EXEC
            .

        20000-TRAIT-PROGRAMME.
       *---------------------*
            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               PERFORM  21000-TRAIT-CHARGEMENT
               PERFORM  22000-TRAIT-ENVOI
            ELSE
               PERFORM  23000-TRAIT-RECEPTION
            END-IF
            .

        21000-TRAIT-CHARGEMENT.
       *----------------------*
       *  CHARGEMENT DE LA MAP AVANT AFFICHAGE
            MOVE LOW-VALUE TO A00FMAPO

       *  SI TRAITEMENT PARTICULIER AVANT AFFICHAGE
       *    PERFORM  21100-TRAIT-SPECIFIQUE
            .

       *21100-TRAIT-SPECIFIQUE.
       *----------------------*
       *    ..............................
       *    ..............................
       *    ..............................
       *    ..............................
       *    .

        22000-TRAIT-ENVOI.
       *-----------------*
       * AFFICHAGE DE LA DATE DU JOUR
            MOVE FUNCTION CURRENT-DATE TO WS-DATEJ
            STRING WS-DATEJ (7 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATEJ (5 : 2) DELIMITED BY SIZE
                   '/'              DELIMITED BY SIZE
                   WS-DATEJ (1 : 4) DELIMITED BY SIZE
                   INTO DATEJO
            END-STRING

            IF PROG-PRECEDENT  NOT =  PROG-COURANT
               EXEC CICS SEND MAP    ('A00FMAP')
                              ERASE
               END-EXEC
            ELSE
               EXEC CICS SEND MAP    ('A00FMAP')
                              CURSOR
                              ERASE
               END-EXEC
            END-IF

            MOVE PROG-COURANT TO PROG-SUIVANT

            EXEC CICS RETURN TRANSID  (MA-TRX)
                             COMMAREA (WS-COMMAREA)
                             LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23000-TRAIT-RECEPTION.
       *---------------------*
            EVALUATE EIBAID
       * ENTER = AFFICHAGE DE L'ETAT ACTUEL DU JEU
               WHEN DFHENTER
                    PERFORM  23050-RECEIVE-MAP
                    PERFORM  INITIALISATIONS
                    PERFORM  23100-TRAIT-ENTER
                    PERFORM  22000-TRAIT-ENVOI
       * F10 = CREATION OU MODIFICATION DU JEU
               WHEN DFHPF10
                    PERFORM  23050-RECEIVE-MAP
                    PERFORM  23110-TRAIT-PF10
                    PERFORM  22000-TRAIT-ENVOI
       * CLEAR = FIN DIALOGUE
               WHEN DFHCLEAR
                    PERFORM  23200-TRAIT-FIN
       * AUTRE = ERREUR TOUCHE FONCTION
               WHEN OTHER
                    PERFORM  90000-ERR-TOUCHE
            END-EVALUATE
            .

        23050-RECEIVE-MAP.
       *------------------*
            EXEC CICS RECEIVE MAP  ('A00FMAP')
                              RESP (C-R)
            END-EXEC

            EVALUATE C-R
               WHEN DFHRESP(NORMAL)
                    CONTINUE
               WHEN OTHER
                    PERFORM 91000-ERREUR-CICS
            END-EVALUATE
            .

        INITIALISATIONS.
       *------------------*
            SET OK TO TRUE
            .

        23100-TRAIT-ENTER.
       *------------------*
       *    ....................................
       *    ...  AFFICHAGE DES INFOS DU JEU  ...
       *    ....................................
       * CONTROLE DU JEU DEMANDE
            PERFORM CTRL-JEU

       * SI JEU TROUVE, AFFICHAGE DES INFOS DU JEU
            IF OK
               PERFORM ALIM-BANDEAU
               PERFORM ALIM-SPECIFIQUE
               MOVE 'SAISIR LA REPONSE PUIS F10 POUR VALIDER'  TO MSGO
               MOVE CURSEUR TO REPONL
            END-IF
            .

        CTRL-JEU.
       *---------*
       * INITIALISATIONS
       *    SET OK       TO TRUE

       * CONTROLE DU CODE JEU DEMANDE
            PERFORM CTRL-CODE-JEU

       * LECTURE DU JEU
            IF OK
               PERFORM LECTURE-JEU
               IF JEU-NON-TROUVE
                  MOVE 'CODE JEU INEXISTANT' TO MSGO
                  MOVE CURSEUR TO CODEJL
                  SET  ERREUR  TO TRUE
               END-IF
            END-IF

       * CONTROLE DU STATUT
            IF OK
               PERFORM CTRL-STATUT
            END-IF

       * CONTROLE DU MODE
            IF OK
               PERFORM CTRL-MODE-JEU
            END-IF
            .

        CTRL-CODE-JEU.
       *--------------*
       * OBLIGATOIRE
            IF CODEJI = SPACES OR LOW-VALUE
               MOVE ATTR-UNPROT-BRT TO CODEJA
               IF OK
                  MOVE 'CODE JEU NON RENSEIGNE' TO MSGO
                  MOVE CURSEUR TO CODEJL
                  SET  ERREUR  TO TRUE
               END-IF
            END-IF
            .

        CTRL-STATUT.
       *------------*
       * DOIT ETRE EGAL A 'A'
            IF JE-STATU NOT = 'A'
               MOVE 'STATUT INVALIDE, IMPOSSIBLE DE JOUER'     TO MSGO
               MOVE CURSEUR TO CODEJL
               SET  ERREUR  TO TRUE
            END-IF
            .

        CTRL-MODE-JEU.
       *--------------*
       * SI MODE INDIVIDUEL ET QU'IL EXISTE DEJA UN JOUEUR ALORS ERREUR
            IF JE-MODEJ = 'I'
               MOVE CODEJI      TO JJ-CODEJ
               EXEC SQL
                 SELECT
                    UJOUE,
                    CODEJ,
                    NPOIN
                 INTO
                    :JJ-UJOUE,
                    :JJ-CODEJ,
                    :JJ-NPOIN
                 FROM FORA99.JEU_JOUEUR
                 WHERE
                     CODEJ = :JJ-CODEJ
               END-EXEC
               EVALUATE SQLCODE
                  WHEN ZEROES
                  WHEN -811
                     IF JJ-UJOUE NOT = WS-USERID
                     MOVE 'MODE INDIVIDUEL ET IL EXISTE DEJA UN JOUEUR'
                        TO MSGO
                        MOVE CURSEUR TO CODEJL
                        SET  ERREUR  TO TRUE
                     END-IF
                  WHEN +100
                       CONTINUE
                  WHEN OTHER
                       MOVE SQLCODE TO SQLCODE-ED
                       STRING 'ERREUR SELECT1 JEU_JOUEUR, SQLCODE : '
                              SQLCODE-ED DELIMITED BY SIZE
                              INTO MSGO
                       END-STRING
                       PERFORM  22000-TRAIT-ENVOI
               END-EVALUATE
            END-IF
            .

        ALIM-BANDEAU.
       *-------------*
       * ALIMENTATION DES CHAMPS DE LA MAP A PARTIR DES HOST VARIABLES
            MOVE JE-CODEJ        TO CODEJO
            MOVE JE-UCREA        TO UCREAO
            MOVE WS-NCREA        TO NCREAO
            MOVE JE-NBREM        TO NBREMO
            MOVE JE-MODEJ        TO MODEJO
            EVALUATE JE-MODEJ
             WHEN 'C'      MOVE 'COLLECTIF'  TO LMODEJO
             WHEN 'I'      MOVE 'INDIVIDUEL' TO LMODEJO
             WHEN OTHER    MOVE ALL '?'      TO LMODEJO
            END-EVALUATE
            MOVE JE-NPOIN        TO NPOINO
            MOVE JE-UGAGN        TO UGAGNO
            MOVE WS-NGAGN        TO NGAGNO
            MOVE JE-NOREP        TO NOREPO
            MOVE JE-STATU        TO STATUO
            EVALUATE JE-STATU
             WHEN 'A'      MOVE 'ACTIF'    TO LSTATUO
             WHEN 'I'      MOVE 'INACTIF'  TO LSTATUO
             WHEN 'T'      MOVE 'TERMINE'  TO LSTATUO
             WHEN OTHER    MOVE ALL '?'    TO LSTATUO
            END-EVALUATE
            .

        INIT-MAP.
       *---------*
       * INITIALISATION DES CHAMPS DE LA MAP
            MOVE SPACES          TO CODEJO
                                    UCREAO
                                    NCREAO
                                    UGAGNO
                                    NGAGNO
                                    STATUO
                                    LSTATUO
                                    MODEJO
                                    MODEJO
            MOVE ZEROES          TO NBREMO
                                    NOREPO
                                    NPOINO

       * INITIALISATION SPECIFIQUE AU JEU
            PERFORM INIT-SPECIFIQUE
            .

        ALIM-SPECIFIQUE.
       *----------------*
       * LECTURE DE LA TABLE BATAILLE NAVALE
            PERFORM LECTURE-BATAILLE-NAVALE

       * SI NON TROUVE, INITIALISATION DES ZONES DE LA MAP
            IF BATAILLE-NAVALE-NON-TROUVEE
               PERFORM INIT-SPECIFIQUE
       * SI TROUVE, ALIMENTATION DES ZONES DE LA MAP
            ELSE
               PERFORM TRT-TOUCHE-COULE
               MOVE NB-BAT-TOUCHES TO NBATTO
               MOVE NB-BAT-COULES  TO NBATCO
            END-IF
               .

        TRT-TOUCHE-COULE.
       *-----------------*
       * DETERMINATION DES BATEAUX COULES ET TOUCHES
            MOVE ZEROES TO NB-BAT-TOUCHES NB-BAT-COULES

            MOVE ZEROES TO I
            INSPECT BN-RBAT1 TALLYING I FOR ALL SPACES
            IF I = ZEROES
                 ADD 1 TO NB-BAT-COULES
            ELSE
                IF I < 8
                   ADD 1 TO NB-BAT-TOUCHES
               END-IF
            END-IF

            MOVE ZEROES TO I
            INSPECT BN-RBAT2 TALLYING I FOR ALL SPACES
            IF I = ZEROES
                 ADD 1 TO NB-BAT-COULES
            ELSE
                IF I < 6
                   ADD 1 TO NB-BAT-TOUCHES
               END-IF
            END-IF

            MOVE ZEROES TO I
            INSPECT BN-RBAT3 TALLYING I FOR ALL SPACES
            IF I = ZEROES
                 ADD 1 TO NB-BAT-COULES
            ELSE
                IF I < 4
                   ADD 1 TO NB-BAT-TOUCHES
               END-IF
            END-IF

            MOVE ZEROES TO I
            INSPECT BN-RBAT4 TALLYING I FOR ALL SPACES
            IF I = ZEROES
                 ADD 1 TO NB-BAT-COULES
            ELSE
                IF I < 4
                   ADD 1 TO NB-BAT-TOUCHES
               END-IF
            END-IF
            .

        INIT-SPECIFIQUE.
       *----------------*
       * INITIALISATION CHAMPS DE LA MAP POUR LA BATAILLE NAVALE
            MOVE ZEROES TO NBATTO NBATCO
            .

        23110-TRAIT-PF10.
       *-----------------*
       * CONTROLE DU JEU : DOIT EXISTER ET ETRE EN COURS
            PERFORM CTRL-JEU

       * RECUPERATION DES INFOS DE LA TABLE BATAILLE NAVALE
            IF OK
               PERFORM LECTURE-BATAILLE-NAVALE
            END-IF

       * CONTROLE NOMBRE LIMITE DE REPONSES ATTEINT
            IF OK
               PERFORM CTRL-NB-REP-MAX
            END-IF

       * CONTROLE DE LA REPONSE
            IF OK
               PERFORM CTRL-REPONSE
            END-IF

       * TRAITEMENT DES BATIMENTS TOUCHES ET COULES
            IF OK
               PERFORM TRT-BAT-TOUCHE-COULE
               PERFORM AFFICH-NB-TOUCHE-COULE
            END-IF

       * SI PAS D'ERREUR METTRE A JOUR LES TABLES JEU, JEU_JOUEUR
       * ET FAIRE LE TRAITEMENT DU GAGNANT SI GAGNANT
            IF OK
               PERFORM CRE-MAJ-JEU-JOUEUR
               PERFORM MAJ-BATAILLE-NAVALE
               PERFORM TRT-GAGNANT
               PERFORM MAJ-JEU
               PERFORM ALIM-BANDEAU
            END-IF

       * ON REFAIT LE TRAITEMENT ENTER POUR RAFRAICHIR L'ECRAN
       *    PERFORM  23100-TRAIT-ENTER
            .

        CTRL-NB-REP-MAX.
       *----------------*
            IF JE-NOREP = JE-NBREM
               MOVE 'NOMBRE REPONSES LIMITE ATTEINT' TO MSGO
               MOVE CURSEUR TO REPONL
               SET  ERREUR  TO TRUE
            END-IF
            .

        CTRL-REPONSE.
       *-------------*
       * 1ER  CARACTERE DE LA REPONSE : '1' A '6'
       * 2EME CARACTERE DE LA REPONSE : 'A' A 'F'
            MOVE REPONI TO WS-REPON
            IF NOT (WS-REPON-1-VALIDE AND WS-REPON-2-VALIDE)
               SET ERREUR TO TRUE
               MOVE 'REPONSE INVALIDE' TO MSGO
            END-IF
            .

        TRT-BAT-TOUCHE-COULE.
       *--------------------*
       * INITIALISATIONS
            MOVE ZEROES TO NUM-BAT-TOUCHE
                           NUM-BAT-COULE
            SET BAT-NON-TOUCHE TO TRUE

       * DETERMINATION SI 1 BATEAU A ETE TOUCHE OU COULE ET LEQUEL
            PERFORM TRT-BAT1-TOUCHE-COULE

            IF BAT-NON-TOUCHE
               PERFORM TRT-BAT2-TOUCHE-COULE
            END-IF

            IF BAT-NON-TOUCHE
               PERFORM TRT-BAT3-TOUCHE-COULE
            END-IF

            IF BAT-NON-TOUCHE
               PERFORM TRT-BAT4-TOUCHE-COULE
            END-IF
            .

        TRT-BAT1-TOUCHE-COULE.
       *---------------------*
       * BATIMENT 1 TOUCHE, COULE ?
            EVALUATE REPONI
             WHEN BN-SBAT1 (1:2)
                  MOVE REPONI TO BN-RBAT1(1:2)
                  SET BAT-TOUCHE TO TRUE
             WHEN BN-SBAT1 (3:2)
                  MOVE REPONI TO BN-RBAT1(3:2)
                  SET BAT-TOUCHE TO TRUE
             WHEN BN-SBAT1 (5:2)
                  MOVE REPONI TO BN-RBAT1(5:2)
                  SET BAT-TOUCHE TO TRUE
             WHEN BN-SBAT1 (7:2)
                  MOVE REPONI TO BN-RBAT1(7:2)
                  SET BAT-TOUCHE TO TRUE
            END-EVALUATE

            IF BAT-TOUCHE
               MOVE 1 TO NUM-BAT-TOUCHE
            END-IF

            MOVE ZEROES TO I
            INSPECT BN-RBAT1 TALLYING I FOR ALL SPACES
            IF BAT-TOUCHE AND I = ZEROES
               SET BAT-COULE TO TRUE
               MOVE 1 TO NUM-BAT-COULE
               MOVE ZEROES TO NUM-BAT-TOUCHE
            END-IF
            .

        TRT-BAT2-TOUCHE-COULE.
       *---------------------*
       * BATIMENT 2 TOUCHE, COULE ?
            EVALUATE REPONI
             WHEN BN-SBAT2 (1:2)
                  MOVE REPONI TO BN-RBAT2(1:2)
                  SET BAT-TOUCHE TO TRUE
             WHEN BN-SBAT2 (3:2)
                  MOVE REPONI TO BN-RBAT2(3:2)
                  SET BAT-TOUCHE TO TRUE
             WHEN BN-SBAT2 (5:2)
                  MOVE REPONI TO BN-RBAT2(5:2)
                  SET BAT-TOUCHE TO TRUE
            END-EVALUATE

            IF BAT-TOUCHE
               MOVE 2 TO NUM-BAT-TOUCHE
            END-IF

            MOVE ZEROES TO I
            INSPECT BN-RBAT2 TALLYING I FOR ALL SPACES
            IF BAT-TOUCHE AND I = ZEROES
               SET BAT-COULE TO TRUE
               MOVE 2 TO NUM-BAT-COULE
               MOVE ZEROES TO NUM-BAT-TOUCHE
            END-IF
            .

        TRT-BAT3-TOUCHE-COULE.
       *---------------------*
       * BATIMENT 3 TOUCHE, COULE ?
            EVALUATE REPONI
             WHEN BN-SBAT3 (1:2)
                  MOVE REPONI TO BN-RBAT3(1:2)
                  SET BAT-TOUCHE TO TRUE
             WHEN BN-SBAT3 (3:2)
                  MOVE REPONI TO BN-RBAT3(3:2)
                  SET BAT-TOUCHE TO TRUE
            END-EVALUATE

            IF BAT-TOUCHE
               MOVE 3 TO NUM-BAT-TOUCHE
            END-IF

            MOVE ZEROES TO I
            INSPECT BN-RBAT3 TALLYING I FOR ALL SPACES
            IF BAT-TOUCHE AND I = ZEROES
               SET BAT-COULE TO TRUE
               MOVE 3 TO NUM-BAT-COULE
               MOVE ZEROES TO NUM-BAT-TOUCHE
            END-IF
            .

        TRT-BAT4-TOUCHE-COULE.
       *---------------------*
       * BATIMENT 3 TOUCHE, COULE ?
            EVALUATE REPONI
             WHEN BN-SBAT4 (1:2)
                  MOVE REPONI TO BN-RBAT4(1:2)
                  SET BAT-TOUCHE TO TRUE
             WHEN BN-SBAT4 (3:2)
                  MOVE REPONI TO BN-RBAT4(3:2)
                  SET BAT-TOUCHE TO TRUE
            END-EVALUATE

            IF BAT-TOUCHE
               MOVE 4 TO NUM-BAT-TOUCHE
            END-IF

            MOVE ZEROES TO I
            INSPECT BN-RBAT4 TALLYING I FOR ALL SPACES
            IF BAT-TOUCHE AND I = ZEROES
               SET BAT-COULE TO TRUE
               MOVE 4 TO NUM-BAT-COULE
               MOVE ZEROES TO NUM-BAT-TOUCHE
            END-IF
            .

        AFFICH-NB-TOUCHE-COULE.
       *-----------------------*
       * INITIALISATION DES COMPTEURS
            MOVE ZEROES TO NB-BAT-COULES
                           NB-BAT-TOUCHES

       * DETERMINER LE NOMBRE DE BATIMENTS TOUCHES ET COULES
            MOVE ZEROES TO NB-BLANCS
            INSPECT BN-RBAT1 TALLYING NB-BLANCS
               FOR ALL SPACES
            EVALUATE TRUE
               WHEN NB-BLANCS = ZEROES
                    ADD 1 TO NB-BAT-COULES
               WHEN NB-BLANCS < 8
                    ADD 1 TO NB-BAT-TOUCHES
            END-EVALUATE

            MOVE ZEROES TO NB-BLANCS
            INSPECT BN-RBAT2 TALLYING NB-BLANCS
               FOR ALL SPACES
            EVALUATE TRUE
               WHEN NB-BLANCS = ZEROES
                    ADD 1 TO NB-BAT-COULES
               WHEN NB-BLANCS < 6
                    ADD 1 TO NB-BAT-TOUCHES
            END-EVALUATE

            MOVE ZEROES TO NB-BLANCS
            INSPECT BN-RBAT3 TALLYING NB-BLANCS
               FOR ALL SPACES
            EVALUATE TRUE
               WHEN NB-BLANCS = ZEROES
                    ADD 1 TO NB-BAT-COULES
               WHEN NB-BLANCS < 4
                    ADD 1 TO NB-BAT-TOUCHES
            END-EVALUATE

            MOVE ZEROES TO NB-BLANCS
            INSPECT BN-RBAT4 TALLYING NB-BLANCS
               FOR ALL SPACES
            EVALUATE TRUE
               WHEN NB-BLANCS = ZEROES
                    ADD 1 TO NB-BAT-COULES
               WHEN NB-BLANCS < 4
                    ADD 1 TO NB-BAT-TOUCHES
            END-EVALUATE

            MOVE NB-BAT-TOUCHES TO NBATTO
            MOVE NB-BAT-COULES  TO NBATCO

            EVALUATE TRUE
                WHEN BAT-TOUCHE
                  MOVE 'BATIMENT TOUCHE !!!'                      TO MSGO
                WHEN BAT-COULE
                  MOVE 'BATIMENT COULE  !!!'                      TO MSGO
                WHEN OTHER
                  MOVE 'COUP PERDU !'                             TO MSGO
            END-EVALUATE
            MOVE CURSEUR TO REPONL
            .

        LECTURE-JEU.
       *------------*
       * LIRE LE JEU CREE PAR LE MEME USERID
            MOVE CODEJI TO JE-CODEJ

            EXEC SQL
              SELECT
                 CODEJ,
                 UCREA,
                 C.NJOUE,
                 NBREM,
                 MODEJ,
                 E.NPOIN,
                 VALUE(UGAGN, ' '),
                 VALUE(G.NJOUE, ' '),
                 VALUE(NOREP, 0),
                 STATU
              INTO
                 :JE-CODEJ,
                 :JE-UCREA,
                 :WS-NCREA,
                 :JE-NBREM,
                 :JE-MODEJ,
                 :JE-NPOIN,
                 :JE-UGAGN,
                 :WS-NGAGN,
                 :JE-NOREP,
                 :JE-STATU
              FROM FORA99.JEU    E
              LEFT OUTER JOIN FORA99.JOUEUR C ON UCREA = C.UJOUE
              LEFT OUTER JOIN FORA99.JOUEUR G ON UGAGN = G.UJOUE
              WHERE
                 CODEJ = :JE-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    SET JEU-TROUVE TO TRUE
               WHEN +100
                    SET JEU-NON-TROUVE     TO TRUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT JEU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        LECTURE-BATAILLE-NAVALE.
       *------------------------*
            MOVE JE-CODEJ TO BN-CODEJ

            EXEC SQL
              SELECT
                 CODEJ,
                 SBAT1,
                 SBAT2,
                 SBAT3,
                 SBAT4,
                 VALUE(RBAT1, ' '),
                 VALUE(RBAT2, ' '),
                 VALUE(RBAT3, ' '),
                 VALUE(RBAT4, ' ')
              INTO
                 :BN-CODEJ,
                 :BN-SBAT1,
                 :BN-SBAT2,
                 :BN-SBAT3,
                 :BN-SBAT4,
                 :BN-RBAT1,
                 :BN-RBAT2,
                 :BN-RBAT3,
                 :BN-RBAT4
              FROM FORA99.BATAILLE_NAVALE
              WHERE
                 CODEJ = :BN-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    SET BATAILLE-NAVALE-TROUVEE     TO TRUE
               WHEN +100
                    SET BATAILLE-NAVALE-NON-TROUVEE TO TRUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT BATAILLE_NAVALE, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        TRT-GAGNANT.
       *------------*
       * ON VERIFIE SI LE JOUEUR A GAGNE
            IF NB-BAT-COULES = 4
               SET JOUEUR-GAGNANT TO TRUE
               MOVE 'BRAVO TU AS GAGNE !!!!' TO MSGO
               PERFORM MAJ-JEU-JOUEUR
            END-IF
            .

        MAJ-BATAILLE-NAVALE.
       *-------------------*
            MOVE JE-CODEJ    TO BN-CODEJ

            EXEC SQL UPDATE FORA99.BATAILLE_NAVALE SET
               RBAT1 = :BN-RBAT1,
               RBAT2 = :BN-RBAT2,
               RBAT3 = :BN-RBAT3,
               RBAT4 = :BN-RBAT4
               WHERE CODEJ = :JJ-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR UPDATE JEU_JOUEUR, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        MAJ-JEU-JOUEUR.
       *----------------*
       * AJOUT DES POINTS SI GAGNANT
       * NB POINTS GAGNANTS = 36 - NB REPONSES
            MOVE WS-USERID   TO JJ-UJOUE
            MOVE JE-CODEJ    TO JJ-CODEJ
            IF JOUEUR-GAGNANT
               COMPUTE JJ-NPOIN = 36 - JE-NOREP
            ELSE
               MOVE ZEROES   TO JJ-NPOIN
            END-IF

            EXEC SQL UPDATE FORA99.JEU_JOUEUR SET
               NPOIN = :JJ-NPOIN
               WHERE UJOUE = :JJ-UJOUE
                 AND CODEJ = :JJ-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR UPDATE JEU_JOUEUR, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        MAJ-JEU.
       *--------*
       * INCREMENTER LE NOMBRE DE REPONSES
            ADD 1         TO JE-NOREP
       * RENSEIGNER LE GAGNANT
            IF JOUEUR-GAGNANT
               MOVE 'T'       TO JE-STATU
               MOVE WS-USERID TO JE-UGAGN
               MOVE JJ-NPOIN  TO JE-NPOIN
               MOVE ZERO      TO IND-UGAGN
            ELSE
               MOVE -1        TO IND-UGAGN
            END-IF

            EXEC SQL UPDATE FORA99.JEU  SET
               NOREP = :JE-NOREP,
               STATU = :JE-STATU,
               NPOIN = :JE-NPOIN,
               UGAGN = :JE-UGAGN :IND-UGAGN
               WHERE CODEJ = :JE-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR UPDATE JEU, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE

       * AFFICHAGE DU NOMBRE DE REPONSES
            MOVE JE-NOREP TO NOREPO
            .

        CRE-MAJ-JEU-JOUEUR.
       *------------------*
            PERFORM LECTURE-JEU-JOUEUR
            IF JEU-JOUEUR-NON-TROUVE
               PERFORM CREAT-JEU-JOUEUR
            END-IF
            .

        LECTURE-JEU-JOUEUR.
       *------------------*
            MOVE WS-USERID   TO JJ-UJOUE
            MOVE CODEJI      TO JJ-CODEJ

            EXEC SQL
              SELECT
                 UJOUE,
                 CODEJ,
                 NPOIN
              INTO
                 :JJ-UJOUE,
                 :JJ-CODEJ,
                 :JJ-NPOIN
              FROM FORA99.JEU_JOUEUR
              WHERE
                  UJOUE = :JJ-UJOUE
              AND CODEJ = :JJ-CODEJ
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    SET JEU-JOUEUR-TROUVE TO TRUE
               WHEN +100
                    SET JEU-JOUEUR-NON-TROUVE     TO TRUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR SELECT JEU_JOUEUR, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        CREAT-JEU-JOUEUR.
       *----------------*
       * CREATION DU JOUEUR DANS LA TABLE JEU_JOUEUR
            MOVE WS-USERID   TO JJ-UJOUE
            MOVE JE-CODEJ    TO JJ-CODEJ
            MOVE ZEROES      TO JJ-NPOIN

            EXEC SQL INSERT INTO FORA99.JEU_JOUEUR VALUES
              (:JJ-UJOUE,
               :JJ-CODEJ,
               :JJ-NPOIN)
            END-EXEC

            EVALUATE SQLCODE
               WHEN ZEROES
                    CONTINUE
               WHEN OTHER
                    MOVE SQLCODE TO SQLCODE-ED
                    STRING 'ERREUR INSERT JEU_JOUEUR, SQLCODE : '
                           SQLCODE-ED DELIMITED BY SIZE
                           INTO MSGO
                    END-STRING
                    PERFORM  22000-TRAIT-ENVOI
            END-EVALUATE
            .

        23110-PROG-SUIVANT.
       *------------------*
            EXEC CICS XCTL  PROGRAM  (PROG-SUIVANT)
                            COMMAREA (WS-COMMAREA)
                            LENGTH   (LENGTH OF WS-COMMAREA)
            END-EXEC
            .

        23200-TRAIT-FIN.
       *---------------*
            MOVE 'FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        90000-ERR-TOUCHE.
       *----------------*
            MOVE 'TOUCHE DE FONCTION INVALIDE' TO MSGO
            PERFORM  22000-TRAIT-ENVOI
            .

        91000-ERREUR-CICS.
       *-------------------*
            MOVE 'ERREUR CICS !!!  FIN DE LA TRANSACTION' TO MESSAGE-TXT
            PERFORM   99000-FIN-CICS
            .

        99000-FIN-CICS.
       *--------------*
            EXEC CICS SEND FROM   (MESSAGE-TXT)
                           LENGTH (LENGTH OF MESSAGE-TXT)
                           ERASE
            END-EXEC

            EXEC CICS RETURN END-EXEC
            .
            .
